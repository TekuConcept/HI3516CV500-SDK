@
@ -- FILES --
@



unsigned char data[0] = {
};

unsigned char bss[0];

_RODATA_ADPCM_INDEX_TABLE_0000: .ascii "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_0014: .ascii "\x04\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_0018: .ascii "\x06\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_001c: .ascii "\x08\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_0020: .ascii "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_0034: .ascii "\x04\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_0038: .ascii "\x06\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_003c: .ascii "\x08\0\0\0",
_RODATA_ADPCM_INDEX_TABLE_0040: .ascii ""


_RODATA_ADPCM_STEP_TABLE_0000: .ascii "\x07\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0004: .ascii "\x08\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0008: .ascii "\t\0\0\0",
_RODATA_ADPCM_STEP_TABLE_000c: .ascii "\n\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0010: .ascii "\x0b\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0014: .ascii "\x0c\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0018: .ascii "\r\0\0\0",
_RODATA_ADPCM_STEP_TABLE_001c: .ascii "\x0e\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0020: .ascii "\x10\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0024: .ascii "\x11\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0028: .ascii "\x13\0\0\0",
_RODATA_ADPCM_STEP_TABLE_002c: .ascii "\x15\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0030: .ascii "\x17\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0034: .ascii "\x19\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0038: .ascii "\x1c\0\0\0",
_RODATA_ADPCM_STEP_TABLE_003c: .ascii "\x1f\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0040: .ascii "\"\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0044: .ascii "%\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0048: .ascii ")\0\0\0",
_RODATA_ADPCM_STEP_TABLE_004c: .ascii "-\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0050: .ascii "2\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0054: .ascii "7\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0058: .ascii "<\0\0\0",
_RODATA_ADPCM_STEP_TABLE_005c: .ascii "B\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0060: .ascii "I\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0064: .ascii "P\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0068: .ascii "X\0\0\0",
_RODATA_ADPCM_STEP_TABLE_006c: .ascii "a\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0070: .ascii "k\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0074: .ascii "v\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0078: .ascii "\x82\0\0\0",
_RODATA_ADPCM_STEP_TABLE_007c: .ascii "\x8f\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0080: .ascii "\x9d\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0084: .ascii "\xad\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0088: .ascii "\xbe\0\0\0",
_RODATA_ADPCM_STEP_TABLE_008c: .ascii "\xd1\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0090: .ascii "\xe6\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0094: .ascii "\xfd\0\0\0",
_RODATA_ADPCM_STEP_TABLE_0098: .ascii "\x17\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_009c: .ascii "3\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_00a0: .ascii "Q\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_00a4: .ascii "s\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_00a8: .ascii "\x98\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_00ac: .ascii "\xc1\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_00b0: .ascii "\xee\x01\0\0",
_RODATA_ADPCM_STEP_TABLE_00b4: .ascii " \x02\0\0",
_RODATA_ADPCM_STEP_TABLE_00b8: .ascii "V\x02\0\0",
_RODATA_ADPCM_STEP_TABLE_00bc: .ascii "\x92\x02\0\0",
_RODATA_ADPCM_STEP_TABLE_00c0: .ascii "\xd4\x02\0\0",
_RODATA_ADPCM_STEP_TABLE_00c4: .ascii "\x1c\x03\0\0",
_RODATA_ADPCM_STEP_TABLE_00c8: .ascii "l\x03\0\0",
_RODATA_ADPCM_STEP_TABLE_00cc: .ascii "\xc3\x03\0\0",
_RODATA_ADPCM_STEP_TABLE_00d0: .ascii "$\x04\0\0",
_RODATA_ADPCM_STEP_TABLE_00d4: .ascii "\x8e\x04\0\0",
_RODATA_ADPCM_STEP_TABLE_00d8: .ascii "\x02\x05\0\0",
_RODATA_ADPCM_STEP_TABLE_00dc: .ascii "\x83\x05\0\0",
_RODATA_ADPCM_STEP_TABLE_00e0: .ascii "\x10\x06\0\0",
_RODATA_ADPCM_STEP_TABLE_00e4: .ascii "\xab\x06\0\0",
_RODATA_ADPCM_STEP_TABLE_00e8: .ascii "V\x07\0\0",
_RODATA_ADPCM_STEP_TABLE_00ec: .ascii "\x12\x08\0\0",
_RODATA_ADPCM_STEP_TABLE_00f0: .ascii "\xe0\x08\0\0",
_RODATA_ADPCM_STEP_TABLE_00f4: .ascii "\xc3\t\0\0",
_RODATA_ADPCM_STEP_TABLE_00f8: .ascii "\xbd\n\0\0",
_RODATA_ADPCM_STEP_TABLE_00fc: .ascii "\xd0\x0b\0\0",
_RODATA_ADPCM_STEP_TABLE_0100: .ascii "\xff\x0c\0\0",
_RODATA_ADPCM_STEP_TABLE_0104: .ascii "L\x0e\0\0",
_RODATA_ADPCM_STEP_TABLE_0108: .ascii "\xba\x0f\0\0",
_RODATA_ADPCM_STEP_TABLE_010c: .ascii "L\x11\0\0",
_RODATA_ADPCM_STEP_TABLE_0110: .ascii "\x07\x13\0\0",
_RODATA_ADPCM_STEP_TABLE_0114: .ascii "\xee\x14\0\0",
_RODATA_ADPCM_STEP_TABLE_0118: .ascii "\x06\x17\0\0",
_RODATA_ADPCM_STEP_TABLE_011c: .ascii "T\x19\0\0",
_RODATA_ADPCM_STEP_TABLE_0120: .ascii "\xdc\x1b\0\0",
_RODATA_ADPCM_STEP_TABLE_0124: .ascii "\xa5\x1e\0\0",
_RODATA_ADPCM_STEP_TABLE_0128: .ascii "\xb6!\0\0",
_RODATA_ADPCM_STEP_TABLE_012c: .ascii "\x15%\0\0",
_RODATA_ADPCM_STEP_TABLE_0130: .ascii "\xca(\0\0",
_RODATA_ADPCM_STEP_TABLE_0134: .ascii "\xdf,\0\0",
_RODATA_ADPCM_STEP_TABLE_0138: .ascii "[1\0\0",
_RODATA_ADPCM_STEP_TABLE_013c: .ascii "K6\0\0",
_RODATA_ADPCM_STEP_TABLE_0140: .ascii "\xb9;\0\0",
_RODATA_ADPCM_STEP_TABLE_0144: .ascii "\xb2A\0\0",
_RODATA_ADPCM_STEP_TABLE_0148: .ascii "DH\0\0",
_RODATA_ADPCM_STEP_TABLE_014c: .ascii "~O\0\0",
_RODATA_ADPCM_STEP_TABLE_0150: .ascii "qW\0\0",
_RODATA_ADPCM_STEP_TABLE_0154: .ascii "/`\0\0",
_RODATA_ADPCM_STEP_TABLE_0158: .ascii "\xcei\0\0",
_RODATA_ADPCM_STEP_TABLE_015c: .ascii "bt\0\0",
_RODATA_ADPCM_STEP_TABLE_0160: .ascii "\xff\x7f\0\0",
_RODATA_ADPCM_STEP_TABLE_0164: .ascii ""


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.adpcm_coder
@ Size: 0x120
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN adpcm_coder
    /*00000000*/ LDR         IP, WORD_0118               @ LDR         IP, [PC, #272]              @ 0x0000000000000118 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000000c*/ SUB         SP, SP, #20 
    /*00000010*/ LDRH        R5, [R3, #4] 
    /*00000014*/ ADD         IP, PC, IP 
    /*00000018*/ STR         R3, [SP, #12] 
    /*0000001c*/ LDR         LR, [IP, R5, LSL #2] 
    /*00000020*/ LDRSH       R3, [R3, #2] 
    /*00000024*/ BEQ         adpcm_coder_x104
    /*00000028*/ LDR         FP, WORD_011c               @ LDR         FP, [PC, #236]              @ 0x000000000000011c 
    /*0000002c*/ MOV         R7, #0 
    /*00000030*/ MOV         R9, #32768                  @ 0x8000 
    /*00000034*/ MOVW        SL, #32767                  @ 0x7fff 
    /*00000038*/ ADD         FP, PC, FP 
    /*0000003c*/ MOVT        R9, #65535                  @ 0xffff 
    /*00000040*/ STMIB       SP, {R7, IP} 
    /*00000044*/ B           adpcm_coder_xe8
    adpcm_coder_x48:
    /*00000048*/ MOV         R8, #4 
    /*0000004c*/ MOV         R6, #0 
    adpcm_coder_x50:
    /*00000050*/ CMP         IP, LR 
    /*00000054*/ SUBGE       IP, IP, LR 
    /*00000058*/ MOVGE       R6, R8 
    /*0000005c*/ ASR         R4, LR, #3 
    /*00000060*/ ASR         R8, LR, #1 
    /*00000064*/ ADDGE       R4, R4, LR 
    /*00000068*/ CMP         IP, R8 
    /*0000006c*/ ASR         LR, LR, #2 
    /*00000070*/ ORRGE       R6, R6, #2 
    /*00000074*/ SUBGE       IP, IP, R8 
    /*00000078*/ ADDGE       R4, R4, R8 
    /*0000007c*/ CMP         IP, LR 
    /*00000080*/ ADDGE       R4, R4, LR 
    /*00000084*/ ORRGE       R6, R6, #1 
    /*00000088*/ TST         R6, #8 
    /*0000008c*/ SUBNE       R3, R3, R4 
    /*00000090*/ ADDEQ       R3, R4, R3 
    /*00000094*/ CMP         R3, SL 
    /*00000098*/ LDR         IP, [FP, R6, LSL #2] 
    /*0000009c*/ MOVGE       R3, SL 
    /*000000a0*/ CMP         R3, R9 
    /*000000a4*/ ADD         R5, R5, IP 
    /*000000a8*/ MOVLT       R3, R9 
    /*000000ac*/ LDR         IP, [SP, #8] 
    /*000000b0*/ CMP         R5, #88                     @ 0x58 
    /*000000b4*/ MOVGE       R5, #88                     @ 0x58 
    /*000000b8*/ TST         R7, #1 
    /*000000bc*/ STREQ       R6, [SP, #4] 
    /*000000c0*/ ADD         R7, R7, #1 
    /*000000c4*/ BIC         R5, R5, R5, ASR #31 
    /*000000c8*/ UXTH        R7, R7 
    /*000000cc*/ LDR         LR, [IP, R5, LSL #2] 
    /*000000d0*/ LDRNE       IP, [SP, #4] 
    /*000000d4*/ ORRNE       R6, R6, IP, LSL #4 
    /*000000d8*/ STRBNE      R6, [R1] 
    /*000000dc*/ ADDNE       R1, R1, #1 
    /*000000e0*/ CMP         R2, R7 
    /*000000e4*/ BEQ         adpcm_coder_x104
    adpcm_coder_xe8:
    /*000000e8*/ LDRSH       IP, [R0], #2 
    /*000000ec*/ SUBS        IP, IP, R3 
    /*000000f0*/ BPL         adpcm_coder_x48
    /*000000f4*/ RSB         IP, IP, #0 
    /*000000f8*/ MOV         R8, #12 
    /*000000fc*/ MOV         R6, #8 
    /*00000100*/ B           adpcm_coder_x50
    adpcm_coder_x104:
    /*00000104*/ LDR         R2, [SP, #12] 
    /*00000108*/ STRH        R3, [R2, #2] 
    /*0000010c*/ STRH        R5, [R2, #4] 
    /*00000110*/ ADD         SP, SP, #20 
    /*00000114*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*00000118*/ WORD_0118: .word 0x000000fc
    /*0000011c*/ WORD_011c: .word 0x000000dc
FUNC_END adpcm_coder


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.adpcm_decoder
@ Size: 0xf8
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN adpcm_decoder
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00000004*/ SUB         SP, SP, #12 
    /*00000008*/ LDRH        LR, [R3, #4] 
    /*0000000c*/ LDR         IP, WORD_00f0               @ LDR         IP, [PC, #220]              @ 0x00000000000000f0 
    /*00000010*/ STR         R3, [SP, #4] 
    /*00000014*/ CMP         LR, #88                     @ 0x58 
    /*00000018*/ ADD         IP, PC, IP 
    /*0000001c*/ MOVGE       LR, #88                     @ 0x58 
    /*00000020*/ LDRSH       R3, [R3, #2] 
    /*00000024*/ CMP         R2, #0 
    /*00000028*/ LDR         R6, [IP, LR, LSL #2] 
    /*0000002c*/ BEQ         adpcm_decoder_xe8
    /*00000030*/ LDR         FP, WORD_00f4               @ LDR         FP, [PC, #188]              @ 0x00000000000000f4 
    /*00000034*/ MOV         R5, #0 
    /*00000038*/ STR         R2, [SP] 
    /*0000003c*/ MOV         R7, #32768                  @ 0x8000 
    /*00000040*/ ADD         FP, PC, FP 
    /*00000044*/ MOV         R9, IP 
    /*00000048*/ MOVT        R7, #65535                  @ 0xffff 
    /*0000004c*/ MOV         SL, R5 
    /*00000050*/ MOVW        R8, #32767                  @ 0x7fff 
    adpcm_decoder_x54:
    /*00000054*/ ASR         R2, R6, #3 
    /*00000058*/ TST         R5, #1 
    /*0000005c*/ ANDNE       IP, SL, #15 
    /*00000060*/ ADD         R5, R5, #1 
    /*00000064*/ LDRSBEQ     SL, [R0] 
    /*00000068*/ ADDEQ       R0, R0, #1 
    /*0000006c*/ UBFXEQ      IP, SL, #4, #4 
    /*00000070*/ LDR         R4, [FP, IP, LSL #2] 
    /*00000074*/ ADD         LR, LR, R4 
    /*00000078*/ CMP         LR, #88                     @ 0x58 
    /*0000007c*/ MOVGE       LR, #88                     @ 0x58 
    /*00000080*/ TST         IP, #4 
    /*00000084*/ ADDNE       R2, R2, R6 
    /*00000088*/ TST         IP, #2 
    /*0000008c*/ ADDNE       R2, R2, R6, ASR #1 
    /*00000090*/ TST         IP, #1 
    /*00000094*/ ADDNE       R2, R2, R6, ASR #2 
    /*00000098*/ TST         IP, #8 
    /*0000009c*/ SUBNE       R3, R3, R2 
    /*000000a0*/ ADDEQ       R3, R2, R3 
    /*000000a4*/ UXTH        R2, R5 
    /*000000a8*/ CMP         R3, R8 
    /*000000ac*/ LDR         IP, [SP] 
    /*000000b0*/ MOVGE       R3, R8 
    /*000000b4*/ CMP         R3, R7 
    /*000000b8*/ BIC         LR, LR, LR, ASR #31 
    /*000000bc*/ MOVLT       R3, R7 
    /*000000c0*/ CMP         IP, R2 
    /*000000c4*/ SXTH        R4, R3 
    /*000000c8*/ LDR         R6, [R9, LR, LSL #2] 
    /*000000cc*/ STRH        R4, [R1], #2 
    /*000000d0*/ BHI         adpcm_decoder_x54
    adpcm_decoder_xd4:
    /*000000d4*/ LDR         R3, [SP, #4] 
    /*000000d8*/ STRH        R4, [R3, #2] 
    /*000000dc*/ STRH        LR, [R3, #4] 
    /*000000e0*/ ADD         SP, SP, #12 
    /*000000e4*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    adpcm_decoder_xe8:
    /*000000e8*/ MOV         R4, R3 
    /*000000ec*/ B           adpcm_decoder_xd4
    /*000000f0*/ WORD_00f0: .word 0x000000d0
    /*000000f4*/ WORD_00f4: .word 0x000000ac
FUNC_END adpcm_decoder


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.adpcm_frame_rtp_asf
@ Size: 0x34
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN adpcm_frame_rtp_asf
    /*00000000*/ CMP         R1, #0 
    /*00000004*/ BXEQ        LR 
    /*00000008*/ MOV         R3, #0 
    /*0000000c*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    adpcm_frame_rtp_asf_x10:
    /*00000010*/ ADD         LR, R3, #1 
    /*00000014*/ LDRB        IP, [R0, R3] 
    /*00000018*/ LSL         R2, IP, #4 
    /*0000001c*/ ORR         R2, R2, IP, LSR #4 
    /*00000020*/ STRB        R2, [R0, R3] 
    /*00000024*/ SXTH        R3, LR 
    /*00000028*/ CMP         R3, R1 
    /*0000002c*/ BLT         adpcm_frame_rtp_asf_x10
    /*00000030*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END adpcm_frame_rtp_asf


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.adpcm_frame_asf_rtp
@ Size: 0x34
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN adpcm_frame_asf_rtp
    /*00000000*/ CMP         R1, #0 
    /*00000004*/ BXEQ        LR 
    /*00000008*/ MOV         R3, #0 
    /*0000000c*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    adpcm_frame_asf_rtp_x10:
    /*00000010*/ ADD         LR, R3, #1 
    /*00000014*/ LDRB        IP, [R0, R3] 
    /*00000018*/ LSL         R2, IP, #4 
    /*0000001c*/ ORR         R2, R2, IP, LSR #4 
    /*00000020*/ STRB        R2, [R0, R3] 
    /*00000024*/ SXTH        R3, LR 
    /*00000028*/ CMP         R3, R1 
    /*0000002c*/ BLT         adpcm_frame_asf_rtp_x10
    /*00000030*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END adpcm_frame_asf_rtp


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ADPCM_state_reset
@ Size: 0x10
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ADPCM_state_reset
    /*00000000*/ MOV         R3, #0 
    /*00000004*/ STRH        R3, [R0, #2] 
    /*00000008*/ STRH        R3, [R0, #4] 
    /*0000000c*/ BX          LR 
FUNC_END ADPCM_state_reset


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ADPCM_encode
@ Size: 0x1c4
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ADPCM_encode
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000004*/ SUB         SP, SP, #972                @ 0x3cc 
    /*00000008*/ ADD         IP, SP, #1000               @ 0x3e8 
    /*0000000c*/ ADD         R6, SP, #4 
    /*00000010*/ MOV         R7, R3 
    /*00000014*/ MOV         R8, R0 
    /*00000018*/ LDRSH       R5, [IP] 
    /*0000001c*/ MOV         R9, R1 
    /*00000020*/ MOV         R4, R2 
    /*00000024*/ MOV         R0, R6 
    /*00000028*/ MOVW        R2, #962                    @ 0x3c2 
    /*0000002c*/ MOV         R1, #0 
    /*00000030*/ UXTH        R5, R5 
    /*00000034*/ BL          memset
    /*00000038*/ CMP         R7, #35                     @ 0x23 
    /*0000003c*/ BEQ         ADPCM_encode_x130
    /*00000040*/ CMP         R7, #67                     @ 0x43 
    /*00000044*/ BEQ         ADPCM_encode_xd0
    /*00000048*/ CMP         R7, #3 
    /*0000004c*/ BEQ         ADPCM_encode_x58
    ADPCM_encode_x50:
    /*00000050*/ ADD         SP, SP, #972                @ 0x3cc 
    /*00000054*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    ADPCM_encode_x58:
    /*00000058*/ LDRH        R2, [R8, #2] 
    /*0000005c*/ MOV         R3, R8 
    /*00000060*/ LDRB        R1, [R8, #4] 
    /*00000064*/ MOV         R0, R9 
    /*00000068*/ STRH        R2, [R6] 
    /*0000006c*/ MOV         R2, R5 
    /*00000070*/ LSR         R5, R5, #2 
    /*00000074*/ STRH        R1, [R6, #2] 
    /*00000078*/ ADD         R5, R5, #2 
    /*0000007c*/ UXTB        R5, R5 
    /*00000080*/ ADD         R1, SP, #8 
    /*00000084*/ BL          adpcm_coder
    /*00000088*/ STRH        R5, [R4, #2] 
    /*0000008c*/ CMP         R5, #0 
    /*00000090*/ MOV         R3, #256                    @ 0x100 
    /*00000094*/ STRH        R3, [R4] 
    /*00000098*/ BEQ         ADPCM_encode_x50
    /*0000009c*/ MOV         R3, #0 
    /*000000a0*/ MOV         R1, SP 
    ADPCM_encode_xa4:
    /*000000a4*/ ADD         R2, R3, #2 
    /*000000a8*/ ADD         R3, R3, #1 
    /*000000ac*/ SXTH        R3, R3 
    /*000000b0*/ LSL         R2, R2, #1 
    /*000000b4*/ LDRH        R0, [R1, R2] 
    /*000000b8*/ STRH        R0, [R4, R2] 
    /*000000bc*/ LDRSH       R2, [R4, #2] 
    /*000000c0*/ CMP         R2, R3 
    /*000000c4*/ BGT         ADPCM_encode_xa4
    /*000000c8*/ ADD         SP, SP, #972                @ 0x3cc 
    /*000000cc*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    ADPCM_encode_xd0:
    /*000000d0*/ MOV         R3, R8 
    /*000000d4*/ MOV         R2, R5 
    /*000000d8*/ UBFX        R5, R5, #2, #8 
    /*000000dc*/ MOV         R1, R6 
    /*000000e0*/ MOV         R0, R9 
    /*000000e4*/ BL          adpcm_coder
    /*000000e8*/ STRH        R5, [R4, #2] 
    /*000000ec*/ CMP         R5, #0 
    /*000000f0*/ MOV         R3, #256                    @ 0x100 
    /*000000f4*/ STRH        R3, [R4] 
    /*000000f8*/ BEQ         ADPCM_encode_x50
    /*000000fc*/ MOV         R3, #0 
    /*00000100*/ MOV         R1, SP 
    ADPCM_encode_x104:
    /*00000104*/ ADD         R2, R3, #2 
    /*00000108*/ ADD         R3, R3, #1 
    /*0000010c*/ SXTH        R3, R3 
    /*00000110*/ LSL         R2, R2, #1 
    /*00000114*/ LDRH        R0, [R1, R2] 
    /*00000118*/ STRH        R0, [R4, R2] 
    /*0000011c*/ LDRSH       R2, [R4, #2] 
    /*00000120*/ CMP         R2, R3 
    /*00000124*/ BGT         ADPCM_encode_x104
    /*00000128*/ ADD         SP, SP, #972                @ 0x3cc 
    /*0000012c*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    ADPCM_encode_x130:
    /*00000130*/ LDRB        R2, [R8, #4] 
    /*00000134*/ MOV         R0, R9 
    /*00000138*/ SUB         R5, R5, #1 
    /*0000013c*/ LDRSH       R3, [R0], #2 
    /*00000140*/ UXTH        R5, R5 
    /*00000144*/ STRH        R2, [R6, #2] 
    /*00000148*/ MOV         R2, R5 
    /*0000014c*/ STRH        R3, [R6] 
    /*00000150*/ ADD         R6, SP, #8 
    /*00000154*/ STRH        R3, [R8, #2] 
    /*00000158*/ MOV         R1, R6 
    /*0000015c*/ MOV         R3, R8 
    /*00000160*/ BL          adpcm_coder
    /*00000164*/ LSR         R1, R5, #1 
    /*00000168*/ MOV         R0, R6 
    /*0000016c*/ LSR         R5, R5, #2 
    /*00000170*/ BL          adpcm_frame_rtp_asf
    /*00000174*/ ADD         R5, R5, #2 
    /*00000178*/ MOV         R3, #256                    @ 0x100 
    /*0000017c*/ STRH        R3, [R4] 
    /*00000180*/ UXTB        R5, R5 
    /*00000184*/ STRH        R5, [R4, #2] 
    /*00000188*/ CMP         R5, #0 
    /*0000018c*/ BEQ         ADPCM_encode_x50
    /*00000190*/ MOV         R3, #0 
    /*00000194*/ MOV         R1, SP 
    ADPCM_encode_x198:
    /*00000198*/ ADD         R2, R3, #2 
    /*0000019c*/ ADD         R3, R3, #1 
    /*000001a0*/ SXTH        R3, R3 
    /*000001a4*/ LSL         R2, R2, #1 
    /*000001a8*/ LDRH        R0, [R1, R2] 
    /*000001ac*/ STRH        R0, [R4, R2] 
    /*000001b0*/ LDRSH       R2, [R4, #2] 
    /*000001b4*/ CMP         R2, R3 
    /*000001b8*/ BGT         ADPCM_encode_x198
    /*000001bc*/ ADD         SP, SP, #972                @ 0x3cc 
    /*000001c0*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
FUNC_END ADPCM_encode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ADPCM_decode
@ Size: 0x164
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ADPCM_decode
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000004*/ SUB         SP, SP, #2032               @ 0x7f0 
    /*00000008*/ SUB         SP, SP, #12 
    /*0000000c*/ MOV         R5, R1 
    /*00000010*/ ADD         R6, SP, #8 
    /*00000014*/ MOV         R1, #0 
    /*00000018*/ SUB         R4, R6, #8 
    /*0000001c*/ MOV         R7, R0 
    /*00000020*/ MOV         R8, R2 
    /*00000024*/ MOV         R0, R4 
    /*00000028*/ MOVW        R2, #2040                   @ 0x7f8 
    /*0000002c*/ MOV         R9, R3 
    /*00000030*/ BL          memset
    /*00000034*/ LDRH        R0, [R5, #2] 
    /*00000038*/ ANDS        R1, R0, #255                @ 0xff 
    /*0000003c*/ MOVNE       R2, #0 
    /*00000040*/ BEQ         ADPCM_decode_x64
    ADPCM_decode_x44:
    /*00000044*/ LSL         IP, R2, #1 
    /*00000048*/ ADD         R2, R2, #1 
    /*0000004c*/ ADD         R3, R5, IP 
    /*00000050*/ SXTH        R2, R2 
    /*00000054*/ CMP         R2, R1 
    /*00000058*/ LDRH        R3, [R3, #4] 
    /*0000005c*/ STRH        R3, [R4, IP] 
    /*00000060*/ BLT         ADPCM_decode_x44
    ADPCM_decode_x64:
    /*00000064*/ CMP         R9, #35                     @ 0x23 
    /*00000068*/ BEQ         ADPCM_decode_xfc
    /*0000006c*/ CMP         R9, #67                     @ 0x43 
    /*00000070*/ BEQ         ADPCM_decode_xcc
    /*00000074*/ CMP         R9, #3 
    /*00000078*/ BEQ         ADPCM_decode_x88
    /*0000007c*/ ADD         SP, SP, #2032               @ 0x7f0 
    /*00000080*/ ADD         SP, SP, #12 
    /*00000084*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    ADPCM_decode_x88:
    /*00000088*/ LDRH        R2, [R6, #-8] 
    /*0000008c*/ SUB         R4, R1, #2 
    /*00000090*/ LDRB        R3, [R6, #-6] 
    /*00000094*/ MOV         R1, R8 
    /*00000098*/ LSL         R4, R4, #2 
    /*0000009c*/ SUB         R0, R6, #4 
    /*000000a0*/ STRH        R2, [R7, #2] 
    /*000000a4*/ UXTH        R4, R4 
    /*000000a8*/ STRH        R3, [R7, #4] 
    /*000000ac*/ MOV         R2, R4 
    /*000000b0*/ MOV         R3, R7 
    /*000000b4*/ BL          adpcm_decoder
    /*000000b8*/ LDR         R3, [SP, #2072]             @ 0x818 
    /*000000bc*/ STRH        R4, [R3] 
    /*000000c0*/ ADD         SP, SP, #2032               @ 0x7f0 
    /*000000c4*/ ADD         SP, SP, #12 
    /*000000c8*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    ADPCM_decode_xcc:
    /*000000cc*/ LSL         R0, R0, #2 
    /*000000d0*/ MOV         R3, R7 
    /*000000d4*/ AND         R5, R0, #1020               @ 0x3fc 
    /*000000d8*/ MOV         R1, R8 
    /*000000dc*/ MOV         R0, R4 
    /*000000e0*/ MOV         R2, R5 
    /*000000e4*/ BL          adpcm_decoder
    /*000000e8*/ LDR         R3, [SP, #2072]             @ 0x818 
    /*000000ec*/ STRH        R5, [R3] 
    /*000000f0*/ ADD         SP, SP, #2032               @ 0x7f0 
    /*000000f4*/ ADD         SP, SP, #12 
    /*000000f8*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    ADPCM_decode_xfc:
    /*000000fc*/ LDRSH       R3, [R6, #-8] 
    /*00000100*/ SUB         R1, R1, #2 
    /*00000104*/ LDRB        R2, [R6, #-6] 
    /*00000108*/ UXTH        R4, R1 
    /*0000010c*/ STRH        R3, [R8], #2 
    /*00000110*/ SUB         R6, R6, #4 
    /*00000114*/ LSL         R0, R4, #1 
    /*00000118*/ MOVW        R1, #65534                  @ 0xfffe 
    /*0000011c*/ LSL         R4, R4, #2 
    /*00000120*/ AND         R1, R1, R0 
    /*00000124*/ STRH        R3, [R7, #2] 
    /*00000128*/ MOV         R0, R6 
    /*0000012c*/ STRH        R2, [R7, #4] 
    /*00000130*/ UXTH        R4, R4 
    /*00000134*/ BL          adpcm_frame_asf_rtp
    /*00000138*/ MOV         R3, R7 
    /*0000013c*/ MOV         R2, R4 
    /*00000140*/ MOV         R1, R8 
    /*00000144*/ MOV         R0, R6 
    /*00000148*/ ADD         R4, R4, #1 
    /*0000014c*/ BL          adpcm_decoder
    /*00000150*/ LDR         R3, [SP, #2072]             @ 0x818 
    /*00000154*/ STRH        R4, [R3] 
    /*00000158*/ ADD         SP, SP, #2032               @ 0x7f0 
    /*0000015c*/ ADD         SP, SP, #12 
    /*00000160*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
FUNC_END ADPCM_decode


