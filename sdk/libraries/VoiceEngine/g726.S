@
@ -- FILES --
@



unsigned char data[0] = {
};

unsigned char bss[0];

unsigned char data.rel.ro.local.functf.5660[16] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

unsigned char rel.data.rel.ro.local.functf.5660[32] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x02, 0x28, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x2a, 0x00, 0x00, 
    /*0010*/ 0x08, 0x00, 0x00, 0x00, 0x02, 0x2c, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x2e, 0x00, 0x00, 
};

unsigned char data.rel.ro.local.functw.5640[16] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

unsigned char rel.data.rel.ro.local.functw.5640[32] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x02, 0x30, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x32, 0x00, 0x00, 
    /*0010*/ 0x08, 0x00, 0x00, 0x00, 0x02, 0x34, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x36, 0x00, 0x00, 
};

unsigned char data.rel.ro.local.quan.5612[12] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

unsigned char rel.data.rel.ro.local.quan.5612[24] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x02, 0x38, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x3a, 0x00, 0x00, 
    /*0010*/ 0x08, 0x00, 0x00, 0x00, 0x02, 0x3c, 0x00, 0x00, 
};

unsigned char data.rel.ro.local.reconst[16] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

unsigned char rel.data.rel.ro.local.reconst[32] = {
    /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x02, 0x3e, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 
    /*0010*/ 0x08, 0x00, 0x00, 0x00, 0x02, 0x42, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x44, 0x00, 0x00, 
};

_RODATA_FUNCTF2_5656_0000: .ascii "\0\0\x07\0",
_RODATA_FUNCTF2_5656_0004: .ascii ""


_RODATA_FUNCTF3_5657_0000: .ascii "\0\0\x01\0",
_RODATA_FUNCTF3_5657_0004: .ascii "\x02\0\x07\0",
_RODATA_FUNCTF3_5657_0008: .ascii ""


_RODATA_FUNCTF4_5658_0000: .ascii "\0\0\0\0",
_RODATA_FUNCTF4_5658_0004: .ascii "\0\0\x01\0",
_RODATA_FUNCTF4_5658_0008: .ascii "\x01\0\x01\0",
_RODATA_FUNCTF4_5658_000c: .ascii "\x03\0\x07\0",
_RODATA_FUNCTF4_5658_0010: .ascii ""


_RODATA_FUNCTF5_5659_0000: .ascii "\0\0\0\0",
_RODATA_FUNCTF5_5659_0004: .ascii "\0\0\0\0",
_RODATA_FUNCTF5_5659_0008: .ascii "\0\0\x01\0",
_RODATA_FUNCTF5_5659_000c: .ascii "\x01\0\x01\0",
_RODATA_FUNCTF5_5659_0010: .ascii "\x01\0\x01\0",
_RODATA_FUNCTF5_5659_0014: .ascii "\x02\0\x03\0",
_RODATA_FUNCTF5_5659_0018: .ascii "\x04\0\x05\0",
_RODATA_FUNCTF5_5659_001c: .ascii "\x06\0\x06\0",
_RODATA_FUNCTF5_5659_0020: .ascii ""


_RODATA_FUNCTW2_5636_0000: .ascii "\xea\xff\xb7\x01"


_RODATA_FUNCTW3_5637_0000: .ascii "\xfc\xff\x1e\0",
_RODATA_FUNCTW3_5637_0004: .ascii "\x89\0F\x02"


_RODATA_FUNCTW4_5638_0000: .ascii "\xf4\xff\x12\0",
_RODATA_FUNCTW4_5638_0004: .ascii ")\0@\0",
_RODATA_FUNCTW4_5638_0008: .ascii "p\0\xc6\0",
_RODATA_FUNCTW4_5638_000c: .ascii "c\x01b\x04"


_RODATA_FUNCTW5_5639_0000: .ascii "\x0e\0\x0e\0",
_RODATA_FUNCTW5_5639_0004: .ascii "\x18\0'\0",
_RODATA_FUNCTW5_5639_0008: .ascii "(\0)\0",
_RODATA_FUNCTW5_5639_000c: .ascii ":\0d\0",
_RODATA_FUNCTW5_5639_0010: .ascii "\x8d\0\xb3\0",
_RODATA_FUNCTW5_5639_0014: .ascii "\xdb\0\x18\x01f\x01\xb8\x01\x11\x02\xb8\x02"


_RODATA_QUAN3_5609_0000: .ascii "\x08\0\xda\0",
_RODATA_QUAN3_5609_0004: .ascii "K\x01\xff\x7f"


_RODATA_QUAN4_5610_0000: .ascii "\x84\xffP\0",
_RODATA_QUAN4_5610_0004: .ascii "\xb2\0\xf6\0",
_RODATA_QUAN4_5610_0008: .ascii ",\x01]\x01\x90\x01\xff\x7f"


_RODATA_QUAN5_5611_0000: .ascii "\x86\xff\xf0\xffD\0\x8b\0",
_RODATA_QUAN5_5611_0008: .ascii "\xc6\0\xfa\0",
_RODATA_QUAN5_5611_000c: .ascii "*\x01S\x01z\x01\x9d\x01\xbd\x01\xdb\x01\xf6\x01\x10\x02)\x02\xff\x7f"


_RODATA_RECONST2_0000: .ascii "t\0m\x01"


_RODATA_RECONST3_0000: .ascii "\0\xf8\x87\0",
_RODATA_RECONST3_0004: .ascii "\x11\x01u\x01"


_RODATA_RECONST4_0000: .ascii "\0\xf8\x04\0",
_RODATA_RECONST4_0004: .ascii "\x87\0\xd5\0",
_RODATA_RECONST4_0008: .ascii "\x11\x01C\x01u\x01\xa9\x01"


_RODATA_RECONST5_0000: .ascii "\0\xf8\xbe\xff\x1c\0h\0",
_RODATA_RECONST5_0008: .ascii "\xa9\0\xe0\0",
_RODATA_RECONST5_000c: .ascii "\x12\x01>\x01f\x01\x8b\x01\xad\x01\xcb\x01\xe8\x01\x02\x02\x1b\x026\x02"


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_state_reset
@ Size: 0x78
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_state_reset
    /*00000000*/ MOV         R3, #544                    @ 0x220 
    /*00000004*/ MOV         R2, #16 
    /*00000008*/ STRH        R3, [R0, #40]               @ 0x28 
    /*0000000c*/ MOV         R3, #34816                  @ 0x8800 
    /*00000010*/ STR         R3, [R0, #48]               @ 0x30 
    /*00000014*/ MOV         R3, #0 
    /*00000018*/ STRH        R2, [R0, #2] 
    /*0000001c*/ STRH        R2, [R0, #4] 
    /*00000020*/ MOV         R2, #32 
    /*00000024*/ STRH        R3, [R0, #6] 
    /*00000028*/ STRH        R3, [R0, #8] 
    /*0000002c*/ STRH        R3, [R0, #10] 
    /*00000030*/ STRH        R3, [R0, #12] 
    /*00000034*/ STRH        R3, [R0, #14] 
    /*00000038*/ STRH        R3, [R0, #16] 
    /*0000003c*/ STRH        R3, [R0, #18] 
    /*00000040*/ STRH        R3, [R0, #20] 
    /*00000044*/ STRH        R3, [R0, #34]               @ 0x22 
    /*00000048*/ STRH        R3, [R0, #36]               @ 0x24 
    /*0000004c*/ STRH        R3, [R0, #38]               @ 0x26 
    /*00000050*/ STRH        R3, [R0, #42]               @ 0x2a 
    /*00000054*/ STRH        R3, [R0, #44]               @ 0x2c 
    /*00000058*/ STRH        R3, [R0, #46]               @ 0x2e 
    /*0000005c*/ STRH        R2, [R0, #32] 
    /*00000060*/ STRH        R2, [R0, #30] 
    /*00000064*/ STRH        R2, [R0, #28] 
    /*00000068*/ STRH        R2, [R0, #26] 
    /*0000006c*/ STRH        R2, [R0, #24] 
    /*00000070*/ STRH        R2, [R0, #22] 
    /*00000074*/ BX          LR 
FUNC_END G726_state_reset


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_encode_core
@ Size: 0x560
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_encode_core
    /*00000000*/ CMP         R2, #0 
    /*00000004*/ BXLE        LR 
    /*00000008*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000000c*/ MOV         R4, R3 
    /*00000010*/ LDRSH       R3, [R3, #32] 
    /*00000014*/ SUB         SP, SP, #68                 @ 0x44 
    /*00000018*/ LDRSH       R9, [R4, #26] 
    /*0000001c*/ STR         R3, [SP, #8] 
    /*00000020*/ SUB         R3, R2, #1 
    /*00000024*/ LDRSH       IP, [R4, #14] 
    /*00000028*/ UXTH        R3, R3 
    /*0000002c*/ LDRSH       FP, [R4, #38]               @ 0x26 
    /*00000030*/ ADD         R3, R3, #1 
    /*00000034*/ ADD         R3, R1, R3 
    /*00000038*/ STR         R3, [SP, #40]               @ 0x28 
    /*0000003c*/ SUB         R3, R0, #2 
    /*00000040*/ STR         R3, [SP, #24] 
    /*00000044*/ ADD         R3, SP, #62                 @ 0x3e 
    /*00000048*/ STR         R3, [SP, #44]               @ 0x2c 
    /*0000004c*/ LDRSH       R3, [R4, #8] 
    /*00000050*/ LDRSH       LR, [R4, #16] 
    /*00000054*/ STR         R3, [SP, #20] 
    /*00000058*/ LDRSH       R3, [R4, #12] 
    /*0000005c*/ STR         IP, [SP, #36]               @ 0x24 
    /*00000060*/ MOV         IP, R9 
    /*00000064*/ STR         R1, [SP, #12] 
    /*00000068*/ MOV         R5, R3 
    /*0000006c*/ LDRSH       R3, [R4, #34]               @ 0x22 
    /*00000070*/ MOV         R9, FP 
    /*00000074*/ LDRSH       R6, [R4, #30] 
    /*00000078*/ MOV         FP, IP 
    /*0000007c*/ STR         R3, [SP, #28] 
    /*00000080*/ LDRSH       R3, [R4, #36]               @ 0x24 
    /*00000084*/ LDRSH       SL, [R4, #28] 
    /*00000088*/ STR         R3, [SP, #32] 
    /*0000008c*/ MOV         R3, LR 
    /*00000090*/ LDRSH       R8, [R4, #24] 
    /*00000094*/ LDRSH       R2, [R4, #20] 
    /*00000098*/ LDRSH       R7, [R4, #22] 
    /*0000009c*/ LDRSH       R1, [R4, #6] 
    /*000000a0*/ LDRSH       R0, [R4, #10] 
    /*000000a4*/ B           G726_encode_core_x24c
    G726_encode_core_xa8:
    /*000000a8*/ CMN         R0, #11776                  @ 0x2e00 
    /*000000ac*/ MOVGE       R0, #0 
    /*000000b0*/ MOVLT       R0, #1 
    /*000000b4*/ SXTH        R2, R0 
    G726_encode_core_xb8:
    /*000000b8*/ LDRSH       R3, [R4, #34]               @ 0x22 
    /*000000bc*/ STRH        R2, [R4, #42]               @ 0x2a 
    /*000000c0*/ STR         R3, [SP, #28] 
    /*000000c4*/ MOV         LR, R3 
    /*000000c8*/ LDRSH       R3, [R4, #36]               @ 0x24 
    /*000000cc*/ STRH        R1, [R4, #6] 
    /*000000d0*/ STR         R3, [SP, #32] 
    /*000000d4*/ MOV         IP, R3 
    /*000000d8*/ RSB         R3, R3, LR, LSL #2 
    /*000000dc*/ MOV         R2, IP 
    /*000000e0*/ CMP         R3, #0 
    /*000000e4*/ RSBLT       R3, R3, #0 
    /*000000e8*/ CMP         R3, IP, ASR #3 
    /*000000ec*/ BGE         G726_encode_core_x4b4
    /*000000f0*/ LDR         R3, [SP, #36]               @ 0x24 
    /*000000f4*/ CMP         R3, #1536                   @ 0x600 
    /*000000f8*/ ORRLT       R0, R0, #1 
    /*000000fc*/ CMP         R0, #0 
    /*00000100*/ BNE         G726_encode_core_x4b4
    /*00000104*/ SUB         R3, R9, R9, ASR #4 
    /*00000108*/ SXTH        R9, R3 
    G726_encode_core_x10c:
    /*0000010c*/ LDR         R3, [SP, #8] 
    /*00000110*/ CMP         SL, #0 
    /*00000114*/ MOVNE       R9, #256                    @ 0x100 
    /*00000118*/ STRH        R9, [R4, #38]               @ 0x26 
    /*0000011c*/ CMP         R3, #0 
    /*00000120*/ BLE         G726_encode_core_x508
    /*00000124*/ MOVW        R3, #65472                  @ 0xffc0 
    /*00000128*/ MOV         R2, #64                     @ 0x40 
    /*0000012c*/ STR         R3, [SP, #16] 
    /*00000130*/ MOV         R0, R3 
    G726_encode_core_x134:
    /*00000134*/ LDRSH       R6, [R4, #32] 
    /*00000138*/ LDRSH       R3, [R4, #10] 
    /*0000013c*/ CMP         R6, #0 
    /*00000140*/ MOVGE       R0, R2 
    /*00000144*/ CMP         SL, #0 
    /*00000148*/ BNE         G726_encode_core_x4c4
    /*0000014c*/ LDRSH       SL, [R4, #30] 
    /*00000150*/ SUB         R3, R3, R3, ASR #8 
    /*00000154*/ ADD         R0, R0, R3 
    /*00000158*/ CMP         SL, #0 
    /*0000015c*/ SXTH        R0, R0 
    /*00000160*/ STRH        R0, [R4, #10] 
    /*00000164*/ BLT         G726_encode_core_x534
    /*00000168*/ LDRSH       R3, [R4, #12] 
    /*0000016c*/ MOV         IP, R2 
    G726_encode_core_x170:
    /*00000170*/ LDRSH       FP, [R4, #28] 
    /*00000174*/ SUB         R3, R3, R3, ASR #8 
    /*00000178*/ ADD         R3, IP, R3 
    /*0000017c*/ CMP         FP, #0 
    /*00000180*/ LDRSH       IP, [R4, #14] 
    /*00000184*/ SXTH        R5, R3 
    /*00000188*/ LDRSH       R8, [R4, #26] 
    /*0000018c*/ MOVGE       R3, R2 
    /*00000190*/ LDRLT       R3, [SP, #16] 
    /*00000194*/ SUB         IP, IP, IP, ASR #8 
    /*00000198*/ CMP         R8, #0 
    /*0000019c*/ ADD         IP, R3, IP 
    /*000001a0*/ LDRSH       LR, [R4, #18] 
    /*000001a4*/ SXTH        R3, IP 
    /*000001a8*/ LDRLT       IP, [SP, #16] 
    /*000001ac*/ STR         R3, [SP, #36]               @ 0x24 
    /*000001b0*/ STRLT       IP, [SP, #52]               @ 0x34 
    /*000001b4*/ LDRSH       IP, [R4, #22] 
    /*000001b8*/ STRH        R3, [R4, #14] 
    /*000001bc*/ LDRSH       R7, [R4, #24] 
    /*000001c0*/ LDRSH       R3, [R4, #16] 
    /*000001c4*/ STRGE       R2, [SP, #52]               @ 0x34 
    /*000001c8*/ CMP         R7, #0 
    /*000001cc*/ STR         LR, [SP, #48]               @ 0x30 
    /*000001d0*/ MOV         LR, IP 
    /*000001d4*/ LDR         IP, [SP, #52]               @ 0x34 
    /*000001d8*/ SUB         R3, R3, R3, ASR #8 
    /*000001dc*/ ADD         R3, IP, R3 
    /*000001e0*/ LDR         IP, [SP, #16] 
    /*000001e4*/ MOVGE       IP, R2 
    /*000001e8*/ STRH        R5, [R4, #12] 
    /*000001ec*/ CMP         LR, #0 
    /*000001f0*/ LDR         LR, [SP, #48]               @ 0x30 
    /*000001f4*/ SXTH        R3, R3 
    /*000001f8*/ STRH        R3, [R4, #16] 
    /*000001fc*/ SUB         LR, LR, LR, ASR #8 
    /*00000200*/ ADD         LR, IP, LR 
    /*00000204*/ STRH        LR, [R4, #18] 
    /*00000208*/ BLT         G726_encode_core_x548
    /*0000020c*/ LDRSH       LR, [R4, #20] 
    /*00000210*/ SUB         LR, LR, LR, ASR #8 
    /*00000214*/ ADD         LR, R2, LR 
    /*00000218*/ SXTH        R2, LR 
    G726_encode_core_x21c:
    /*0000021c*/ LDR         IP, [SP, #12] 
    /*00000220*/ LDR         LR, [SP, #40]               @ 0x28 
    /*00000224*/ STRH        R2, [R4, #20] 
    /*00000228*/ CMP         LR, IP 
    /*0000022c*/ LDRH        IP, [SP, #8] 
    /*00000230*/ STRH        R7, [R4, #22] 
    /*00000234*/ STRH        R8, [R4, #24] 
    /*00000238*/ STRH        FP, [R4, #26] 
    /*0000023c*/ STRH        SL, [R4, #28] 
    /*00000240*/ STRH        R6, [R4, #30] 
    /*00000244*/ STRH        IP, [R4, #32] 
    /*00000248*/ BEQ         G726_encode_core_x540
    G726_encode_core_x24c:
    /*0000024c*/ LDR         LR, [SP, #8] 
    /*00000250*/ CMP         R9, #255                    @ 0xff 
    /*00000254*/ MUL         R6, R5, R6 
    /*00000258*/ MLA         R6, R0, LR, R6 
    /*0000025c*/ LDR         R0, [SP, #36]               @ 0x24 
    /*00000260*/ LDRH        LR, [R4, #18] 
    /*00000264*/ MLA         IP, R0, SL, R6 
    /*00000268*/ MLA         R3, R3, FP, IP 
    /*0000026c*/ SMLABB      R3, LR, R8, R3 
    /*00000270*/ LDRH        R5, [R4, #2] 
    /*00000274*/ LDRH        FP, [R4, #4] 
    /*00000278*/ MLA         R7, R2, R7, R3 
    /*0000027c*/ LDR         R2, [SP, #24] 
    /*00000280*/ LDRH        R3, [SP, #20] 
    /*00000284*/ SMULBB      R1, R5, R1 
    /*00000288*/ SMLABB      R1, R3, FP, R1 
    /*0000028c*/ LDRSH       R3, [R2, #2]! 
    /*00000290*/ MOVGT       R5, #64                     @ 0x40 
    /*00000294*/ LDR         FP, [R4, #48]               @ 0x30 
    /*00000298*/ STR         R2, [SP, #24] 
    /*0000029c*/ ADD         R2, R1, R7 
    /*000002a0*/ STR         R2, [SP, #16] 
    /*000002a4*/ RSB         R3, R2, R3, LSL #13 
    /*000002a8*/ LDRSH       R2, [R4, #40]               @ 0x28 
    /*000002ac*/ ASR         R8, FP, #6 
    /*000002b0*/ SUB         R2, R2, R8 
    /*000002b4*/ ASR         R3, R3, #13 
    /*000002b8*/ SXTH        R2, R2 
    /*000002bc*/ SBFXLE      R5, R9, #2, #16 
    /*000002c0*/ SXTH        R0, R3 
    /*000002c4*/ MLA         R5, R2, R5, FP 
    /*000002c8*/ CMP         R0, #0 
    /*000002cc*/ RSBLT       R0, R3, #0 
    /*000002d0*/ MOVGE       R3, #0 
    /*000002d4*/ STRGE       R3, [SP, #8] 
    /*000002d8*/ MOVLT       R3, #1 
    /*000002dc*/ ASR         R5, R5, #6 
    /*000002e0*/ SXTHLT      R0, R0 
    /*000002e4*/ STRLT       R3, [SP, #8] 
    /*000002e8*/ SXTH        R2, R5 
    /*000002ec*/ STR         R2, [SP, #36]               @ 0x24 
    /*000002f0*/ SXTH        R3, R5 
    /*000002f4*/ UBFX        SL, R3, #2, #16 
    /*000002f8*/ BL          adpcm_log
    /*000002fc*/ SUB         R0, R0, SL 
    /*00000300*/ UXTH        R5, R5 
    /*00000304*/ LDR         R2, [SP, #44]               @ 0x2c 
    /*00000308*/ SXTH        R0, R0 
    /*0000030c*/ LDR         R1, [SP, #8] 
    /*00000310*/ BL          adpcm_quant
    /*00000314*/ LDRH        R2, [SP, #62]               @ 0x3e 
    /*00000318*/ MOV         R6, R0 
    /*0000031c*/ LDR         R3, [SP, #12] 
    /*00000320*/ ADD         SL, SL, R2 
    /*00000324*/ STRB        R0, [R3], #1 
    /*00000328*/ SXTH        SL, SL 
    /*0000032c*/ LDR         R1, [SP, #8] 
    /*00000330*/ MOV         R0, SL 
    /*00000334*/ STR         R3, [SP, #12] 
    /*00000338*/ BL          adpcm_antilog
    /*0000033c*/ STR         R0, [SP, #8] 
    /*00000340*/ MOV         R0, R6 
    /*00000344*/ BL          adpcm_findfi
    /*00000348*/ LDRH        IP, [SP, #28] 
    /*0000034c*/ UXTH        R2, R0 
    /*00000350*/ LDRH        R1, [SP, #32] 
    /*00000354*/ MOV         R0, R6 
    /*00000358*/ RSB         R3, IP, R2, LSL #9 
    /*0000035c*/ RSB         R2, R1, R2, LSL #11 
    /*00000360*/ SBFX        R3, R3, #5, #11 
    /*00000364*/ SBFX        R2, R2, #7, #9 
    /*00000368*/ ADD         R3, IP, R3 
    /*0000036c*/ ADD         R2, R1, R2 
    /*00000370*/ STRH        R3, [R4, #34]               @ 0x22 
    /*00000374*/ STRH        R2, [R4, #36]               @ 0x24 
    /*00000378*/ BL          adpcm_findwi
    /*0000037c*/ RSB         R0, R5, R0, LSL #5 
    /*00000380*/ SBFX        R0, R0, #5, #11 
    /*00000384*/ ADD         R5, R5, R0 
    /*00000388*/ SXTH        R5, R5 
    /*0000038c*/ CMP         R5, #544                    @ 0x220 
    /*00000390*/ MOVLT       R5, #544                    @ 0x220 
    /*00000394*/ STRHLT      R5, [R4, #40]               @ 0x28 
    /*00000398*/ BLT         G726_encode_core_x3a8
    /*0000039c*/ CMP         R5, #5120                   @ 0x1400 
    /*000003a0*/ MOVGT       R5, #5120                   @ 0x1400 
    /*000003a4*/ STRH        R5, [R4, #40]               @ 0x28 
    G726_encode_core_x3a8:
    /*000003a8*/ SUB         R8, R5, R8 
    /*000003ac*/ MOVW        R5, #7147                   @ 0x1beb 
    /*000003b0*/ SMULBB      SL, SL, R5 
    /*000003b4*/ LDR         R3, [SP, #8] 
    /*000003b8*/ LDRSH       R1, [R4, #42]               @ 0x2a 
    /*000003bc*/ CMP         FP, SL 
    /*000003c0*/ ADD         R7, R3, R7, ASR #13 
    /*000003c4*/ MOVGE       SL, #0 
    /*000003c8*/ LDRSH       R0, [R4, #44]               @ 0x2c 
    /*000003cc*/ SXTH        R7, R7 
    /*000003d0*/ ADD         FP, R8, FP 
    /*000003d4*/ MOVLT       SL, #1 
    /*000003d8*/ STR         FP, [R4, #48]               @ 0x30 
    /*000003dc*/ CMP         R1, #1 
    /*000003e0*/ STRH        R7, [R4, #44]               @ 0x2c 
    /*000003e4*/ MOVNE       SL, #0 
    /*000003e8*/ LDRSH       R1, [R4, #46]               @ 0x2e 
    /*000003ec*/ CMP         R7, #0 
    /*000003f0*/ STRH        R0, [R4, #46]               @ 0x2e 
    /*000003f4*/ BLT         G726_encode_core_x528
    /*000003f8*/ MOVNE       R7, #1 
    /*000003fc*/ MOVEQ       R7, #0 
    /*00000400*/ SXTH        R3, R7 
    /*00000404*/ UXTH        R7, R7 
    G726_encode_core_x408:
    /*00000408*/ LDR         R2, [SP, #8] 
    /*0000040c*/ LDR         IP, [SP, #16] 
    /*00000410*/ ADD         R6, R2, IP, ASR #13 
    /*00000414*/ LDRH        IP, [R4, #2] 
    /*00000418*/ ASR         R6, R6, #1 
    /*0000041c*/ STR         R3, [SP] 
    /*00000420*/ STRH        IP, [R4, #4] 
    /*00000424*/ LDRSH       R3, [R4, #6] 
    /*00000428*/ LDRSH       R2, [R4, #8] 
    /*0000042c*/ STRH        R6, [R4, #2] 
    /*00000430*/ BL          adpcm_upda2
    /*00000434*/ LDRSH       R1, [R4, #46]               @ 0x2e 
    /*00000438*/ CMP         SL, #0 
    /*0000043c*/ LDRSH       R3, [R4, #6] 
    /*00000440*/ MOVEQ       IP, R0 
    /*00000444*/ MOVNE       IP, #0 
    /*00000448*/ CMP         R1, #0 
    /*0000044c*/ STR         IP, [SP, #20] 
    /*00000450*/ MOVW        R2, #65344                  @ 0xff40 
    /*00000454*/ MOV         LR, IP 
    /*00000458*/ MOVGE       R2, #192                    @ 0xc0 
    /*0000045c*/ SUB         IP, R3, R3, ASR #8 
    /*00000460*/ RSB         R3, R0, #15360              @ 0x3c00 
    /*00000464*/ SMLABB      R7, R7, R2, IP 
    /*00000468*/ STRH        LR, [R4, #8] 
    /*0000046c*/ UXTH        R3, R3 
    /*00000470*/ SXTH        R1, R3 
    /*00000474*/ SXTH        R7, R7 
    /*00000478*/ CMP         R7, R1 
    /*0000047c*/ BGT         G726_encode_core_x494
    /*00000480*/ RSB         R1, R1, #0 
    /*00000484*/ CMP         R7, R1 
    /*00000488*/ RSBLT       R1, R3, #0 
    /*0000048c*/ MOVGE       R1, R7 
    /*00000490*/ SXTHLT      R1, R1 
    G726_encode_core_x494:
    /*00000494*/ CMP         SL, #0 
    /*00000498*/ BEQ         G726_encode_core_xa8
    /*0000049c*/ CMN         R0, #11776                  @ 0x2e00 
    /*000004a0*/ MOV         R1, #0 
    /*000004a4*/ MOVGE       R0, #0 
    /*000004a8*/ MOVLT       R0, #1 
    /*000004ac*/ MOV         R2, R1 
    /*000004b0*/ B           G726_encode_core_xb8
    G726_encode_core_x4b4:
    /*000004b4*/ ADD         R3, R9, #32 
    /*000004b8*/ SUB         R3, R3, R9, ASR #4 
    /*000004bc*/ SXTH        R9, R3 
    /*000004c0*/ B           G726_encode_core_x10c
    G726_encode_core_x4c4:
    /*000004c4*/ LDRSH       SL, [R4, #30] 
    /*000004c8*/ MOV         R3, #0 
    /*000004cc*/ STRH        R3, [R4, #10] 
    /*000004d0*/ MOV         R0, #0 
    /*000004d4*/ STRH        R3, [R4, #12] 
    /*000004d8*/ MOV         R2, #0 
    /*000004dc*/ STRH        R3, [R4, #14] 
    /*000004e0*/ MOV         R5, R0 
    /*000004e4*/ STRH        R3, [R4, #16] 
    /*000004e8*/ MOV         R3, R0 
    /*000004ec*/ STRH        R2, [R4, #18] 
    /*000004f0*/ MOV         R2, R0 
    /*000004f4*/ STR         R0, [SP, #36]               @ 0x24 
    /*000004f8*/ LDRSH       FP, [R4, #28] 
    /*000004fc*/ LDRSH       R8, [R4, #26] 
    /*00000500*/ LDRSH       R7, [R4, #24] 
    /*00000504*/ B           G726_encode_core_x21c
    G726_encode_core_x508:
    /*00000508*/ STREQ       R3, [SP, #16] 
    /*0000050c*/ MOVEQ       R2, R3 
    /*00000510*/ MOVEQ       R0, R3 
    /*00000514*/ MOVNE       R3, #64                     @ 0x40 
    /*00000518*/ MOVWNE      R2, #65472                  @ 0xffc0 
    /*0000051c*/ STRNE       R3, [SP, #16] 
    /*00000520*/ MOVNE       R0, R3 
    /*00000524*/ B           G726_encode_core_x134
    G726_encode_core_x528:
    /*00000528*/ MOVW        R7, #65535                  @ 0xffff 
    /*0000052c*/ MVN         R3, #0 
    /*00000530*/ B           G726_encode_core_x408
    G726_encode_core_x534:
    /*00000534*/ LDRSH       R3, [R4, #12] 
    /*00000538*/ LDR         IP, [SP, #16] 
    /*0000053c*/ B           G726_encode_core_x170
    G726_encode_core_x540:
    /*00000540*/ ADD         SP, SP, #68                 @ 0x44 
    /*00000544*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    G726_encode_core_x548:
    /*00000548*/ LDRSH       R2, [R4, #20] 
    /*0000054c*/ LDR         IP, [SP, #16] 
    /*00000550*/ SUB         R2, R2, R2, ASR #8 
    /*00000554*/ ADD         R2, IP, R2 
    /*00000558*/ SXTH        R2, R2 
    /*0000055c*/ B           G726_encode_core_x21c
FUNC_END G726_encode_core


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_decode_core
@ Size: 0x564
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_decode_core
    /*00000000*/ LDR         IP, WORD_055c               @ LDR         IP, [PC, #1364]             @ 0x000000000000055c 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ ADD         IP, PC, IP 
    /*0000000c*/ BXLE        LR 
    /*00000010*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00000014*/ MOV         R4, R3 
    /*00000018*/ LDR         R3, WORD_0560               @ LDR         R3, [PC, #1344]             @ 0x0000000000000560 
    /*0000001c*/ SUB         SP, SP, #60                 @ 0x3c 
    /*00000020*/ ADD         R2, R0, R2 
    /*00000024*/ STR         R0, [SP, #20] 
    /*00000028*/ STR         R2, [SP, #40]               @ 0x28 
    /*0000002c*/ LDRSH       R5, [R4, #34]               @ 0x22 
    /*00000030*/ LDR         R3, [IP, R3] 
    /*00000034*/ LDRSH       R2, [R4, #8] 
    /*00000038*/ LDRSH       R6, [R4, #30] 
    /*0000003c*/ LDRSH       R9, [R4, #38]               @ 0x26 
    /*00000040*/ STR         R3, [SP, #44]               @ 0x2c 
    /*00000044*/ STR         R2, [SP, #28] 
    /*00000048*/ LDRSH       R3, [R4, #32] 
    /*0000004c*/ LDRSH       R2, [R4, #12] 
    /*00000050*/ LDRSH       LR, [R4, #16] 
    /*00000054*/ STR         R5, [SP, #32] 
    /*00000058*/ LDRSH       R5, [R4, #36]               @ 0x24 
    /*0000005c*/ STR         R1, [SP, #24] 
    /*00000060*/ STR         R3, [SP, #8] 
    /*00000064*/ STR         R5, [SP, #36]               @ 0x24 
    /*00000068*/ MOV         R5, R6 
    /*0000006c*/ STR         R9, [SP, #12] 
    /*00000070*/ MOV         R6, LR 
    /*00000074*/ LDRSH       FP, [R4, #28] 
    /*00000078*/ MOV         R9, R2 
    /*0000007c*/ LDRSH       SL, [R4, #26] 
    /*00000080*/ LDRSH       R8, [R4, #24] 
    /*00000084*/ LDRSH       R3, [R4, #20] 
    /*00000088*/ LDRSH       R7, [R4, #22] 
    /*0000008c*/ LDRSH       R1, [R4, #6] 
    /*00000090*/ LDRSH       R0, [R4, #10] 
    /*00000094*/ LDRSH       IP, [R4, #14] 
    /*00000098*/ B           G726_decode_core_x2d8
    G726_decode_core_x9c:
    /*0000009c*/ LDR         R2, [SP, #24] 
    /*000000a0*/ MVN         R3, #32768                  @ 0x8000 
    /*000000a4*/ STRH        R3, [R2] 
    G726_decode_core_xa8:
    /*000000a8*/ LDRSH       R3, [R4, #6] 
    /*000000ac*/ LDRSH       R2, [R4, #8] 
    /*000000b0*/ LDRSH       R0, [R4, #46]               @ 0x2e 
    /*000000b4*/ STR         IP, [SP] 
    /*000000b8*/ BL          adpcm_upda2
    /*000000bc*/ LDRSH       R1, [R4, #46]               @ 0x2e 
    /*000000c0*/ CMP         R9, #0 
    /*000000c4*/ LDRSH       R3, [R4, #6] 
    /*000000c8*/ MOVEQ       IP, R0 
    /*000000cc*/ MOVNE       IP, #0 
    /*000000d0*/ CMP         R1, #0 
    /*000000d4*/ STR         IP, [SP, #28] 
    /*000000d8*/ MOVW        R2, #65344                  @ 0xff40 
    /*000000dc*/ MOV         LR, IP 
    /*000000e0*/ MOVGE       R2, #192                    @ 0xc0 
    /*000000e4*/ SUB         IP, R3, R3, ASR #8 
    /*000000e8*/ RSB         R3, R0, #15360              @ 0x3c00 
    /*000000ec*/ SMLABB      R6, R6, R2, IP 
    /*000000f0*/ STRH        LR, [R4, #8] 
    /*000000f4*/ UXTH        R3, R3 
    /*000000f8*/ SXTH        R1, R3 
    /*000000fc*/ SXTH        R6, R6 
    /*00000100*/ CMP         R6, R1 
    /*00000104*/ BGT         G726_decode_core_x11c
    /*00000108*/ RSB         R1, R1, #0 
    /*0000010c*/ CMP         R6, R1 
    /*00000110*/ RSBLT       R1, R3, #0 
    /*00000114*/ MOVGE       R1, R6 
    /*00000118*/ SXTHLT      R1, R1 
    G726_decode_core_x11c:
    /*0000011c*/ CMP         R9, #0 
    /*00000120*/ BNE         G726_decode_core_x4ac
    /*00000124*/ CMN         R0, #11776                  @ 0x2e00 
    /*00000128*/ MOVGE       R0, #0 
    /*0000012c*/ MOVLT       R0, #1 
    /*00000130*/ SXTH        R2, R0 
    G726_decode_core_x134:
    /*00000134*/ LDRSH       R3, [R4, #34]               @ 0x22 
    /*00000138*/ STRH        R1, [R4, #6] 
    /*0000013c*/ STR         R3, [SP, #32] 
    /*00000140*/ MOV         LR, R3 
    /*00000144*/ LDRSH       R3, [R4, #36]               @ 0x24 
    /*00000148*/ STRH        R2, [R4, #42]               @ 0x2a 
    /*0000014c*/ STR         R3, [SP, #36]               @ 0x24 
    /*00000150*/ MOV         IP, R3 
    /*00000154*/ RSB         R3, R3, LR, LSL #2 
    /*00000158*/ CMP         R3, #0 
    /*0000015c*/ RSBLT       R3, R3, #0 
    /*00000160*/ CMP         R3, IP, ASR #3 
    /*00000164*/ BGE         G726_decode_core_x494
    /*00000168*/ LDR         R3, [SP, #16] 
    /*0000016c*/ CMP         R3, #1536                   @ 0x600 
    /*00000170*/ ORRLT       R0, R0, #1 
    /*00000174*/ CMP         R0, #0 
    /*00000178*/ BNE         G726_decode_core_x494
    /*0000017c*/ LDR         R3, [SP, #12] 
    /*00000180*/ SUB         R3, R3, R3, ASR #4 
    /*00000184*/ SXTH        R3, R3 
    /*00000188*/ STR         R3, [SP, #12] 
    G726_decode_core_x18c:
    /*0000018c*/ LDR         R2, [SP, #8] 
    /*00000190*/ CMP         R9, #0 
    /*00000194*/ MOVNE       R3, #256                    @ 0x100 
    /*00000198*/ STR         R3, [SP, #12] 
    /*0000019c*/ CMP         R2, #0 
    /*000001a0*/ STRH        R3, [R4, #38]               @ 0x26 
    /*000001a4*/ BLE         G726_decode_core_x504
    /*000001a8*/ MOVW        R3, #65472                  @ 0xffc0 
    /*000001ac*/ MOV         R2, #64                     @ 0x40 
    /*000001b0*/ STR         R3, [SP, #16] 
    /*000001b4*/ MOV         R0, R3 
    G726_decode_core_x1b8:
    /*000001b8*/ LDRSH       R5, [R4, #32] 
    /*000001bc*/ LDRSH       R3, [R4, #10] 
    /*000001c0*/ CMP         R5, #0 
    /*000001c4*/ MOVGE       R0, R2 
    /*000001c8*/ CMP         R9, #0 
    /*000001cc*/ BNE         G726_decode_core_x4c4
    /*000001d0*/ LDRSH       FP, [R4, #30] 
    /*000001d4*/ SUB         R3, R3, R3, ASR #8 
    /*000001d8*/ ADD         R0, R0, R3 
    /*000001dc*/ CMP         FP, #0 
    /*000001e0*/ SXTH        R0, R0 
    /*000001e4*/ STRH        R0, [R4, #10] 
    /*000001e8*/ BLT         G726_decode_core_x534
    /*000001ec*/ LDRSH       R3, [R4, #12] 
    /*000001f0*/ MOV         IP, R2 
    G726_decode_core_x1f4:
    /*000001f4*/ LDRSH       SL, [R4, #28] 
    /*000001f8*/ SUB         R3, R3, R3, ASR #8 
    /*000001fc*/ ADD         R3, IP, R3 
    /*00000200*/ CMP         SL, #0 
    /*00000204*/ LDRSH       IP, [R4, #14] 
    /*00000208*/ SXTH        R9, R3 
    /*0000020c*/ LDRSH       R8, [R4, #26] 
    /*00000210*/ MOVGE       R3, R2 
    /*00000214*/ LDRLT       R3, [SP, #16] 
    /*00000218*/ SUB         IP, IP, IP, ASR #8 
    /*0000021c*/ CMP         R8, #0 
    /*00000220*/ ADD         IP, R3, IP 
    /*00000224*/ MOVGE       LR, R2 
    /*00000228*/ LDRSH       R3, [R4, #16] 
    /*0000022c*/ SXTH        IP, IP 
    /*00000230*/ LDRLT       LR, [SP, #16] 
    /*00000234*/ LDRSH       R7, [R4, #24] 
    /*00000238*/ LDRSH       R6, [R4, #18] 
    /*0000023c*/ SUB         R3, R3, R3, ASR #8 
    /*00000240*/ CMP         R7, #0 
    /*00000244*/ ADD         R3, LR, R3 
    /*00000248*/ LDR         LR, [SP, #16] 
    /*0000024c*/ MOVGE       LR, R2 
    /*00000250*/ STR         R6, [SP, #48]               @ 0x30 
    /*00000254*/ LDRSH       R6, [R4, #22] 
    /*00000258*/ STR         LR, [SP, #52]               @ 0x34 
    /*0000025c*/ LDR         LR, [SP, #48]               @ 0x30 
    /*00000260*/ CMP         R6, #0 
    /*00000264*/ STRH        R9, [R4, #12] 
    /*00000268*/ SXTH        R6, R3 
    /*0000026c*/ LDR         R3, [SP, #52]               @ 0x34 
    /*00000270*/ SUB         LR, LR, LR, ASR #8 
    /*00000274*/ ADD         LR, R3, LR 
    /*00000278*/ STRH        IP, [R4, #14] 
    /*0000027c*/ STRH        R6, [R4, #16] 
    /*00000280*/ STRH        LR, [R4, #18] 
    /*00000284*/ BGE         G726_decode_core_x520
    /*00000288*/ LDRSH       R3, [R4, #20] 
    /*0000028c*/ LDR         R2, [SP, #16] 
    /*00000290*/ SUB         R3, R3, R3, ASR #8 
    /*00000294*/ ADD         R3, R2, R3 
    /*00000298*/ SXTH        R3, R3 
    G726_decode_core_x29c:
    /*0000029c*/ LDR         R2, [SP, #20] 
    /*000002a0*/ LDR         LR, [SP, #40]               @ 0x28 
    /*000002a4*/ STRH        R3, [R4, #20] 
    /*000002a8*/ CMP         R2, LR 
    /*000002ac*/ LDR         R2, [SP, #24] 
    /*000002b0*/ STRH        R7, [R4, #22] 
    /*000002b4*/ STRH        R8, [R4, #24] 
    /*000002b8*/ ADD         R2, R2, #2 
    /*000002bc*/ STR         R2, [SP, #24] 
    /*000002c0*/ LDRH        R2, [SP, #8] 
    /*000002c4*/ STRH        SL, [R4, #26] 
    /*000002c8*/ STRH        FP, [R4, #28] 
    /*000002cc*/ STRH        R5, [R4, #30] 
    /*000002d0*/ STRH        R2, [R4, #32] 
    /*000002d4*/ BEQ         G726_decode_core_x540
    G726_decode_core_x2d8:
    /*000002d8*/ LDR         LR, [SP, #8] 
    /*000002dc*/ MUL         R2, R9, R5 
    /*000002e0*/ MLA         R0, R0, LR, R2 
    /*000002e4*/ MLA         IP, IP, FP, R0 
    /*000002e8*/ LDRH        R9, [R4, #18] 
    /*000002ec*/ MLA         IP, R6, SL, IP 
    /*000002f0*/ SMLABB      IP, R9, R8, IP 
    /*000002f4*/ LDR         R2, [SP, #12] 
    /*000002f8*/ LDRH        LR, [R4, #2] 
    /*000002fc*/ MLA         R7, R3, R7, IP 
    /*00000300*/ LDRH        R5, [R4, #4] 
    /*00000304*/ CMP         R2, #255                    @ 0xff 
    /*00000308*/ LDRH        R3, [SP, #28] 
    /*0000030c*/ MOVGT       FP, #64                     @ 0x40 
    /*00000310*/ SMULBB      R1, LR, R1 
    /*00000314*/ LDR         R6, [R4, #48]               @ 0x30 
    /*00000318*/ SMLABB      R5, R3, R5, R1 
    /*0000031c*/ SBFXLE      FP, R2, #2, #16 
    /*00000320*/ LDR         R1, [SP, #20] 
    /*00000324*/ LDRSH       R2, [R4, #40]               @ 0x28 
    /*00000328*/ ASR         SL, R6, #6 
    /*0000032c*/ LDRB        R3, [R1], #1 
    /*00000330*/ SUB         R2, R2, SL 
    /*00000334*/ STR         R1, [SP, #20] 
    /*00000338*/ SXTH        R2, R2 
    /*0000033c*/ ADD         R5, R5, R7 
    /*00000340*/ SXTH        R8, R3 
    /*00000344*/ MLA         FP, R2, FP, R6 
    /*00000348*/ CMP         R8, #1 
    /*0000034c*/ ASR         FP, FP, #6 
    /*00000350*/ RSBGT       R3, R3, #3 
    /*00000354*/ MOVLE       R3, R8 
    /*00000358*/ SXTH        R2, FP 
    /*0000035c*/ STR         R2, [SP, #16] 
    /*00000360*/ MOVGT       R1, #1 
    /*00000364*/ LDR         R2, [SP, #44]               @ 0x2c 
    /*00000368*/ MOVLE       R1, #0 
    /*0000036c*/ LSL         R3, R3, #1 
    /*00000370*/ LDRH        R9, [R2, R3] 
    /*00000374*/ SXTH        R3, FP 
    /*00000378*/ UXTH        FP, FP 
    /*0000037c*/ ADD         R9, R9, R3, ASR #2 
    /*00000380*/ SXTH        R9, R9 
    /*00000384*/ MOV         R0, R9 
    /*00000388*/ BL          adpcm_antilog
    /*0000038c*/ LDRSH       R3, [R4, #42]               @ 0x2a 
    /*00000390*/ MOVW        R2, #7147                   @ 0x1beb 
    /*00000394*/ SMULBB      R9, R9, R2 
    /*00000398*/ STR         R0, [SP, #8] 
    /*0000039c*/ MOV         R0, R8 
    /*000003a0*/ CMP         R3, #0 
    /*000003a4*/ CMPNE       R6, R9 
    /*000003a8*/ MOVLT       R9, #1 
    /*000003ac*/ MOVGE       R9, #0 
    /*000003b0*/ BL          adpcm_findfi
    /*000003b4*/ LDRH        R1, [SP, #32] 
    /*000003b8*/ UXTH        R3, R0 
    /*000003bc*/ LDRH        R2, [SP, #36]               @ 0x24 
    /*000003c0*/ MOV         R0, R8 
    /*000003c4*/ RSB         IP, R1, R3, LSL #9 
    /*000003c8*/ RSB         R3, R2, R3, LSL #11 
    /*000003cc*/ SBFX        IP, IP, #5, #11 
    /*000003d0*/ SBFX        R3, R3, #7, #9 
    /*000003d4*/ ADD         IP, R1, IP 
    /*000003d8*/ ADD         R3, R2, R3 
    /*000003dc*/ STRH        IP, [R4, #34]               @ 0x22 
    /*000003e0*/ STRH        R3, [R4, #36]               @ 0x24 
    /*000003e4*/ BL          adpcm_findwi
    /*000003e8*/ RSB         R0, FP, R0, LSL #5 
    /*000003ec*/ SBFX        R0, R0, #5, #11 
    /*000003f0*/ ADD         FP, FP, R0 
    /*000003f4*/ SXTH        FP, FP 
    /*000003f8*/ CMP         FP, #544                    @ 0x220 
    /*000003fc*/ MOVLT       FP, #544                    @ 0x220 
    /*00000400*/ STRHLT      FP, [R4, #40]               @ 0x28 
    /*00000404*/ BLT         G726_decode_core_x414
    /*00000408*/ CMP         FP, #5120                   @ 0x1400 
    /*0000040c*/ MOVGT       FP, #5120                   @ 0x1400 
    /*00000410*/ STRH        FP, [R4, #40]               @ 0x28 
    G726_decode_core_x414:
    /*00000414*/ LDR         R3, [SP, #8] 
    /*00000418*/ SUB         SL, FP, SL 
    /*0000041c*/ ADD         R7, R3, R7, ASR #13 
    /*00000420*/ LDRH        R3, [R4, #44]               @ 0x2c 
    /*00000424*/ SXTH        R7, R7 
    /*00000428*/ ADD         R6, SL, R6 
    /*0000042c*/ CMP         R7, #0 
    /*00000430*/ LDRSH       R1, [R4, #46]               @ 0x2e 
    /*00000434*/ STR         R6, [R4, #48]               @ 0x30 
    /*00000438*/ STRH        R7, [R4, #44]               @ 0x2c 
    /*0000043c*/ STRH        R3, [R4, #46]               @ 0x2e 
    /*00000440*/ BLT         G726_decode_core_x514
    /*00000444*/ MOVNE       R6, #1 
    /*00000448*/ MOVEQ       R6, #0 
    /*0000044c*/ SXTH        IP, R6 
    /*00000450*/ UXTH        R6, R6 
    G726_decode_core_x454:
    /*00000454*/ LDR         R3, [SP, #8] 
    /*00000458*/ ADD         R5, R3, R5, ASR #13 
    /*0000045c*/ LDRH        R3, [R4, #2] 
    /*00000460*/ CMP         R5, #32768                  @ 0x8000 
    /*00000464*/ ASR         R2, R5, #1 
    /*00000468*/ STRH        R2, [R4, #2] 
    /*0000046c*/ STRH        R3, [R4, #4] 
    /*00000470*/ BGE         G726_decode_core_x9c
    /*00000474*/ CMN         R5, #32768                  @ 0x8000 
    /*00000478*/ MOV         R3, #32768                  @ 0x8000 
    /*0000047c*/ MOVT        R3, #65535                  @ 0xffff 
    /*00000480*/ LDRLT       R2, [SP, #24] 
    /*00000484*/ LDRGE       R3, [SP, #24] 
    /*00000488*/ STRHLT      R3, [R2] 
    /*0000048c*/ STRHGE      R5, [R3] 
    /*00000490*/ B           G726_decode_core_xa8
    G726_decode_core_x494:
    /*00000494*/ LDR         R2, [SP, #12] 
    /*00000498*/ ADD         R3, R2, #32 
    /*0000049c*/ SUB         R3, R3, R2, ASR #4 
    /*000004a0*/ SXTH        R3, R3 
    /*000004a4*/ STR         R3, [SP, #12] 
    /*000004a8*/ B           G726_decode_core_x18c
    G726_decode_core_x4ac:
    /*000004ac*/ CMN         R0, #11776                  @ 0x2e00 
    /*000004b0*/ MOV         R1, #0 
    /*000004b4*/ MOVGE       R0, #0 
    /*000004b8*/ MOVLT       R0, #1 
    /*000004bc*/ MOV         R2, R1 
    /*000004c0*/ B           G726_decode_core_x134
    G726_decode_core_x4c4:
    /*000004c4*/ LDRSH       FP, [R4, #30] 
    /*000004c8*/ MOV         R3, #0 
    /*000004cc*/ STRH        R3, [R4, #10] 
    /*000004d0*/ MOV         R0, #0 
    /*000004d4*/ STRH        R3, [R4, #12] 
    /*000004d8*/ MOV         R9, R0 
    /*000004dc*/ STRH        R3, [R4, #14] 
    /*000004e0*/ MOV         IP, R0 
    /*000004e4*/ STRH        R3, [R4, #16] 
    /*000004e8*/ MOV         R6, R0 
    /*000004ec*/ STRH        R3, [R4, #18] 
    /*000004f0*/ MOV         R3, R0 
    /*000004f4*/ LDRSH       SL, [R4, #28] 
    /*000004f8*/ LDRSH       R8, [R4, #26] 
    /*000004fc*/ LDRSH       R7, [R4, #24] 
    /*00000500*/ B           G726_decode_core_x29c
    G726_decode_core_x504:
    /*00000504*/ BNE         G726_decode_core_x548
    /*00000508*/ STR         R2, [SP, #16] 
    /*0000050c*/ MOV         R0, R2 
    /*00000510*/ B           G726_decode_core_x1b8
    G726_decode_core_x514:
    /*00000514*/ MOVW        R6, #65535                  @ 0xffff 
    /*00000518*/ MVN         IP, #0 
    /*0000051c*/ B           G726_decode_core_x454
    G726_decode_core_x520:
    /*00000520*/ LDRSH       R3, [R4, #20] 
    /*00000524*/ SUB         R3, R3, R3, ASR #8 
    /*00000528*/ ADD         R3, R2, R3 
    /*0000052c*/ SXTH        R3, R3 
    /*00000530*/ B           G726_decode_core_x29c
    G726_decode_core_x534:
    /*00000534*/ LDRSH       R3, [R4, #12] 
    /*00000538*/ LDR         IP, [SP, #16] 
    /*0000053c*/ B           G726_decode_core_x1f4
    G726_decode_core_x540:
    /*00000540*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00000544*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    G726_decode_core_x548:
    /*00000548*/ MOV         R3, #64                     @ 0x40 
    /*0000054c*/ MOVW        R2, #65472                  @ 0xffc0 
    /*00000550*/ STR         R3, [SP, #16] 
    /*00000554*/ MOV         R0, R3 
    /*00000558*/ B           G726_decode_core_x1b8
    /*0000055c*/ WORD_055c: .word 0x0000054c
    /*00000560*/ WORD_0560: .word 0x00000000
FUNC_END G726_decode_core


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_encoder_pack
@ Size: 0x2f0
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_encoder_pack
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ ADD         LR, R2, #7 
    /*0000000c*/ MOV         R3, #256                    @ 0x100 
    /*00000010*/ STRH        R3, [R1] 
    /*00000014*/ MOVLT       R2, LR 
    /*00000018*/ ASR         LR, R2, #3 
    /*0000001c*/ STRH        LR, [R1, #2] 
    /*00000020*/ CMP         LR, #0 
    /*00000024*/ POPLE       {R4, R5, R6, R7, R8, R9, PC} 
    /*00000028*/ ADD         R2, LR, #2 
    /*0000002c*/ ADD         IP, R1, #4 
    /*00000030*/ ADD         R3, R0, LR, LSL #3 
    /*00000034*/ UXTH        R4, LR 
    /*00000038*/ ADD         R2, R1, R2, LSL #1 
    /*0000003c*/ CMP         IP, R3 
    /*00000040*/ CMPCC       R0, R2 
    /*00000044*/ MOVCS       R3, #1 
    /*00000048*/ MOVCC       R3, #0 
    /*0000004c*/ CMP         R4, #15 
    /*00000050*/ MOVLS       R3, #0 
    /*00000054*/ ANDHI       R3, R3, #1 
    /*00000058*/ CMP         R3, #0 
    /*0000005c*/ BEQ         G726_encoder_pack_x284
    /*00000060*/ SUB         R3, R4, #16 
    /*00000064*/ MOV         R5, IP 
    /*00000068*/ UBFX        R3, R3, #4, #12 
    /*0000006c*/ MOV         R2, R0 
    /*00000070*/ ADD         R3, R3, #1 
    /*00000074*/ MOV         R6, #0 
    /*00000078*/ LSL         IP, R3, #4 
    /*0000007c*/ UXTH        IP, IP 
    G726_encoder_pack_x80:
    /*00000080*/ ADD         R7, R2, #32 
    /*00000084*/ ADD         R9, R2, #16 
    /*00000088*/ ADD         R8, R2, #48                 @ 0x30 
    /*0000008c*/ ADD         R6, R6, #1 
    /*00000090*/ VLD1.8      {D26-D27}, [R7] 
    /*00000094*/ ADD         R7, R2, #64                 @ 0x40 
    /*00000098*/ VLD1.8      {D28-D29}, [R9] 
    /*0000009c*/ VLD1.8      {D18-D19}, [R8] 
    /*000000a0*/ VLD1.8      {D16-D17}, [R7] 
    /*000000a4*/ ADD         R8, R2, #96                 @ 0x60 
    /*000000a8*/ ADD         R7, R2, #112                @ 0x70 
    /*000000ac*/ ADD         R9, R2, #80                 @ 0x50 
    /*000000b0*/ VLD1.8      {D22-D23}, [R2] 
    /*000000b4*/ VLD1.8      {D30-D31}, [R8] 
    /*000000b8*/ VLD1.8      {D20-D21}, [R7] 
    /*000000bc*/ VLD1.8      {D24-D25}, [R9] 
    /*000000c0*/ VUZP.8      Q11, Q14 
    /*000000c4*/ VUZP.8      Q13, Q9 
    /*000000c8*/ VUZP.8      Q8, Q12 
    /*000000cc*/ VUZP.8      Q15, Q10 
    /*000000d0*/ VUZP.8      Q11, Q13 
    /*000000d4*/ VUZP.8      Q14, Q9 
    /*000000d8*/ VUZP.8      Q8, Q15 
    /*000000dc*/ VUZP.8      Q12, Q10 
    /*000000e0*/ VUZP.8      Q11, Q8 
    /*000000e4*/ VUZP.8      Q9, Q10 
    /*000000e8*/ VUZP.8      Q14, Q12 
    /*000000ec*/ VSHLL.U8    Q2, D16, #6 
    /*000000f0*/ VORR        Q3, Q12, Q12 
    /*000000f4*/ VSHLL.U8    Q8, D17, #6 
    /*000000f8*/ VSHLL.I8    Q12, D18, #8 
    /*000000fc*/ VSHLL.I8    Q9, D19, #8 
    /*00000100*/ VUZP.8      Q13, Q15 
    /*00000104*/ VORR        Q12, Q12, Q2 
    /*00000108*/ VORR        Q8, Q9, Q8 
    /*0000010c*/ VSHLL.U8    Q2, D7, #4 
    /*00000110*/ VSHLL.U8    Q9, D6, #4 
    /*00000114*/ VMOVL.U8    Q3, D22 
    /*00000118*/ VORR        Q9, Q12, Q9 
    /*0000011c*/ VMOVL.U8    Q11, D23 
    /*00000120*/ VSHLL.U8    Q12, D30, #2 
    /*00000124*/ VORR        Q8, Q8, Q2 
    /*00000128*/ VSHLL.U8    Q15, D31, #2 
    /*0000012c*/ VMOVL.U16   Q0, D6 
    /*00000130*/ VMOVL.U16   Q3, D7 
    /*00000134*/ VMOVL.U8    Q2, D20 
    /*00000138*/ VORR        Q9, Q9, Q12 
    /*0000013c*/ VORR        Q8, Q8, Q15 
    /*00000140*/ VMOVL.U8    Q12, D28 
    /*00000144*/ VMOVL.U8    Q10, D21 
    /*00000148*/ VMOVL.U8    Q14, D29 
    /*0000014c*/ VMOVL.U16   Q1, D22 
    /*00000150*/ VSHL.S32    Q0, Q0, #14 
    /*00000154*/ VMOVL.U16   Q11, D23 
    /*00000158*/ VSHL.S32    Q3, Q3, #14 
    /*0000015c*/ VSHL.S32    Q15, Q11, #14 
    /*00000160*/ VSHL.S32    Q1, Q1, #14 
    /*00000164*/ VMOVL.U8    Q11, D26 
    /*00000168*/ VORR        Q9, Q9, Q2 
    /*0000016c*/ VORR        Q8, Q8, Q10 
    /*00000170*/ VMOVL.U16   Q2, D24 
    /*00000174*/ VMOVL.U8    Q10, D27 
    /*00000178*/ VMOVL.U16   Q12, D25 
    /*0000017c*/ VMOVN.I32   D26, Q0 
    /*00000180*/ VMOVN.I32   D27, Q3 
    /*00000184*/ UXTH        R8, R6 
    /*00000188*/ VMOVL.U16   Q3, D28 
    /*0000018c*/ VMOVL.U16   Q14, D29 
    /*00000190*/ VMOVN.I32   D0, Q1 
    /*00000194*/ VMOVN.I32   D1, Q15 
    /*00000198*/ ADD         R7, R5, #16 
    /*0000019c*/ VSHL.S32    Q2, Q2, #12 
    /*000001a0*/ VSHL.S32    Q12, Q12, #12 
    /*000001a4*/ VORR        Q9, Q9, Q13 
    /*000001a8*/ VMOVL.U16   Q15, D22 
    /*000001ac*/ VMOVL.U16   Q13, D20 
    /*000001b0*/ VSHL.S32    Q3, Q3, #12 
    /*000001b4*/ VSHL.S32    Q14, Q14, #12 
    /*000001b8*/ VMOVL.U16   Q11, D23 
    /*000001bc*/ VMOVL.U16   Q10, D21 
    /*000001c0*/ VORR        Q8, Q8, Q0 
    /*000001c4*/ VMOVN.I32   D2, Q2 
    /*000001c8*/ VMOVN.I32   D3, Q12 
    /*000001cc*/ ADD         R2, R2, #128                @ 0x80 
    /*000001d0*/ VSHL.S32    Q11, Q11, #10 
    /*000001d4*/ VSHL.S32    Q12, Q13, #10 
    /*000001d8*/ VSHL.S32    Q15, Q15, #10 
    /*000001dc*/ VMOVN.I32   D4, Q3 
    /*000001e0*/ VMOVN.I32   D5, Q14 
    /*000001e4*/ VSHL.S32    Q10, Q10, #10 
    /*000001e8*/ VORR        Q9, Q9, Q1 
    /*000001ec*/ VORR        Q8, Q8, Q2 
    /*000001f0*/ VMOVN.I32   D26, Q15 
    /*000001f4*/ VMOVN.I32   D27, Q11 
    /*000001f8*/ VMOVN.I32   D22, Q12 
    /*000001fc*/ VMOVN.I32   D23, Q10 
    /*00000200*/ VORR        Q9, Q9, Q13 
    /*00000204*/ VORR        Q8, Q8, Q11 
    /*00000208*/ CMP         R8, R3 
    /*0000020c*/ VST1.16     {D18-D19}, [R5] 
    /*00000210*/ VST1.16     {D16-D17}, [R7] 
    /*00000214*/ ADD         R5, R5, #32 
    /*00000218*/ BCC         G726_encoder_pack_x80
    /*0000021c*/ CMP         IP, R4 
    /*00000220*/ SXTH        IP, IP 
    /*00000224*/ BEQ         G726_encoder_pack_x2ec
    G726_encoder_pack_x228:
    /*00000228*/ ADD         R2, R0, IP, LSL #3 
    /*0000022c*/ ADD         R5, IP, #1 
    /*00000230*/ LDRB        R4, [R0, IP, LSL #3] 
    /*00000234*/ LDRB        R3, [R2, #7] 
    /*00000238*/ LDRB        R6, [R2, #1] 
    /*0000023c*/ ORR         R3, R3, R4, LSL #14 
    /*00000240*/ LDRB        R4, [R2, #2] 
    /*00000244*/ ORR         R3, R3, R6, LSL #12 
    /*00000248*/ LDRB        R6, [R2, #3] 
    /*0000024c*/ ORR         R3, R3, R4, LSL #10 
    /*00000250*/ LDRB        R4, [R2, #4] 
    /*00000254*/ ORR         R3, R3, R6, LSL #8 
    /*00000258*/ LDRB        R6, [R2, #5] 
    /*0000025c*/ ORR         R3, R3, R4, LSL #6 
    /*00000260*/ LDRB        R4, [R2, #6] 
    /*00000264*/ ADD         R2, R1, IP, LSL #1 
    /*00000268*/ SXTH        IP, R5 
    /*0000026c*/ ORR         R3, R3, R6, LSL #4 
    /*00000270*/ CMP         LR, IP 
    /*00000274*/ ORR         R3, R3, R4, LSL #2 
    /*00000278*/ STRH        R3, [R2, #4] 
    /*0000027c*/ BGT         G726_encoder_pack_x228
    /*00000280*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    G726_encoder_pack_x284:
    /*00000284*/ SUB         IP, R4, #1 
    /*00000288*/ ADD         R1, R1, #2 
    /*0000028c*/ UXTH        IP, IP 
    /*00000290*/ ADD         IP, IP, #1 
    /*00000294*/ ADD         IP, R0, IP, LSL #3 
    G726_encoder_pack_x298:
    /*00000298*/ LDRB        R2, [R0] 
    /*0000029c*/ ADD         R0, R0, #8 
    /*000002a0*/ LDRB        LR, [R0, #-7] 
    /*000002a4*/ LDRB        R3, [R0, #-1] 
    /*000002a8*/ LSL         R2, R2, #14 
    /*000002ac*/ LDRB        R4, [R0, #-6] 
    /*000002b0*/ ORR         R2, R2, LR, LSL #12 
    /*000002b4*/ ORR         R3, R3, R2 
    /*000002b8*/ LDRB        LR, [R0, #-5] 
    /*000002bc*/ LDRB        R2, [R0, #-4] 
    /*000002c0*/ ORR         R3, R3, R4, LSL #10 
    /*000002c4*/ ORR         R3, R3, LR, LSL #8 
    /*000002c8*/ LDRB        LR, [R0, #-3] 
    /*000002cc*/ ORR         R3, R3, R2, LSL #6 
    /*000002d0*/ LDRB        R2, [R0, #-2] 
    /*000002d4*/ ORR         R3, R3, LR, LSL #4 
    /*000002d8*/ CMP         IP, R0 
    /*000002dc*/ ORR         R3, R3, R2, LSL #2 
    /*000002e0*/ STRH        R3, [R1, #2]! 
    /*000002e4*/ BNE         G726_encoder_pack_x298
    /*000002e8*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    G726_encoder_pack_x2ec:
    /*000002ec*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
FUNC_END G726_encoder_pack


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_decoder_unpack
@ Size: 0xa0
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_decoder_unpack
    /*00000000*/ LDRB        R3, [R0, #2] 
    /*00000004*/ CMP         R3, #0 
    /*00000008*/ BXEQ        LR 
    /*0000000c*/ PUSH        {R4, LR} 
    /*00000010*/ MOV         R4, #0 
    /*00000014*/ MOV         IP, R4 
    G726_decoder_unpack_x18:
    /*00000018*/ ADD         R2, R1, R4, LSL #3 
    /*0000001c*/ ADD         R3, IP, #2 
    /*00000020*/ ADD         IP, IP, #1 
    /*00000024*/ LSL         R3, R3, #1 
    /*00000028*/ SXTH        IP, IP 
    /*0000002c*/ LDRH        LR, [R0, R3] 
    /*00000030*/ LSR         LR, LR, #14 
    /*00000034*/ STRB        LR, [R1, R4, LSL #3] 
    /*00000038*/ MOV         R4, IP 
    /*0000003c*/ LDRH        LR, [R0, R3] 
    /*00000040*/ UBFX        LR, LR, #12, #2 
    /*00000044*/ STRB        LR, [R2, #1] 
    /*00000048*/ LDRH        LR, [R0, R3] 
    /*0000004c*/ UBFX        LR, LR, #10, #2 
    /*00000050*/ STRB        LR, [R2, #2] 
    /*00000054*/ LDRH        LR, [R0, R3] 
    /*00000058*/ UBFX        LR, LR, #8, #2 
    /*0000005c*/ STRB        LR, [R2, #3] 
    /*00000060*/ LDRH        LR, [R0, R3] 
    /*00000064*/ UBFX        LR, LR, #6, #2 
    /*00000068*/ STRB        LR, [R2, #4] 
    /*0000006c*/ LDRH        LR, [R0, R3] 
    /*00000070*/ UBFX        LR, LR, #4, #2 
    /*00000074*/ STRB        LR, [R2, #5] 
    /*00000078*/ LDRH        LR, [R0, R3] 
    /*0000007c*/ UBFX        LR, LR, #2, #2 
    /*00000080*/ STRB        LR, [R2, #6] 
    /*00000084*/ LDRH        R3, [R0, R3] 
    /*00000088*/ AND         R3, R3, #3 
    /*0000008c*/ STRB        R3, [R2, #7] 
    /*00000090*/ LDRB        R3, [R0, #2] 
    /*00000094*/ CMP         IP, R3 
    /*00000098*/ BLT         G726_decoder_unpack_x18
    /*0000009c*/ POP         {R4, PC} 
FUNC_END G726_decoder_unpack


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_encode
@ Size: 0x88
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_encode
    /*00000000*/ LDR         IP, WORD_0080               @ LDR         IP, [PC, #120]              @ 0x0000000000000080 
    /*00000004*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000008*/ MOV         R9, R1 
    /*0000000c*/ ADD         IP, PC, IP 
    /*00000010*/ SUB         SP, SP, #492                @ 0x1ec 
    /*00000014*/ LDR         LR, WORD_0084               @ LDR         LR, [PC, #104]              @ 0x0000000000000084 
    /*00000018*/ MOV         R6, R3 
    /*0000001c*/ MOV         R7, R0 
    /*00000020*/ MOV         R8, R2 
    /*00000024*/ LDR         R5, [IP, LR] 
    /*00000028*/ MOVW        R2, #481                    @ 0x1e1 
    /*0000002c*/ MOV         R0, SP 
    /*00000030*/ LDR         R1, [R5] 
    /*00000034*/ STR         R1, [SP, #484]              @ 0x1e4 
    /*00000038*/ MOV         R1, #0 
    /*0000003c*/ BL          memset
    /*00000040*/ MOV         R3, R7 
    /*00000044*/ MOV         R2, R6 
    /*00000048*/ MOV         R1, SP 
    /*0000004c*/ MOV         R0, R9 
    /*00000050*/ BL          G726_encode_core
    /*00000054*/ MOV         R2, R6 
    /*00000058*/ MOV         R1, R8 
    /*0000005c*/ MOV         R0, SP 
    /*00000060*/ BL          G726_encoder_pack
    /*00000064*/ LDR         R2, [SP, #484]              @ 0x1e4 
    /*00000068*/ LDR         R3, [R5] 
    /*0000006c*/ CMP         R2, R3 
    /*00000070*/ BNE         G726_encode_x7c
    /*00000074*/ ADD         SP, SP, #492                @ 0x1ec 
    /*00000078*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    G726_encode_x7c:
    /*0000007c*/ BL          __stack_chk_fail
    /*00000080*/ WORD_0080: .word 0x0000006c
    /*00000084*/ WORD_0084: .word 0x00000000
FUNC_END G726_encode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726_decode
@ Size: 0x88
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726_decode
    /*00000000*/ LDR         IP, WORD_0080               @ LDR         IP, [PC, #120]              @ 0x0000000000000080 
    /*00000004*/ LDR         R3, WORD_0084               @ LDR         R3, [PC, #120]              @ 0x0000000000000084 
    /*00000008*/ ADD         IP, PC, IP 
    /*0000000c*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000010*/ MOV         R7, R1 
    /*00000014*/ LDR         R6, [IP, R3] 
    /*00000018*/ SUB         SP, SP, #492                @ 0x1ec 
    /*0000001c*/ MOV         R9, R0 
    /*00000020*/ MOV         R8, R2 
    /*00000024*/ LDR         R3, [R6] 
    /*00000028*/ MOVW        R2, #481                    @ 0x1e1 
    /*0000002c*/ MOV         R1, #0 
    /*00000030*/ MOV         R0, SP 
    /*00000034*/ STR         R3, [SP, #484]              @ 0x1e4 
    /*00000038*/ BL          memset
    /*0000003c*/ LDRB        R5, [R7, #2] 
    /*00000040*/ MOV         R0, R7 
    /*00000044*/ MOV         R1, SP 
    /*00000048*/ LSL         R5, R5, #3 
    /*0000004c*/ BL          G726_decoder_unpack
    /*00000050*/ MOV         R3, R9 
    /*00000054*/ MOV         R2, R5 
    /*00000058*/ MOV         R1, R8 
    /*0000005c*/ MOV         R0, SP 
    /*00000060*/ BL          G726_decode_core
    /*00000064*/ LDR         R2, [SP, #484]              @ 0x1e4 
    /*00000068*/ LDR         R3, [R6] 
    /*0000006c*/ CMP         R2, R3 
    /*00000070*/ BNE         G726_decode_x7c
    /*00000074*/ ADD         SP, SP, #492                @ 0x1ec 
    /*00000078*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    G726_decode_x7c:
    /*0000007c*/ BL          __stack_chk_fail
    /*00000080*/ WORD_0080: .word 0x00000070
    /*00000084*/ WORD_0084: .word 0x00000000
FUNC_END G726_decode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.QuantizerScaleFactorAdaptation2
@ Size: 0x88
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN QuantizerScaleFactorAdaptation2
    /*00000000*/ LDR         R3, [R0, #8] 
    /*00000004*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00000008*/ SUB         IP, R3, #1 
    /*0000000c*/ MOV         LR, #1 
    /*00000010*/ SUB         R3, R3, #2 
    /*00000014*/ ANDS        LR, R1, LR, LSL IP 
    /*00000018*/ MVNNE       R1, R1 
    /*0000001c*/ MOVNE       LR, #2 
    /*00000020*/ ADDNE       R1, R1, LR, LSL IP 
    /*00000024*/ LDR         IP, WORD_0084               @ LDR         IP, [PC, #88]               @ 0x0000000000000084 
    /*00000028*/ LSL         R1, R1, #1 
    /*0000002c*/ ADD         IP, PC, IP 
    /*00000030*/ LDR         R3, [IP, R3, LSL #2] 
    /*00000034*/ LDRSH       R3, [R3, R1] 
    /*00000038*/ RSB         R3, R2, R3, LSL #5 
    /*0000003c*/ ADD         R2, R2, R3, ASR #5 
    /*00000040*/ ADD         R3, R2, #15808              @ 0x3dc0 
    /*00000044*/ ADD         R3, R3, #32 
    /*00000048*/ TST         R3, #8192                   @ 0x2000 
    /*0000004c*/ MOVNE       R1, #34816                  @ 0x8800 
    /*00000050*/ MOVNE       R2, #544                    @ 0x220 
    /*00000054*/ BNE         QuantizerScaleFactorAdaptation2_x6c
    /*00000058*/ ADD         R3, R2, #11264              @ 0x2c00 
    /*0000005c*/ TST         R3, #8192                   @ 0x2000 
    /*00000060*/ LSLNE       R1, R2, #6 
    /*00000064*/ MOVEQ       R1, #327680                 @ 0x50000 
    /*00000068*/ MOVEQ       R2, #5120                   @ 0x1400 
    QuantizerScaleFactorAdaptation2_x6c:
    /*0000006c*/ LDR         R3, [R0, #100]              @ 0x64 
    /*00000070*/ STR         R2, [R0, #104]              @ 0x68 
    /*00000074*/ SUB         R2, R1, R3 
    /*00000078*/ ADD         R3, R3, R2, ASR #6 
    /*0000007c*/ STR         R3, [R0, #100]              @ 0x64 
    /*00000080*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    /*00000084*/ WORD_0084: .word 0x00000050
FUNC_END QuantizerScaleFactorAdaptation2


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.AdaptationSpeedControl2
@ Size: 0xb4
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN AdaptationSpeedControl2
    /*00000000*/ PUSH        {R4, R5, LR} 
    /*00000004*/ MOV         IP, #1 
    /*00000008*/ LDR         LR, [R0, #8] 
    /*0000000c*/ LDR         R4, [SP, #12] 
    /*00000010*/ SUB         R5, LR, #1 
    /*00000014*/ SUB         LR, LR, #2 
    /*00000018*/ LSL         IP, IP, R5 
    /*0000001c*/ TST         IP, R1 
    /*00000020*/ SUB         IP, IP, #1 
    /*00000024*/ LDR         R5, WORD_00b0               @ LDR         R5, [PC, #132]              @ 0x00000000000000b0 
    /*00000028*/ MVNNE       R1, R1 
    /*0000002c*/ CMP         R4, #0 
    /*00000030*/ ADD         R5, PC, R5 
    /*00000034*/ AND         R1, R1, IP 
    /*00000038*/ LDR         IP, [R0, #52]               @ 0x34 
    /*0000003c*/ LDR         R4, [R5, LR, LSL #2] 
    /*00000040*/ LSL         R1, R1, #1 
    /*00000044*/ LDR         LR, [R0, #48]               @ 0x30 
    /*00000048*/ LDRSH       R1, [R4, R1] 
    /*0000004c*/ RSB         R4, IP, R1, LSL #9 
    /*00000050*/ RSB         R1, LR, R1, LSL #11 
    /*00000054*/ ADD         IP, IP, R4, ASR #5 
    /*00000058*/ ADD         LR, LR, R1, ASR #7 
    /*0000005c*/ STR         IP, [R0, #52]               @ 0x34 
    /*00000060*/ STR         LR, [R0, #48]               @ 0x30 
    /*00000064*/ BNE         AdaptationSpeedControl2_xa4
    /*00000068*/ CMP         R2, #1536                   @ 0x600 
    /*0000006c*/ BCS         AdaptationSpeedControl2_x88
    AdaptationSpeedControl2_x70:
    /*00000070*/ MOV         R3, #512                    @ 0x200 
    AdaptationSpeedControl2_x74:
    /*00000074*/ LDR         R2, [R0, #20] 
    /*00000078*/ SUB         R3, R3, R2 
    /*0000007c*/ ADD         R3, R2, R3, ASR #4 
    /*00000080*/ STR         R3, [R0, #20] 
    /*00000084*/ POP         {R4, R5, PC} 
    AdaptationSpeedControl2_x88:
    /*00000088*/ RSB         IP, LR, IP, LSL #2 
    /*0000008c*/ CMP         IP, #0 
    /*00000090*/ RSBLT       IP, IP, #0 
    /*00000094*/ CMP         IP, LR, ASR #3 
    /*00000098*/ LSLLT       R3, R3, #9 
    /*0000009c*/ BLT         AdaptationSpeedControl2_x74
    /*000000a0*/ B           AdaptationSpeedControl2_x70
    AdaptationSpeedControl2_xa4:
    /*000000a4*/ MOV         R3, #256                    @ 0x100 
    /*000000a8*/ STR         R3, [R0, #20] 
    /*000000ac*/ POP         {R4, R5, PC} 
    /*000000b0*/ WORD_00b0: .word 0x00000078
FUNC_END AdaptationSpeedControl2


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.AdaptativePredictorAndReconstructedSignalCalculator1
@ Size: 0x374
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN AdaptativePredictorAndReconstructedSignalCalculator1
    /*00000000*/ LDR         R3, [R0, #24] 
    /*00000004*/ PUSH        {R4, R5, R6, R7, LR} 
    /*00000008*/ LSRS        R4, R3, #31 
    /*0000000c*/ ASR         R3, R3, #2 
    /*00000010*/ LDR         R5, [R0, #56]               @ 0x38 
    /*00000014*/ RSBNE       R3, R3, #0 
    /*00000018*/ CLZ         IP, R3 
    /*0000001c*/ RSBS        LR, IP, #32 
    /*00000020*/ AND         R6, R5, #63                 @ 0x3f 
    /*00000024*/ LSLNE       R3, R3, #6 
    /*00000028*/ MOVEQ       IP, #32 
    /*0000002c*/ LSRNE       IP, R3, LR 
    /*00000030*/ MUL         IP, IP, R6 
    /*00000034*/ UBFX        R3, R5, #6, #4 
    /*00000038*/ ADD         R3, R3, LR 
    /*0000003c*/ ADD         IP, IP, #48                 @ 0x30 
    /*00000040*/ LSR         R5, R5, #10 
    /*00000044*/ CMP         R3, #26 
    /*00000048*/ LSR         IP, IP, #4 
    /*0000004c*/ SUBHI       R3, R3, #19 
    /*00000050*/ RSBLS       R3, R3, #26 
    /*00000054*/ LSLLS       IP, IP, #7 
    /*00000058*/ LSLHI       IP, IP, R3 
    /*0000005c*/ UBFXHI      LR, IP, #0, #15 
    /*00000060*/ LSRLS       LR, IP, R3 
    /*00000064*/ LDR         IP, [R0, #28] 
    /*00000068*/ CMP         R5, R4 
    /*0000006c*/ RSBNE       LR, LR, #0 
    /*00000070*/ LSRS        R4, IP, #31 
    /*00000074*/ ASR         IP, IP, #2 
    /*00000078*/ LDR         R5, [R0, #60]               @ 0x3c 
    /*0000007c*/ RSBNE       IP, IP, #0 
    /*00000080*/ CLZ         R3, IP 
    /*00000084*/ RSBS        R6, R3, #32 
    /*00000088*/ AND         R7, R5, #63                 @ 0x3f 
    /*0000008c*/ LSLNE       IP, IP, #6 
    /*00000090*/ MOVEQ       IP, #32 
    /*00000094*/ UBFX        R3, R5, #6, #4 
    /*00000098*/ LSRNE       IP, IP, R6 
    /*0000009c*/ MUL         IP, IP, R7 
    /*000000a0*/ ADD         R3, R3, R6 
    /*000000a4*/ ADD         IP, IP, #48                 @ 0x30 
    /*000000a8*/ CMP         R3, #26 
    /*000000ac*/ SUBHI       R3, R3, #19 
    /*000000b0*/ RSBLS       R3, R3, #26 
    /*000000b4*/ LSR         IP, IP, #4 
    /*000000b8*/ LSR         R5, R5, #10 
    /*000000bc*/ LSLLS       IP, IP, #7 
    /*000000c0*/ LSLHI       IP, IP, R3 
    /*000000c4*/ UBFXHI      R3, IP, #0, #15 
    /*000000c8*/ LSRLS       R3, IP, R3 
    /*000000cc*/ LDR         IP, [R0, #32] 
    /*000000d0*/ CMP         R4, R5 
    /*000000d4*/ RSBNE       R3, R3, #0 
    /*000000d8*/ LSRS        R4, IP, #31 
    /*000000dc*/ ASR         IP, IP, #2 
    /*000000e0*/ ADD         R3, LR, R3 
    /*000000e4*/ LDR         R5, [R0, #64]               @ 0x40 
    /*000000e8*/ RSBNE       IP, IP, #0 
    /*000000ec*/ CLZ         LR, IP 
    /*000000f0*/ RSBS        R6, LR, #32 
    /*000000f4*/ AND         R7, R5, #63                 @ 0x3f 
    /*000000f8*/ LSLNE       IP, IP, #6 
    /*000000fc*/ MOVEQ       IP, #32 
    /*00000100*/ UBFX        LR, R5, #6, #4 
    /*00000104*/ LSRNE       IP, IP, R6 
    /*00000108*/ MUL         IP, IP, R7 
    /*0000010c*/ ADD         LR, LR, R6 
    /*00000110*/ ADD         IP, IP, #48                 @ 0x30 
    /*00000114*/ CMP         LR, #26 
    /*00000118*/ SUBHI       LR, LR, #19 
    /*0000011c*/ RSBLS       LR, LR, #26 
    /*00000120*/ LSR         IP, IP, #4 
    /*00000124*/ LSR         R5, R5, #10 
    /*00000128*/ LSLLS       IP, IP, #7 
    /*0000012c*/ LSLHI       IP, IP, LR 
    /*00000130*/ UBFXHI      LR, IP, #0, #15 
    /*00000134*/ LSRLS       LR, IP, LR 
    /*00000138*/ LDR         IP, [R0, #36]               @ 0x24 
    /*0000013c*/ CMP         R4, R5 
    /*00000140*/ RSBNE       LR, LR, #0 
    /*00000144*/ LSRS        R4, IP, #31 
    /*00000148*/ ASR         IP, IP, #2 
    /*0000014c*/ ADD         R3, R3, LR 
    /*00000150*/ LDR         R5, [R0, #68]               @ 0x44 
    /*00000154*/ RSBNE       IP, IP, #0 
    /*00000158*/ CLZ         LR, IP 
    /*0000015c*/ RSBS        R6, LR, #32 
    /*00000160*/ AND         R7, R5, #63                 @ 0x3f 
    /*00000164*/ LSLNE       IP, IP, #6 
    /*00000168*/ MOVEQ       IP, #32 
    /*0000016c*/ UBFX        LR, R5, #6, #4 
    /*00000170*/ LSRNE       IP, IP, R6 
    /*00000174*/ MUL         IP, IP, R7 
    /*00000178*/ ADD         LR, LR, R6 
    /*0000017c*/ ADD         IP, IP, #48                 @ 0x30 
    /*00000180*/ CMP         LR, #26 
    /*00000184*/ SUBHI       LR, LR, #19 
    /*00000188*/ RSBLS       LR, LR, #26 
    /*0000018c*/ LSR         IP, IP, #4 
    /*00000190*/ LSR         R5, R5, #10 
    /*00000194*/ LSLLS       IP, IP, #7 
    /*00000198*/ LSLHI       IP, IP, LR 
    /*0000019c*/ UBFXHI      LR, IP, #0, #15 
    /*000001a0*/ LSRLS       LR, IP, LR 
    /*000001a4*/ LDR         IP, [R0, #40]               @ 0x28 
    /*000001a8*/ CMP         R4, R5 
    /*000001ac*/ RSBNE       LR, LR, #0 
    /*000001b0*/ LSRS        R4, IP, #31 
    /*000001b4*/ ASR         IP, IP, #2 
    /*000001b8*/ ADD         R3, R3, LR 
    /*000001bc*/ LDR         R5, [R0, #72]               @ 0x48 
    /*000001c0*/ RSBNE       IP, IP, #0 
    /*000001c4*/ CLZ         LR, IP 
    /*000001c8*/ RSBS        R6, LR, #32 
    /*000001cc*/ AND         R7, R5, #63                 @ 0x3f 
    /*000001d0*/ LSLNE       IP, IP, #6 
    /*000001d4*/ MOVEQ       IP, #32 
    /*000001d8*/ UBFX        LR, R5, #6, #4 
    /*000001dc*/ LSRNE       IP, IP, R6 
    /*000001e0*/ MUL         IP, IP, R7 
    /*000001e4*/ ADD         LR, LR, R6 
    /*000001e8*/ ADD         IP, IP, #48                 @ 0x30 
    /*000001ec*/ CMP         LR, #26 
    /*000001f0*/ SUBHI       LR, LR, #19 
    /*000001f4*/ RSBLS       LR, LR, #26 
    /*000001f8*/ LSR         IP, IP, #4 
    /*000001fc*/ LSR         R5, R5, #10 
    /*00000200*/ LSLLS       IP, IP, #7 
    /*00000204*/ LSLHI       IP, IP, LR 
    /*00000208*/ UBFXHI      LR, IP, #0, #15 
    /*0000020c*/ LSRLS       LR, IP, LR 
    /*00000210*/ LDR         IP, [R0, #44]               @ 0x2c 
    /*00000214*/ CMP         R4, R5 
    /*00000218*/ RSBNE       LR, LR, #0 
    /*0000021c*/ LSRS        R4, IP, #31 
    /*00000220*/ ASR         IP, IP, #2 
    /*00000224*/ ADD         R3, R3, LR 
    /*00000228*/ LDR         R5, [R0, #76]               @ 0x4c 
    /*0000022c*/ RSBNE       IP, IP, #0 
    /*00000230*/ CLZ         LR, IP 
    /*00000234*/ RSBS        R6, LR, #32 
    /*00000238*/ AND         R7, R5, #63                 @ 0x3f 
    /*0000023c*/ LSLNE       IP, IP, #6 
    /*00000240*/ MOVEQ       LR, #32 
    /*00000244*/ LSRNE       LR, IP, R6 
    /*00000248*/ MUL         LR, LR, R7 
    /*0000024c*/ UBFX        IP, R5, #6, #4 
    /*00000250*/ ADD         IP, IP, R6 
    /*00000254*/ ADD         LR, LR, #48                 @ 0x30 
    /*00000258*/ LSR         R5, R5, #10 
    /*0000025c*/ CMP         IP, #26 
    /*00000260*/ LSR         LR, LR, #4 
    /*00000264*/ SUBHI       IP, IP, #19 
    /*00000268*/ RSBLS       IP, IP, #26 
    /*0000026c*/ LSLLS       LR, LR, #7 
    /*00000270*/ LSLHI       LR, LR, IP 
    /*00000274*/ LSRLS       IP, LR, IP 
    /*00000278*/ UBFXHI      IP, LR, #0, #15 
    /*0000027c*/ CMP         R4, R5 
    /*00000280*/ RSBNE       IP, IP, #0 
    /*00000284*/ ADD         R3, IP, R3 
    /*00000288*/ ASR         IP, R3, #1 
    /*0000028c*/ STR         IP, [R2] 
    /*00000290*/ LDR         R2, [R0, #12] 
    /*00000294*/ LDR         R4, [R0, #88]               @ 0x58 
    /*00000298*/ LSRS        LR, R2, #31 
    /*0000029c*/ ASR         R2, R2, #2 
    /*000002a0*/ RSBNE       R2, R2, #0 
    /*000002a4*/ CLZ         IP, R2 
    /*000002a8*/ RSBS        R5, IP, #32 
    /*000002ac*/ AND         R6, R4, #63                 @ 0x3f 
    /*000002b0*/ LSLNE       IP, R2, #6 
    /*000002b4*/ MOVEQ       IP, #32 
    /*000002b8*/ UBFX        R2, R4, #6, #4 
    /*000002bc*/ LSRNE       IP, IP, R5 
    /*000002c0*/ MUL         IP, IP, R6 
    /*000002c4*/ ADD         R2, R2, R5 
    /*000002c8*/ ADD         IP, IP, #48                 @ 0x30 
    /*000002cc*/ CMP         R2, #26 
    /*000002d0*/ SUBHI       R2, R2, #19 
    /*000002d4*/ RSBLS       R2, R2, #26 
    /*000002d8*/ LSR         IP, IP, #4 
    /*000002dc*/ LSR         R4, R4, #10 
    /*000002e0*/ LSLLS       IP, IP, #7 
    /*000002e4*/ LSLHI       IP, IP, R2 
    /*000002e8*/ LSRLS       IP, IP, R2 
    /*000002ec*/ UBFXHI      IP, IP, #0, #15 
    /*000002f0*/ LDR         R2, [R0, #16] 
    /*000002f4*/ CMP         LR, R4 
    /*000002f8*/ RSBNE       IP, IP, #0 
    /*000002fc*/ ADD         R3, R3, IP 
    /*00000300*/ LSRS        IP, R2, #31 
    /*00000304*/ ASR         R2, R2, #2 
    /*00000308*/ LDR         LR, [R0, #92]               @ 0x5c 
    /*0000030c*/ RSBNE       R2, R2, #0 
    /*00000310*/ CLZ         R0, R2 
    /*00000314*/ RSBS        R4, R0, #32 
    /*00000318*/ AND         R5, LR, #63                 @ 0x3f 
    /*0000031c*/ LSLNE       R0, R2, #6 
    /*00000320*/ MOVEQ       R0, #32 
    /*00000324*/ UBFX        R2, LR, #6, #4 
    /*00000328*/ LSRNE       R0, R0, R4 
    /*0000032c*/ MUL         R0, R0, R5 
    /*00000330*/ ADD         R2, R2, R4 
    /*00000334*/ ADD         R0, R0, #48                 @ 0x30 
    /*00000338*/ CMP         R2, #26 
    /*0000033c*/ SUBHI       R2, R2, #19 
    /*00000340*/ RSBLS       R2, R2, #26 
    /*00000344*/ LSR         R0, R0, #4 
    /*00000348*/ LSR         LR, LR, #10 
    /*0000034c*/ LSLLS       R0, R0, #7 
    /*00000350*/ LSLHI       R0, R0, R2 
    /*00000354*/ LSRLS       R2, R0, R2 
    /*00000358*/ UBFXHI      R2, R0, #0, #15 
    /*0000035c*/ CMP         IP, LR 
    /*00000360*/ RSBNE       R2, R2, #0 
    /*00000364*/ ADD         R2, R2, R3 
    /*00000368*/ ASR         R2, R2, #1 
    /*0000036c*/ STR         R2, [R1] 
    /*00000370*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END AdaptativePredictorAndReconstructedSignalCalculator1


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.AdaptativePredictorAndReconstructedSignalCalculator2
@ Size: 0x3b8
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN AdaptativePredictorAndReconstructedSignalCalculator2
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00000004*/ TST         R1, #32768                  @ 0x8000 
    /*00000008*/ LDR         R4, [SP, #40]               @ 0x28 
    /*0000000c*/ RSBNE       LR, R1, #32768              @ 0x8000 
    /*00000010*/ LDR         R5, [SP, #36]               @ 0x24 
    /*00000014*/ MOVEQ       LR, R1 
    /*00000018*/ ADD         R3, R3, LR 
    /*0000001c*/ STR         R3, [R4] 
    /*00000020*/ LDR         R3, [R0, #88]               @ 0x58 
    /*00000024*/ ADD         LR, R5, LR 
    /*00000028*/ STR         R3, [R0, #92]               @ 0x5c 
    /*0000002c*/ LDR         R5, [R4] 
    /*00000030*/ LDR         IP, [SP, #44]               @ 0x2c 
    /*00000034*/ UBFX        R6, R5, #15, #1 
    /*00000038*/ ASR         R4, LR, #15 
    /*0000003c*/ CMP         R6, #0 
    /*00000040*/ RSBNE       R5, R5, #0 
    /*00000044*/ CLZ         R3, R5 
    /*00000048*/ RSBS        R3, R3, #32 
    /*0000004c*/ LSLNE       R5, R5, #6 
    /*00000050*/ MOVEQ       R5, #32 
    /*00000054*/ LSRNE       R5, R5, R3 
    /*00000058*/ LSL         R3, R3, #6 
    /*0000005c*/ ADD         R3, R3, R6, LSL #10 
    /*00000060*/ ADD         R3, R3, R5 
    /*00000064*/ STR         R3, [R0, #88]               @ 0x58 
    /*00000068*/ LSR         R6, R1, #15 
    /*0000006c*/ UBFX        R5, R1, #0, #15 
    /*00000070*/ CLZ         R3, R5 
    /*00000074*/ RSBS        R3, R3, #32 
    /*00000078*/ LSLNE       R5, R5, #6 
    /*0000007c*/ MOVEQ       R5, #32 
    /*00000080*/ LSRNE       R5, R5, R3 
    /*00000084*/ CMP         R2, #0 
    /*00000088*/ LSL         R3, R3, #6 
    /*0000008c*/ ADD         R3, R3, R6, LSL #10 
    /*00000090*/ ADD         R3, R3, R5 
    /*00000094*/ BEQ         AdaptativePredictorAndReconstructedSignalCalculator2_x108
    /*00000098*/ VMOV.I32    D16, #0                     @ 0x00000000 
    /*0000009c*/ ADD         R2, R0, #12 
    /*000000a0*/ ADD         R6, R0, #24 
    /*000000a4*/ ADD         R5, R0, #32 
    /*000000a8*/ ADD         R1, R0, #40                 @ 0x28 
    /*000000ac*/ VST1.32     {D16}, [R6] 
    /*000000b0*/ VST1.32     {D16}, [R5] 
    /*000000b4*/ VST1.32     {D16}, [R1] 
    /*000000b8*/ VST1.32     {D16}, [R2] 
    /*000000bc*/ CMP         LR, #0 
    /*000000c0*/ LDR         R2, [R0, #84]               @ 0x54 
    /*000000c4*/ BNE         AdaptativePredictorAndReconstructedSignalCalculator2_x304
    AdaptativePredictorAndReconstructedSignalCalculator2_xc8:
    /*000000c8*/ STR         LR, [IP] 
    /*000000cc*/ LDR         R1, [R0, #80]               @ 0x50 
    AdaptativePredictorAndReconstructedSignalCalculator2_xd0:
    /*000000d0*/ LDR         R6, [R0, #72]               @ 0x48 
    /*000000d4*/ LDR         R5, [R0, #68]               @ 0x44 
    /*000000d8*/ LDR         LR, [R0, #64]               @ 0x40 
    /*000000dc*/ LDR         IP, [R0, #60]               @ 0x3c 
    /*000000e0*/ LDR         R2, [R0, #56]               @ 0x38 
    /*000000e4*/ STR         R1, [R0, #84]               @ 0x54 
    /*000000e8*/ STR         R4, [R0, #80]               @ 0x50 
    /*000000ec*/ STR         R6, [R0, #76]               @ 0x4c 
    /*000000f0*/ STR         R5, [R0, #72]               @ 0x48 
    /*000000f4*/ STR         LR, [R0, #68]               @ 0x44 
    /*000000f8*/ STR         IP, [R0, #64]               @ 0x40 
    /*000000fc*/ STR         R2, [R0, #60]               @ 0x3c 
    /*00000100*/ STR         R3, [R0, #56]               @ 0x38 
    /*00000104*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    AdaptativePredictorAndReconstructedSignalCalculator2_x108:
    /*00000108*/ LSLS        R2, R1, #17 
    /*0000010c*/ LDR         R2, [R0, #8] 
    /*00000110*/ BEQ         AdaptativePredictorAndReconstructedSignalCalculator2_x244
    /*00000114*/ CMP         R2, #5 
    /*00000118*/ BEQ         AdaptativePredictorAndReconstructedSignalCalculator2_x314
    /*0000011c*/ LDR         R1, [R0, #56]               @ 0x38 
    /*00000120*/ LDR         R2, [R0, #60]               @ 0x3c 
    /*00000124*/ CMP         R6, R1, LSR #10 
    /*00000128*/ LDR         R1, [R0, #64]               @ 0x40 
    /*0000012c*/ MOVEQ       R8, #128                    @ 0x80 
    /*00000130*/ LDR         R9, [R0, #76]               @ 0x4c 
    /*00000134*/ MVNNE       R8, #127                    @ 0x7f 
    /*00000138*/ CMP         R6, R2, LSR #10 
    /*0000013c*/ LDR         R2, [R0, #68]               @ 0x44 
    /*00000140*/ MOVEQ       R7, #128                    @ 0x80 
    /*00000144*/ LDR         SL, [R0, #24] 
    /*00000148*/ MVNNE       R7, #127                    @ 0x7f 
    /*0000014c*/ CMP         R6, R1, LSR #10 
    /*00000150*/ LDR         R1, [R0, #72]               @ 0x48 
    /*00000154*/ MOVEQ       R5, #128                    @ 0x80 
    /*00000158*/ LDR         FP, [R0, #28] 
    /*0000015c*/ MVNNE       R5, #127                    @ 0x7f 
    /*00000160*/ CMP         R6, R2, LSR #10 
    /*00000164*/ ADD         R8, R8, SL 
    /*00000168*/ MOVEQ       R2, #128                    @ 0x80 
    /*0000016c*/ ADD         R7, R7, FP 
    /*00000170*/ MVNNE       R2, #127                    @ 0x7f 
    /*00000174*/ CMP         R6, R1, LSR #10 
    /*00000178*/ MOVEQ       R1, #128                    @ 0x80 
    /*0000017c*/ MVNNE       R1, #127                    @ 0x7f 
    /*00000180*/ CMP         R6, R9, LSR #10 
    /*00000184*/ LDR         R6, [R0, #36]               @ 0x24 
    /*00000188*/ LDR         R9, [R0, #32] 
    /*0000018c*/ ADD         R2, R2, R6 
    /*00000190*/ SUB         R8, R8, SL, ASR #8 
    /*00000194*/ SUB         R7, R7, FP, ASR #8 
    /*00000198*/ LDR         SL, [R0, #40]               @ 0x28 
    /*0000019c*/ LDR         FP, [R0, #44]               @ 0x2c 
    /*000001a0*/ SUB         R6, R2, R6, ASR #8 
    /*000001a4*/ MOVEQ       R2, #128                    @ 0x80 
    /*000001a8*/ ADD         R5, R5, R9 
    /*000001ac*/ MVNNE       R2, #127                    @ 0x7f 
    /*000001b0*/ SUB         R5, R5, R9, ASR #8 
    /*000001b4*/ ADD         R1, R1, SL 
    /*000001b8*/ ADD         R9, R2, FP 
    /*000001bc*/ SUB         R1, R1, SL, ASR #8 
    /*000001c0*/ SUB         R2, R9, FP, ASR #8 
    /*000001c4*/ STR         R8, [R0, #24] 
    /*000001c8*/ STR         R7, [R0, #28] 
    /*000001cc*/ STR         R5, [R0, #32] 
    /*000001d0*/ STR         R6, [R0, #36]               @ 0x24 
    /*000001d4*/ STR         R1, [R0, #40]               @ 0x28 
    /*000001d8*/ STR         R2, [R0, #44]               @ 0x2c 
    AdaptativePredictorAndReconstructedSignalCalculator2_x1dc:
    /*000001dc*/ LDR         R2, [R0, #16] 
    /*000001e0*/ CMP         LR, #0 
    /*000001e4*/ BNE         AdaptativePredictorAndReconstructedSignalCalculator2_x284
    AdaptativePredictorAndReconstructedSignalCalculator2_x1e8:
    /*000001e8*/ SUB         R2, R2, R2, ASR #7 
    /*000001ec*/ MOV         R1, #53248                  @ 0xd000 
    /*000001f0*/ MOVT        R1, #65535                  @ 0xffff 
    /*000001f4*/ CMP         R2, R1 
    /*000001f8*/ MOVLT       R2, R1 
    /*000001fc*/ CMP         R2, #12288                  @ 0x3000 
    /*00000200*/ MOVGE       R2, #12288                  @ 0x3000 
    /*00000204*/ STR         R2, [IP] 
    /*00000208*/ LDR         R1, [R0, #80]               @ 0x50 
    /*0000020c*/ STR         R2, [R0, #16] 
    AdaptativePredictorAndReconstructedSignalCalculator2_x210:
    /*00000210*/ LDR         R5, [R0, #12] 
    /*00000214*/ LDR         R2, [IP] 
    /*00000218*/ ADD         LR, LR, R5 
    /*0000021c*/ SUB         LR, LR, R5, ASR #8 
    /*00000220*/ SUB         IP, R2, #15360              @ 0x3c00 
    /*00000224*/ CMP         IP, LR 
    /*00000228*/ BGE         AdaptativePredictorAndReconstructedSignalCalculator2_x23c
    /*0000022c*/ RSB         R2, R2, #15360              @ 0x3c00 
    /*00000230*/ CMP         R2, LR 
    /*00000234*/ MOVLT       IP, R2 
    /*00000238*/ MOVGE       IP, LR 
    AdaptativePredictorAndReconstructedSignalCalculator2_x23c:
    /*0000023c*/ STR         IP, [R0, #12] 
    /*00000240*/ B           AdaptativePredictorAndReconstructedSignalCalculator2_xd0
    AdaptativePredictorAndReconstructedSignalCalculator2_x244:
    /*00000244*/ CMP         R2, #5 
    /*00000248*/ ADD         R2, R0, #24 
    /*0000024c*/ VLD1.32     {D16-D17}, [R2] 
    /*00000250*/ BEQ         AdaptativePredictorAndReconstructedSignalCalculator2_x390
    /*00000254*/ VSHR.S32    Q9, Q8, #8 
    /*00000258*/ CMP         LR, #0 
    /*0000025c*/ VSUB.I32    Q8, Q8, Q9 
    /*00000260*/ VST1.32     {D16-D17}, [R2] 
    /*00000264*/ LDR         R1, [R0, #40]               @ 0x28 
    /*00000268*/ LDR         R2, [R0, #44]               @ 0x2c 
    /*0000026c*/ SUB         R1, R1, R1, ASR #8 
    /*00000270*/ SUB         R2, R2, R2, ASR #8 
    /*00000274*/ STR         R2, [R0, #44]               @ 0x2c 
    /*00000278*/ STR         R1, [R0, #40]               @ 0x28 
    /*0000027c*/ LDR         R2, [R0, #16] 
    /*00000280*/ BEQ         AdaptativePredictorAndReconstructedSignalCalculator2_x1e8
    AdaptativePredictorAndReconstructedSignalCalculator2_x284:
    /*00000284*/ LDR         R5, [R0, #84]               @ 0x54 
    /*00000288*/ MOV         R1, #49152                  @ 0xc000 
    /*0000028c*/ LDR         LR, [R0, #12] 
    /*00000290*/ CMP         R5, R4 
    /*00000294*/ MOVT        R1, #65535                  @ 0xffff 
    /*00000298*/ MOVEQ       R1, #16384                  @ 0x4000 
    /*0000029c*/ CMN         LR, #8192                   @ 0x2000 
    /*000002a0*/ MOVWLE      LR, #32772                  @ 0x8004 
    /*000002a4*/ MOVTLE      LR, #65535                  @ 0xffff 
    /*000002a8*/ BLE         AdaptativePredictorAndReconstructedSignalCalculator2_x2b8
    /*000002ac*/ CMP         LR, #8192                   @ 0x2000 
    /*000002b0*/ LSLLT       LR, LR, #2 
    /*000002b4*/ MOVWGE      LR, #32764                  @ 0x7ffc 
    AdaptativePredictorAndReconstructedSignalCalculator2_x2b8:
    /*000002b8*/ LDR         R5, [R0, #80]               @ 0x50 
    /*000002bc*/ SUB         R2, R2, R2, ASR #7 
    /*000002c0*/ CMP         R5, R4 
    /*000002c4*/ RSBEQ       LR, LR, #0 
    /*000002c8*/ ADD         R1, R1, LR 
    /*000002cc*/ MOV         LR, #53248                  @ 0xd000 
    /*000002d0*/ MOVT        LR, #65535                  @ 0xffff 
    /*000002d4*/ ADD         R2, R2, R1, ASR #7 
    /*000002d8*/ CMP         R2, LR 
    /*000002dc*/ MOVLT       R2, LR 
    /*000002e0*/ CMP         R2, #12288                  @ 0x3000 
    /*000002e4*/ MOVGE       R2, #12288                  @ 0x3000 
    /*000002e8*/ STR         R2, [IP] 
    /*000002ec*/ LDR         R1, [R0, #80]               @ 0x50 
    /*000002f0*/ STR         R2, [R0, #16] 
    /*000002f4*/ CMP         R1, R4 
    /*000002f8*/ MOVEQ       LR, #192                    @ 0xc0 
    /*000002fc*/ MVNNE       LR, #191                    @ 0xbf 
    /*00000300*/ B           AdaptativePredictorAndReconstructedSignalCalculator2_x210
    AdaptativePredictorAndReconstructedSignalCalculator2_x304:
    /*00000304*/ CMP         R2, R4 
    /*00000308*/ MOVEQ       LR, #128                    @ 0x80 
    /*0000030c*/ MVNNE       LR, #127                    @ 0x7f 
    /*00000310*/ B           AdaptativePredictorAndReconstructedSignalCalculator2_xc8
    AdaptativePredictorAndReconstructedSignalCalculator2_x314:
    /*00000314*/ ADD         R1, R0, #56                 @ 0x38 
    /*00000318*/ ADD         R2, R0, #24 
    /*0000031c*/ VDUP.32     Q9, R6 
    /*00000320*/ VLD1.32     {D16-D17}, [R1] 
    /*00000324*/ VMOV.I32    Q10, #128                   @ 0x00000080 
    /*00000328*/ VSHR.U32    Q8, Q8, #10 
    /*0000032c*/ VMVN.I32    Q11, #127                   @ 0x0000007f 
    /*00000330*/ VCEQ.I32    Q8, Q8, Q9 
    /*00000334*/ VLD1.32     {D18-D19}, [R2] 
    /*00000338*/ VBSL        Q8, Q10, Q11 
    /*0000033c*/ VSHR.S32    Q10, Q9, #9 
    /*00000340*/ VADD.I32    Q8, Q8, Q9 
    /*00000344*/ VSUB.I32    Q8, Q8, Q10 
    /*00000348*/ VST1.32     {D16-D17}, [R2] 
    /*0000034c*/ LDR         R1, [R0, #72]               @ 0x48 
    /*00000350*/ LDR         R2, [R0, #76]               @ 0x4c 
    /*00000354*/ CMP         R6, R1, LSR #10 
    /*00000358*/ LDR         R7, [R0, #40]               @ 0x28 
    /*0000035c*/ MVNNE       R1, #127                    @ 0x7f 
    /*00000360*/ LDR         R5, [R0, #44]               @ 0x2c 
    /*00000364*/ MOVEQ       R1, #128                    @ 0x80 
    /*00000368*/ CMP         R6, R2, LSR #10 
    /*0000036c*/ ADD         R1, R1, R7 
    /*00000370*/ MVNNE       R2, #127                    @ 0x7f 
    /*00000374*/ SUB         R1, R1, R7, ASR #9 
    /*00000378*/ MOVEQ       R2, #128                    @ 0x80 
    /*0000037c*/ ADD         R2, R2, R5 
    /*00000380*/ SUB         R2, R2, R5, ASR #9 
    /*00000384*/ STR         R1, [R0, #40]               @ 0x28 
    /*00000388*/ STR         R2, [R0, #44]               @ 0x2c 
    /*0000038c*/ B           AdaptativePredictorAndReconstructedSignalCalculator2_x1dc
    AdaptativePredictorAndReconstructedSignalCalculator2_x390:
    /*00000390*/ VSHR.S32    Q9, Q8, #9 
    /*00000394*/ VSUB.I32    Q8, Q8, Q9 
    /*00000398*/ VST1.32     {D16-D17}, [R2] 
    /*0000039c*/ LDR         R1, [R0, #40]               @ 0x28 
    /*000003a0*/ LDR         R2, [R0, #44]               @ 0x2c 
    /*000003a4*/ SUB         R1, R1, R1, ASR #9 
    /*000003a8*/ SUB         R2, R2, R2, ASR #9 
    /*000003ac*/ STR         R1, [R0, #40]               @ 0x28 
    /*000003b0*/ STR         R2, [R0, #44]               @ 0x2c 
    /*000003b4*/ B           AdaptativePredictorAndReconstructedSignalCalculator2_x1dc
FUNC_END AdaptativePredictorAndReconstructedSignalCalculator2


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ToneAndTransitionDetector1
@ Size: 0x44
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ToneAndTransitionDetector1
    /*00000000*/ LDR         R3, [R0, #100]              @ 0x64 
    /*00000004*/ LDR         IP, [R0, #96]               @ 0x60 
    /*00000008*/ LSR         R0, R3, #15 
    /*0000000c*/ UBFX        R1, R1, #0, #15 
    /*00000010*/ CMP         R0, #9 
    /*00000014*/ UBFXLS      R3, R3, #10, #5 
    /*00000018*/ MOVHI       R3, #23808                  @ 0x5d00 
    /*0000001c*/ ADDLS       R3, R3, #32 
    /*00000020*/ LSLLS       R3, R3, R0 
    /*00000024*/ ADDLS       R3, R3, R3, LSR #1 
    /*00000028*/ LSRLS       R3, R3, #1 
    /*0000002c*/ CMP         IP, #0 
    /*00000030*/ CMPNE       R1, R3 
    /*00000034*/ MOVHI       R1, #1 
    /*00000038*/ MOVLS       R1, #0 
    /*0000003c*/ STR         R1, [R2] 
    /*00000040*/ BX          LR 
FUNC_END ToneAndTransitionDetector1


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ToneAndTransitionDetector2
@ Size: 0x20
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ToneAndTransitionDetector2
    /*00000000*/ CMN         R1, #11776                  @ 0x2e00 
    /*00000004*/ MOVGE       R1, #0 
    /*00000008*/ MOVLT       R1, #1 
    /*0000000c*/ STR         R1, [R3] 
    /*00000010*/ CMP         R2, #0 
    /*00000014*/ MOVNE       R1, #0 
    /*00000018*/ STR         R1, [R0, #96]               @ 0x60 
    /*0000001c*/ BX          LR 
FUNC_END ToneAndTransitionDetector2


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.OutputPCMFormatConversionAndSynchronousCodingAdjustment
@ Size: 0x160
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN OutputPCMFormatConversionAndSynchronousCodingAdjustment
    /*00000000*/ SSAT        R1, #14, R1 
    /*00000004*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000008*/ RSB         R2, R2, R1, ASR #2 
    /*0000000c*/ LDR         LR, [SP, #28] 
    /*00000010*/ EOR         IP, R2, R2, ASR #31 
    /*00000014*/ SUB         IP, IP, R2, ASR #31 
    /*00000018*/ UBFX        IP, IP, #0, #15 
    /*0000001c*/ LDR         R4, [SP, #32] 
    /*00000020*/ CMP         IP, #0 
    /*00000024*/ LDR         R5, [R0, #4] 
    /*00000028*/ MOVEQ       R8, IP 
    /*0000002c*/ ASR         R2, R2, #15 
    /*00000030*/ MOVEQ       R9, IP 
    /*00000034*/ BEQ         OutputPCMFormatConversionAndSynchronousCodingAdjustment_x44
    /*00000038*/ CLZ         R9, IP 
    /*0000003c*/ RSB         R9, R9, #31 
    /*00000040*/ LSL         R8, R9, #7 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_x44:
    /*00000044*/ LDR         R6, [R0, #8] 
    /*00000048*/ MOV         R7, #1 
    /*0000004c*/ LSL         IP, IP, #7 
    /*00000050*/ SUB         R3, R8, R3, LSR #2 
    /*00000054*/ CMP         R6, #2 
    /*00000058*/ LSR         R0, IP, R9 
    /*0000005c*/ SUB         IP, R6, #1 
    /*00000060*/ AND         R0, R0, #127                @ 0x7f 
    /*00000064*/ ADD         R0, R0, R3 
    /*00000068*/ LSL         R7, R7, IP 
    /*0000006c*/ BEQ         OutputPCMFormatConversionAndSynchronousCodingAdjustment_x13c
    /*00000070*/ LDR         R3, WORD_015c               @ LDR         R3, [PC, #228]              @ 0x000000000000015c 
    /*00000074*/ SUB         IP, R6, #3 
    /*00000078*/ ADD         R3, PC, R3 
    /*0000007c*/ LDR         R8, [R3, IP, LSL #2] 
    /*00000080*/ MOV         R3, R8 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_x84:
    /*00000084*/ LDRSH       IP, [R3], #2 
    /*00000088*/ CMP         R0, IP 
    /*0000008c*/ BGE         OutputPCMFormatConversionAndSynchronousCodingAdjustment_x84
    /*00000090*/ SUB         R3, R3, R8 
    /*00000094*/ ASR         R3, R3, #1 
    /*00000098*/ SUBS        R3, R3, #1 
    /*0000009c*/ MVNEQ       R3, R2 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_xa0:
    /*000000a0*/ EOR         R3, R3, R2 
    /*000000a4*/ MVN         R2, #0 
    /*000000a8*/ EOR         LR, LR, R7 
    /*000000ac*/ CMP         R5, #0 
    /*000000b0*/ BIC         R6, R3, R2, LSL R6 
    /*000000b4*/ EOR         R6, R6, R7 
    /*000000b8*/ BEQ         OutputPCMFormatConversionAndSynchronousCodingAdjustment_xf4
    /*000000bc*/ EOR         R3, R1, #85                 @ 0x55 
    /*000000c0*/ TST         R3, #128                    @ 0x80 
    /*000000c4*/ EOREQ       R3, R1, #42                 @ 0x2a 
    /*000000c8*/ CMP         R6, LR 
    /*000000cc*/ BCS         OutputPCMFormatConversionAndSynchronousCodingAdjustment_x108
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_xd0:
    /*000000d0*/ CMP         R3, #254                    @ 0xfe 
    /*000000d4*/ ADDLS       R3, R3, #1 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_xd8:
    /*000000d8*/ CMP         R5, #0 
    /*000000dc*/ BEQ         OutputPCMFormatConversionAndSynchronousCodingAdjustment_x12c
    /*000000e0*/ TST         R3, #128                    @ 0x80 
    /*000000e4*/ EORNE       R3, R3, #85                 @ 0x55 
    /*000000e8*/ EOREQ       R3, R3, #42                 @ 0x2a 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_xec:
    /*000000ec*/ STR         R3, [R4] 
    /*000000f0*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_xf4:
    /*000000f4*/ TST         R1, #128                    @ 0x80 
    /*000000f8*/ EORNE       R3, R1, #127                @ 0x7f 
    /*000000fc*/ MOVEQ       R3, R1 
    /*00000100*/ CMP         R6, LR 
    /*00000104*/ BCC         OutputPCMFormatConversionAndSynchronousCodingAdjustment_xd0
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_x108:
    /*00000108*/ BLS         OutputPCMFormatConversionAndSynchronousCodingAdjustment_xd8
    /*0000010c*/ CMP         R3, #0 
    /*00000110*/ BEQ         OutputPCMFormatConversionAndSynchronousCodingAdjustment_x14c
    /*00000114*/ SUB         R3, R3, #1 
    /*00000118*/ CMP         R3, #127                    @ 0x7f 
    /*0000011c*/ CMPEQ       R5, #0 
    /*00000120*/ MOVEQ       R3, #126                    @ 0x7e 
    /*00000124*/ BEQ         OutputPCMFormatConversionAndSynchronousCodingAdjustment_xec
    /*00000128*/ B           OutputPCMFormatConversionAndSynchronousCodingAdjustment_xd8
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_x12c:
    /*0000012c*/ TST         R3, #128                    @ 0x80 
    /*00000130*/ EORNE       R3, R3, #127                @ 0x7f 
    /*00000134*/ STR         R3, [R4] 
    /*00000138*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_x13c:
    /*0000013c*/ CMP         R0, #260                    @ 0x104 
    /*00000140*/ MOVLE       R3, #0 
    /*00000144*/ MOVGT       R3, #1 
    /*00000148*/ B           OutputPCMFormatConversionAndSynchronousCodingAdjustment_xa0
    OutputPCMFormatConversionAndSynchronousCodingAdjustment_x14c:
    /*0000014c*/ CMP         R5, #0 
    /*00000150*/ MOVNE       R3, #42                     @ 0x2a 
    /*00000154*/ STR         R3, [R4] 
    /*00000158*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    /*0000015c*/ WORD_015c: .word 0x000000dc
FUNC_END OutputPCMFormatConversionAndSynchronousCodingAdjustment


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.DifferenceSignalComputation
@ Size: 0xc
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN DifferenceSignalComputation
    /*00000000*/ SUB         R2, R1, R2 
    /*00000004*/ STR         R2, [R3] 
    /*00000008*/ BX          LR 
FUNC_END DifferenceSignalComputation


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.OutputLimiting
@ Size: 0x2c
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN OutputLimiting
    /*00000000*/ CMP         R0, #8192                   @ 0x2000 
    /*00000004*/ BGE         OutputLimiting_x20
    /*00000008*/ MOV         R3, #57344                  @ 0xe000 
    /*0000000c*/ CMN         R0, #8192                   @ 0x2000 
    /*00000010*/ MOVT        R3, #65535                  @ 0xffff 
    /*00000014*/ MOVLT       R0, R3 
    /*00000018*/ STR         R0, [R1] 
    /*0000001c*/ BX          LR 
    OutputLimiting_x20:
    /*00000020*/ MOVW        R3, #8191                   @ 0x1fff 
    /*00000024*/ STR         R3, [R1] 
    /*00000028*/ BX          LR 
FUNC_END OutputLimiting


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.EncodeDecode
@ Size: 0x27c
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN EncodeDecode
    /*00000000*/ LDR         R3, [R0, #20] 
    /*00000004*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00000008*/ CMP         R3, #256                    @ 0x100 
    /*0000000c*/ LDR         R7, [R0, #100]              @ 0x64 
    /*00000010*/ MOV         R8, R2 
    /*00000014*/ LSRLS       R2, R3, #2 
    /*00000018*/ MOVHI       R2, #64                     @ 0x40 
    /*0000001c*/ LDR         R3, [R0, #104]              @ 0x68 
    /*00000020*/ SUB         SP, SP, #48                 @ 0x30 
    /*00000024*/ LSR         R7, R7, #6 
    /*00000028*/ MOV         R6, R1 
    /*0000002c*/ SUB         R3, R3, R7 
    /*00000030*/ ADD         R1, SP, #20 
    /*00000034*/ CMP         R3, #0 
    /*00000038*/ MOV         R5, R0 
    /*0000003c*/ MUL         R3, R3, R2 
    /*00000040*/ ADD         R2, SP, #24 
    /*00000044*/ ADDLT       R3, R3, #63                 @ 0x3f 
    /*00000048*/ ADD         R7, R7, R3, ASR #6 
    /*0000004c*/ BL          AdaptativePredictorAndReconstructedSignalCalculator1
    /*00000050*/ CMP         R8, #0 
    /*00000054*/ BNE         EncodeDecode_x184
    /*00000058*/ LDR         R3, [R5, #8] 
    /*0000005c*/ LSR         R0, R7, #2 
    EncodeDecode_x60:
    /*00000060*/ LDR         IP, WORD_0274               @ LDR         IP, [PC, #524]              @ 0x0000000000000274 
    /*00000064*/ SUB         R1, R3, #1 
    /*00000068*/ MOV         R2, #1 
    /*0000006c*/ SUB         R3, R3, #2 
    /*00000070*/ ADD         IP, PC, IP 
    /*00000074*/ LSL         R2, R2, R1 
    /*00000078*/ ANDS        R1, R2, R6 
    /*0000007c*/ SUB         R2, R2, #1 
    /*00000080*/ MVNNE       LR, R6 
    /*00000084*/ MOVEQ       LR, R6 
    /*00000088*/ LDR         R3, [IP, R3, LSL #2] 
    /*0000008c*/ AND         R2, R2, LR 
    /*00000090*/ MVNNE       R1, #0 
    /*00000094*/ LSL         R2, R2, #1 
    /*00000098*/ LDRSH       R3, [R3, R2] 
    /*0000009c*/ ADDS        R3, R3, R0 
    /*000000a0*/ MOV         R0, R5 
    /*000000a4*/ UBFXPL      R2, R3, #7, #4 
    /*000000a8*/ ANDPL       R3, R3, #127                @ 0x7f 
    /*000000ac*/ ADDPL       R4, R3, #128                @ 0x80 
    /*000000b0*/ RSBPL       R3, R2, #14 
    /*000000b4*/ MOVMI       R4, #0 
    /*000000b8*/ ADD         R2, SP, #28 
    /*000000bc*/ LSLPL       R4, R4, #7 
    /*000000c0*/ LSRPL       R4, R4, R3 
    /*000000c4*/ CMP         R1, #0 
    /*000000c8*/ ADDNE       R4, R4, #32768              @ 0x8000 
    /*000000cc*/ MOV         R1, R4 
    /*000000d0*/ BL          ToneAndTransitionDetector1
    /*000000d4*/ LDR         IP, [SP, #24] 
    /*000000d8*/ ADD         R0, SP, #36                 @ 0x24 
    /*000000dc*/ STR         R0, [SP, #8] 
    /*000000e0*/ ADD         R0, SP, #32 
    /*000000e4*/ STR         IP, [SP] 
    /*000000e8*/ MOV         R1, R4 
    /*000000ec*/ LDR         R3, [SP, #20] 
    /*000000f0*/ LDR         R2, [SP, #28] 
    /*000000f4*/ STR         R0, [SP, #4] 
    /*000000f8*/ MOV         R0, R5 
    /*000000fc*/ BL          AdaptativePredictorAndReconstructedSignalCalculator2
    /*00000100*/ LDR         R2, [SP, #28] 
    /*00000104*/ ADD         R3, SP, #40                 @ 0x28 
    /*00000108*/ LDR         R1, [SP, #36]               @ 0x24 
    /*0000010c*/ MOV         R0, R5 
    /*00000110*/ BL          ToneAndTransitionDetector2
    /*00000114*/ LDR         R0, [SP, #28] 
    /*00000118*/ MOV         R2, R7 
    /*0000011c*/ LDR         R3, [SP, #40]               @ 0x28 
    /*00000120*/ MOV         R1, R6 
    /*00000124*/ STR         R0, [SP] 
    /*00000128*/ MOV         R0, R5 
    /*0000012c*/ BL          AdaptationSpeedControl2
    /*00000130*/ MOV         R2, R7 
    /*00000134*/ MOV         R1, R6 
    /*00000138*/ MOV         R0, R5 
    /*0000013c*/ BL          QuantizerScaleFactorAdaptation2
    /*00000140*/ CMP         R8, #0 
    /*00000144*/ BNE         EncodeDecode_x178
    /*00000148*/ LDR         R3, [R5, #4] 
    /*0000014c*/ CMP         R3, #2 
    /*00000150*/ BEQ         EncodeDecode_x228
    /*00000154*/ STR         R6, [SP] 
    /*00000158*/ ADD         IP, SP, #44                 @ 0x2c 
    /*0000015c*/ LDR         R2, [SP, #20] 
    /*00000160*/ MOV         R3, R7 
    /*00000164*/ LDR         R1, [SP, #32] 
    /*00000168*/ MOV         R0, R5 
    /*0000016c*/ STR         IP, [SP, #4] 
    /*00000170*/ BL          OutputPCMFormatConversionAndSynchronousCodingAdjustment
    /*00000174*/ LDR         R6, [SP, #44]               @ 0x2c 
    EncodeDecode_x178:
    /*00000178*/ MOV         R0, R6 
    /*0000017c*/ ADD         SP, SP, #48                 @ 0x30 
    /*00000180*/ POP         {R4, R5, R6, R7, R8, PC} 
    EncodeDecode_x184:
    /*00000184*/ LDR         R3, [R5, #4] 
    /*00000188*/ CMP         R3, #2 
    /*0000018c*/ BEQ         EncodeDecode_x248
    /*00000190*/ LDR         R2, [SP, #20] 
    /*00000194*/ RSB         R6, R2, R6, ASR #2 
    EncodeDecode_x198:
    /*00000198*/ EOR         R3, R6, R6, ASR #31 
    /*0000019c*/ SUB         R3, R3, R6, ASR #31 
    /*000001a0*/ UBFX        R3, R3, #0, #15 
    /*000001a4*/ ASR         R6, R6, #15 
    /*000001a8*/ CMP         R3, #0 
    /*000001ac*/ MOVEQ       R2, R3 
    /*000001b0*/ MOVEQ       R0, R3 
    /*000001b4*/ BEQ         EncodeDecode_x1c4
    /*000001b8*/ CLZ         R1, R3 
    /*000001bc*/ RSB         R0, R1, #31 
    /*000001c0*/ LSL         R2, R0, #7 
    EncodeDecode_x1c4:
    /*000001c4*/ LSL         R1, R3, #7 
    /*000001c8*/ LDR         R3, [R5, #8] 
    /*000001cc*/ LSR         R1, R1, R0 
    /*000001d0*/ CMP         R3, #2 
    /*000001d4*/ AND         R1, R1, #127                @ 0x7f 
    /*000001d8*/ LSR         R0, R7, #2 
    /*000001dc*/ SUB         R2, R2, R0 
    /*000001e0*/ ADD         R1, R1, R2 
    /*000001e4*/ BEQ         EncodeDecode_x264
    /*000001e8*/ LDR         R2, WORD_0278               @ LDR         R2, [PC, #136]              @ 0x0000000000000278 
    /*000001ec*/ SUB         IP, R3, #3 
    /*000001f0*/ ADD         R2, PC, R2 
    /*000001f4*/ LDR         LR, [R2, IP, LSL #2] 
    /*000001f8*/ MOV         R2, LR 
    EncodeDecode_x1fc:
    /*000001fc*/ LDRSH       IP, [R2], #2 
    /*00000200*/ CMP         R1, IP 
    /*00000204*/ BGE         EncodeDecode_x1fc
    /*00000208*/ SUB         R2, R2, LR 
    /*0000020c*/ ASR         R2, R2, #1 
    /*00000210*/ SUBS        R2, R2, #1 
    /*00000214*/ MVNEQ       R2, R6 
    EncodeDecode_x218:
    /*00000218*/ EOR         R6, R6, R2 
    /*0000021c*/ MVN         R2, #0 
    /*00000220*/ BIC         R6, R6, R2, LSL R3 
    /*00000224*/ B           EncodeDecode_x60
    EncodeDecode_x228:
    /*00000228*/ LDR         R0, [SP, #32] 
    /*0000022c*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00000230*/ BL          OutputLimiting
    /*00000234*/ LDR         R6, [SP, #44]               @ 0x2c 
    /*00000238*/ LSL         R6, R6, #2 
    /*0000023c*/ MOV         R0, R6 
    /*00000240*/ ADD         SP, SP, #48                 @ 0x30 
    /*00000244*/ POP         {R4, R5, R6, R7, R8, PC} 
    EncodeDecode_x248:
    /*00000248*/ SBFX        R1, R6, #2, #14 
    /*0000024c*/ ADD         R3, SP, #44                 @ 0x2c 
    /*00000250*/ LDR         R2, [SP, #20] 
    /*00000254*/ MOV         R0, R5 
    /*00000258*/ BL          DifferenceSignalComputation
    /*0000025c*/ LDR         R6, [SP, #44]               @ 0x2c 
    /*00000260*/ B           EncodeDecode_x198
    EncodeDecode_x264:
    /*00000264*/ CMP         R1, #260                    @ 0x104 
    /*00000268*/ MOVLE       R2, #0 
    /*0000026c*/ MOVGT       R2, #1 
    /*00000270*/ B           EncodeDecode_x218
    /*00000274*/ WORD_0274: .word 0x000001fc
    /*00000278*/ WORD_0278: .word 0x00000080
FUNC_END EncodeDecode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726Reset
@ Size: 0x84
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726Reset
    /*00000000*/ VMOV.I32    Q9, #0                      @ 0x00000000 
    /*00000004*/ VMOV.I32    Q10, #32                    @ 0x00000020 
    /*00000008*/ VMOV.I32    D17, #32                    @ 0x00000020 
    /*0000000c*/ PUSH        {R4, R5, R6, LR} 
    /*00000010*/ ADD         LR, R0, #24 
    /*00000014*/ VMOV.I32    D16, #0                     @ 0x00000000 
    /*00000018*/ ADD         R2, R0, #40                 @ 0x28 
    /*0000001c*/ ADD         IP, R0, #72                 @ 0x48 
    /*00000020*/ ADD         R6, R0, #56                 @ 0x38 
    /*00000024*/ MOV         R3, #2 
    /*00000028*/ VST1.8      {D18-D19}, [LR] 
    /*0000002c*/ ADD         R5, R0, #12 
    /*00000030*/ ADD         R4, R0, #48                 @ 0x30 
    /*00000034*/ ADD         LR, R0, #80                 @ 0x50 
    /*00000038*/ VST1.8      {D18}, [R2] 
    /*0000003c*/ VST1.32     {D20-D21}, [R6] 
    /*00000040*/ MOV         R2, #0 
    /*00000044*/ VST1.32     {D17}, [IP] 
    /*00000048*/ STR         R1, [R0, #8] 
    /*0000004c*/ MOV         IP, #34816                  @ 0x8800 
    /*00000050*/ STR         R3, [R0, #4] 
    /*00000054*/ MOV         R1, #544                    @ 0x220 
    /*00000058*/ MOV         R3, #32 
    /*0000005c*/ VST1.32     {D16}, [R5] 
    /*00000060*/ STR         R2, [R0, #20] 
    /*00000064*/ VST1.32     {D16}, [R4] 
    /*00000068*/ VST1.32     {D16}, [LR] 
    /*0000006c*/ STR         R2, [R0, #96]               @ 0x60 
    /*00000070*/ STR         IP, [R0, #100]              @ 0x64 
    /*00000074*/ STR         R1, [R0, #104]              @ 0x68 
    /*00000078*/ STR         R3, [R0, #88]               @ 0x58 
    /*0000007c*/ STR         R3, [R0, #92]               @ 0x5c 
    /*00000080*/ POP         {R4, R5, R6, PC} 
FUNC_END G726Reset


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.EncodeOne
@ Size: 0x8
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN EncodeOne
    /*00000000*/ MOV         R2, #1 
    EncodeOne_x4:
    /*00000004*/ B           EncodeOne_x4                @ EncodeDecode [R_ARM_JUMP24: .text.EncodeDecode+0x0] 
FUNC_END EncodeOne


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.DecodeOne
@ Size: 0x14
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN DecodeOne
    /*00000000*/ LDR         R3, [R0, #8] 
    /*00000004*/ MVN         IP, #0 
    /*00000008*/ MOV         R2, #0 
    /*0000000c*/ BIC         R1, R1, IP, LSL R3 
    DecodeOne_x10:
    /*00000010*/ B           DecodeOne_x10               @ EncodeDecode [R_ARM_JUMP24: .text.EncodeDecode+0x0] 
FUNC_END DecodeOne


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726Encode
@ Size: 0x94
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726Encode
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00000004*/ MOV         R5, R0 
    /*00000008*/ LDR         R0, [R0, #4] 
    /*0000000c*/ MVN         R7, #0 
    /*00000010*/ LDR         R8, [R5, #8] 
    /*00000014*/ CMP         R0, #2 
    /*00000018*/ BICEQ       R3, R3, #1 
    /*0000001c*/ MVN         R7, R7, LSL R8 
    /*00000020*/ ADD         R6, R1, R3, LSL #1 
    /*00000024*/ CMP         R1, R6 
    /*00000028*/ POPCS       {R4, R5, R6, R7, R8, R9, SL, PC} 
    /*0000002c*/ MOV         R9, R1 
    /*00000030*/ MOV         SL, R2 
    /*00000034*/ MOV         R4, #0 
    G726Encode_x38:
    /*00000038*/ CMP         R0, #2 
    /*0000003c*/ MOV         R0, R5 
    /*00000040*/ LDRBNE      R1, [R9] 
    /*00000044*/ ADDNE       R9, R9, #1 
    /*00000048*/ LDRSHEQ     R1, [R9], #2 
    /*0000004c*/ BL          EncodeOne
    /*00000050*/ LDRB        IP, [SL] 
    /*00000054*/ ADD         R3, SL, #1 
    /*00000058*/ LSL         R0, R0, R4 
    /*0000005c*/ BIC         IP, IP, R7, LSL R4 
    /*00000060*/ ADD         R4, R4, R8 
    /*00000064*/ ORR         IP, R0, IP 
    /*00000068*/ CMP         R4, #7 
    /*0000006c*/ STRB        IP, [SL] 
    /*00000070*/ BLS         G726Encode_x84
    /*00000074*/ LSR         R0, R0, #8 
    /*00000078*/ ANDS        R4, R4, #7 
    /*0000007c*/ STRBNE      R0, [SL, #1] 
    /*00000080*/ MOV         SL, R3 
    G726Encode_x84:
    /*00000084*/ CMP         R9, R6 
    /*00000088*/ POPCS       {R4, R5, R6, R7, R8, R9, SL, PC} 
    /*0000008c*/ LDR         R0, [R5, #4] 
    /*00000090*/ B           G726Encode_x38
FUNC_END G726Encode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726Decode
@ Size: 0x78
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726Decode
    /*00000000*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00000004*/ LDR         R6, [R0, #8] 
    /*00000008*/ LSL         R3, R3, #3 
    /*0000000c*/ CMP         R3, R6 
    /*00000010*/ POPCC       {R4, R5, R6, R7, R8, R9, SL, PC} 
    /*00000014*/ SUB         R4, R3, R6 
    /*00000018*/ MOV         R8, R1 
    /*0000001c*/ MOV         R9, R0 
    /*00000020*/ MOV         R7, R2 
    /*00000024*/ MOV         R1, #0 
    G726Decode_x28:
    /*00000028*/ ADD         R5, R6, R1 
    /*0000002c*/ MOV         R0, R9 
    /*00000030*/ LDRB        R3, [R8] 
    /*00000034*/ CMP         R5, #8 
    /*00000038*/ LDRHHI      R3, [R8] 
    /*0000003c*/ LSR         R1, R3, R1 
    /*00000040*/ BL          DecodeOne
    /*00000044*/ LDR         R3, [R9, #4] 
    /*00000048*/ CMP         R3, #2 
    /*0000004c*/ STRBNE      R0, [R7] 
    /*00000050*/ ADDNE       R7, R7, #1 
    /*00000054*/ STRHEQ      R0, [R7], #2 
    /*00000058*/ CMP         R5, #7 
    /*0000005c*/ ANDHI       R1, R5, #7 
    /*00000060*/ ADDHI       R8, R8, #1 
    /*00000064*/ MOVLS       R1, R5 
    /*00000068*/ CMP         R6, R4 
    /*0000006c*/ SUB         R4, R4, R6 
    /*00000070*/ BLS         G726Decode_x28
    /*00000074*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
FUNC_END G726Decode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726Rtp2AsfFormat
@ Size: 0x88
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726Rtp2AsfFormat
    /*00000000*/ LSL         R2, R2, #3 
    /*00000004*/ RSB         R3, R1, #8 
    /*00000008*/ PUSH        {R4, R5, R6, LR} 
    /*0000000c*/ MOV         R5, #255                    @ 0xff 
    /*00000010*/ UDIV        LR, R2, R1 
    /*00000014*/ MLS         LR, R1, LR, R2 
    /*00000018*/ ASR         R5, R5, R3 
    /*0000001c*/ CMP         LR, #0 
    /*00000020*/ BNE         G726Rtp2AsfFormat_x80
    /*00000024*/ MOV         R3, LR 
    /*00000028*/ MOV         R6, #1 
    /*0000002c*/ B           G726Rtp2AsfFormat_x6c
    G726Rtp2AsfFormat_x30:
    /*00000030*/ LDRB        IP, [R0] 
    /*00000034*/ CMP         R4, #8 
    /*00000038*/ SUB         R2, R2, R1 
    /*0000003c*/ LDRHHI      IP, [R0] 
    /*00000040*/ AND         IP, R5, IP, LSR R3 
    /*00000044*/ MOV         R3, R4 
    /*00000048*/ SUB         R4, R4, #8 
    /*0000004c*/ CMP         R3, #7 
    /*00000050*/ ORR         LR, IP, LR, LSL R1 
    /*00000054*/ ANDGT       R3, R3, #7 
    /*00000058*/ LSL         IP, R6, R4 
    /*0000005c*/ LSRGT       R4, LR, R4 
    /*00000060*/ SUBGT       IP, IP, #1 
    /*00000064*/ STRBGT      R4, [R0], #1 
    /*00000068*/ ANDGT       LR, LR, IP 
    G726Rtp2AsfFormat_x6c:
    /*0000006c*/ CMP         R1, R2 
    /*00000070*/ ADD         R4, R3, R1 
    /*00000074*/ BLS         G726Rtp2AsfFormat_x30
    /*00000078*/ MOV         R0, #0 
    /*0000007c*/ POP         {R4, R5, R6, PC} 
    G726Rtp2AsfFormat_x80:
    /*00000080*/ MVN         R0, #0 
    /*00000084*/ POP         {R4, R5, R6, PC} 
FUNC_END G726Rtp2AsfFormat


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G726Asf2RtpFormat
@ Size: 0x98
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G726Asf2RtpFormat
    /*00000000*/ LSL         R2, R2, #3 
    /*00000004*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00000008*/ MVN         R6, #0 
    /*0000000c*/ UDIV        R3, R2, R1 
    /*00000010*/ MLS         R3, R1, R3, R2 
    /*00000014*/ MVN         R6, R6, LSL R1 
    /*00000018*/ CMP         R3, #0 
    /*0000001c*/ BNE         G726Asf2RtpFormat_x90
    /*00000020*/ SUB         R2, R2, R1 
    /*00000024*/ MOV         LR, R3 
    /*00000028*/ RSB         R8, R1, #8 
    /*0000002c*/ RSB         R7, R1, #16 
    /*00000030*/ B           G726Asf2RtpFormat_x58
    G726Asf2RtpFormat_x34:
    /*00000034*/ LDRB        IP, [R0, #1] 
    /*00000038*/ ORR         IP, IP, R9, LSL #8 
    /*0000003c*/ LSL         IP, IP, R3 
    /*00000040*/ AND         IP, R6, IP, LSR R7 
    /*00000044*/ ORR         LR, LR, IP, LSL R3 
    G726Asf2RtpFormat_x48:
    /*00000048*/ STRB        LR, [R0], #1 
    /*0000004c*/ AND         R3, R4, #7 
    /*00000050*/ LSR         LR, LR, #8 
    G726Asf2RtpFormat_x54:
    /*00000054*/ SUB         R2, R2, R1 
    G726Asf2RtpFormat_x58:
    /*00000058*/ CMN         R1, R2 
    /*0000005c*/ ADD         R4, R3, R1 
    /*00000060*/ BCS         G726Asf2RtpFormat_x88
    /*00000064*/ LDRB        R9, [R0] 
    /*00000068*/ CMP         R4, #8 
    /*0000006c*/ LSL         R5, R9, R3 
    /*00000070*/ BHI         G726Asf2RtpFormat_x34
    /*00000074*/ AND         R5, R6, R5, LSR R8 
    /*00000078*/ ORR         LR, LR, R5, LSL R3 
    /*0000007c*/ MOV         R3, R4 
    /*00000080*/ BNE         G726Asf2RtpFormat_x54
    /*00000084*/ B           G726Asf2RtpFormat_x48
    G726Asf2RtpFormat_x88:
    /*00000088*/ MOV         R0, #0 
    /*0000008c*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    G726Asf2RtpFormat_x90:
    /*00000090*/ MVN         R0, #0 
    /*00000094*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
FUNC_END G726Asf2RtpFormat


