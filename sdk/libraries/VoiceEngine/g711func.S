@
@ -- FILES --
@



unsigned char data[0] = {
};

unsigned char bss[0];

unsigned char data.a2l_table[512] = {
    /*0000*/ 0x80, 0xea, 0x80, 0xeb, 0x80, 0xe8, 0x80, 0xe9, 0x80, 0xee, 0x80, 0xef, 0x80, 0xec, 0x80, 0xed, 
    /*0010*/ 0x80, 0xe2, 0x80, 0xe3, 0x80, 0xe0, 0x80, 0xe1, 0x80, 0xe6, 0x80, 0xe7, 0x80, 0xe4, 0x80, 0xe5, 
    /*0020*/ 0x40, 0xf5, 0xc0, 0xf5, 0x40, 0xf4, 0xc0, 0xf4, 0x40, 0xf7, 0xc0, 0xf7, 0x40, 0xf6, 0xc0, 0xf6, 
    /*0030*/ 0x40, 0xf1, 0xc0, 0xf1, 0x40, 0xf0, 0xc0, 0xf0, 0x40, 0xf3, 0xc0, 0xf3, 0x40, 0xf2, 0xc0, 0xf2, 
    /*0040*/ 0x00, 0xaa, 0x00, 0xae, 0x00, 0xa2, 0x00, 0xa6, 0x00, 0xba, 0x00, 0xbe, 0x00, 0xb2, 0x00, 0xb6, 
    /*0050*/ 0x00, 0x8a, 0x00, 0x8e, 0x00, 0x82, 0x00, 0x86, 0x00, 0x9a, 0x00, 0x9e, 0x00, 0x92, 0x00, 0x96, 
    /*0060*/ 0x00, 0xd5, 0x00, 0xd7, 0x00, 0xd1, 0x00, 0xd3, 0x00, 0xdd, 0x00, 0xdf, 0x00, 0xd9, 0x00, 0xdb, 
    /*0070*/ 0x00, 0xc5, 0x00, 0xc7, 0x00, 0xc1, 0x00, 0xc3, 0x00, 0xcd, 0x00, 0xcf, 0x00, 0xc9, 0x00, 0xcb, 
    /*0080*/ 0xa8, 0xfe, 0xb8, 0xfe, 0x88, 0xfe, 0x98, 0xfe, 0xe8, 0xfe, 0xf8, 0xfe, 0xc8, 0xfe, 0xd8, 0xfe, 
    /*0090*/ 0x28, 0xfe, 0x38, 0xfe, 0x08, 0xfe, 0x18, 0xfe, 0x68, 0xfe, 0x78, 0xfe, 0x48, 0xfe, 0x58, 0xfe, 
    /*00a0*/ 0xa8, 0xff, 0xb8, 0xff, 0x88, 0xff, 0x98, 0xff, 0xe8, 0xff, 0xf8, 0xff, 0xc8, 0xff, 0xd8, 0xff, 
    /*00b0*/ 0x28, 0xff, 0x38, 0xff, 0x08, 0xff, 0x18, 0xff, 0x68, 0xff, 0x78, 0xff, 0x48, 0xff, 0x58, 0xff, 
    /*00c0*/ 0xa0, 0xfa, 0xe0, 0xfa, 0x20, 0xfa, 0x60, 0xfa, 0xa0, 0xfb, 0xe0, 0xfb, 0x20, 0xfb, 0x60, 0xfb, 
    /*00d0*/ 0xa0, 0xf8, 0xe0, 0xf8, 0x20, 0xf8, 0x60, 0xf8, 0xa0, 0xf9, 0xe0, 0xf9, 0x20, 0xf9, 0x60, 0xf9, 
    /*00e0*/ 0x50, 0xfd, 0x70, 0xfd, 0x10, 0xfd, 0x30, 0xfd, 0xd0, 0xfd, 0xf0, 0xfd, 0x90, 0xfd, 0xb0, 0xfd, 
    /*00f0*/ 0x50, 0xfc, 0x70, 0xfc, 0x10, 0xfc, 0x30, 0xfc, 0xd0, 0xfc, 0xf0, 0xfc, 0x90, 0xfc, 0xb0, 0xfc, 
    /*0100*/ 0x80, 0x15, 0x80, 0x14, 0x80, 0x17, 0x80, 0x16, 0x80, 0x11, 0x80, 0x10, 0x80, 0x13, 0x80, 0x12, 
    /*0110*/ 0x80, 0x1d, 0x80, 0x1c, 0x80, 0x1f, 0x80, 0x1e, 0x80, 0x19, 0x80, 0x18, 0x80, 0x1b, 0x80, 0x1a, 
    /*0120*/ 0xc0, 0x0a, 0x40, 0x0a, 0xc0, 0x0b, 0x40, 0x0b, 0xc0, 0x08, 0x40, 0x08, 0xc0, 0x09, 0x40, 0x09, 
    /*0130*/ 0xc0, 0x0e, 0x40, 0x0e, 0xc0, 0x0f, 0x40, 0x0f, 0xc0, 0x0c, 0x40, 0x0c, 0xc0, 0x0d, 0x40, 0x0d, 
    /*0140*/ 0x00, 0x56, 0x00, 0x52, 0x00, 0x5e, 0x00, 0x5a, 0x00, 0x46, 0x00, 0x42, 0x00, 0x4e, 0x00, 0x4a, 
    /*0150*/ 0x00, 0x76, 0x00, 0x72, 0x00, 0x7e, 0x00, 0x7a, 0x00, 0x66, 0x00, 0x62, 0x00, 0x6e, 0x00, 0x6a, 
    /*0160*/ 0x00, 0x2b, 0x00, 0x29, 0x00, 0x2f, 0x00, 0x2d, 0x00, 0x23, 0x00, 0x21, 0x00, 0x27, 0x00, 0x25, 
    /*0170*/ 0x00, 0x3b, 0x00, 0x39, 0x00, 0x3f, 0x00, 0x3d, 0x00, 0x33, 0x00, 0x31, 0x00, 0x37, 0x00, 0x35, 
    /*0180*/ 0x58, 0x01, 0x48, 0x01, 0x78, 0x01, 0x68, 0x01, 0x18, 0x01, 0x08, 0x01, 0x38, 0x01, 0x28, 0x01, 
    /*0190*/ 0xd8, 0x01, 0xc8, 0x01, 0xf8, 0x01, 0xe8, 0x01, 0x98, 0x01, 0x88, 0x01, 0xb8, 0x01, 0xa8, 0x01, 
    /*01a0*/ 0x58, 0x00, 0x48, 0x00, 0x78, 0x00, 0x68, 0x00, 0x18, 0x00, 0x08, 0x00, 0x38, 0x00, 0x28, 0x00, 
    /*01b0*/ 0xd8, 0x00, 0xc8, 0x00, 0xf8, 0x00, 0xe8, 0x00, 0x98, 0x00, 0x88, 0x00, 0xb8, 0x00, 0xa8, 0x00, 
    /*01c0*/ 0x60, 0x05, 0x20, 0x05, 0xe0, 0x05, 0xa0, 0x05, 0x60, 0x04, 0x20, 0x04, 0xe0, 0x04, 0xa0, 0x04, 
    /*01d0*/ 0x60, 0x07, 0x20, 0x07, 0xe0, 0x07, 0xa0, 0x07, 0x60, 0x06, 0x20, 0x06, 0xe0, 0x06, 0xa0, 0x06, 
    /*01e0*/ 0xb0, 0x02, 0x90, 0x02, 0xf0, 0x02, 0xd0, 0x02, 0x30, 0x02, 0x10, 0x02, 0x70, 0x02, 0x50, 0x02, 
    /*01f0*/ 0xb0, 0x03, 0x90, 0x03, 0xf0, 0x03, 0xd0, 0x03, 0x30, 0x03, 0x10, 0x03, 0x70, 0x03, 0x50, 0x03, 
};

unsigned char data.a2u_table[512] = {
    /*0000*/ 0x2a, 0x00, 0x2b, 0x00, 0x28, 0x00, 0x29, 0x00, 0x2e, 0x00, 0x2f, 0x00, 0x2c, 0x00, 0x2d, 0x00, 
    /*0010*/ 0x22, 0x00, 0x23, 0x00, 0x20, 0x00, 0x21, 0x00, 0x26, 0x00, 0x27, 0x00, 0x24, 0x00, 0x25, 0x00, 
    /*0020*/ 0x39, 0x00, 0x3a, 0x00, 0x37, 0x00, 0x38, 0x00, 0x3d, 0x00, 0x3e, 0x00, 0x3b, 0x00, 0x3c, 0x00, 
    /*0030*/ 0x31, 0x00, 0x32, 0x00, 0x2f, 0x00, 0x30, 0x00, 0x35, 0x00, 0x36, 0x00, 0x33, 0x00, 0x34, 0x00, 
    /*0040*/ 0x0a, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x0c, 0x00, 0x0d, 0x00, 
    /*0050*/ 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0x07, 0x00, 0x04, 0x00, 0x05, 0x00, 
    /*0060*/ 0x1a, 0x00, 0x1b, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1e, 0x00, 0x1f, 0x00, 0x1c, 0x00, 0x1d, 0x00, 
    /*0070*/ 0x12, 0x00, 0x13, 0x00, 0x10, 0x00, 0x11, 0x00, 0x16, 0x00, 0x17, 0x00, 0x14, 0x00, 0x15, 0x00, 
    /*0080*/ 0x62, 0x00, 0x63, 0x00, 0x60, 0x00, 0x61, 0x00, 0x66, 0x00, 0x67, 0x00, 0x64, 0x00, 0x65, 0x00, 
    /*0090*/ 0x5d, 0x00, 0x5d, 0x00, 0x5c, 0x00, 0x5c, 0x00, 0x5f, 0x00, 0x5f, 0x00, 0x5e, 0x00, 0x5e, 0x00, 
    /*00a0*/ 0x74, 0x00, 0x76, 0x00, 0x70, 0x00, 0x72, 0x00, 0x7c, 0x00, 0x7e, 0x00, 0x78, 0x00, 0x7a, 0x00, 
    /*00b0*/ 0x6a, 0x00, 0x6b, 0x00, 0x68, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x6d, 0x00, 
    /*00c0*/ 0x48, 0x00, 0x49, 0x00, 0x46, 0x00, 0x47, 0x00, 0x4c, 0x00, 0x4d, 0x00, 0x4a, 0x00, 0x4b, 0x00, 
    /*00d0*/ 0x40, 0x00, 0x41, 0x00, 0x3f, 0x00, 0x3f, 0x00, 0x44, 0x00, 0x45, 0x00, 0x42, 0x00, 0x43, 0x00, 
    /*00e0*/ 0x56, 0x00, 0x57, 0x00, 0x54, 0x00, 0x55, 0x00, 0x5a, 0x00, 0x5b, 0x00, 0x58, 0x00, 0x59, 0x00, 
    /*00f0*/ 0x4f, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x4e, 0x00, 0x52, 0x00, 0x53, 0x00, 0x50, 0x00, 0x51, 0x00, 
    /*0100*/ 0xaa, 0x00, 0xab, 0x00, 0xa8, 0x00, 0xa9, 0x00, 0xae, 0x00, 0xaf, 0x00, 0xac, 0x00, 0xad, 0x00, 
    /*0110*/ 0xa2, 0x00, 0xa3, 0x00, 0xa0, 0x00, 0xa1, 0x00, 0xa6, 0x00, 0xa7, 0x00, 0xa4, 0x00, 0xa5, 0x00, 
    /*0120*/ 0xb9, 0x00, 0xba, 0x00, 0xb7, 0x00, 0xb8, 0x00, 0xbd, 0x00, 0xbe, 0x00, 0xbb, 0x00, 0xbc, 0x00, 
    /*0130*/ 0xb1, 0x00, 0xb2, 0x00, 0xaf, 0x00, 0xb0, 0x00, 0xb5, 0x00, 0xb6, 0x00, 0xb3, 0x00, 0xb4, 0x00, 
    /*0140*/ 0x8a, 0x00, 0x8b, 0x00, 0x88, 0x00, 0x89, 0x00, 0x8e, 0x00, 0x8f, 0x00, 0x8c, 0x00, 0x8d, 0x00, 
    /*0150*/ 0x82, 0x00, 0x83, 0x00, 0x80, 0x00, 0x81, 0x00, 0x86, 0x00, 0x87, 0x00, 0x84, 0x00, 0x85, 0x00, 
    /*0160*/ 0x9a, 0x00, 0x9b, 0x00, 0x98, 0x00, 0x99, 0x00, 0x9e, 0x00, 0x9f, 0x00, 0x9c, 0x00, 0x9d, 0x00, 
    /*0170*/ 0x92, 0x00, 0x93, 0x00, 0x90, 0x00, 0x91, 0x00, 0x96, 0x00, 0x97, 0x00, 0x94, 0x00, 0x95, 0x00, 
    /*0180*/ 0xe2, 0x00, 0xe3, 0x00, 0xe0, 0x00, 0xe1, 0x00, 0xe6, 0x00, 0xe7, 0x00, 0xe4, 0x00, 0xe5, 0x00, 
    /*0190*/ 0xdd, 0x00, 0xdd, 0x00, 0xdc, 0x00, 0xdc, 0x00, 0xdf, 0x00, 0xdf, 0x00, 0xde, 0x00, 0xde, 0x00, 
    /*01a0*/ 0xf4, 0x00, 0xf6, 0x00, 0xf0, 0x00, 0xf2, 0x00, 0xfc, 0x00, 0xfe, 0x00, 0xf8, 0x00, 0xfa, 0x00, 
    /*01b0*/ 0xea, 0x00, 0xeb, 0x00, 0xe8, 0x00, 0xe9, 0x00, 0xee, 0x00, 0xef, 0x00, 0xec, 0x00, 0xed, 0x00, 
    /*01c0*/ 0xc8, 0x00, 0xc9, 0x00, 0xc6, 0x00, 0xc7, 0x00, 0xcc, 0x00, 0xcd, 0x00, 0xca, 0x00, 0xcb, 0x00, 
    /*01d0*/ 0xc0, 0x00, 0xc1, 0x00, 0xbf, 0x00, 0xbf, 0x00, 0xc4, 0x00, 0xc5, 0x00, 0xc2, 0x00, 0xc3, 0x00, 
    /*01e0*/ 0xd6, 0x00, 0xd7, 0x00, 0xd4, 0x00, 0xd5, 0x00, 0xda, 0x00, 0xdb, 0x00, 0xd8, 0x00, 0xd9, 0x00, 
    /*01f0*/ 0xcf, 0x00, 0xcf, 0x00, 0xce, 0x00, 0xce, 0x00, 0xd2, 0x00, 0xd3, 0x00, 0xd0, 0x00, 0xd1, 0x00, 
};

unsigned char data.u2a_table[512] = {
    /*0000*/ 0x2a, 0x00, 0x2b, 0x00, 0x28, 0x00, 0x29, 0x00, 0x2e, 0x00, 0x2f, 0x00, 0x2c, 0x00, 0x2d, 0x00, 
    /*0010*/ 0x22, 0x00, 0x23, 0x00, 0x20, 0x00, 0x21, 0x00, 0x26, 0x00, 0x27, 0x00, 0x24, 0x00, 0x25, 0x00, 
    /*0020*/ 0x3a, 0x00, 0x3b, 0x00, 0x38, 0x00, 0x39, 0x00, 0x3e, 0x00, 0x3f, 0x00, 0x3c, 0x00, 0x3d, 0x00, 
    /*0030*/ 0x32, 0x00, 0x33, 0x00, 0x30, 0x00, 0x31, 0x00, 0x36, 0x00, 0x37, 0x00, 0x34, 0x00, 0x35, 0x00, 
    /*0040*/ 0x0a, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x0c, 0x00, 0x0d, 0x00, 
    /*0050*/ 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x06, 0x00, 0x07, 0x00, 0x04, 0x00, 0x1a, 0x00, 
    /*0060*/ 0x1b, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1e, 0x00, 0x1f, 0x00, 0x1c, 0x00, 0x1d, 0x00, 0x12, 0x00, 
    /*0070*/ 0x13, 0x00, 0x10, 0x00, 0x11, 0x00, 0x16, 0x00, 0x17, 0x00, 0x14, 0x00, 0x15, 0x00, 0x6a, 0x00, 
    /*0080*/ 0x68, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x6f, 0x00, 0x6c, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x63, 0x00, 
    /*0090*/ 0x60, 0x00, 0x61, 0x00, 0x66, 0x00, 0x67, 0x00, 0x64, 0x00, 0x65, 0x00, 0x7a, 0x00, 0x78, 0x00, 
    /*00a0*/ 0x7e, 0x00, 0x7f, 0x00, 0x7c, 0x00, 0x7d, 0x00, 0x72, 0x00, 0x73, 0x00, 0x70, 0x00, 0x71, 0x00, 
    /*00b0*/ 0x76, 0x00, 0x77, 0x00, 0x74, 0x00, 0x75, 0x00, 0x4b, 0x00, 0x49, 0x00, 0x4f, 0x00, 0x4d, 0x00, 
    /*00c0*/ 0x42, 0x00, 0x43, 0x00, 0x40, 0x00, 0x41, 0x00, 0x46, 0x00, 0x47, 0x00, 0x44, 0x00, 0x45, 0x00, 
    /*00d0*/ 0x5a, 0x00, 0x5b, 0x00, 0x58, 0x00, 0x59, 0x00, 0x5e, 0x00, 0x5f, 0x00, 0x5c, 0x00, 0x5d, 0x00, 
    /*00e0*/ 0x52, 0x00, 0x52, 0x00, 0x53, 0x00, 0x53, 0x00, 0x50, 0x00, 0x50, 0x00, 0x51, 0x00, 0x51, 0x00, 
    /*00f0*/ 0x56, 0x00, 0x56, 0x00, 0x57, 0x00, 0x57, 0x00, 0x54, 0x00, 0x54, 0x00, 0x55, 0x00, 0x55, 0x00, 
    /*0100*/ 0xaa, 0x00, 0xab, 0x00, 0xa8, 0x00, 0xa9, 0x00, 0xae, 0x00, 0xaf, 0x00, 0xac, 0x00, 0xad, 0x00, 
    /*0110*/ 0xa2, 0x00, 0xa3, 0x00, 0xa0, 0x00, 0xa1, 0x00, 0xa6, 0x00, 0xa7, 0x00, 0xa4, 0x00, 0xa5, 0x00, 
    /*0120*/ 0xba, 0x00, 0xbb, 0x00, 0xb8, 0x00, 0xb9, 0x00, 0xbe, 0x00, 0xbf, 0x00, 0xbc, 0x00, 0xbd, 0x00, 
    /*0130*/ 0xb2, 0x00, 0xb3, 0x00, 0xb0, 0x00, 0xb1, 0x00, 0xb6, 0x00, 0xb7, 0x00, 0xb4, 0x00, 0xb5, 0x00, 
    /*0140*/ 0x8a, 0x00, 0x8b, 0x00, 0x88, 0x00, 0x89, 0x00, 0x8e, 0x00, 0x8f, 0x00, 0x8c, 0x00, 0x8d, 0x00, 
    /*0150*/ 0x82, 0x00, 0x83, 0x00, 0x80, 0x00, 0x81, 0x00, 0x86, 0x00, 0x87, 0x00, 0x84, 0x00, 0x9a, 0x00, 
    /*0160*/ 0x9b, 0x00, 0x98, 0x00, 0x99, 0x00, 0x9e, 0x00, 0x9f, 0x00, 0x9c, 0x00, 0x9d, 0x00, 0x92, 0x00, 
    /*0170*/ 0x93, 0x00, 0x90, 0x00, 0x91, 0x00, 0x96, 0x00, 0x97, 0x00, 0x94, 0x00, 0x95, 0x00, 0xea, 0x00, 
    /*0180*/ 0xe8, 0x00, 0xe9, 0x00, 0xee, 0x00, 0xef, 0x00, 0xec, 0x00, 0xed, 0x00, 0xe2, 0x00, 0xe3, 0x00, 
    /*0190*/ 0xe0, 0x00, 0xe1, 0x00, 0xe6, 0x00, 0xe7, 0x00, 0xe4, 0x00, 0xe5, 0x00, 0xfa, 0x00, 0xf8, 0x00, 
    /*01a0*/ 0xfe, 0x00, 0xff, 0x00, 0xfc, 0x00, 0xfd, 0x00, 0xf2, 0x00, 0xf3, 0x00, 0xf0, 0x00, 0xf1, 0x00, 
    /*01b0*/ 0xf6, 0x00, 0xf7, 0x00, 0xf4, 0x00, 0xf5, 0x00, 0xcb, 0x00, 0xc9, 0x00, 0xcf, 0x00, 0xcd, 0x00, 
    /*01c0*/ 0xc2, 0x00, 0xc3, 0x00, 0xc0, 0x00, 0xc1, 0x00, 0xc6, 0x00, 0xc7, 0x00, 0xc4, 0x00, 0xc5, 0x00, 
    /*01d0*/ 0xda, 0x00, 0xdb, 0x00, 0xd8, 0x00, 0xd9, 0x00, 0xde, 0x00, 0xdf, 0x00, 0xdc, 0x00, 0xdd, 0x00, 
    /*01e0*/ 0xd2, 0x00, 0xd2, 0x00, 0xd3, 0x00, 0xd3, 0x00, 0xd0, 0x00, 0xd0, 0x00, 0xd1, 0x00, 0xd1, 0x00, 
    /*01f0*/ 0xd6, 0x00, 0xd6, 0x00, 0xd7, 0x00, 0xd7, 0x00, 0xd4, 0x00, 0xd4, 0x00, 0xd5, 0x00, 0xd5, 0x00, 
};

unsigned char data.u2l_table[512] = {
    /*0000*/ 0x84, 0x82, 0x84, 0x86, 0x84, 0x8a, 0x84, 0x8e, 0x84, 0x92, 0x84, 0x96, 0x84, 0x9a, 0x84, 0x9e, 
    /*0010*/ 0x84, 0xa2, 0x84, 0xa6, 0x84, 0xaa, 0x84, 0xae, 0x84, 0xb2, 0x84, 0xb6, 0x84, 0xba, 0x84, 0xbe, 
    /*0020*/ 0x84, 0xc1, 0x84, 0xc3, 0x84, 0xc5, 0x84, 0xc7, 0x84, 0xc9, 0x84, 0xcb, 0x84, 0xcd, 0x84, 0xcf, 
    /*0030*/ 0x84, 0xd1, 0x84, 0xd3, 0x84, 0xd5, 0x84, 0xd7, 0x84, 0xd9, 0x84, 0xdb, 0x84, 0xdd, 0x84, 0xdf, 
    /*0040*/ 0x04, 0xe1, 0x04, 0xe2, 0x04, 0xe3, 0x04, 0xe4, 0x04, 0xe5, 0x04, 0xe6, 0x04, 0xe7, 0x04, 0xe8, 
    /*0050*/ 0x04, 0xe9, 0x04, 0xea, 0x04, 0xeb, 0x04, 0xec, 0x04, 0xed, 0x04, 0xee, 0x04, 0xef, 0x04, 0xf0, 
    /*0060*/ 0xc4, 0xf0, 0x44, 0xf1, 0xc4, 0xf1, 0x44, 0xf2, 0xc4, 0xf2, 0x44, 0xf3, 0xc4, 0xf3, 0x44, 0xf4, 
    /*0070*/ 0xc4, 0xf4, 0x44, 0xf5, 0xc4, 0xf5, 0x44, 0xf6, 0xc4, 0xf6, 0x44, 0xf7, 0xc4, 0xf7, 0x44, 0xf8, 
    /*0080*/ 0xa4, 0xf8, 0xe4, 0xf8, 0x24, 0xf9, 0x64, 0xf9, 0xa4, 0xf9, 0xe4, 0xf9, 0x24, 0xfa, 0x64, 0xfa, 
    /*0090*/ 0xa4, 0xfa, 0xe4, 0xfa, 0x24, 0xfb, 0x64, 0xfb, 0xa4, 0xfb, 0xe4, 0xfb, 0x24, 0xfc, 0x64, 0xfc, 
    /*00a0*/ 0x94, 0xfc, 0xb4, 0xfc, 0xd4, 0xfc, 0xf4, 0xfc, 0x14, 0xfd, 0x34, 0xfd, 0x54, 0xfd, 0x74, 0xfd, 
    /*00b0*/ 0x94, 0xfd, 0xb4, 0xfd, 0xd4, 0xfd, 0xf4, 0xfd, 0x14, 0xfe, 0x34, 0xfe, 0x54, 0xfe, 0x74, 0xfe, 
    /*00c0*/ 0x8c, 0xfe, 0x9c, 0xfe, 0xac, 0xfe, 0xbc, 0xfe, 0xcc, 0xfe, 0xdc, 0xfe, 0xec, 0xfe, 0xfc, 0xfe, 
    /*00d0*/ 0x0c, 0xff, 0x1c, 0xff, 0x2c, 0xff, 0x3c, 0xff, 0x4c, 0xff, 0x5c, 0xff, 0x6c, 0xff, 0x7c, 0xff, 
    /*00e0*/ 0x88, 0xff, 0x90, 0xff, 0x98, 0xff, 0xa0, 0xff, 0xa8, 0xff, 0xb0, 0xff, 0xb8, 0xff, 0xc0, 0xff, 
    /*00f0*/ 0xc8, 0xff, 0xd0, 0xff, 0xd8, 0xff, 0xe0, 0xff, 0xe8, 0xff, 0xf0, 0xff, 0xf8, 0xff, 0x00, 0x00, 
    /*0100*/ 0x7c, 0x7d, 0x7c, 0x79, 0x7c, 0x75, 0x7c, 0x71, 0x7c, 0x6d, 0x7c, 0x69, 0x7c, 0x65, 0x7c, 0x61, 
    /*0110*/ 0x7c, 0x5d, 0x7c, 0x59, 0x7c, 0x55, 0x7c, 0x51, 0x7c, 0x4d, 0x7c, 0x49, 0x7c, 0x45, 0x7c, 0x41, 
    /*0120*/ 0x7c, 0x3e, 0x7c, 0x3c, 0x7c, 0x3a, 0x7c, 0x38, 0x7c, 0x36, 0x7c, 0x34, 0x7c, 0x32, 0x7c, 0x30, 
    /*0130*/ 0x7c, 0x2e, 0x7c, 0x2c, 0x7c, 0x2a, 0x7c, 0x28, 0x7c, 0x26, 0x7c, 0x24, 0x7c, 0x22, 0x7c, 0x20, 
    /*0140*/ 0xfc, 0x1e, 0xfc, 0x1d, 0xfc, 0x1c, 0xfc, 0x1b, 0xfc, 0x1a, 0xfc, 0x19, 0xfc, 0x18, 0xfc, 0x17, 
    /*0150*/ 0xfc, 0x16, 0xfc, 0x15, 0xfc, 0x14, 0xfc, 0x13, 0xfc, 0x12, 0xfc, 0x11, 0xfc, 0x10, 0xfc, 0x0f, 
    /*0160*/ 0x3c, 0x0f, 0xbc, 0x0e, 0x3c, 0x0e, 0xbc, 0x0d, 0x3c, 0x0d, 0xbc, 0x0c, 0x3c, 0x0c, 0xbc, 0x0b, 
    /*0170*/ 0x3c, 0x0b, 0xbc, 0x0a, 0x3c, 0x0a, 0xbc, 0x09, 0x3c, 0x09, 0xbc, 0x08, 0x3c, 0x08, 0xbc, 0x07, 
    /*0180*/ 0x5c, 0x07, 0x1c, 0x07, 0xdc, 0x06, 0x9c, 0x06, 0x5c, 0x06, 0x1c, 0x06, 0xdc, 0x05, 0x9c, 0x05, 
    /*0190*/ 0x5c, 0x05, 0x1c, 0x05, 0xdc, 0x04, 0x9c, 0x04, 0x5c, 0x04, 0x1c, 0x04, 0xdc, 0x03, 0x9c, 0x03, 
    /*01a0*/ 0x6c, 0x03, 0x4c, 0x03, 0x2c, 0x03, 0x0c, 0x03, 0xec, 0x02, 0xcc, 0x02, 0xac, 0x02, 0x8c, 0x02, 
    /*01b0*/ 0x6c, 0x02, 0x4c, 0x02, 0x2c, 0x02, 0x0c, 0x02, 0xec, 0x01, 0xcc, 0x01, 0xac, 0x01, 0x8c, 0x01, 
    /*01c0*/ 0x74, 0x01, 0x64, 0x01, 0x54, 0x01, 0x44, 0x01, 0x34, 0x01, 0x24, 0x01, 0x14, 0x01, 0x04, 0x01, 
    /*01d0*/ 0xf4, 0x00, 0xe4, 0x00, 0xd4, 0x00, 0xc4, 0x00, 0xb4, 0x00, 0xa4, 0x00, 0x94, 0x00, 0x84, 0x00, 
    /*01e0*/ 0x78, 0x00, 0x70, 0x00, 0x68, 0x00, 0x60, 0x00, 0x58, 0x00, 0x50, 0x00, 0x48, 0x00, 0x40, 0x00, 
    /*01f0*/ 0x38, 0x00, 0x30, 0x00, 0x28, 0x00, 0x20, 0x00, 0x18, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 
};

@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.linear2alaw
@ Size: 0xac
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN linear2alaw
    /*00000000*/ CMP         R2, #0 
    /*00000004*/ BXLE        LR 
    /*00000008*/ SUB         R2, R2, #1 
    /*0000000c*/ SUB         R1, R1, #2 
    /*00000010*/ UXTH        R2, R2 
    /*00000014*/ PUSH        {R4, LR} 
    /*00000018*/ SUB         LR, R0, #2 
    /*0000001c*/ ADD         R0, R0, R2, LSL #1 
    linear2alaw_x20:
    /*00000020*/ LDRSH       R3, [LR, #2]! 
    /*00000024*/ ASRS        R3, R3, #3 
    /*00000028*/ MVNMI       R3, R3 
    /*0000002c*/ MOVMI       IP, #42                     @ 0x2a 
    /*00000030*/ MOVMI       R4, #85                     @ 0x55 
    /*00000034*/ MOVPL       IP, #170                    @ 0xaa 
    /*00000038*/ MOVPL       R4, #213                    @ 0xd5 
    /*0000003c*/ CMP         R3, #0 
    /*00000040*/ BEQ         linear2alaw_x78
    /*00000044*/ LSL         R2, R3, #16 
    /*00000048*/ CLZ         R2, R2 
    /*0000004c*/ CMP         R3, #30 
    /*00000050*/ RSB         R2, R2, #11 
    /*00000054*/ SXTH        R2, R2 
    /*00000058*/ BLE         linear2alaw_xa0
    /*0000005c*/ CMP         R2, #7 
    /*00000060*/ BGT         linear2alaw_x90
    /*00000064*/ LSL         IP, R2, #4 
    /*00000068*/ CMP         R2, #0 
    /*0000006c*/ MOVEQ       R2, #1 
    /*00000070*/ SXTH        IP, IP 
    /*00000074*/ B           linear2alaw_x80
    linear2alaw_x78:
    /*00000078*/ MOV         IP, R3 
    /*0000007c*/ MOV         R2, #1 
    linear2alaw_x80:
    /*00000080*/ ASR         R3, R3, R2 
    /*00000084*/ AND         R3, R3, #15 
    /*00000088*/ ORR         IP, IP, R3 
    /*0000008c*/ EOR         IP, IP, R4 
    linear2alaw_x90:
    /*00000090*/ CMP         R0, LR 
    /*00000094*/ STRH        IP, [R1, #2]! 
    /*00000098*/ BNE         linear2alaw_x20
    /*0000009c*/ POP         {R4, PC} 
    linear2alaw_xa0:
    /*000000a0*/ MOV         R2, #1 
    /*000000a4*/ MOV         IP, #0 
    /*000000a8*/ B           linear2alaw_x80
FUNC_END linear2alaw


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.linear2ulaw
@ Size: 0x90
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN linear2ulaw
    /*00000000*/ CMP         R2, #0 
    /*00000004*/ BXLE        LR 
    /*00000008*/ SUB         R2, R2, #1 
    /*0000000c*/ SUB         IP, R0, #2 
    /*00000010*/ UXTH        R2, R2 
    /*00000014*/ SUB         R1, R1, #2 
    /*00000018*/ PUSH        {R4, R5, LR} 
    /*0000001c*/ MOVW        R4, #8159                   @ 0x1fdf 
    /*00000020*/ ADD         R0, R0, R2, LSL #1 
    linear2ulaw_x24:
    /*00000024*/ LDRSH       R3, [IP, #2]! 
    /*00000028*/ MOV         R5, #128                    @ 0x80 
    /*0000002c*/ MOV         LR, #255                    @ 0xff 
    /*00000030*/ ASRS        R3, R3, #2 
    /*00000034*/ RSBMI       R3, R3, #0 
    /*00000038*/ MOVMI       R5, #0 
    /*0000003c*/ MOVMI       LR, #127                    @ 0x7f 
    /*00000040*/ CMP         R3, R4 
    /*00000044*/ MOVGE       R3, R4 
    /*00000048*/ ADD         R3, R3, #33                 @ 0x21 
    /*0000004c*/ UXTH        R3, R3 
    /*00000050*/ LSL         R2, R3, #16 
    /*00000054*/ CLZ         R2, R2 
    /*00000058*/ RSB         R2, R2, #11 
    /*0000005c*/ SXTH        R2, R2 
    /*00000060*/ CMP         R2, #8 
    /*00000064*/ BGT         linear2ulaw_x80
    /*00000068*/ ASR         R3, R3, R2 
    /*0000006c*/ SUB         R2, R2, #1 
    /*00000070*/ AND         R3, R3, #15 
    /*00000074*/ ORR         R3, R3, R2, LSL #4 
    /*00000078*/ EOR         R3, R3, LR 
    /*0000007c*/ SXTH        R5, R3 
    linear2ulaw_x80:
    /*00000080*/ CMP         R0, IP 
    /*00000084*/ STRH        R5, [R1, #2]! 
    /*00000088*/ BNE         linear2ulaw_x24
    /*0000008c*/ POP         {R4, R5, PC} 
FUNC_END linear2ulaw


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.alaw2linear
@ Size: 0x50
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN alaw2linear
    /*00000000*/ LDR         IP, WORD_0048               @ LDR         IP, [PC, #64]               @ 0x0000000000000048 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ ADD         IP, PC, IP 
    /*0000000c*/ BXLE        LR 
    /*00000010*/ LDR         R3, WORD_004c               @ LDR         R3, [PC, #52]               @ 0x000000000000004c 
    /*00000014*/ SUB         R2, R2, #1 
    /*00000018*/ SUB         R1, R1, #2 
    /*0000001c*/ LDR         IP, [IP, R3] 
    /*00000020*/ UXTH        R3, R2 
    /*00000024*/ SUB         R2, R0, #2 
    /*00000028*/ ADD         R0, R0, R3, LSL #1 
    alaw2linear_x2c:
    /*0000002c*/ LDRSH       R3, [R2, #2]! 
    /*00000030*/ LSL         R3, R3, #1 
    /*00000034*/ CMP         R0, R2 
    /*00000038*/ LDRSH       R3, [IP, R3] 
    /*0000003c*/ STRH        R3, [R1, #2]! 
    /*00000040*/ BNE         alaw2linear_x2c
    /*00000044*/ BX          LR 
    /*00000048*/ WORD_0048: .word 0x00000038
    /*0000004c*/ WORD_004c: .word 0x00000000
FUNC_END alaw2linear


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.alaw2ulaw
@ Size: 0x50
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN alaw2ulaw
    /*00000000*/ LDR         IP, WORD_0048               @ LDR         IP, [PC, #64]               @ 0x0000000000000048 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ ADD         IP, PC, IP 
    /*0000000c*/ BXLE        LR 
    /*00000010*/ LDR         R3, WORD_004c               @ LDR         R3, [PC, #52]               @ 0x000000000000004c 
    /*00000014*/ SUB         R2, R2, #1 
    /*00000018*/ SUB         R1, R1, #2 
    /*0000001c*/ LDR         IP, [IP, R3] 
    /*00000020*/ UXTH        R3, R2 
    /*00000024*/ SUB         R2, R0, #2 
    /*00000028*/ ADD         R0, R0, R3, LSL #1 
    alaw2ulaw_x2c:
    /*0000002c*/ LDRSH       R3, [R2, #2]! 
    /*00000030*/ LSL         R3, R3, #1 
    /*00000034*/ CMP         R0, R2 
    /*00000038*/ LDRSH       R3, [IP, R3] 
    /*0000003c*/ STRH        R3, [R1, #2]! 
    /*00000040*/ BNE         alaw2ulaw_x2c
    /*00000044*/ BX          LR 
    /*00000048*/ WORD_0048: .word 0x00000038
    /*0000004c*/ WORD_004c: .word 0x00000000
FUNC_END alaw2ulaw


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ulaw2linear
@ Size: 0x50
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ulaw2linear
    /*00000000*/ LDR         IP, WORD_0048               @ LDR         IP, [PC, #64]               @ 0x0000000000000048 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ ADD         IP, PC, IP 
    /*0000000c*/ BXLE        LR 
    /*00000010*/ LDR         R3, WORD_004c               @ LDR         R3, [PC, #52]               @ 0x000000000000004c 
    /*00000014*/ SUB         R2, R2, #1 
    /*00000018*/ SUB         R1, R1, #2 
    /*0000001c*/ LDR         IP, [IP, R3] 
    /*00000020*/ UXTH        R3, R2 
    /*00000024*/ SUB         R2, R0, #2 
    /*00000028*/ ADD         R0, R0, R3, LSL #1 
    ulaw2linear_x2c:
    /*0000002c*/ LDRSH       R3, [R2, #2]! 
    /*00000030*/ LSL         R3, R3, #1 
    /*00000034*/ CMP         R0, R2 
    /*00000038*/ LDRSH       R3, [IP, R3] 
    /*0000003c*/ STRH        R3, [R1, #2]! 
    /*00000040*/ BNE         ulaw2linear_x2c
    /*00000044*/ BX          LR 
    /*00000048*/ WORD_0048: .word 0x00000038
    /*0000004c*/ WORD_004c: .word 0x00000000
FUNC_END ulaw2linear


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.ulaw2alaw
@ Size: 0x50
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN ulaw2alaw
    /*00000000*/ LDR         IP, WORD_0048               @ LDR         IP, [PC, #64]               @ 0x0000000000000048 
    /*00000004*/ CMP         R2, #0 
    /*00000008*/ ADD         IP, PC, IP 
    /*0000000c*/ BXLE        LR 
    /*00000010*/ LDR         R3, WORD_004c               @ LDR         R3, [PC, #52]               @ 0x000000000000004c 
    /*00000014*/ SUB         R2, R2, #1 
    /*00000018*/ SUB         R1, R1, #2 
    /*0000001c*/ LDR         IP, [IP, R3] 
    /*00000020*/ UXTH        R3, R2 
    /*00000024*/ SUB         R2, R0, #2 
    /*00000028*/ ADD         R0, R0, R3, LSL #1 
    ulaw2alaw_x2c:
    /*0000002c*/ LDRSH       R3, [R2, #2]! 
    /*00000030*/ LSL         R3, R3, #1 
    /*00000034*/ CMP         R0, R2 
    /*00000038*/ LDRSH       R3, [IP, R3] 
    /*0000003c*/ STRH        R3, [R1, #2]! 
    /*00000040*/ BNE         ulaw2alaw_x2c
    /*00000044*/ BX          LR 
    /*00000048*/ WORD_0048: .word 0x00000038
    /*0000004c*/ WORD_004c: .word 0x00000000
FUNC_END ulaw2alaw


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G711_A_DEC
@ Size: 0x14
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G711_A_DEC
    /*00000000*/ LDRSH       R3, [R0] 
    /*00000004*/ CMP         R3, #1 
    /*00000008*/ BXNE        LR 
    /*0000000c*/ ADD         R0, R0, #2 
    G711_A_DEC_x10:
    /*00000010*/ B           G711_A_DEC_x10              @ alaw2linear [R_ARM_JUMP24: .text.alaw2linear+0x0] 
FUNC_END G711_A_DEC


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G711_A_ENC
@ Size: 0x18
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G711_A_ENC
    /*00000000*/ MOV         R3, R0 
    /*00000004*/ MOV         IP, #1 
    /*00000008*/ MOV         R0, R1 
    /*0000000c*/ STRH        IP, [R3], #2 
    /*00000010*/ MOV         R1, R3 
    G711_A_ENC_x14:
    /*00000014*/ B           G711_A_ENC_x14              @ linear2alaw [R_ARM_JUMP24: .text.linear2alaw+0x0] 
FUNC_END G711_A_ENC


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G711_U_DEC
@ Size: 0x14
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G711_U_DEC
    /*00000000*/ LDRSH       R3, [R0] 
    /*00000004*/ CMP         R3, #1 
    /*00000008*/ BXNE        LR 
    /*0000000c*/ ADD         R0, R0, #2 
    G711_U_DEC_x10:
    /*00000010*/ B           G711_U_DEC_x10              @ ulaw2linear [R_ARM_JUMP24: .text.ulaw2linear+0x0] 
FUNC_END G711_U_DEC


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G711_U_ENC
@ Size: 0x18
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G711_U_ENC
    /*00000000*/ MOV         R3, R0 
    /*00000004*/ MOV         IP, #1 
    /*00000008*/ MOV         R0, R1 
    /*0000000c*/ STRH        IP, [R3], #2 
    /*00000010*/ MOV         R1, R3 
    G711_U_ENC_x14:
    /*00000014*/ B           G711_U_ENC_x14              @ linear2ulaw [R_ARM_JUMP24: .text.linear2ulaw+0x0] 
FUNC_END G711_U_ENC


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.encoder_pack
@ Size: 0x260
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN encoder_pack
    /*00000000*/ LDRSH       R3, [R0] 
    /*00000004*/ LSL         R3, R3, #8 
    /*00000008*/ AND         R3, R3, #768                @ 0x300 
    /*0000000c*/ STRH        R3, [R1] 
    /*00000010*/ LDRSH       R3, [R0] 
    /*00000014*/ CMP         R3, #1 
    /*00000018*/ BEQ         encoder_pack_x28
    /*0000001c*/ MOV         R3, #0 
    /*00000020*/ STRH        R3, [R1, #2] 
    /*00000024*/ BX          LR 
    encoder_pack_x28:
    /*00000028*/ ADD         R2, R2, R2, LSR #31 
    /*0000002c*/ ASR         R2, R2, #1 
    /*00000030*/ STRH        R2, [R1, #2] 
    /*00000034*/ CMP         R2, #0 
    /*00000038*/ BXLE        LR 
    /*0000003c*/ ADD         R3, R0, R2, LSL #2 
    /*00000040*/ ADD         IP, R2, #2 
    /*00000044*/ ADD         R3, R3, #2 
    /*00000048*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000004c*/ ADD         R4, R1, #4 
    /*00000050*/ ADD         R5, R0, #2 
    /*00000054*/ UXTH        LR, R2 
    /*00000058*/ ADD         IP, R1, IP, LSL #1 
    /*0000005c*/ CMP         R4, R3 
    /*00000060*/ CMPCC       R5, IP 
    /*00000064*/ MOVCS       R3, #1 
    /*00000068*/ MOVCC       R3, #0 
    /*0000006c*/ CMP         LR, #7 
    /*00000070*/ MOVLS       R3, #0 
    /*00000074*/ ANDHI       R3, R3, #1 
    /*00000078*/ CMP         R3, #0 
    /*0000007c*/ BEQ         encoder_pack_x228
    /*00000080*/ SUB         IP, LR, #8 
    /*00000084*/ MOV         R6, #0 
    /*00000088*/ UBFX        IP, IP, #3, #13 
    /*0000008c*/ ADD         IP, IP, #1 
    /*00000090*/ LSL         R3, IP, #3 
    /*00000094*/ UXTH        R3, R3 
    encoder_pack_x98:
    /*00000098*/ VLD2.16     {D16-D19}, [R5] 
    /*0000009c*/ ADD         R6, R6, #1 
    /*000000a0*/ ADD         R5, R5, #32 
    /*000000a4*/ UXTH        R7, R6 
    /*000000a8*/ VMOVL.S16   Q11, D18 
    /*000000ac*/ VMOVL.S16   Q10, D19 
    /*000000b0*/ VSHL.S32    Q11, Q11, #8 
    /*000000b4*/ VSHL.S32    Q10, Q10, #8 
    /*000000b8*/ VBIC.I16    Q8, #65280                  @ 0xff00 
    /*000000bc*/ VMOVN.I32   D18, Q11 
    /*000000c0*/ VMOVN.I32   D19, Q10 
    /*000000c4*/ CMP         IP, R7 
    /*000000c8*/ VORR        Q8, Q9, Q8 
    /*000000cc*/ VST1.16     {D16-D17}, [R4] 
    /*000000d0*/ ADD         R4, R4, #16 
    /*000000d4*/ BHI         encoder_pack_x98
    /*000000d8*/ CMP         LR, R3 
    /*000000dc*/ SXTH        R4, R3 
    /*000000e0*/ POPEQ       {R4, R5, R6, R7, PC} 
    /*000000e4*/ ADD         LR, R4, #1 
    /*000000e8*/ ADD         IP, R3, #1 
    /*000000ec*/ ADD         R4, R1, R4, LSL #1 
    /*000000f0*/ SXTH        IP, IP 
    /*000000f4*/ LSL         LR, LR, #2 
    /*000000f8*/ ADD         R6, R0, LR 
    /*000000fc*/ LDRSH       R5, [R0, LR] 
    /*00000100*/ LDRB        LR, [R6, #-2] 
    /*00000104*/ CMP         R2, IP 
    /*00000108*/ ORR         LR, LR, R5, LSL #8 
    /*0000010c*/ STRH        LR, [R4, #4] 
    /*00000110*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000114*/ ADD         R4, IP, #1 
    /*00000118*/ ADD         LR, R3, #2 
    /*0000011c*/ ADD         IP, R1, IP, LSL #1 
    /*00000120*/ SXTH        LR, LR 
    /*00000124*/ LSL         R4, R4, #2 
    /*00000128*/ ADD         R6, R0, R4 
    /*0000012c*/ LDRSH       R5, [R0, R4] 
    /*00000130*/ LDRB        R4, [R6, #-2] 
    /*00000134*/ CMP         R2, LR 
    /*00000138*/ ORR         R4, R4, R5, LSL #8 
    /*0000013c*/ STRH        R4, [IP, #4] 
    /*00000140*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000144*/ ADD         R4, LR, #1 
    /*00000148*/ ADD         IP, R3, #3 
    /*0000014c*/ ADD         LR, R1, LR, LSL #1 
    /*00000150*/ SXTH        IP, IP 
    /*00000154*/ LSL         R4, R4, #2 
    /*00000158*/ ADD         R6, R0, R4 
    /*0000015c*/ LDRSH       R5, [R0, R4] 
    /*00000160*/ LDRB        R4, [R6, #-2] 
    /*00000164*/ CMP         R2, IP 
    /*00000168*/ ORR         R4, R4, R5, LSL #8 
    /*0000016c*/ STRH        R4, [LR, #4] 
    /*00000170*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000174*/ ADD         R4, IP, #1 
    /*00000178*/ ADD         LR, R3, #4 
    /*0000017c*/ ADD         IP, R1, IP, LSL #1 
    /*00000180*/ SXTH        LR, LR 
    /*00000184*/ LSL         R4, R4, #2 
    /*00000188*/ ADD         R6, R0, R4 
    /*0000018c*/ LDRSH       R5, [R0, R4] 
    /*00000190*/ LDRB        R4, [R6, #-2] 
    /*00000194*/ CMP         R2, LR 
    /*00000198*/ ORR         R4, R4, R5, LSL #8 
    /*0000019c*/ STRH        R4, [IP, #4] 
    /*000001a0*/ POPLE       {R4, R5, R6, R7, PC} 
    /*000001a4*/ ADD         R4, LR, #1 
    /*000001a8*/ ADD         IP, R3, #5 
    /*000001ac*/ ADD         LR, R1, LR, LSL #1 
    /*000001b0*/ SXTH        IP, IP 
    /*000001b4*/ LSL         R4, R4, #2 
    /*000001b8*/ ADD         R6, R0, R4 
    /*000001bc*/ LDRSH       R5, [R0, R4] 
    /*000001c0*/ LDRB        R4, [R6, #-2] 
    /*000001c4*/ CMP         R2, IP 
    /*000001c8*/ ORR         R4, R4, R5, LSL #8 
    /*000001cc*/ STRH        R4, [LR, #4] 
    /*000001d0*/ POPLE       {R4, R5, R6, R7, PC} 
    /*000001d4*/ ADD         LR, IP, #1 
    /*000001d8*/ ADD         R3, R3, #6 
    /*000001dc*/ ADD         IP, R1, IP, LSL #1 
    /*000001e0*/ SXTH        R3, R3 
    /*000001e4*/ LSL         LR, LR, #2 
    /*000001e8*/ ADD         R5, R0, LR 
    /*000001ec*/ LDRSH       R4, [R0, LR] 
    /*000001f0*/ LDRB        LR, [R5, #-2] 
    /*000001f4*/ CMP         R2, R3 
    /*000001f8*/ ORR         R2, LR, R4, LSL #8 
    /*000001fc*/ STRH        R2, [IP, #4] 
    /*00000200*/ BLE         encoder_pack_x25c
    /*00000204*/ ADD         R1, R1, R3, LSL #1 
    /*00000208*/ ADD         R2, R3, #1 
    /*0000020c*/ LSL         R3, R2, #2 
    /*00000210*/ ADD         IP, R0, R3 
    /*00000214*/ LDRSH       R2, [R0, R3] 
    /*00000218*/ LDRB        R3, [IP, #-2] 
    /*0000021c*/ ORR         R3, R3, R2, LSL #8 
    /*00000220*/ STRH        R3, [R1, #4] 
    /*00000224*/ POP         {R4, R5, R6, R7, PC} 
    encoder_pack_x228:
    /*00000228*/ SUB         R2, LR, #1 
    /*0000022c*/ ADD         R1, R1, #2 
    /*00000230*/ UXTH        R2, R2 
    /*00000234*/ ADD         R2, R2, #1 
    /*00000238*/ ADD         R2, R0, R2, LSL #2 
    encoder_pack_x23c:
    /*0000023c*/ LDRSH       IP, [R0, #4] 
    /*00000240*/ ADD         R0, R0, #4 
    /*00000244*/ LDRB        R3, [R0, #-2] 
    /*00000248*/ CMP         R0, R2 
    /*0000024c*/ ORR         R3, R3, IP, LSL #8 
    /*00000250*/ STRH        R3, [R1, #2]! 
    /*00000254*/ BNE         encoder_pack_x23c
    /*00000258*/ POP         {R4, R5, R6, R7, PC} 
    encoder_pack_x25c:
    /*0000025c*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END encoder_pack


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.encoder_org_pack
@ Size: 0x228
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN encoder_org_pack
    /*00000000*/ LDRSH       R3, [R0] 
    /*00000004*/ LSL         R3, R3, #8 
    /*00000008*/ AND         R3, R3, #768                @ 0x300 
    /*0000000c*/ STRH        R3, [R1] 
    /*00000010*/ LDRSH       R3, [R0] 
    /*00000014*/ CMP         R3, #1 
    /*00000018*/ BEQ         encoder_org_pack_x28
    /*0000001c*/ MOV         R3, #0 
    /*00000020*/ STRH        R3, [R1, #2] 
    /*00000024*/ BX          LR 
    encoder_org_pack_x28:
    /*00000028*/ ADD         R2, R2, R2, LSR #31 
    /*0000002c*/ ASR         R2, R2, #1 
    /*00000030*/ STRH        R2, [R1, #2] 
    /*00000034*/ CMP         R2, #0 
    /*00000038*/ BXLE        LR 
    /*0000003c*/ ADD         R3, R0, R2, LSL #2 
    /*00000040*/ ADD         IP, R2, #2 
    /*00000044*/ ADD         R3, R3, #2 
    /*00000048*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000004c*/ ADD         R4, R1, #4 
    /*00000050*/ ADD         R5, R0, #2 
    /*00000054*/ UXTH        LR, R2 
    /*00000058*/ ADD         IP, R1, IP, LSL #1 
    /*0000005c*/ CMP         R4, R3 
    /*00000060*/ CMPCC       R5, IP 
    /*00000064*/ MOVCS       R3, #1 
    /*00000068*/ MOVCC       R3, #0 
    /*0000006c*/ CMP         LR, #7 
    /*00000070*/ MOVLS       R3, #0 
    /*00000074*/ ANDHI       R3, R3, #1 
    /*00000078*/ CMP         R3, #0 
    /*0000007c*/ BEQ         encoder_org_pack_x1f4
    /*00000080*/ SUB         IP, LR, #8 
    /*00000084*/ MOV         R6, #0 
    /*00000088*/ UBFX        IP, IP, #3, #13 
    /*0000008c*/ ADD         IP, IP, #1 
    /*00000090*/ LSL         R3, IP, #3 
    /*00000094*/ UXTH        R3, R3 
    encoder_org_pack_x98:
    /*00000098*/ VLD2.16     {D24-D27}, [R5] 
    /*0000009c*/ ADD         R6, R6, #1 
    /*000000a0*/ ADD         R5, R5, #32 
    /*000000a4*/ UXTH        R7, R6 
    /*000000a8*/ VMOVL.S16   Q10, D24 
    /*000000ac*/ VMOVL.S16   Q9, D25 
    /*000000b0*/ VORR        Q11, Q13, Q13 
    /*000000b4*/ VSHL.S32    Q10, Q10, #8 
    /*000000b8*/ VSHL.S32    Q9, Q9, #8 
    /*000000bc*/ VBIC.I16    Q11, #65280                 @ 0xff00 
    /*000000c0*/ VMOVN.I32   D16, Q10 
    /*000000c4*/ VMOVN.I32   D17, Q9 
    /*000000c8*/ CMP         IP, R7 
    /*000000cc*/ VORR        Q8, Q8, Q11 
    /*000000d0*/ VST1.16     {D16-D17}, [R4] 
    /*000000d4*/ ADD         R4, R4, #16 
    /*000000d8*/ BHI         encoder_org_pack_x98
    /*000000dc*/ CMP         LR, R3 
    /*000000e0*/ SXTH        LR, R3 
    /*000000e4*/ POPEQ       {R4, R5, R6, R7, PC} 
    /*000000e8*/ ADD         R5, R0, LR, LSL #2 
    /*000000ec*/ ADD         IP, R3, #1 
    /*000000f0*/ ADD         LR, R1, LR, LSL #1 
    /*000000f4*/ SXTH        IP, IP 
    /*000000f8*/ LDRSH       R6, [R5, #2] 
    /*000000fc*/ LDRB        R4, [R5, #4] 
    /*00000100*/ CMP         R2, IP 
    /*00000104*/ ORR         R4, R4, R6, LSL #8 
    /*00000108*/ STRH        R4, [LR, #4] 
    /*0000010c*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000110*/ ADD         R5, R0, IP, LSL #2 
    /*00000114*/ ADD         LR, R3, #2 
    /*00000118*/ ADD         IP, R1, IP, LSL #1 
    /*0000011c*/ SXTH        LR, LR 
    /*00000120*/ LDRSH       R6, [R5, #2] 
    /*00000124*/ LDRB        R4, [R5, #4] 
    /*00000128*/ CMP         R2, LR 
    /*0000012c*/ ORR         R4, R4, R6, LSL #8 
    /*00000130*/ STRH        R4, [IP, #4] 
    /*00000134*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000138*/ ADD         R5, R0, LR, LSL #2 
    /*0000013c*/ ADD         IP, R3, #3 
    /*00000140*/ ADD         LR, R1, LR, LSL #1 
    /*00000144*/ SXTH        IP, IP 
    /*00000148*/ LDRSH       R6, [R5, #2] 
    /*0000014c*/ LDRB        R4, [R5, #4] 
    /*00000150*/ CMP         R2, IP 
    /*00000154*/ ORR         R4, R4, R6, LSL #8 
    /*00000158*/ STRH        R4, [LR, #4] 
    /*0000015c*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000160*/ ADD         R5, R0, IP, LSL #2 
    /*00000164*/ ADD         LR, R3, #4 
    /*00000168*/ ADD         IP, R1, IP, LSL #1 
    /*0000016c*/ SXTH        LR, LR 
    /*00000170*/ LDRSH       R6, [R5, #2] 
    /*00000174*/ LDRB        R4, [R5, #4] 
    /*00000178*/ CMP         R2, LR 
    /*0000017c*/ ORR         R4, R4, R6, LSL #8 
    /*00000180*/ STRH        R4, [IP, #4] 
    /*00000184*/ POPLE       {R4, R5, R6, R7, PC} 
    /*00000188*/ ADD         R5, R0, LR, LSL #2 
    /*0000018c*/ ADD         IP, R3, #5 
    /*00000190*/ ADD         LR, R1, LR, LSL #1 
    /*00000194*/ SXTH        IP, IP 
    /*00000198*/ LDRSH       R6, [R5, #2] 
    /*0000019c*/ LDRB        R4, [R5, #4] 
    /*000001a0*/ CMP         R2, IP 
    /*000001a4*/ ORR         R4, R4, R6, LSL #8 
    /*000001a8*/ STRH        R4, [LR, #4] 
    /*000001ac*/ POPLE       {R4, R5, R6, R7, PC} 
    /*000001b0*/ ADD         LR, R0, IP, LSL #2 
    /*000001b4*/ ADD         R3, R3, #6 
    /*000001b8*/ ADD         IP, R1, IP, LSL #1 
    /*000001bc*/ SXTH        R3, R3 
    /*000001c0*/ LDRSH       R4, [LR, #2] 
    /*000001c4*/ LDRB        LR, [LR, #4] 
    /*000001c8*/ CMP         R2, R3 
    /*000001cc*/ ORR         R2, LR, R4, LSL #8 
    /*000001d0*/ STRH        R2, [IP, #4] 
    /*000001d4*/ BLE         encoder_org_pack_x224
    /*000001d8*/ ADD         R0, R0, R3, LSL #2 
    /*000001dc*/ ADD         R1, R1, R3, LSL #1 
    /*000001e0*/ LDRSH       R2, [R0, #2] 
    /*000001e4*/ LDRB        R3, [R0, #4] 
    /*000001e8*/ ORR         R3, R3, R2, LSL #8 
    /*000001ec*/ STRH        R3, [R1, #4] 
    /*000001f0*/ POP         {R4, R5, R6, R7, PC} 
    encoder_org_pack_x1f4:
    /*000001f4*/ SUB         R2, LR, #1 
    /*000001f8*/ ADD         R1, R1, #2 
    /*000001fc*/ UXTH        R2, R2 
    /*00000200*/ ADD         R2, R2, #1 
    /*00000204*/ ADD         R2, R0, R2, LSL #2 
    encoder_org_pack_x208:
    /*00000208*/ LDRSH       IP, [R0, #2] 
    /*0000020c*/ LDRB        R3, [R0, #4]! 
    /*00000210*/ CMP         R0, R2 
    /*00000214*/ ORR         R3, R3, IP, LSL #8 
    /*00000218*/ STRH        R3, [R1, #2]! 
    /*0000021c*/ BNE         encoder_org_pack_x208
    /*00000220*/ POP         {R4, R5, R6, R7, PC} 
    encoder_org_pack_x224:
    /*00000224*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END encoder_org_pack


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.decoder_unpack
@ Size: 0x64
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN decoder_unpack
    /*00000000*/ LDRSB       R3, [R0, #1] 
    /*00000004*/ AND         R3, R3, #3 
    /*00000008*/ STRH        R3, [R1] 
    /*0000000c*/ CMP         R3, #3 
    /*00000010*/ CMPNE       R3, #0 
    /*00000014*/ BXEQ        LR 
    /*00000018*/ LDRB        R3, [R0, #2] 
    /*0000001c*/ CMP         R3, #0 
    /*00000020*/ BXEQ        LR 
    /*00000024*/ MOV         R3, #0 
    /*00000028*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    decoder_unpack_x2c:
    /*0000002c*/ ADD         R2, R3, #2 
    /*00000030*/ ADD         IP, R1, R3, LSL #2 
    /*00000034*/ ADD         LR, R3, #1 
    /*00000038*/ LSL         R2, R2, #1 
    /*0000003c*/ SXTH        R3, LR 
    /*00000040*/ LDRB        LR, [R0, R2] 
    /*00000044*/ STRH        LR, [IP, #2] 
    /*00000048*/ LDRH        R2, [R0, R2] 
    /*0000004c*/ LSR         R2, R2, #8 
    /*00000050*/ STRH        R2, [IP, #4] 
    /*00000054*/ LDRB        R2, [R0, #2] 
    /*00000058*/ CMP         R3, R2 
    /*0000005c*/ BLT         decoder_unpack_x2c
    /*00000060*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END decoder_unpack


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.decoder_org_unpack
@ Size: 0x64
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN decoder_org_unpack
    /*00000000*/ LDRSB       R3, [R0, #1] 
    /*00000004*/ AND         R3, R3, #3 
    /*00000008*/ STRH        R3, [R1] 
    /*0000000c*/ CMP         R3, #3 
    /*00000010*/ CMPNE       R3, #0 
    /*00000014*/ BXEQ        LR 
    /*00000018*/ LDRB        R3, [R0, #2] 
    /*0000001c*/ CMP         R3, #0 
    /*00000020*/ BXEQ        LR 
    /*00000024*/ MOV         R3, #0 
    /*00000028*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    decoder_org_unpack_x2c:
    /*0000002c*/ ADD         R2, R3, #2 
    /*00000030*/ ADD         LR, R1, R3, LSL #2 
    /*00000034*/ ADD         IP, R3, #1 
    /*00000038*/ LSL         R2, R2, #1 
    /*0000003c*/ SXTH        R3, IP 
    /*00000040*/ LDRH        IP, [R0, R2] 
    /*00000044*/ LSR         IP, IP, #8 
    /*00000048*/ STRH        IP, [LR, #2] 
    /*0000004c*/ LDRB        R2, [R0, R2] 
    /*00000050*/ STRH        R2, [LR, #4] 
    /*00000054*/ LDRB        R2, [R0, #2] 
    /*00000058*/ CMP         R3, R2 
    /*0000005c*/ BLT         decoder_org_unpack_x2c
    /*00000060*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END decoder_org_unpack


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G711_encode
@ Size: 0xa0
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G711_encode
    /*00000000*/ PUSH        {R4, R5, R6, LR} 
    /*00000004*/ SUB         SP, SP, #968                @ 0x3c8 
    /*00000008*/ ADD         R0, SP, #984                @ 0x3d8 
    /*0000000c*/ CMP         R3, #1 
    /*00000010*/ ADD         R4, SP, #4 
    /*00000014*/ MOV         R6, R2 
    /*00000018*/ LDRSH       R5, [R0] 
    /*0000001c*/ MOV         R0, R4 
    /*00000020*/ MOV         R2, R5 
    /*00000024*/ BEQ         G711_encode_x70
    /*00000028*/ CMP         R3, #2 
    /*0000002c*/ BEQ         G711_encode_x88
    /*00000030*/ CMP         R3, #65                     @ 0x41 
    /*00000034*/ BEQ         G711_encode_x54
    /*00000038*/ BL          G711_U_ENC
    /*0000003c*/ MOV         R2, R5 
    /*00000040*/ MOV         R1, R6 
    /*00000044*/ MOV         R0, R4 
    /*00000048*/ BL          encoder_org_pack
    G711_encode_x4c:
    /*0000004c*/ ADD         SP, SP, #968                @ 0x3c8 
    /*00000050*/ POP         {R4, R5, R6, PC} 
    G711_encode_x54:
    /*00000054*/ BL          G711_A_ENC
    /*00000058*/ MOV         R2, R5 
    /*0000005c*/ MOV         R1, R6 
    /*00000060*/ MOV         R0, R4 
    /*00000064*/ BL          encoder_org_pack
    /*00000068*/ ADD         SP, SP, #968                @ 0x3c8 
    /*0000006c*/ POP         {R4, R5, R6, PC} 
    G711_encode_x70:
    /*00000070*/ BL          G711_A_ENC
    /*00000074*/ MOV         R2, R5 
    /*00000078*/ MOV         R1, R6 
    /*0000007c*/ MOV         R0, R4 
    /*00000080*/ BL          encoder_pack
    /*00000084*/ B           G711_encode_x4c
    G711_encode_x88:
    /*00000088*/ BL          G711_U_ENC
    /*0000008c*/ MOV         R2, R5 
    /*00000090*/ MOV         R1, R6 
    /*00000094*/ MOV         R0, R4 
    /*00000098*/ BL          encoder_pack
    /*0000009c*/ B           G711_encode_x4c
FUNC_END G711_encode


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text.G711_decode
@ Size: 0xb0
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN G711_decode
    /*00000000*/ PUSH        {R4, R5, R6, LR} 
    /*00000004*/ CMP         R3, #1 
    /*00000008*/ LDRH        R4, [R1, #2] 
    /*0000000c*/ MOVW        IP, #510                    @ 0x1fe 
    /*00000010*/ SUB         SP, SP, #976                @ 0x3d0 
    /*00000014*/ MOV         R0, R1 
    /*00000018*/ AND         R4, IP, R4, LSL #1 
    /*0000001c*/ MOV         R6, R2 
    /*00000020*/ BEQ         G711_decode_x74
    /*00000024*/ CMP         R3, #2 
    /*00000028*/ ADD         R5, SP, #12 
    /*0000002c*/ MOV         R1, R5 
    /*00000030*/ BEQ         G711_decode_x98
    /*00000034*/ CMP         R3, #65                     @ 0x41 
    /*00000038*/ BEQ         G711_decode_x58
    /*0000003c*/ BL          decoder_org_unpack
    /*00000040*/ MOV         R2, R4 
    /*00000044*/ MOV         R1, R6 
    /*00000048*/ MOV         R0, R5 
    /*0000004c*/ BL          G711_U_DEC
    G711_decode_x50:
    /*00000050*/ ADD         SP, SP, #976                @ 0x3d0 
    /*00000054*/ POP         {R4, R5, R6, PC} 
    G711_decode_x58:
    /*00000058*/ BL          decoder_org_unpack
    /*0000005c*/ MOV         R2, R4 
    /*00000060*/ MOV         R1, R6 
    /*00000064*/ MOV         R0, R5 
    /*00000068*/ BL          G711_A_DEC
    /*0000006c*/ ADD         SP, SP, #976                @ 0x3d0 
    /*00000070*/ POP         {R4, R5, R6, PC} 
    G711_decode_x74:
    /*00000074*/ ADD         R3, SP, #12 
    /*00000078*/ STR         R3, [SP, #4] 
    /*0000007c*/ MOV         R1, R3 
    /*00000080*/ BL          decoder_unpack
    /*00000084*/ LDR         R0, [SP, #4] 
    /*00000088*/ MOV         R2, R4 
    /*0000008c*/ MOV         R1, R6 
    /*00000090*/ BL          G711_A_DEC
    /*00000094*/ B           G711_decode_x50
    G711_decode_x98:
    /*00000098*/ BL          decoder_unpack
    /*0000009c*/ MOV         R2, R4 
    /*000000a0*/ MOV         R1, R6 
    /*000000a4*/ MOV         R0, R5 
    /*000000a8*/ BL          G711_U_DEC
    /*000000ac*/ B           G711_decode_x50
FUNC_END G711_decode


