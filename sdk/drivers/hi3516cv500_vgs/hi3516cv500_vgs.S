@
@ -- FILES --
@

@ vgs.c
@ vgs_buf.c
@ vgs_drv_comm.c
@ vgs_drv_buf.c
@ vgs_drv.c
@ vgs_hal.c
@ vgs_split.c
@ vgs_init.c
@ hi3516cv500_vgs.mod.c


unsigned char rodata[2952] = {
    /*0000*/ "VGS_GetFreeTask\0",
    /*0010*/ "VGS_Init\0\0\0\0",
    /*001c*/ "VGS_Notify\0\0",
    /*0028*/ "VgsIoctlCopyFromUser\0\0\0\0",
    /*0040*/ "VGS_CheckNullPtr\0\0\0\0",
    /*0054*/ "\0\r\x01\x02\x03\x04\r\r\r\r\r\r\x05\x06\x07\r\r\r\r\r\r\r\r\x08\r\r\r\t\r\r\r\r\r\r\n\r\x0b\r\r\r\r\r\x0c\0",
    /*0080*/ "VGS_BeginJob\0\0\0\0",
    /*0090*/ "VGS_CheckHandle\0",
    /*00a0*/ "VGS_CheckJobInCreatedState\0\0",
    /*00bc*/ "\x03\0\0\0",
    /*00c0*/ "\x05\0\0\0",
    /*00c4*/ "\x06\0\0\0",
    /*00c8*/ "\x07\0\0\0",
    /*00cc*/ "\x08\0\0\0",
    /*00d0*/ "\x0f\0\0\0",
    /*00d4*/ "\x10\0\0\0",
    /*00d8*/ "\x11\0\0\0",
    /*00dc*/ "\x1a\0\0\0",
    /*00e0*/ "\x1e\0\0\0",
    /*00e4*/ "%\0\0\0",
    /*00e8*/ "'\0\0\0",
    /*00ec*/ "-\0\0\0",
    /*00f0*/ "VGS_DebugPrintImgInfo\0\0\0",
    /*0108*/ "\xf4!\0\0",
    /*010c*/ "\x08"\0\0",
    /*0110*/ "\x1c"\0\0",
    /*0114*/ ","\0\0",
    /*0118*/ "<"\0\0",
    /*011c*/ "P"\0\0",
    /*0120*/ "VGS_CheckFramePhyAddr\0\0\0",
    /*0138*/ "VgsIoctlCopyTaskInfo\0\0\0\0",
    /*0150*/ "VGS_VbAdd\0\0\0",
    /*015c*/ "VGS_VbAddStitch\0",
    /*016c*/ "VGS_VbSubInImg\0\0",
    /*017c*/ "VGS_VbSubOutImg\0",
    /*018c*/ "VGS_ProcTaskInJob\0\0\0",
    /*01a0*/ "VGS_TaskNotifyCaller\0\0\0\0",
    /*01b8*/ "VGS_EndJob\0\0",
    /*01c4*/ "VGS_EndJobBlock\0",
    /*01d4*/ "VGS_CancelJob\0\0\0",
    /*01e4*/ "VGS_CancelJobByModDev\0\0\0",
    /*01fc*/ "VGS_DrvCallBack\0",
    /*020c*/ "VGS_GetFreeStitchTask\0\0\0",
    /*0224*/ "VGS_AddOSDTaskEx\0\0\0\0",
    /*0238*/ "VGS_AddRotationTaskEx\0\0\0",
    /*0250*/ "VGS_AddCoverTaskEx\0\0",
    /*0264*/ "VGS_AddGetLumaStatTaskEx\0\0\0\0",
    /*0280*/ "VGS_AddOnlineTaskEx\0",
    /*0294*/ "VGS_Add2ScaleTaskEx\0",
    /*02a8*/ "VGS_AddBypassTaskEx\0",
    /*02bc*/ "VGS_AddQuickCopyTaskEx\0\0",
    /*02d4*/ "VGS_AddGMETaskEx\0\0\0\0",
    /*02e8*/ "VGS_UsrEndJob\0\0\0",
    /*02f8*/ "VGS_UsrAddCoverTask\0",
    /*030c*/ "VGS_UsrCancelJob\0\0\0\0",
    /*0320*/ "VgsIoctl\0\0\0\0",
    /*032c*/ "VGS_CancelAllBusyJob\0\0\0\0",
    /*0344*/ "VGS_CancelAllCreatedJob\0",
    /*035c*/ "VGS_Exit\0\0\0\0",
    /*0368*/ "VGS_JobCallBack\0",
    /*0378*/ "VGS_IntCallBack\0",
    /*0388*/ "\xb8\x18\0\0",
    /*038c*/ "\x84!\0\0",
    /*0390*/ "\x90!\0\0",
    /*0394*/ "\x9c!\0\0",
    /*0398*/ "\xa8!\0\0",
    /*039c*/ "\xb4!\0\0",
    /*03a0*/ "\xc4!\0\0",
    /*03a4*/ "\xd4!\0\0",
    /*03a8*/ "\xe4!\0\0",
    /*03ac*/ "\x18!\0\0",
    /*03b0*/ "$!\0\0",
    /*03b4*/ "0!\0\0",
    /*03b8*/ "<!\0\0",
    /*03bc*/ "H!\0\0",
    /*03c0*/ "T!\0\0",
    /*03c4*/ "`!\0\0",
    /*03c8*/ "l!\0\0",
    /*03cc*/ "x!\0\0",
    /*03d0*/ "\0\0\0\0",
    /*03d4*/ "\xb8\x18\0\0",
    /*03d8*/ "\x94 \0\0",
    /*03dc*/ "\xa0 \0\0",
    /*03e0*/ "\xa8 \0\0",
    /*03e4*/ "\xb4 \0\0",
    /*03e8*/ "\xbc \0\0",
    /*03ec*/ "\xc4 \0\0",
    /*03f0*/ "\xcc \0\0",
    /*03f4*/ "\xd4 \0\0",
    /*03f8*/ "\xdc \0\0",
    /*03fc*/ "\xe4 \0\0",
    /*0400*/ "\xf4 \0\0",
    /*0404*/ "\0!\0\0",
    /*0408*/ "\x0c!\0\0",
    /*040c*/ "| \0\0",
    /*0410*/ "\x84 \0\0",
    /*0414*/ "\x8c \0\0",
    /*0418*/ "\0\0\0\0",
    /*041c*/ "\\x1a\0\0",
    /*0420*/ "X\x1b\0\0",
    /*0424*/ "d \0\0",
    /*0428*/ "d\x1b\0\0",
    /*042c*/ "p \0\0",
    /*0430*/ "VGS_DeInitQueueBuf\0\0",
    /*0444*/ "VGS_DeInitJobBuf\0\0\0\0",
    /*0458*/ "VGS_DeInitTaskBuf\0\0\0",
    /*046c*/ "VGS_GetTaskFromFreeList\0",
    /*0484*/ "VGS_GetTaskFromJob\0\0",
    /*0498*/ "VGS_InitQueueBuf\0\0\0\0",
    /*04ac*/ "VGS_InitJobBuf\0\0",
    /*04bc*/ "VGS_InitTaskBuf\0",
    /*04cc*/ "VGS_GetJobFromCreatedList\0\0\0",
    /*04e8*/ "VGS_GetFirstJobFromBusyList\0",
    /*0504*/ "VGS_QueryFirstJobFromBusyList\0\0\0",
    /*0524*/ "VGS_GetJobFromBusyList\0\0",
    /*053c*/ "VGS_GetJobFromProcList\0\0",
    /*0554*/ "\xe0)\0\0",
    /*0558*/ "\xec)\0\0",
    /*055c*/ "\xf4)\0\0",
    /*0560*/ "VGS_DrvCommCancelJob\0\0\0\0",
    /*0578*/ "VGS_DrvCommConvertTaskInfo\0\0",
    /*0594*/ "VGS_DrvCommPrepareHWInfo\0\0\0\0",
    /*05b0*/ "VGS_DrvCommPrepareNodes\0",
    /*05c8*/ "VGS_DrvCommStartWaitlist\0\0\0\0",
    /*05e4*/ "VGS_DrvCommChainAssembly\0\0\0\0",
    /*0600*/ "VGS_DrvCommSubmitJob\0\0\0\0",
    /*0618*/ "VGS_DrvCommOpen\0",
    /*0628*/ "VGS_DrvCommExitEx\0\0\0",
    /*063c*/ "VGS_DrvCommIrqProc\0\0",
    /*0650*/ "VGS_DrvDeInitJobBuf\0",
    /*0664*/ "VGS_DrvDeInitTaskBuf\0\0\0\0",
    /*067c*/ "VGS_DrvInitJobBuf\0\0\0",
    /*0690*/ "VGS_DrvInitTaskBuf\0\0",
    /*06a4*/ "VGS_DrvInitNodeBuf\0\0",
    /*06b8*/ "VGS_DrvDeInitNodeBuf\0\0\0\0",
    /*06d0*/ "VGS_DrvGetNodeFromTask\0\0",
    /*06e8*/ "VGS_DrvGetTaskFromJob\0\0\0",
    /*0700*/ "VGS_DrvGetJobFromFreeList\0\0\0",
    /*071c*/ "VGS_DrvGetJobFromWaitList\0\0\0",
    /*0738*/ "VGS_DrvGetJobFromProcList\0\0\0",
    /*0754*/ "VGS_DrvGetJobFromProcFreeList\0\0\0",
    /*0774*/ "VGS_DrvGetJobFromBusyList\0\0\0",
    /*0790*/ "VGS_DRV_CheckRect\0\0\0",
    /*07a4*/ "VGS_DRV_CheckImageAddressAttr\0\0\0",
    /*07c4*/ "VGS_DRV_CheckImageCommonAttr\0\0\0\0",
    /*07e4*/ "VGS_DRV_COMM_CheckTureFalse\0",
    /*0800*/ "VGS_DRV_RequestIrq\0\0",
    /*0814*/ "T:\0\0",
    /*0818*/ "`:\0\0",
    /*081c*/ "h:\0\0",
    /*0820*/ "t:\0\0",
    /*0824*/ "\x80:\0\0",
    /*0828*/ "\x88:\0\0",
    /*082c*/ "VGS_DRV_IsWrongInt\0\0",
    /*0840*/ "VGS_DRV_CheckLumaStatInfo\0\0\0",
    /*085c*/ "VGS_DRV_CheckQuadRangleCover\0\0\0\0",
    /*087c*/ "VGS_DRV_CheckRotationInfo\0\0\0",
    /*0898*/ "VGS_DRV_CheckImageQuickCopy\0",
    /*08b4*/ "VGS_DRV_CheckInImage\0\0\0\0",
    /*08cc*/ "VGS_DRV_CheckOutImage\0\0\0",
    /*08e4*/ "VGS_DRV_CheckInOutImage\0",
    /*08fc*/ "VGS_DRV_CheckOsd\0\0\0\0",
    /*0910*/ "VGS_DRV_CheckCover\0\0",
    /*0924*/ "VGS_DRV_CheckDrawLine\0\0\0",
    /*093c*/ "VGS_DRV_CheckUsrOsd\0",
    /*0950*/ "VGS_DRV_CheckUsrCover\0\0\0",
    /*0968*/ "VGS_DRV_CheckDstRect\0\0\0\0",
    /*0980*/ "VGS_DRV_CheckOnlineInfo_COVER\0\0\0",
    /*09a0*/ "VGS_DRV_CheckOnlineInfo\0",
    /*09b8*/ "\0\0\0\0",
    /*09bc*/ "\0\0\0\0",
    /*09c0*/ "\0\0\0\0",
    /*09c4*/ "\0\0\0\0",
    /*09c8*/ "\0\0\0\0",
    /*09cc*/ "\0\0\0\0",
    /*09d0*/ "\0\0\0\0",
    /*09d4*/ "\0\0\0\0",
    /*09d8*/ "\0\0\0\0",
    /*09dc*/ "\0\0\0\0",
    /*09e0*/ "\0\0\0\0",
    /*09e4*/ "\0\0\0\0",
    /*09e8*/ "\0\0\0\0",
    /*09ec*/ "\0\0\0\0",
    /*09f0*/ "\0\0\0\0",
    /*09f4*/ "\0\0\0\0",
    /*09f8*/ "hisilicon,hisi-vgs\0\0",
    /*0a0c*/ "\0\0\0\0",
    /*0a10*/ "\0\0\0\0",
    /*0a14*/ "\0\0\0\0",
    /*0a18*/ "\0\0\0\0",
    /*0a1c*/ "\0\0\0\0",
    /*0a20*/ "\0\0\0\0",
    /*0a24*/ "\0\0\0\0",
    /*0a28*/ "\0\0\0\0",
    /*0a2c*/ "\0\0\0\0",
    /*0a30*/ "\0\0\0\0",
    /*0a34*/ "\0\0\0\0",
    /*0a38*/ "\0\0\0\0",
    /*0a3c*/ "\0\0\0\0",
    /*0a40*/ "\0\0\0\0",
    /*0a44*/ "\0\0\0\0",
    /*0a48*/ "\0\0\0\0",
    /*0a4c*/ "\0\0\0\0",
    /*0a50*/ "\0\0\0\0",
    /*0a54*/ "\0\0\0\0",
    /*0a58*/ "\0\0\0\0",
    /*0a5c*/ "\0\0\0\0",
    /*0a60*/ "\0\0\0\0",
    /*0a64*/ "\0\0\0\0",
    /*0a68*/ "\0\0\0\0",
    /*0a6c*/ "\0\0\0\0",
    /*0a70*/ "\0\0\0\0",
    /*0a74*/ "\0\0\0\0",
    /*0a78*/ "\0\0\0\0",
    /*0a7c*/ "\0\0\0\0",
    /*0a80*/ "\0\0\0\0",
    /*0a84*/ "\0\0\0\0",
    /*0a88*/ "\0\0\0\0",
    /*0a8c*/ "\0\0\0\0",
    /*0a90*/ "\0\0\0\0",
    /*0a94*/ "\0\0\0\0",
    /*0a98*/ "\0\0\0\0",
    /*0a9c*/ "\0\0\0\0",
    /*0aa0*/ "\0\0\0\0",
    /*0aa4*/ "\0\0\0\0",
    /*0aa8*/ "\0\0\0\0",
    /*0aac*/ "\0\0\0\0",
    /*0ab0*/ "\0\0\0\0",
    /*0ab4*/ "\0\0\0\0",
    /*0ab8*/ "\0\0\0\0",
    /*0abc*/ "\0\0\0\0",
    /*0ac0*/ "\0\0\0\0",
    /*0ac4*/ "\0\0\0\0",
    /*0ac8*/ "\0\0\0\0",
    /*0acc*/ "\0\0\0\0",
    /*0ad0*/ "\0\0\0\0",
    /*0ad4*/ "\0\0\0\0",
    /*0ad8*/ "\0\0\0\0",
    /*0adc*/ "\0\0\0\0",
    /*0ae0*/ "\0\0\0\0",
    /*0ae4*/ "\0\0\0\0",
    /*0ae8*/ "\0\0\0\0",
    /*0aec*/ "\0\0\0\0",
    /*0af0*/ "\0\0\0\0",
    /*0af4*/ "\0\0\0\0",
    /*0af8*/ "\0\0\0\0",
    /*0afc*/ "\0\0\0\0",
    /*0b00*/ "\0\0\0\0",
    /*0b04*/ "\0\0\0\0",
    /*0b08*/ "\0\0\0\0",
    /*0b0c*/ "\0\0\0\0",
    /*0b10*/ "\0\0\0\0",
    /*0b14*/ "\0\0\0\0",
    /*0b18*/ "\0\0\0\0",
    /*0b1c*/ "\0\0\0\0",
    /*0b20*/ "\0\0\0\0",
    /*0b24*/ "\0\0\0\0",
    /*0b28*/ "\0\0\0\0",
    /*0b2c*/ "\0\0\0\0",
    /*0b30*/ "\0\0\0\0",
    /*0b34*/ "\0\0\0\0",
    /*0b38*/ "\0\0\0\0",
    /*0b3c*/ "\0\0\0\0",
    /*0b40*/ "max_vgs_node\0\0\0\0",
    /*0b50*/ "max_vgs_task\0\0\0\0",
    /*0b60*/ "max_vgs_job\0",
    /*0b6c*/ "vgs_en\0\0",
    /*0b74*/ "\x01\0\0\0",
    /*0b78*/ "\x04\0\0\0",
    /*0b7c*/ "\0\0\0\0",
    /*0b80*/ "\0\0\0\0",
    /*0b84*/ "\0\0\0\0",
    /*0b88*/ ""
};

unsigned char rel.rodata[456] = {
    /*0000*/ "\x08\x01\0\0",
    /*0004*/ "\x02\x06\0\0",
    /*0008*/ "\x0c\x01\0\0",
    /*000c*/ "\x02\x06\0\0",
    /*0010*/ "\x10\x01\0\0",
    /*0014*/ "\x02\x06\0\0",
    /*0018*/ "\x14\x01\0\0",
    /*001c*/ "\x02\x06\0\0",
    /*0020*/ "\x18\x01\0\0",
    /*0024*/ "\x02\x06\0\0",
    /*0028*/ "\x1c\x01\0\0",
    /*002c*/ "\x02\x06\0\0",
    /*0030*/ "\x88\x03\0\0",
    /*0034*/ "\x02\x06\0\0",
    /*0038*/ "\x8c\x03\0\0",
    /*003c*/ "\x02\x06\0\0",
    /*0040*/ "\x90\x03\0\0",
    /*0044*/ "\x02\x06\0\0",
    /*0048*/ "\x94\x03\0\0",
    /*004c*/ "\x02\x06\0\0",
    /*0050*/ "\x98\x03\0\0",
    /*0054*/ "\x02\x06\0\0",
    /*0058*/ "\x9c\x03\0\0",
    /*005c*/ "\x02\x06\0\0",
    /*0060*/ "\xa0\x03\0\0",
    /*0064*/ "\x02\x06\0\0",
    /*0068*/ "\xa4\x03\0\0",
    /*006c*/ "\x02\x06\0\0",
    /*0070*/ "\xa8\x03\0\0",
    /*0074*/ "\x02\x06\0\0",
    /*0078*/ "\xac\x03\0\0",
    /*007c*/ "\x02\x06\0\0",
    /*0080*/ "\xb0\x03\0\0",
    /*0084*/ "\x02\x06\0\0",
    /*0088*/ "\xb4\x03\0\0",
    /*008c*/ "\x02\x06\0\0",
    /*0090*/ "\xb8\x03\0\0",
    /*0094*/ "\x02\x06\0\0",
    /*0098*/ "\xbc\x03\0\0",
    /*009c*/ "\x02\x06\0\0",
    /*00a0*/ "\xc0\x03\0\0",
    /*00a4*/ "\x02\x06\0\0",
    /*00a8*/ "\xc4\x03\0\0",
    /*00ac*/ "\x02\x06\0\0",
    /*00b0*/ "\xc8\x03\0\0",
    /*00b4*/ "\x02\x06\0\0",
    /*00b8*/ "\xcc\x03\0\0",
    /*00bc*/ "\x02\x06\0\0",
    /*00c0*/ "\xd4\x03\0\0",
    /*00c4*/ "\x02\x06\0\0",
    /*00c8*/ "\xd8\x03\0\0",
    /*00cc*/ "\x02\x06\0\0",
    /*00d0*/ "\xdc\x03\0\0",
    /*00d4*/ "\x02\x06\0\0",
    /*00d8*/ "\xe0\x03\0\0",
    /*00dc*/ "\x02\x06\0\0",
    /*00e0*/ "\xe4\x03\0\0",
    /*00e4*/ "\x02\x06\0\0",
    /*00e8*/ "\xe8\x03\0\0",
    /*00ec*/ "\x02\x06\0\0",
    /*00f0*/ "\xec\x03\0\0",
    /*00f4*/ "\x02\x06\0\0",
    /*00f8*/ "\xf0\x03\0\0",
    /*00fc*/ "\x02\x06\0\0",
    /*0100*/ "\xf4\x03\0\0",
    /*0104*/ "\x02\x06\0\0",
    /*0108*/ "\xf8\x03\0\0",
    /*010c*/ "\x02\x06\0\0",
    /*0110*/ "\xfc\x03\0\0",
    /*0114*/ "\x02\x06\0\0",
    /*0118*/ "\0\x04\0\0",
    /*011c*/ "\x02\x06\0\0",
    /*0120*/ "\x04\x04\0\0",
    /*0124*/ "\x02\x06\0\0",
    /*0128*/ "\x08\x04\0\0",
    /*012c*/ "\x02\x06\0\0",
    /*0130*/ "\x0c\x04\0\0",
    /*0134*/ "\x02\x06\0\0",
    /*0138*/ "\x10\x04\0\0",
    /*013c*/ "\x02\x06\0\0",
    /*0140*/ "\x14\x04\0\0",
    /*0144*/ "\x02\x06\0\0",
    /*0148*/ "\x1c\x04\0\0",
    /*014c*/ "\x02\x06\0\0",
    /*0150*/ " \x04\0\0",
    /*0154*/ "\x02\x06\0\0",
    /*0158*/ "$\x04\0\0",
    /*015c*/ "\x02\x06\0\0",
    /*0160*/ "(\x04\0\0",
    /*0164*/ "\x02\x06\0\0",
    /*0168*/ ",\x04\0\0",
    /*016c*/ "\x02\x06\0\0",
    /*0170*/ "T\x05\0\0",
    /*0174*/ "\x02\x06\0\0",
    /*0178*/ "X\x05\0\0",
    /*017c*/ "\x02\x06\0\0",
    /*0180*/ "\\x05\0\0",
    /*0184*/ "\x02\x06\0\0",
    /*0188*/ "\x14\x08\0\0",
    /*018c*/ "\x02\x06\0\0",
    /*0190*/ "\x18\x08\0\0",
    /*0194*/ "\x02\x06\0\0",
    /*0198*/ "\x1c\x08\0\0",
    /*019c*/ "\x02\x06\0\0",
    /*01a0*/ " \x08\0\0",
    /*01a4*/ "\x02\x06\0\0",
    /*01a8*/ "$\x08\0\0",
    /*01ac*/ "\x02\x06\0\0",
    /*01b0*/ "(\x08\0\0",
    /*01b4*/ "\x02\x06\0\0",
    /*01b8*/ "\x80\x0b\0\0",
    /*01bc*/ "\x02\xed\x02\0",
    /*01c0*/ "\x84\x0b\0\0",
    /*01c4*/ "\x02\xfe\x02\0",
    /*01c8*/ ""
};

unsigned char rodata.str1.4[15143] = {
    /*0000*/ "[Func]:%s [Line]:%d [Info]:VGS has no free task!\n\0\0\0",
    /*0034*/ "[Func]:%s [Line]:%d [Info]:alloc buf(%d B) err!!\n\0\0\0",
    /*0068*/ "[Func]:%s [Line]:%d [Info]:open hal err = %X\n\0\0\0",
    /*0098*/ "[Func]:%s [Line]:%d [Info]:open drv err = %X\n\0\0\0",
    /*00c8*/ "[Func]:%s [Line]:%d [Info]:VGS was notified to exit...\n\0",
    /*0100*/ "[Func]:%s [Line]:%d [Info]:Copy arg to kernel err!\n\0",
    /*0134*/ "[Func]:%s [Line]:%d [Info]:Copy arg to kernel, the addr is invalid!\n\0\0\0\0",
    /*017c*/ "[Func]:%s [Line]:%d [Info]:NULL Ptr!\n\0\0\0",
    /*01a4*/ "[Func]:%s [Line]:%d [Info]:illegal job pri %d\n\0\0",
    /*01d4*/ "[Func]:%s [Line]:%d [Info]:illegal mod id %d\n\0\0\0",
    /*0204*/ "[Func]:%s [Line]:%d [Info]:mod(%d) illegal job calldevid %u\n\0\0\0\0",
    /*0244*/ "[Func]:%s [Line]:%d [Info]:mod(%d) illegal job callchnid %u\n\0\0\0\0",
    /*0284*/ "[Func]:%s [Line]:%d [Info]:illegal job type %d\n\0",
    /*02b4*/ "[Func]:%s [Line]:%d [Info]:vgs mod not ready\n\0\0\0",
    /*02e4*/ "[Func]:%s [Line]:%d [Info]:no free job!\n\0\0\0\0",
    /*0310*/ "VGS_JOB_STATE_FREE == pJob->enJobState\0\0",
    /*0338*/ "\nASSERT at:\n  >Function : %s\n  >Line No. : %d\n  >Condition: %s\n\0",
    /*0378*/ "[Func]:%s [Line]:%d [Info]:BeginJob ok: put job(hdl=%d addr=%p) to createdList\n\0",
    /*03c8*/ "[Func]:%s [Line]:%d [Info]:job handle %d err!\n\0\0",
    /*03f8*/ "[Func]:%s [Line]:%d [Info]:job state(%d) not in created!\n\0\0\0",
    /*0434*/ "[Func]:%s [Line]:%d [Info]:fmt = %d width = %u height = %u field = %d YphyAddr = %llx CbphyAddr = %llx CrphyAddr = %llx YVirAddr = %llx CbVirAddr = %llx CrVirAddr = %llx YStride = %u CbStride = %u CrStride = %u\n\0",
    /*0508*/ "[Func]:%s [Line]:%d [Info]:VIDEO_FORMAT_LINEAR_DISCRETE not support compress!\n\0\0",
    /*0558*/ "[Func]:%s [Line]:%d [Info]:Check %s(0x%llx) failed!\n\0\0\0\0",
    /*0590*/ "[Func]:%s [Line]:%d [Info]:Check in-img mmz phy addr err!\n\0\0",
    /*05cc*/ "[Func]:%s [Line]:%d [Info]:Check out-img mmz phy addr err!\n\0",
    /*0608*/ "[Func]:%s [Line]:%d [Info]:inimg VB++ err, mod %d chn %u!\n\0\0",
    /*0644*/ "[Func]:%s [Line]:%d [Info]:outimg VB++ err, mod %d chn %u!\n\0",
    /*0680*/ "inimg VB++: pool:%d PhyAddr:0x%llx\n\0",
    /*06a4*/ "Outimg VB++: pool:%d PhyAddr:0x%llx\n\0\0\0\0",
    /*06cc*/ "[Func]:%s [Line]:%d [Info]:inimg[%u] VB++ err, mod %d chn %u!\n\0\0",
    /*070c*/ "inimg[%d] VB++: pool:%d PhyAddr:0x%llx\n\0",
    /*0734*/ "[Func]:%s [Line]:%d [Info]:inimg[%u] VB-- err, mod %d chn %u!\n\0\0",
    /*0774*/ "inimg[%u] VB--: pool:%u PhyAddr:0x%llx\n\0",
    /*079c*/ "[Func]:%s [Line]:%d [Info]:inimg VB-- err, mod %d chn %u!\n\0\0",
    /*07d8*/ "inimg VB--: pool:%d PhyAddr:0x%llx\n\0",
    /*07fc*/ "[Func]:%s [Line]:%d [Info]:outimg VB-- err, mod %d chn %u!\n\0",
    /*0838*/ "Outimg VB--: pool:%d PhyAddr:0x%llx\n\0\0\0\0",
    /*0860*/ "Outimg VB--: pool:%u PhyAddr:0x%llx\n\0\0\0\0",
    /*0888*/ "0\0\0\0",
    /*088c*/ "[Func]:%s [Line]:%d [Info]:notify user task has finished .....\n\0",
    /*08cc*/ "[Func]:%s [Line]:%d [Info]:hal=%d job=%p\n\0\0\0",
    /*08f8*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod %d dev %u has no task!\n\0",
    /*093c*/ "HI_ID_BUTT > pJob->enCallModId\0\0",
    /*095c*/ "[Func]:%s [Line]:%d [Info]:submit job err!\n\0",
    /*0988*/ "[Func]:%s [Line]:%d [Info]:end job(%d) err!\n\0\0\0\0",
    /*09b8*/ "[Func]:%s [Line]:%d [Info]:wait_event err, %d %d %u %u\n\0",
    /*09f0*/ "free\0\0\0\0",
    /*09f8*/ "submit to hardware\0\0",
    /*0a0c*/ "[Func]:%s [Line]:%d [Info]:cancel job(state %d) failed, it has been %s.\n\0\0\0\0",
    /*0a58*/ "[Func]:%s [Line]:%d [Info]:cancel job(state %d) failed, it has been submit to hardware.\n\0\0\0\0",
    /*0ab4*/ "[Func]:%s [Line]:%d [Info]:job(hdl %d)(state %d) now is canceling!\n\0",
    /*0af8*/ "[Func]:%s [Line]:%d [Info]:job cancel failed!\n\0\0",
    /*0b28*/ "[Func]:%s [Line]:%d [Info]:%d %d %d\n\0\0\0\0",
    /*0b50*/ "[Func]:%s [Line]:%d [Info]:cancle job(hdl %d)(addr %p). free job num:%d task num:%d\n\0\0\0\0",
    /*0ba8*/ "[Func]:%s [Line]:%d [Info]:Mod:%d Dev:%u Chn:%u now is canceling!!\n\0",
    /*0bec*/ "[Func]:%s [Line]:%d [Info]:mod %d dev %u chn %u cancel job failed!\n\0",
    /*0c30*/ "pJob != HI_NULL\0",
    /*0c40*/ "[Func]:%s [Line]:%d [Info]:cancle job(hdl %d)(addr:%p). free job num:%d, task num:%d\n\0\0\0",
    /*0c98*/ "[Func]:%s [Line]:%d [Info]:%d %d %d %d\n\0",
    /*0cc0*/ "VGS_JOB_STATE_BUSY == pJob->enJobState\0\0",
    /*0ce8*/ "pJobTemp->enJobState %d\n\0\0\0\0",
    /*0d04*/ "[Func]:%s [Line]:%d [Info]:Don't support OSD!\n\0\0",
    /*0d34*/ "[Func]:%s [Line]:%d [Info]:Can't add to a %s job!\n\0\0",
    /*0d68*/ "[Func]:%s [Line]:%d [Info]:illegal task callmodid %d (not equal job modid:%d)\n\0\0",
    /*0db8*/ "[Func]:%s [Line]:%d [Info]:illegal task devid %u (not equal job devid:%u)\n\0\0",
    /*0e04*/ "[Func]:%s [Line]:%d [Info]:illegal task chnid %u (not equal job chnid:%u)\n\0\0",
    /*0e50*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check in-img err!\n\0\0",
    /*0e9c*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check out-img err!\n\0",
    /*0ee8*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check img err!\n\0",
    /*0f30*/ "[Func]:%s [Line]:%d [Info]:job (%d) from mod[%d] dev[%u] check dynamic range err\n\0\0\0",
    /*0f84*/ "[Func]:%s [Line]:%d [Info]:input img CompressMode:%d, not the same with out img CompressMode:%d\n\0\0\0\0",
    /*0fe8*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check osd err!\n\0",
    /*1030*/ "[Func]:%s [Line]:%d [Info]:VB++ err with:0x%x!\n\0",
    /*1060*/ "[Func]:%s [Line]:%d [Info]:Don't support rotation!\n\0",
    /*1094*/ "[Func]:%s [Line]:%d [Info]:illegal rotation angle:%d\n\0\0\0",
    /*10cc*/ "[Func]:%s [Line]:%d [Info]:The VB of input and output should be the same!\n\0\0",
    /*1118*/ "[Func]:%s [Line]:%d [Info]:Not enough free task!\n\0\0\0",
    /*114c*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check input output img err\n\0",
    /*11a0*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] sdev[%u] check dynamic range err\n\0\0\0",
    /*11f4*/ "[Func]:%s [Line]:%d [Info]:check quadrangle cover err!\n\0",
    /*122c*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check dynamic range err!\n\0\0\0",
    /*1280*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] can't convert PIXEL_FORMAT_YUV_400 to other pixel format!\n\0\0",
    /*12f4*/ "[Func]:%s [Line]:%d [Info]:job(%d) from mod[%d] dev[%u] check online info err!\n\0",
    /*1344*/ "[Func]:%s [Line]:%d [Info]:Get VB(%u B) err!\n\0\0\0",
    /*1374*/ "[Func]:%s [Line]:%d [Info]:Don't support quick copy!\n\0\0\0",
    /*13ac*/ "[Func]:%s [Line]:%d [Info]:PixelFormat of input(%d) and output(%d) should be the same!\n\0",
    /*1404*/ "[Func]:%s [Line]:%d [Info]:Don't support GME!\n\0\0",
    /*1434*/ "[Func]:%s [Line]:%d [Info]:end job(%d) err, the job is not begun by usr!\n\0\0\0",
    /*1480*/ "[Func]:%s [Line]:%d [Info]:Cover's type %d is err!\n\0",
    /*14b4*/ "[Func]:%s [Line]:%d [Info]:You can only cancel the user job!\n\0\0\0",
    /*14f4*/ "[Func]:%s [Line]:%d [Info]:illegal u32ArraySize:%u, range is [1, %d].\n\0\0",
    /*153c*/ "[Func]:%s [Line]:%d [Info]:alloc drawline buf err!\n\0",
    /*1570*/ "[Func]:%s [Line]:%d [Info]:alloc cover buf err!\n\0\0\0\0",
    /*15a4*/ "[Func]:%s [Line]:%d [Info]:alloc osd buf err!\n\0\0",
    /*15d4*/ "[Func]:%s [Line]:%d [Info]:Check osd mmz phy addr err!\n\0",
    /*160c*/ "[Func]:%s [Line]:%d [Info]:Check osd array mmz phy addr err!\n\0\0\0",
    /*164c*/ "HI_NULL != pCurJob && (VGS_JOB_STATE_PROCED == pCurJob->enJobState || VGS_JOB_STATE_PROCING == pCurJob->enJobState)\0",
    /*16c0*/ "HI_NULL != pCurJob && (VGS_JOB_STATE_BUSY == pCurJob->enJobState)\0\0\0",
    /*1704*/ "HI_NULL != pCurJob && VGS_JOB_STATE_CREATED == pCurJob->enJobState\0\0",
    /*1748*/ "[Func]:%s [Line]:%d [Info]:VGS exit successfully...\n\0\0\0\0",
    /*1780*/ "[Func]:%s [Line]:%d [Info]:Job hdl err: %d!\n\0\0\0\0",
    /*17b0*/ "%s %d job state:%d\n\0",
    /*17c4*/ "[Func]:%s [Line]:%d [Info]:Proc job num:%d, first Job:%d(addr:%p)\n\0\0",
    /*1808*/ "\n-----MODULE PARAM--------------------------------------------------------\n\0",
    /*1854*/ "max_task_num\0\0\0\0",
    /*1864*/ "max_job_num\0",
    /*1870*/ "%15s%15s%15s%15s\n\0\0\0",
    /*1884*/ "bVgsHdrSupport\0\0",
    /*1894*/ "max_node_num\0\0\0\0",
    /*18a4*/ "%15u%15u%15u%15u\n\0\0\0",
    /*18b8*/ "   SeqNo\0\0\0\0",
    /*18c4*/ "%s\0\0",
    /*18c8*/ "\n%8u%8s%8d%8u%8s%12u%12u%12u%12u\0\0\0\0",
    /*18ec*/ "\n%8u%5s->%4s%7d%8d%7d%6d%6d%6d%7d%6d%12d%9d%9d%9d\0\0\0",
    /*1920*/ "\n-----RECENT JOB INFO1----------------------------------------------------\n\0",
    /*196c*/ "\r\n\n-----RECENT JOB INFO2----------------------------------------------------\n\0\0\0",
    /*19bc*/ "\r\n\n-----MAX WASTE TIME JOB INFO1--------------------------------------------\n\0\0\0",
    /*1a0c*/ "\r\n\n-----MAX WASTE TIME JOB INFO2--------------------------------------------\n\0\0\0",
    /*1a5c*/ "  AllJobNum\0",
    /*1a68*/ "\n-----VGS JOB STATUS------------------------------------------------------\n\0",
    /*1ab4*/ "   Success\0\0",
    /*1ac0*/ "      Fail\0\0",
    /*1acc*/ "    Cancel\0\0",
    /*1ad8*/ "\n%10u%10u%10u\0\0\0",
    /*1ae8*/ "%11u%11d%11d%11u%11u\0\0\0\0",
    /*1b00*/ "\n-----VGS TASK STATUS-----------------------------------------------------\n\0",
    /*1b4c*/ " AllTaskNum\0",
    /*1b58*/ "    FreeNum\0",
    /*1b64*/ "    BusyNum\0",
    /*1b70*/ "%11u%11u%11u\0\0\0\0",
    /*1b80*/ "\n-----VGS NODE STATUS-----------------------------------------------------\n\0",
    /*1bcc*/ "BusyNum\0",
    /*1bd4*/ "AllNodeNum\0\0",
    /*1be0*/ "%13s%12s%12s%12s%12s%10s\n\0\0\0",
    /*1bfc*/ "IntFail\0",
    /*1c04*/ "SubmitFail\0\0",
    /*1c10*/ "MaxInJob\0\0\0\0",
    /*1c1c*/ "MinFree\0",
    /*1c24*/ "%13u%12u%12u%12u%12u%10u\0\0\0\0",
    /*1c40*/ "\n[VGS] Version: [Hi3516CV500_MPP_V2.0.1.0 B090 Release], Build Time[Jan 14 2019, 20:23:45]\n\n\0\0\0\0",
    /*1ca0*/ "\r\n\n\0",
    /*1ca4*/ "\r\n\0\0",
    /*1ca8*/ "-----ModuleParam: max_vgs_job %u is more than %d, it will be set to %d!\n\0\0\0\0",
    /*1cf4*/ "-----ModuleParam: max_vgs_job %u is less than %d, it will be set to %d!\n\0\0\0\0",
    /*1d40*/ "-----ModuleParam: max_vgs_task %u is more than %d, it will be set to %d!\n\0\0\0",
    /*1d8c*/ "-----ModuleParam: max_vgs_task %u is less than %d, it will be set to %d!\n\0\0\0",
    /*1dd8*/ "-----ModuleParam: max_vgs_node %u is more than %d, it will be set to %d!\n\0\0\0",
    /*1e24*/ "-----ModuleParam: max_vgs_node %u is less than %d, it will be set to %d!\n\0\0\0",
    /*1e70*/ "-----ModuleParam: vgs_weight_threshold %u is more than %d, it will be set to %d!\n\0\0\0",
    /*1ec4*/ "-----ModuleParam: vgs_weight_threshold %u is less than %d, it will be set to %d!\n\0\0\0",
    /*1f18*/ "-----ModuleParam: vgs_en[0] = %u, it must be 1!\n\0\0\0\0",
    /*1f4c*/ "-----ModuleParam: bVgsHdrSupport %u must be 0 or 1, it will be set to 0!\n\0\0\0",
    /*1f98*/ "vgs\0",
    /*1f9c*/ "VGS module param is illegal!\n\0\0\0",
    /*1fbc*/ "Regist vgs device err!\n\0",
    /*1fd4*/ "Regist vgs module err!\n\0",
    /*1fec*/ "Create vgs proc err!\n\0\0\0",
    /*2004*/ "Hi3516CV500\0",
    /*2010*/ "load vgs.ko for %s...OK!\n\0\0\0",
    /*202c*/ "load vgs.ko for %s...err!\n\0\0",
    /*2048*/ "unload vgs.ko for %s...OK!\n\0",
    /*2064*/ "   BeginNum\0",
    /*2070*/ " ProcingNum\0",
    /*207c*/ "NONE\0\0\0\0",
    /*2084*/ " SEG\0\0\0\0",
    /*208c*/ "TILE\0\0\0\0",
    /*2094*/ "    CmpMode\0",
    /*20a0*/ " CropEn\0",
    /*20a8*/ " CoverEn\0\0\0\0",
    /*20b4*/ " VhdrEn\0",
    /*20bc*/ " OsdEn\0\0",
    /*20c4*/ " ZmeEn\0\0",
    /*20cc*/ " LBAEn\0\0",
    /*20d4*/ " LumaEn\0",
    /*20dc*/ " FpdEn\0\0",
    /*20e4*/ " QuickCopyEn\0\0\0\0",
    /*20f4*/ " RotateEn\0\0\0",
    /*2100*/ " StitchEn\0\0\0",
    /*210c*/ " ByPassEn\0\0\0",
    /*2118*/ "    Free\0\0\0\0",
    /*2124*/ "   Begin\0\0\0\0",
    /*2130*/ "  EndJob\0\0\0\0",
    /*213c*/ "  Summit\0\0\0\0",
    /*2148*/ "WaitProc\0\0\0\0",
    /*2154*/ " Procing\0\0\0\0",
    /*2160*/ "  Proced\0\0\0\0",
    /*216c*/ " ProcErr\0\0\0\0",
    /*2178*/ "    Butt\0\0\0\0",
    /*2184*/ " ModName\0\0\0\0",
    /*2190*/ "  JobHdl\0\0\0\0",
    /*219c*/ " TaskNum\0\0\0\0",
    /*21a8*/ "   State\0\0\0\0",
    /*21b4*/ "      InSize\0\0\0\0",
    /*21c4*/ "     OutSize\0\0\0\0",
    /*21d4*/ "    CostTime\0\0\0\0",
    /*21e4*/ "      HwTime\0\0\0\0",
    /*21f4*/ "u64HeaderPhyAddr[0]\0",
    /*2208*/ "u64HeaderPhyAddr[1]\0",
    /*221c*/ "u64PhyAddr[0]\0\0\0",
    /*222c*/ "u64PhyAddr[1]\0\0\0",
    /*223c*/ "u64ExtPhyAddr[0]\0\0\0\0",
    /*2250*/ "u64ExtPhyAddr[1]\0\0\0\0",
    /*2264*/ "[Func]:%s [Line]:%d [Info]:to free queue buf:%p\n\0\0\0\0",
    /*2298*/ "[Func]:%s [Line]:%d [Info]:to free job node buf:%p\n\0",
    /*22cc*/ "[Func]:%s [Line]:%d [Info]:to free task node buf:%p\n\0\0\0\0",
    /*2304*/ "[Func]:%s [Line]:%d [Info]:job free list empty\0\0",
    /*2334*/ "[Func]:%s [Line]:%d [Info]:task list of job %p empty\n\0\0\0",
    /*236c*/ "[Func]:%s [Line]:%d [Info]:alloc buf(%u B) err!\n\0\0\0\0",
    /*23a0*/ "[Func]:%s [Line]:%d [Info]:alloc TaskList buf(%u*%d B) err!\n\0\0\0\0",
    /*23e0*/ "!bEmpty\0",
    /*23e8*/ "\nASSERT at:\n  >Function : %s\n  >Line No. : %d\n  >Condition: %s\n\0",
    /*2428*/ "[Func]:%s [Line]:%d [Info]:job busylist[%d][%u][%u] empty\n\0\0",
    /*2464*/ "[Func]:%s [Line]:%d [Info]:job(%d) is free.\n\0\0\0\0",
    /*2494*/ "job state: %d\n\0\0",
    /*24a4*/ "[Func]:%s [Line]:%d [Info]:job(%d) is %s, can't be canceled!\n\0\0\0",
    /*24e4*/ "[Func]:%s [Line]:%d [Info]:task type(%d) err!\n\0\0",
    /*2514*/ "VGS_JOB_STATE_BUSY == pJob->enJobState\0\0",
    /*253c*/ "\nASSERT at:\n  >Function : %s\n  >Line No. : %d\n  >Condition: %s\n\0",
    /*257c*/ "0\0\0\0",
    /*2580*/ "VGS_JOB_STATE_SUMMITTING == pDrvJob->enJobState || VGS_JOB_STATE_WAITPROC == pDrvJob->enJobState\0\0\0\0",
    /*25e4*/ "HI_NULL != pDrvNode\0",
    /*25f8*/ "[Func]:%s [Line]:%d [Info]:crop node err!\n\0\0",
    /*2624*/ "[Func]:%s [Line]:%d [Info]:Not enough node for job(%d) from mod %d!\n\0\0\0\0",
    /*266c*/ "HI_NULL != *pListTail\0\0\0",
    /*2684*/ "HI_NULL != pDrvNodePre\0\0",
    /*269c*/ "[Func]:%s [Line]:%d [Info]:Submit job err, vgs is exiting!\n\0",
    /*26d8*/ "VGS_JOB_STATE_FREE == pDrvJob->enJobState\0\0\0",
    /*2704*/ "[Func]:%s [Line]:%d [Info]:Not enough node for job(%d) from mod %d, max is %d, need %u!\n\0\0\0\0",
    /*2760*/ "[Func]:%s [Line]:%d [Info]:Not enough node for job(%d) from mod %d, free node %u, need %u!\n\0",
    /*27bc*/ "[Func]:%s [Line]:%d [Info]:Can't submit job(%d) from mod %d, job not ready cnt is %u!\n\0\0",
    /*2814*/ "[Func]:%s [Line]:%d [Info]:alloc buf err!\n\0\0",
    /*2840*/ "[Func]:%s [Line]:%d [Info]:init drv buf err = %X\n\0\0\0",
    /*2874*/ "[Func]:%s [Line]:%d [Info]:alloc HDR buf err!\n\0\0",
    /*28a4*/ "[Func]:%s [Line]:%d [Info]:VGS_HAL_Open err = %X\n\0\0\0",
    /*28d8*/ "0 == s32Num\0",
    /*28e4*/ "g_pstVgsDrvCtx->s32MaxJob == s32Num\0",
    /*2908*/ "g_pstVgsDrvCtx->s32MaxTask == s32Num\0\0\0\0",
    /*2930*/ "g_pstVgsDrvCtx->s32MaxNode == s32Num\0\0\0\0",
    /*2958*/ "[Func]:%s [Line]:%d [Info]:Vgs:%u nodeid should be %u but actual %u\n\0\0\0\0",
    /*29a0*/ "[Func]:%s [Line]:%d [Info]:Vgs:%u err interrupt, reset logic!\n\0\0",
    /*29e0*/ "processing\0\0",
    /*29ec*/ "proc-ok\0",
    /*29f4*/ "submitting\0\0",
    /*2a00*/ "[Func]:%s [Line]:%d [Info]:to free job buf:%p\n\0\0",
    /*2a30*/ "[Func]:%s [Line]:%d [Info]:to free task buf:%p\n\0",
    /*2a60*/ "[Func]:%s [Line]:%d [Info]:alloc buf(%u B) err!\n\0\0\0\0",
    /*2a94*/ "VGS_NodeBuf\0",
    /*2aa0*/ "[Func]:%s [Line]:%d [Info]:alloc mmz buf err!\n\0\0",
    /*2ad0*/ "[Func]:%s [Line]:%d [Info]:to free node buf:%p\n\0",
    /*2b00*/ "!bEmpty\0",
    /*2b08*/ "\nASSERT at:\n  >Function : %s\n  >Line No. : %d\n  >Condition: %s\n\0",
    /*2b48*/ "[Func]:%s [Line]:%d [Info]:job(%p) has no task!\n\0\0\0\0",
    /*2b7c*/ "[Func]:%s [Line]:%d [Info]:illegal (x:%d, y:%d)!\n\0\0\0",
    /*2bb0*/ "[Func]:%s [Line]:%d [Info]:illegal rect(%u,%u,%u,%u), pic(w:%u h:%u)!\n\0\0",
    /*2bf8*/ "[Func]:%s [Line]:%d [Info]:illegal head addr[%d]: %llx\n\0",
    /*2c30*/ "[Func]:%s [Line]:%d [Info]:illegal head stride[%d]: %u\n\0",
    /*2c68*/ "[Func]:%s [Line]:%d [Info]:illegal addr[%d]: %llx\n\0\0",
    /*2c9c*/ "[Func]:%s [Line]:%d [Info]:illegal stride[%d]: %u\n\0\0",
    /*2cd0*/ "[Func]:%s [Line]:%d [Info]:illegal PixelFormat %d\n\0\0",
    /*2d04*/ "[Func]:%s [Line]:%d [Info]:illegal VideoFormat %d\n\0\0",
    /*2d38*/ "[Func]:%s [Line]:%d [Info]:illegal CompressMode %d\n\0",
    /*2d6c*/ "[Func]:%s [Line]:%d [Info]:illegal dynamic range %d\n\0\0\0\0",
    /*2da4*/ "[Func]:%s [Line]:%d [Info]:illegal %s(%d), should be HI_TRUE or HI_FALSE!\n\0\0",
    /*2df0*/ "VGS\0",
    /*2df4*/ "[Func]:%s [Line]:%d [Info]:request irq err!\n\0\0\0\0",
    /*2e24*/ "[Func]:%s [Line]:%d [Info]:##### %s err![int:%u]\n\0\0\0",
    /*2e58*/ "[Func]:%s [Line]:%d [Info]:illegal u64PhysAddrForResult 0x%llx!\n\0\0\0\0",
    /*2e9c*/ "[Func]:%s [Line]:%d [Info]:pu64VirtAddrForResult is NULL.\n\0\0",
    /*2ed8*/ "[Func]:%s [Line]:%d [Info]:All the points is on vertical or horizontal line!\n\0\0\0",
    /*2f28*/ "[Func]:%s [Line]:%d [Info]:illegal in-img addr(Y:%llX)\n\0",
    /*2f60*/ "[Func]:%s [Line]:%d [Info]:illegal out-img addr(Y:%llX)\n\0\0\0\0",
    /*2f9c*/ "[Func]:%s [Line]:%d [Info]:illegal in-img size(%u,%u)\n\0\0",
    /*2fd4*/ "[Func]:%s [Line]:%d [Info]:output(%u %u) should be (%u %u)!\n\0\0\0\0",
    /*3014*/ "[Func]:%s [Line]:%d [Info]:pixel fmt of out(%d) and in(%d) must be the same!\n\0\0\0",
    /*3064*/ "[Func]:%s [Line]:%d [Info]:output don't support cmp!\n\0\0\0",
    /*309c*/ "[Func]:%s [Line]:%d [Info]:Don't support SP422!\n\0\0\0\0",
    /*30d0*/ "[Func]:%s [Line]:%d [Info]:illegal pixel fmt %d\n\0\0\0\0",
    /*3104*/ "[Func]:%s [Line]:%d [Info]:illegal size(%u,%u)\n\0",
    /*3134*/ "[Func]:%s [Line]:%d [Info]:illegal stride[0] %u\n\0\0\0\0",
    /*3168*/ "[Func]:%s [Line]:%d [Info]:illegal addr(Y:%llx)\n\0\0\0\0",
    /*319c*/ "[Func]:%s [Line]:%d [Info]:The PhyAddr of in-img not the same with out-img!\n\0\0\0\0",
    /*31ec*/ "[Func]:%s [Line]:%d [Info]:in-img(w:%u h:%u stride0:%u stride1:%u) not the same with out-img(w:%u h:%u stride0:%u stride1:%u)\n\0\0",
    /*326c*/ "[Func]:%s [Line]:%d [Info]:PixelFormat of in(%d) and out(%d) must be the same!\n\0",
    /*32bc*/ "bOsdEn\0\0",
    /*32c4*/ "[Func]:%s [Line]:%d [Info]:illegal osd addr 0x%llx\n\0",
    /*32f8*/ "[Func]:%s [Line]:%d [Info]:illegal osd Stride %u\n\0\0\0",
    /*332c*/ "[Func]:%s [Line]:%d [Info]:illegal osd pixel fmt %d\n\0\0\0\0",
    /*3364*/ "bAlphaExt1555\0\0\0",
    /*3374*/ "bOsdRevert\0\0",
    /*3380*/ "[Func]:%s [Line]:%d [Info]:illegal enColorRevertMode %d\n\0\0\0\0",
    /*33bc*/ "bCoverEn\0\0\0\0",
    /*33c8*/ "[Func]:%s [Line]:%d [Info]:illegal color 0x%x, range is [0,0x%x]\n\0\0\0",
    /*340c*/ "[Func]:%s [Line]:%d [Info]:err cover type %d!\n\0\0",
    /*343c*/ "bSolid\0\0",
    /*3444*/ "[Func]:%s [Line]:%d [Info]:illegal u32Thick %u\n\0",
    /*3474*/ "[Func]:%s [Line]:%d [Info]:The two points is the same: (%d,%d)\n\0",
    /*34b4*/ "[Func]:%s [Line]:%d [Info]:illegal startpoint: (%d, %d)\n\0\0\0\0",
    /*34f0*/ "[Func]:%s [Line]:%d [Info]:illegal endpoint: (%d, %d)\n\0\0",
    /*3528*/ "[Func]:%s [Line]:%d [Info]:The start point of the OSD(%d, %d) is err!\n\0\0",
    /*3570*/ "[Func]:%s [Line]:%d [Info]:illegal OSD size: (%u %u)\n\0\0\0",
    /*35a8*/ "[Func]:%s [Line]:%d [Info]:The OSD u64PhyAddr(0x%llx) should be aligned to 2!\n\0\0",
    /*35f8*/ "[Func]:%s [Line]:%d [Info]:The OSD u32Stride(%u) should be aligned to 16!\n\0\0",
    /*3644*/ "[Func]:%s [Line]:%d [Info]:The BgAlpha(%u) or FgAlpha(%u) is err!\n\0\0",
    /*3688*/ "[Func]:%s [Line]:%d [Info]:The u32BgColor(%u) can't be bigger than 0xffff when the pixelfmt is ARGB4444 or ARGB1555!\n\0\0\0",
    /*3700*/ "[Func]:%s [Line]:%d [Info]:The coordinate(%d, %d) of quadrangle cover is err!\n\0\0",
    /*3750*/ "[Func]:%s [Line]:%d [Info]:The position(%d, %d) of rect cover is err!\n\0\0",
    /*3798*/ "[Func]:%s [Line]:%d [Info]:The width and height(%u, %u) of rect cover is err!\n\0\0",
    /*37e8*/ "[Func]:%s [Line]:%d [Info]:Cover type(%d) err!\n\0",
    /*3818*/ "bCrop\0\0\0",
    /*3820*/ "bOsd\0\0\0\0",
    /*3828*/ "[Func]:%s [Line]:%d [Info]:input illegal param: dst rect(%d,%d,%u,%u)\n\0\0",
    /*3870*/ "bCover\0\0",
    /*3878*/ "[Func]:%s [Line]:%d [Info]:check quadrangle cover param err!\n\0\0\0",
    /*38b8*/ "bFlip\0\0\0",
    /*38c0*/ "bMirror\0",
    /*38c8*/ "bDeflicker\0\0",
    /*38d4*/ "bForceHFilt\0",
    /*38e0*/ "bForceVFilt\0",
    /*38ec*/ "[Func]:%s [Line]:%d [Info]:illegal enVGSSclCoefMode(%d)\n\0\0\0\0",
    /*3928*/ "[Func]:%s [Line]:%d [Info]:zoom out multiple should be[1,%d], in(w:%u h:%u), out(w:%u h:%u).\n\0\0\0",
    /*3988*/ "[Func]:%s [Line]:%d [Info]:when zoom out multiple is larger than %d, the width or height should align to 4\n\0",
    /*39f4*/ "[Func]:%s [Line]:%d [Info]:zoom in multiple should be[1,%d], in(w:%u h:%u), out(w:%u h:%u).\n\0\0\0\0",
    /*3a54*/ "IntStatus\0\0\0",
    /*3a60*/ "DCMP\0\0\0\0",
    /*3a68*/ "Read BUS\0\0\0\0",
    /*3a74*/ "Write BUS\0\0\0",
    /*3a80*/ "TIMEOUT\0",
    /*3a88*/ "u32IntStat\0\0",
    /*3a94*/ "vgs:%d VGS_PNEXT_LOW:%#x u64NextPhyAddr_low:%#x\n\0\0\0\0",
    /*3ac8*/ "vgs:%d VGS_PNEXT_HIGH:%#x u64NextPhyAddr_high:%#x\n\0\0",
    /*3afc*/ "vgs%d\0\0\0",
    /*3b04*/ "cannot find vgs%d IRQ\n\0\0",
    /*3b1c*/ "hi35xx_vgs\0"
};

unsigned char data[388] = {
    /*0000*/ 0x80, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 
    /*0010*/ 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x00, 0x00, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x00, 0x00, 
    /*0020*/ 0x42, 0x55, 0x54, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0030*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0040*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0050*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0060*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0070*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0080*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0090*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*00a0*/ 0x76, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*00b0*/ 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*00c0*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 
    /*00d0*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*00e0*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*00f0*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0100*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0110*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0120*/ 0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0130*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x3b, 0x00, 0x00, 
    /*0140*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0150*/ 0x00, 0x00, 0x00, 0x00, 0xb8, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0160*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0170*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0180*/ 0x00, 0x00, 0x00, 0x00, 
};

unsigned char rel.data[264] = {
    /*0000*/ 0x28, 0x00, 0x00, 0x00, 0x02, 0x4a, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x02, 0x48, 0x00, 0x00, 
    /*0010*/ 0x3c, 0x00, 0x00, 0x00, 0x02, 0xd0, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x02, 0x49, 0x00, 0x00, 
    /*0020*/ 0x64, 0x00, 0x00, 0x00, 0x02, 0x1c, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x02, 0x6e, 0x03, 0x00, 
    /*0030*/ 0xb8, 0x00, 0x00, 0x00, 0x02, 0xef, 0x03, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x02, 0x1d, 0x00, 0x00, 
    /*0040*/ 0xc0, 0x00, 0x00, 0x00, 0x02, 0x27, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x02, 0x1b, 0x00, 0x00, 
    /*0050*/ 0xcc, 0x00, 0x00, 0x00, 0x02, 0x0e, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x02, 0xc4, 0x03, 0x00, 
    /*0060*/ 0xdc, 0x00, 0x00, 0x00, 0x02, 0x7d, 0x03, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x02, 0x86, 0x03, 0x00, 
    /*0070*/ 0xe4, 0x00, 0x00, 0x00, 0x02, 0xbc, 0x03, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x02, 0x44, 0x03, 0x00, 
    /*0080*/ 0xec, 0x00, 0x00, 0x00, 0x02, 0xcf, 0x03, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x02, 0x69, 0x03, 0x00, 
    /*0090*/ 0xf4, 0x00, 0x00, 0x00, 0x02, 0x08, 0x03, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x02, 0xfb, 0x03, 0x00, 
    /*00a0*/ 0xfc, 0x00, 0x00, 0x00, 0x02, 0x54, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x6f, 0x03, 0x00, 
    /*00b0*/ 0x04, 0x01, 0x00, 0x00, 0x02, 0xa7, 0x03, 0x00, 0x08, 0x01, 0x00, 0x00, 0x02, 0x31, 0x04, 0x00, 
    /*00c0*/ 0x0c, 0x01, 0x00, 0x00, 0x02, 0x4e, 0x03, 0x00, 0x10, 0x01, 0x00, 0x00, 0x02, 0x10, 0x04, 0x00, 
    /*00d0*/ 0x14, 0x01, 0x00, 0x00, 0x02, 0xe4, 0x02, 0x00, 0x18, 0x01, 0x00, 0x00, 0x02, 0x07, 0x03, 0x00, 
    /*00e0*/ 0x1c, 0x01, 0x00, 0x00, 0x02, 0x8e, 0x03, 0x00, 0x28, 0x01, 0x00, 0x00, 0x02, 0xb7, 0x02, 0x00, 
    /*00f0*/ 0x2c, 0x01, 0x00, 0x00, 0x02, 0xb5, 0x02, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 
    /*0100*/ 0x54, 0x01, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 
};

unsigned char bss[3244];

@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .text
@ Size: 0x10c78
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN VGS_GetMaxJobNum
    /*00000000*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00000004*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00000008*/ LDR         R3, [R3] 
    /*0000000c*/ STR         R3, [R0] 
    /*00000010*/ BX          LR 
FUNC_END VGS_GetMaxJobNum


FUNC_BEGIN VGS_GetMaxTaskNum
    /*00000014*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00000018*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*0000001c*/ LDR         R3, [R3, #4] 
    /*00000020*/ STR         R3, [R0] 
    /*00000024*/ BX          LR 
FUNC_END VGS_GetMaxTaskNum


FUNC_BEGIN VGS_JobState
    /*00000028*/ LDR         R2, [R0] 
    /*0000002c*/ LDR         R3, [R2, #20] 
    /*00000030*/ SUB         R1, R3, #6 
    /*00000034*/ CMP         R3, #0 
    /*00000038*/ CMPNE       R1, #1 
    /*0000003c*/ BHI         VGS_JobState_x50
    /*00000040*/ LDR         R1, [R0, #4] 
    /*00000044*/ LDR         R3, [R2, #112]              @ 0x70 
    /*00000048*/ CMP         R1, R3 
    /*0000004c*/ BEQ         VGS_JobState_x68
    VGS_JobState_x50:
    /*00000050*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00000054*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00000058*/ LDR         R0, [R3] 
    /*0000005c*/ SUBS        R0, R0, #1 
    /*00000060*/ MOVNE       R0, #1 
    /*00000064*/ BX          LR 
    VGS_JobState_x68:
    /*00000068*/ LDR         R3, [R2, #24] 
    /*0000006c*/ CMP         R3, #0 
    /*00000070*/ BNE         VGS_JobState_x50
    /*00000074*/ LDR         R3, [R2, #124]              @ 0x7c 
    /*00000078*/ CMP         R3, #0 
    /*0000007c*/ BNE         VGS_JobState_x50
    /*00000080*/ LDR         R3, [R2, #132]              @ 0x84 
    /*00000084*/ CMP         R3, #0 
    /*00000088*/ BNE         VGS_JobState_x50
    /*0000008c*/ MOV         R0, #1 
    /*00000090*/ BX          LR 
FUNC_END VGS_JobState


FUNC_BEGIN VGS_GetVerMagic
    /*00000094*/ MOVW        R0, #61479                  @ 0xf027 
    /*00000098*/ MOVT        R0, #307                    @ 0x133 
    /*0000009c*/ BX          LR 
FUNC_END VGS_GetVerMagic


FUNC_BEGIN VgsRestore
    /*000000a0*/ MOV         R0, #0 
    /*000000a4*/ BX          LR 
FUNC_END VgsRestore


FUNC_BEGIN VGS_PutFreeTask
    /*000000a8*/ PUSH        {R4, R5, LR} 
    /*000000ac*/ SUBS        R5, R0, #0 
    /*000000b0*/ SUB         SP, SP, #12 
    /*000000b4*/ MOV         R3, #0 
    /*000000b8*/ STR         R3, [SP, #4] 
    /*000000bc*/ BEQ         VGS_PutFreeTask_xf0
    /*000000c0*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000000c4*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000000c8*/ ADD         R0, R4, #4 
    /*000000cc*/ ADD         R1, SP, #4 
    /*000000d0*/ BL          0x00000000000000D0          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000000d4*/ LDR         R0, [R4, #8] 
    /*000000d8*/ SUB         R1, R5, #8 
    /*000000dc*/ ADD         R0, R0, #304                @ 0x130 
    /*000000e0*/ BL          0x00000000000000E0          @ VGS_PutTaskToFreeList [R_ARM_CALL: .text+0x7de8] 
    /*000000e4*/ ADD         R1, SP, #4 
    /*000000e8*/ ADD         R0, R4, #4 
    /*000000ec*/ BL          0x00000000000000EC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    VGS_PutFreeTask_xf0:
    /*000000f0*/ ADD         SP, SP, #12 
    /*000000f4*/ POP         {R4, R5, PC} 
FUNC_END VGS_PutFreeTask


FUNC_BEGIN VGS_QueryState
    /*000000f8*/ PUSH        {R4, LR} 
    /*000000fc*/ MOV         R4, R0 
    /*00000100*/ LDR         R0, [PC, #48]               @ 0x0000000000000138 
    /*00000104*/ BL          0x0000000000000104          @ osal_atomic_read [R_ARM_CALL: +0x0] 
    /*00000108*/ CMP         R0, #0 
    /*0000010c*/ BEQ         VGS_QueryState_x11c
    VGS_QueryState_x110:
    /*00000110*/ MOV         R3, #34                     @ 0x22 
    /*00000114*/ STR         R3, [R4] 
    /*00000118*/ POP         {R4, PC} 
    VGS_QueryState_x11c:
    /*0000011c*/ LDR         R0, [PC, #24]               @ 0x000000000000013c 
    /*00000120*/ BL          0x0000000000000120          @ osal_atomic_read [R_ARM_CALL: +0x0] 
    /*00000124*/ CMP         R0, #0 
    /*00000128*/ BNE         VGS_QueryState_x110
    /*0000012c*/ MOV         R3, #17 
    /*00000130*/ STR         R3, [R4] 
    /*00000134*/ POP         {R4, PC} 
    /*00000138*/ ANDEQ       R0, R0, IP 
    /*0000013c*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_QueryState


FUNC_BEGIN VGS_GetFreeTask
    /*00000140*/ PUSH        {R4, R5, R6, LR} 
    /*00000144*/ SUB         SP, SP, #16 
    /*00000148*/ ADD         R5, SP, #16 
    /*0000014c*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00000150*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00000154*/ MOV         R3, #0 
    /*00000158*/ ADD         R0, R4, #4 
    /*0000015c*/ STR         R3, [R5, #-4]! 
    /*00000160*/ MOV         R1, R5 
    /*00000164*/ BL          0x0000000000000164          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00000168*/ LDR         R0, [R4, #8] 
    /*0000016c*/ ADD         R0, R0, #304                @ 0x130 
    /*00000170*/ BL          0x0000000000000170          @ VGS_GetTaskFromFreeList [R_ARM_CALL: .text+0x7d60] 
    /*00000174*/ MOV         R1, R5 
    /*00000178*/ MOV         R6, R0 
    /*0000017c*/ ADD         R0, R4, #4 
    /*00000180*/ BL          0x0000000000000180          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00000184*/ CMP         R6, #0 
    /*00000188*/ ADDNE       R0, R6, #8 
    /*0000018c*/ BEQ         VGS_GetFreeTask_x198
    VGS_GetFreeTask_x190:
    /*00000190*/ ADD         SP, SP, #16 
    /*00000194*/ POP         {R4, R5, R6, PC} 
    VGS_GetFreeTask_x198:
    /*00000198*/ MOVW        R2, #1180                   @ 0x49c 
    /*0000019c*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*000001a0*/ STR         R2, [SP] 
    /*000001a4*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*000001a8*/ MOVW        R2, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x0] 
    /*000001ac*/ MOV         R1, #45                     @ 0x2d 
    /*000001b0*/ MOVT        R2, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x0] 
    /*000001b4*/ MOV         R0, #3 
    /*000001b8*/ BL          0x00000000000001B8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000001bc*/ MOV         R0, R6 
    /*000001c0*/ B           VGS_GetFreeTask_x190
FUNC_END VGS_GetFreeTask


FUNC_BEGIN VGS_Init
    /*000001c4*/ PUSH        {R4, R5, R6, LR} 
    /*000001c8*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000001cc*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000001d0*/ SUB         SP, SP, #8 
    /*000001d4*/ LDR         R3, [R4] 
    /*000001d8*/ CMP         R3, #1 
    /*000001dc*/ MOVEQ       R6, #0 
    /*000001e0*/ BEQ         VGS_Init_x31c
    /*000001e4*/ MOV         R1, #0 
    /*000001e8*/ MOV         R0, #320                    @ 0x140 
    /*000001ec*/ BL          0x00000000000001EC          @ osal_kmalloc [R_ARM_CALL: +0x0] 
    /*000001f0*/ CMP         R0, #0 
    /*000001f4*/ STR         R0, [R4, #8] 
    /*000001f8*/ BEQ         VGS_Init_x3b4
    /*000001fc*/ MOV         R2, #160                    @ 0xa0 
    /*00000200*/ MOV         R1, #0 
    /*00000204*/ ADD         R0, R4, #20 
    /*00000208*/ MOV         R5, #16 
    /*0000020c*/ BL          0x000000000000020C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00000210*/ MOV         IP, #1 
    /*00000214*/ MOV         R0, IP 
    /*00000218*/ MOV         R3, IP 
    /*0000021c*/ STR         IP, [R4, #20] 
    /*00000220*/ MOV         R6, #11 
    /*00000224*/ STR         IP, [R4, #72]               @ 0x48 
    /*00000228*/ ADD         R2, R4, #20 
    /*0000022c*/ STR         IP, [R4, #24] 
    /*00000230*/ ADD         LR, R4, #68                 @ 0x44 
    /*00000234*/ STR         IP, [R4, #36]               @ 0x24 
    /*00000238*/ STR         IP, [R4, #40]               @ 0x28 
    /*0000023c*/ STR         IP, [R4, #48]               @ 0x30 
    /*00000240*/ STR         IP, [R4, #56]               @ 0x38 
    /*00000244*/ STR         IP, [R4, #108]              @ 0x6c 
    /*00000248*/ STR         IP, [R4, #60]               @ 0x3c 
    /*0000024c*/ STR         IP, [R4, #112]              @ 0x70 
    /*00000250*/ STR         IP, [R4, #64]               @ 0x40 
    /*00000254*/ STR         IP, [R4, #116]              @ 0x74 
    /*00000258*/ STR         IP, [R4, #68]               @ 0x44 
    /*0000025c*/ STR         IP, [R4, #120]              @ 0x78 
    /*00000260*/ MOV         IP, #4 
    /*00000264*/ STR         R5, [R4, #76]               @ 0x4c 
    /*00000268*/ STR         R5, [R4, #32] 
    /*0000026c*/ STR         R5, [R4, #88]               @ 0x58 
    /*00000270*/ MOV         R5, #9 
    /*00000274*/ LDR         R1, [R4, #176]              @ 0xb0 
    /*00000278*/ STR         R6, [R4, #84]               @ 0x54 
    /*0000027c*/ STR         IP, [R4, #92]               @ 0x5c 
    /*00000280*/ STR         IP, [R4, #44]               @ 0x2c 
    /*00000284*/ STR         IP, [R4, #100]              @ 0x64 
    /*00000288*/ STR         R5, [R4, #96]               @ 0x60 
    /*0000028c*/ B           VGS_Init_x298
    VGS_Init_x290:
    /*00000290*/ LDR         R3, [R2, #4]! 
    /*00000294*/ LDR         R0, [R2, #52]               @ 0x34 
    VGS_Init_x298:
    /*00000298*/ MUL         R3, R3, R0 
    /*0000029c*/ CMP         R2, LR 
    /*000002a0*/ ADD         R1, R1, R3 
    /*000002a4*/ STR         R3, [R2, #104]              @ 0x68 
    /*000002a8*/ BNE         VGS_Init_x290
    /*000002ac*/ LDR         R0, [R4, #8] 
    /*000002b0*/ MOVW        R5, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*000002b4*/ MOVT        R5, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*000002b8*/ STR         R1, [R4, #176]              @ 0xb0 
    /*000002bc*/ ADD         R1, R0, #304                @ 0x130 
    /*000002c0*/ LDM         R5, {R2, R3} 
    /*000002c4*/ BL          0x00000000000002C4          @ VGS_InitBuf [R_ARM_CALL: .text+0x7fbc] 
    /*000002c8*/ SUBS        R6, R0, #0 
    /*000002cc*/ BNE         VGS_Init_x328
    /*000002d0*/ LDR         R0, [PC, #268]              @ 0x00000000000003e4 
    /*000002d4*/ BL          0x00000000000002D4          @ osal_spin_lock_init [R_ARM_CALL: +0x0] 
    /*000002d8*/ LDR         R0, [PC, #264]              @ 0x00000000000003e8 
    /*000002dc*/ BL          0x00000000000002DC          @ osal_spin_lock_init [R_ARM_CALL: +0x0] 
    /*000002e0*/ MOV         R1, #1 
    /*000002e4*/ LDR         R0, [PC, #256]              @ 0x00000000000003ec 
    /*000002e8*/ BL          0x00000000000002E8          @ osal_sema_init [R_ARM_CALL: +0x0] 
    /*000002ec*/ LDR         R3, [R5, #8] 
    /*000002f0*/ LDR         R2, [R5, #12] 
    /*000002f4*/ LDM         R5, {R0, R1} 
    /*000002f8*/ BL          0x00000000000002F8          @ VGS_DrvCommOpen [R_ARM_CALL: .text+0x9ee0] 
    /*000002fc*/ SUBS        R6, R0, #0 
    /*00000300*/ BNE         VGS_Init_x368
    /*00000304*/ MOV         R2, #860                    @ 0x35c 
    /*00000308*/ MOV         R1, R6 
    /*0000030c*/ LDR         R0, [PC, #220]              @ 0x00000000000003f0 
    /*00000310*/ BL          0x0000000000000310          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00000314*/ MOV         R3, #1 
    /*00000318*/ STR         R3, [R4] 
    VGS_Init_x31c:
    /*0000031c*/ MOV         R0, R6 
    /*00000320*/ ADD         SP, SP, #8 
    /*00000324*/ POP         {R4, R5, R6, PC} 
    VGS_Init_x328:
    /*00000328*/ MOV         R1, #45                     @ 0x2d 
    /*0000032c*/ STR         R6, [SP, #4] 
    /*00000330*/ MOVW        R3, #5046                   @ 0x13b6 
    /*00000334*/ MOVW        R2, #0                      @ .LC9 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x68] 
    /*00000338*/ STR         R3, [SP] 
    /*0000033c*/ MOVT        R2, #0                      @ .LC9 [R_ARM_MOVT_ABS: .rodata.str1.4+0x68] 
    /*00000340*/ LDR         R3, [PC, #172]              @ 0x00000000000003f4 
    /*00000344*/ MOV         R0, #3 
    /*00000348*/ BL          0x0000000000000348          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000034c*/ LDR         R0, [R4, #8] 
    /*00000350*/ BL          0x0000000000000350          @ osal_kfree [R_ARM_CALL: +0x0] 
    /*00000354*/ MOV         R3, #0 
    /*00000358*/ MOV         R0, R6 
    /*0000035c*/ STR         R3, [R4, #8] 
    /*00000360*/ ADD         SP, SP, #8 
    /*00000364*/ POP         {R4, R5, R6, PC} 
    VGS_Init_x368:
    /*00000368*/ STR         R6, [SP, #4] 
    /*0000036c*/ MOVW        R3, #5061                   @ 0x13c5 
    /*00000370*/ MOV         R1, #45                     @ 0x2d 
    /*00000374*/ STR         R3, [SP] 
    /*00000378*/ MOVW        R2, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x98] 
    /*0000037c*/ LDR         R3, [PC, #112]              @ 0x00000000000003f4 
    /*00000380*/ MOVT        R2, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x98] 
    /*00000384*/ MOV         R0, #3 
    /*00000388*/ BL          0x0000000000000388          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000038c*/ LDR         R0, [R4, #8] 
    /*00000390*/ ADD         R1, R0, #304                @ 0x130 
    /*00000394*/ BL          0x0000000000000394          @ VGS_DeInitBuf [R_ARM_CALL: .text+0x7cfc] 
    /*00000398*/ LDR         R0, [R4, #8] 
    /*0000039c*/ BL          0x000000000000039C          @ osal_kfree [R_ARM_CALL: +0x0] 
    /*000003a0*/ MOV         R3, #0 
    /*000003a4*/ MOV         R0, R6 
    /*000003a8*/ STR         R3, [R4, #8] 
    /*000003ac*/ ADD         SP, SP, #8 
    /*000003b0*/ POP         {R4, R5, R6, PC} 
    VGS_Init_x3b4:
    /*000003b4*/ MOV         R2, #320                    @ 0x140 
    /*000003b8*/ MOVW        R3, #5035                   @ 0x13ab 
    /*000003bc*/ STR         R2, [SP, #4] 
    /*000003c0*/ MOV         R1, #45                     @ 0x2d 
    /*000003c4*/ STR         R3, [SP] 
    /*000003c8*/ MOVW        R2, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x34] 
    /*000003cc*/ LDR         R3, [PC, #32]               @ 0x00000000000003f4 
    /*000003d0*/ MOVT        R2, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x34] 
    /*000003d4*/ MOV         R0, #3 
    /*000003d8*/ MVN         R6, #0 
    /*000003dc*/ BL          0x00000000000003DC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000003e0*/ B           VGS_Init_x31c
    /*000003e4*/ ANDEQ       R0, R0, R4 
    /*000003e8*/ STRHEQ      R0, [R0], -R4 
    /*000003ec*/ STRHEQ      R0, [R0], -R8 
    /*000003f0*/ STRHEQ      R0, [R0], -IP 
    /*000003f4*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_Init


FUNC_BEGIN VGS_Notify
    /*000003f8*/ CMP         R0, #17 
    /*000003fc*/ BXNE        LR 
    /*00000400*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00000404*/ SUB         SP, SP, #12 
    /*00000408*/ MOVW        R3, #5131                   @ 0x140b 
    /*0000040c*/ MOVW        R2, #0                      @ .LC11 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xc8] 
    /*00000410*/ STR         R3, [SP] 
    /*00000414*/ MOVT        R2, #0                      @ .LC11 [R_ARM_MOVT_ABS: .rodata.str1.4+0xc8] 
    /*00000418*/ LDR         R3, [PC, #60]               @ 0x000000000000045c 
    /*0000041c*/ MOV         R1, #45                     @ 0x2d 
    /*00000420*/ MOV         R0, #6 
    /*00000424*/ BL          0x0000000000000424          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000428*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*0000042c*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00000430*/ LDR         R2, [R3] 
    /*00000434*/ CMP         R2, #0 
    /*00000438*/ BNE         VGS_Notify_x444
    /*0000043c*/ ADD         SP, SP, #12 
    /*00000440*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_Notify_x444:
    /*00000444*/ MOV         R2, #2 
    /*00000448*/ MOV         R0, #1 
    /*0000044c*/ STR         R2, [R3] 
    /*00000450*/ ADD         SP, SP, #12 
    /*00000454*/ POP         {LR}                        @ (ldr lr, [sp], #4) 
    VGS_Notify_x458:
    /*00000458*/ B           VGS_Notify_x458             @ VGS_DrvCommNotify [R_ARM_JUMP24: .text+0xa890] 
    /*0000045c*/ ANDEQ       R0, R0, IP, LSL R0 
FUNC_END VGS_Notify


FUNC_BEGIN VgsIoctlCopyFromUser
    /*00000460*/ PUSH        {R4, R5, R6, LR} 
    /*00000464*/ SUBS        R5, R2, #0 
    /*00000468*/ SUB         SP, SP, #16 
    /*0000046c*/ BNE         VgsIoctlCopyFromUser_x4a0
    VgsIoctlCopyFromUser_x470:
    /*00000470*/ MOVW        R2, #0                      @ .LC13 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x134] 
    /*00000474*/ MOVT        R2, #0                      @ .LC13 [R_ARM_MOVT_ABS: .rodata.str1.4+0x134] 
    /*00000478*/ MOVW        R3, #5269                   @ 0x1495 
    /*0000047c*/ STR         R3, [SP] 
    VgsIoctlCopyFromUser_x480:
    /*00000480*/ LDR         R3, [PC, #120]              @ 0x0000000000000500 
    /*00000484*/ MOV         R1, #45                     @ 0x2d 
    /*00000488*/ MOV         R0, #3 
    /*0000048c*/ BL          0x000000000000048C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000490*/ MOVW        R0, #32771                  @ 0x8003 
    /*00000494*/ MOVT        R0, #41005                  @ 0xa02d 
    VgsIoctlCopyFromUser_x498:
    /*00000498*/ ADD         SP, SP, #16 
    /*0000049c*/ POP         {R4, R5, R6, PC} 
    VgsIoctlCopyFromUser_x4a0:
    /*000004a0*/ MOV         R6, R0 
    /*000004a4*/ MOV         R0, #0 
    /*000004a8*/ MOV         R4, R1 
    /*000004ac*/ BL          0x00000000000004AC          @ osal_access_ok [R_ARM_CALL: +0x0] 
    /*000004b0*/ CMP         R0, #0 
    /*000004b4*/ BEQ         VgsIoctlCopyFromUser_x470
    /*000004b8*/ SUB         R1, R5, #1 
    /*000004bc*/ MOV         R2, #1 
    /*000004c0*/ ADD         R1, R4, R1 
    /*000004c4*/ ADD         R0, SP, #15 
    /*000004c8*/ BL          0x00000000000004C8          @ osal_copy_from_user [R_ARM_CALL: +0x0] 
    /*000004cc*/ CMP         R0, #0 
    /*000004d0*/ BNE         VgsIoctlCopyFromUser_x470
    /*000004d4*/ MOV         R2, R5 
    /*000004d8*/ MOV         R1, R4 
    /*000004dc*/ MOV         R0, R6 
    /*000004e0*/ BL          0x00000000000004E0          @ osal_copy_from_user [R_ARM_CALL: +0x0] 
    /*000004e4*/ CMP         R0, #0 
    /*000004e8*/ BEQ         VgsIoctlCopyFromUser_x498
    /*000004ec*/ MOVW        R3, #5275                   @ 0x149b 
    /*000004f0*/ MOVW        R2, #0                      @ .LC12 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x100] 
    /*000004f4*/ STR         R3, [SP] 
    /*000004f8*/ MOVT        R2, #0                      @ .LC12 [R_ARM_MOVT_ABS: .rodata.str1.4+0x100] 
    /*000004fc*/ B           VgsIoctlCopyFromUser_x480
    /*00000500*/ ANDEQ       R0, R0, R8, LSR #32 
FUNC_END VgsIoctlCopyFromUser


FUNC_BEGIN VGS_CheckNullPtr.part.4
    /*00000504*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00000508*/ SUB         SP, SP, #12 
    /*0000050c*/ MOVW        R3, #257                    @ 0x101 
    /*00000510*/ MOV         R1, #45                     @ 0x2d 
    /*00000514*/ STR         R3, [SP] 
    /*00000518*/ MOVW        R2, #0                      @ .LC14 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x17c] 
    /*0000051c*/ LDR         R3, [PC, #24]               @ 0x000000000000053c 
    /*00000520*/ MOVT        R2, #0                      @ .LC14 [R_ARM_MOVT_ABS: .rodata.str1.4+0x17c] 
    /*00000524*/ MOV         R0, #3 
    /*00000528*/ BL          0x0000000000000528          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000052c*/ MOVW        R0, #32774                  @ 0x8006 
    /*00000530*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00000534*/ ADD         SP, SP, #12 
    /*00000538*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    /*0000053c*/ ANDEQ       R0, R0, R0, ASR #32 
FUNC_END VGS_CheckNullPtr.part.4


FUNC_BEGIN VGS_BeginJob
    /*00000540*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00000544*/ MOV         R6, R2 
    /*00000548*/ SUB         R2, R2, #3 
    /*0000054c*/ SUB         SP, SP, #36                 @ 0x24 
    /*00000550*/ CMP         R2, #42                     @ 0x2a 
    /*00000554*/ MOV         R8, R3 
    /*00000558*/ MOV         R3, #0 
    /*0000055c*/ STR         R3, [SP, #28] 
    /*00000560*/ MOVWLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*00000564*/ MOVTLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*00000568*/ ADDLS       R3, R3, R2 
    /*0000056c*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00000570*/ MOVHI       FP, #13 
    /*00000574*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00000578*/ LDRBLS      FP, [R3, #84]               @ 0x54 
    /*0000057c*/ CMP         R0, #0 
    /*00000580*/ MOV         R7, R0 
    /*00000584*/ LDR         SL, [R4, #8] 
    /*00000588*/ LDR         R9, [SP, #72]               @ 0x48 
    /*0000058c*/ LDR         R5, [SP, #76]               @ 0x4c 
    /*00000590*/ BEQ         VGS_BeginJob_x720
    VGS_BeginJob_x594:
    /*00000594*/ CMP         R5, #0 
    /*00000598*/ BEQ         VGS_BeginJob_x740
    VGS_BeginJob_x59c:
    /*0000059c*/ CMP         R1, #2 
    /*000005a0*/ BHI         VGS_BeginJob_x788
    /*000005a4*/ CMP         FP, #12 
    /*000005a8*/ BHI         VGS_BeginJob_x7a0
    /*000005ac*/ ADD         R3, R4, FP, LSL #2 
    /*000005b0*/ LDR         R3, [R3, #20] 
    /*000005b4*/ CMP         R3, R8 
    /*000005b8*/ BLS         VGS_BeginJob_x7b8
    /*000005bc*/ ADD         FP, R4, FP, LSL #2 
    /*000005c0*/ LDR         R3, [FP, #72]               @ 0x48 
    /*000005c4*/ CMP         R3, R9 
    /*000005c8*/ BLS         VGS_BeginJob_x7ec
    /*000005cc*/ LDR         R3, [R5, #52]               @ 0x34 
    /*000005d0*/ CMP         R3, #1 
    /*000005d4*/ BHI         VGS_BeginJob_x758
    /*000005d8*/ LDR         R3, [R4] 
    /*000005dc*/ CMP         R3, #1 
    /*000005e0*/ BNE         VGS_BeginJob_x6f4
    /*000005e4*/ LDR         R0, [PC, #604]              @ 0x0000000000000848 
    /*000005e8*/ BL          0x00000000000005E8          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*000005ec*/ LDR         R0, [PC, #600]              @ 0x000000000000084c 
    /*000005f0*/ ADD         R1, SP, #28 
    /*000005f4*/ BL          0x00000000000005F4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000005f8*/ MOV         R0, SL 
    /*000005fc*/ BL          0x00000000000005FC          @ VGS_GetJobFromFreeList [R_ARM_CALL: .text+0x7eec] 
    /*00000600*/ SUBS        R4, R0, #0 
    /*00000604*/ BEQ         VGS_BeginJob_x808
    /*00000608*/ LDR         R3, [R4, #112]              @ 0x70 
    /*0000060c*/ ADD         R1, SP, #28 
    /*00000610*/ LDR         R0, [PC, #564]              @ 0x000000000000084c 
    /*00000614*/ ADD         R3, R3, #1 
    /*00000618*/ STR         R3, [R4, #112]              @ 0x70 
    /*0000061c*/ BL          0x000000000000061C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00000620*/ LDR         R2, [R4, #20] 
    /*00000624*/ MOV         R3, #0 
    /*00000628*/ STR         R6, [R4, #32] 
    /*0000062c*/ CMP         R2, R3 
    /*00000630*/ STR         R8, [R4, #36]               @ 0x24 
    /*00000634*/ STR         R9, [R4, #40]               @ 0x28 
    /*00000638*/ STR         R3, [R4, #8] 
    /*0000063c*/ BNE         VGS_BeginJob_x6d4
    VGS_BeginJob_x640:
    /*00000640*/ MOV         R2, #92                     @ 0x5c 
    /*00000644*/ MOV         R1, #0 
    /*00000648*/ ADD         R0, R4, #136                @ 0x88 
    /*0000064c*/ BL          0x000000000000064C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00000650*/ MOV         R2, #64                     @ 0x40 
    /*00000654*/ MOV         R1, R5 
    /*00000658*/ ADD         R0, R4, #48                 @ 0x30 
    /*0000065c*/ BL          0x000000000000065C          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00000660*/ ADD         R1, SP, #28 
    /*00000664*/ LDR         R0, [PC, #480]              @ 0x000000000000084c 
    /*00000668*/ BL          0x0000000000000668          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000066c*/ MOV         R3, #1 
    /*00000670*/ MOV         R0, SL 
    /*00000674*/ STR         R3, [R4, #20] 
    /*00000678*/ MOV         R1, R4 
    /*0000067c*/ BL          0x000000000000067C          @ VGS_PutJobToCreatedList [R_ARM_CALL: .text+0x83a4] 
    /*00000680*/ ADD         R1, SP, #28 
    /*00000684*/ LDR         R0, [PC, #448]              @ 0x000000000000084c 
    /*00000688*/ BL          0x0000000000000688          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000068c*/ LDR         R1, [R4, #120]              @ 0x78 
    /*00000690*/ STR         R4, [SP, #8] 
    /*00000694*/ MOVW        R0, #1371                   @ 0x55b 
    /*00000698*/ LDR         R3, [PC, #432]              @ 0x0000000000000850 
    /*0000069c*/ MOVW        R2, #0                      @ .LC24 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x378] 
    /*000006a0*/ STR         R1, [R7] 
    /*000006a4*/ MOVT        R2, #0                      @ .LC24 [R_ARM_MOVT_ABS: .rodata.str1.4+0x378] 
    /*000006a8*/ LDR         IP, [R4, #120]              @ 0x78 
    /*000006ac*/ MOV         R1, #45                     @ 0x2d 
    /*000006b0*/ STR         R0, [SP] 
    /*000006b4*/ MOV         R0, #7 
    /*000006b8*/ STR         IP, [SP, #4] 
    /*000006bc*/ BL          0x00000000000006BC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000006c0*/ LDR         R0, [PC, #384]              @ 0x0000000000000848 
    /*000006c4*/ BL          0x00000000000006C4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000006c8*/ MOV         R0, #0 
    VGS_BeginJob_x6cc:
    /*000006cc*/ ADD         SP, SP, #36                 @ 0x24 
    /*000006d0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_BeginJob_x6d4:
    /*000006d4*/ MOVW        R3, #0                      @ .LC22 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x310] 
    /*000006d8*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*000006dc*/ MOVT        R3, #0                      @ .LC22 [R_ARM_MOVT_ABS: .rodata.str1.4+0x310] 
    /*000006e0*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*000006e4*/ MOVW        R2, #1350                   @ 0x546 
    /*000006e8*/ LDR         R1, [PC, #352]              @ 0x0000000000000850 
    /*000006ec*/ BL          0x00000000000006EC          @ osal_panic [R_ARM_CALL: +0x0] 
    /*000006f0*/ B           VGS_BeginJob_x640
    VGS_BeginJob_x6f4:
    /*000006f4*/ MOVW        R3, #1323                   @ 0x52b 
    /*000006f8*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*000006fc*/ STR         R3, [SP] 
    /*00000700*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00000704*/ LDR         R3, [PC, #324]              @ 0x0000000000000850 
    /*00000708*/ MOV         R1, #45                     @ 0x2d 
    /*0000070c*/ MOV         R0, #3 
    /*00000710*/ BL          0x0000000000000710          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000714*/ MOVW        R0, #32784                  @ 0x8010 
    /*00000718*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000071c*/ B           VGS_BeginJob_x6cc
    VGS_BeginJob_x720:
    /*00000720*/ STR         R1, [SP, #20] 
    /*00000724*/ BL          0x0000000000000504 
    /*00000728*/ LDR         R1, [SP, #20] 
    /*0000072c*/ CMP         R0, #0 
    /*00000730*/ BEQ         VGS_BeginJob_x594
    VGS_BeginJob_x734:
    /*00000734*/ MOVW        R0, #32774                  @ 0x8006 
    /*00000738*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000073c*/ B           VGS_BeginJob_x6cc
    VGS_BeginJob_x740:
    /*00000740*/ STR         R1, [SP, #20] 
    /*00000744*/ BL          0x0000000000000504 
    /*00000748*/ CMP         R0, #0 
    /*0000074c*/ LDREQ       R1, [SP, #20] 
    /*00000750*/ BNE         VGS_BeginJob_x734
    /*00000754*/ B           VGS_BeginJob_x59c
    VGS_BeginJob_x758:
    /*00000758*/ MOVW        R2, #0                      @ .LC19 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x284] 
    /*0000075c*/ MOVT        R2, #0                      @ .LC19 [R_ARM_MOVT_ABS: .rodata.str1.4+0x284] 
    /*00000760*/ STR         R3, [SP, #4] 
    /*00000764*/ MOVW        R3, #1320                   @ 0x528 
    /*00000768*/ STR         R3, [SP] 
    VGS_BeginJob_x76c:
    /*0000076c*/ LDR         R3, [PC, #220]              @ 0x0000000000000850 
    /*00000770*/ MOV         R1, #45                     @ 0x2d 
    /*00000774*/ MOV         R0, #3 
    /*00000778*/ BL          0x0000000000000778          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000077c*/ MOVW        R0, #32771                  @ 0x8003 
    /*00000780*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00000784*/ B           VGS_BeginJob_x6cc
    VGS_BeginJob_x788:
    /*00000788*/ MOVW        R3, #1315                   @ 0x523 
    /*0000078c*/ MOVW        R2, #0                      @ .LC15 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1a4] 
    /*00000790*/ STR         R1, [SP, #4] 
    /*00000794*/ MOVT        R2, #0                      @ .LC15 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1a4] 
    /*00000798*/ STR         R3, [SP] 
    /*0000079c*/ B           VGS_BeginJob_x76c
    VGS_BeginJob_x7a0:
    /*000007a0*/ MOVW        R3, #1316                   @ 0x524 
    /*000007a4*/ MOVW        R2, #0                      @ .LC16 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1d4] 
    /*000007a8*/ STR         R6, [SP, #4] 
    /*000007ac*/ MOVT        R2, #0                      @ .LC16 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1d4] 
    /*000007b0*/ STR         R3, [SP] 
    /*000007b4*/ B           VGS_BeginJob_x76c
    VGS_BeginJob_x7b8:
    /*000007b8*/ MOVW        R2, #0                      @ .LC17 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x204] 
    /*000007bc*/ MOVT        R2, #0                      @ .LC17 [R_ARM_MOVT_ABS: .rodata.str1.4+0x204] 
    /*000007c0*/ MOVW        R3, #1317                   @ 0x525 
    /*000007c4*/ STR         R8, [SP, #8] 
    /*000007c8*/ STR         R6, [SP, #4] 
    /*000007cc*/ STR         R3, [SP] 
    VGS_BeginJob_x7d0:
    /*000007d0*/ LDR         R3, [PC, #120]              @ 0x0000000000000850 
    /*000007d4*/ MOV         R1, #45                     @ 0x2d 
    /*000007d8*/ MOV         R0, #3 
    /*000007dc*/ BL          0x00000000000007DC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000007e0*/ MOVW        R0, #32771                  @ 0x8003 
    /*000007e4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000007e8*/ B           VGS_BeginJob_x6cc
    VGS_BeginJob_x7ec:
    /*000007ec*/ MOVW        R3, #1318                   @ 0x526 
    /*000007f0*/ MOVW        R2, #0                      @ .LC18 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x244] 
    /*000007f4*/ STR         R9, [SP, #8] 
    /*000007f8*/ MOVT        R2, #0                      @ .LC18 [R_ARM_MOVT_ABS: .rodata.str1.4+0x244] 
    /*000007fc*/ STR         R6, [SP, #4] 
    /*00000800*/ STR         R3, [SP] 
    /*00000804*/ B           VGS_BeginJob_x7d0
    VGS_BeginJob_x808:
    /*00000808*/ MOVW        R3, #1331                   @ 0x533 
    /*0000080c*/ MOV         R1, #45                     @ 0x2d 
    /*00000810*/ STR         R3, [SP] 
    /*00000814*/ MOVW        R2, #0                      @ .LC21 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2e4] 
    /*00000818*/ LDR         R3, [PC, #48]               @ 0x0000000000000850 
    /*0000081c*/ MOVT        R2, #0                      @ .LC21 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2e4] 
    /*00000820*/ MOV         R0, #2 
    /*00000824*/ BL          0x0000000000000824          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000828*/ ADD         R1, SP, #28 
    /*0000082c*/ LDR         R0, [PC, #24]               @ 0x000000000000084c 
    /*00000830*/ BL          0x0000000000000830          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00000834*/ LDR         R0, [PC, #12]               @ 0x0000000000000848 
    /*00000838*/ BL          0x0000000000000838          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000083c*/ MOVW        R0, #32782                  @ 0x800e 
    /*00000840*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00000844*/ B           VGS_BeginJob_x6cc
    /*00000848*/ ANDEQ       R0, R0, R0, LSL R0 
    /*0000084c*/ ANDEQ       R0, R0, R4 
    /*00000850*/ ANDEQ       R0, R0, R0, LSL #1 
FUNC_END VGS_BeginJob


FUNC_BEGIN VGS_CheckHandle.part.5
    /*00000854*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00000858*/ SUB         SP, SP, #12 
    /*0000085c*/ MOVW        R3, #267                    @ 0x10b 
    /*00000860*/ MOV         R1, #45                     @ 0x2d 
    /*00000864*/ STR         R0, [SP, #4] 
    /*00000868*/ MOVW        R2, #0                      @ .LC25 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3c8] 
    /*0000086c*/ STR         R3, [SP] 
    /*00000870*/ MOVT        R2, #0                      @ .LC25 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3c8] 
    /*00000874*/ LDR         R3, [PC, #20]               @ 0x0000000000000890 
    /*00000878*/ MOV         R0, #3 
    /*0000087c*/ BL          0x000000000000087C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000880*/ MOVW        R0, #32771                  @ 0x8003 
    /*00000884*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00000888*/ ADD         SP, SP, #12 
    /*0000088c*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    /*00000890*/ MULEQ       R0, R0, R0 
FUNC_END VGS_CheckHandle.part.5


FUNC_BEGIN VGS_CheckJobInCreatedState.part.6
    /*00000894*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00000898*/ SUB         SP, SP, #12 
    /*0000089c*/ MOV         R1, #45                     @ 0x2d 
    /*000008a0*/ MOVW        R3, #277                    @ 0x115 
    /*000008a4*/ STR         R0, [SP, #4] 
    /*000008a8*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*000008ac*/ STR         R3, [SP] 
    /*000008b0*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*000008b4*/ LDR         R3, [PC, #28]               @ 0x00000000000008d8 
    /*000008b8*/ MOV         R0, #3 
    /*000008bc*/ BL          0x00000000000008BC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000008c0*/ LDR         R0, [PC, #20]               @ 0x00000000000008dc 
    /*000008c4*/ BL          0x00000000000008C4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000008c8*/ MOVW        R0, #32771                  @ 0x8003 
    /*000008cc*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000008d0*/ ADD         SP, SP, #12 
    /*000008d4*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    /*000008d8*/ ANDEQ       R0, R0, R0, LSR #1 
    /*000008dc*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_CheckJobInCreatedState.part.6


FUNC_BEGIN VgsClose
    /*000008e0*/ MOV         R0, #0 
    /*000008e4*/ BX          LR 
FUNC_END VgsClose


FUNC_BEGIN VgsFreeze
    /*000008e8*/ MOV         R0, #0 
    /*000008ec*/ BX          LR 
FUNC_END VgsFreeze


FUNC_BEGIN VgsOpen
    /*000008f0*/ MOV         R0, #0 
    /*000008f4*/ BX          LR 
FUNC_END VgsOpen


FUNC_BEGIN VGS_HiModId2InnerModId
    /*000008f8*/ SUB         R0, R0, #3 
    /*000008fc*/ CMP         R0, #42                     @ 0x2a 
    /*00000900*/ MOVWLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*00000904*/ MOVTLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*00000908*/ ADDLS       R3, R3, R0 
    /*0000090c*/ LDRBLS      R0, [R3, #84]               @ 0x54 
    /*00000910*/ MOVHI       R0, #13 
    /*00000914*/ BX          LR 
FUNC_END VGS_HiModId2InnerModId


FUNC_BEGIN VGS_InnerModId2HiModId
    /*00000918*/ CMP         R0, #12 
    /*0000091c*/ MOVWLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*00000920*/ MOVTLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*00000924*/ ADDLS       R3, R3, R0, LSL #2 
    /*00000928*/ LDRLS       R0, [R3, #188]              @ 0xbc 
    /*0000092c*/ MOVHI       R0, #60                     @ 0x3c 
    /*00000930*/ BX          LR 
FUNC_END VGS_InnerModId2HiModId


FUNC_BEGIN VGS_GetPointerByOffset
    /*00000934*/ MOVW        IP, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00000938*/ MOVT        IP, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*0000093c*/ ADD         R2, IP, R2, LSL #2 
    /*00000940*/ LDR         IP, [SP] 
    /*00000944*/ LDR         R2, [R2, #72]               @ 0x48 
    /*00000948*/ MLA         R3, R2, R3, IP 
    /*0000094c*/ MLA         R0, R1, R3, R0 
    /*00000950*/ BX          LR 
FUNC_END VGS_GetPointerByOffset


FUNC_BEGIN VGS_CheckNullPtr
    /*00000954*/ CMP         R0, #0 
    /*00000958*/ BEQ         VGS_CheckNullPtr_x964
    /*0000095c*/ MOV         R0, #0 
    /*00000960*/ BX          LR 
    VGS_CheckNullPtr_x964:
    /*00000964*/ B           0x0000000000000504 
FUNC_END VGS_CheckNullPtr


FUNC_BEGIN VGS_CheckHandle
    /*00000968*/ CMP         R0, #0 
    /*0000096c*/ BLT         VGS_CheckHandle_x98c
    /*00000970*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00000974*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00000978*/ LDR         R3, [R3] 
    /*0000097c*/ CMP         R3, R0 
    /*00000980*/ BLS         VGS_CheckHandle_x98c
    /*00000984*/ MOV         R0, #0 
    /*00000988*/ BX          LR 
    VGS_CheckHandle_x98c:
    /*0000098c*/ B           0x0000000000000854 
FUNC_END VGS_CheckHandle


FUNC_BEGIN VGS_CheckJobInCreatedState
    /*00000990*/ CMP         R0, #1 
    /*00000994*/ BNE         VGS_CheckJobInCreatedState_x9a0
    /*00000998*/ MOV         R0, #0 
    /*0000099c*/ BX          LR 
    VGS_CheckJobInCreatedState_x9a0:
    /*000009a0*/ B           0x0000000000000894 
FUNC_END VGS_CheckJobInCreatedState


FUNC_BEGIN VGS_DebugPrintImgInfo
    /*000009a4*/ MOV         R3, R0 
    /*000009a8*/ MOV         R1, #45                     @ 0x2d 
    /*000009ac*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*000009b0*/ SUB         SP, SP, #92                 @ 0x5c 
    /*000009b4*/ LDR         R5, [R3, #4] 
    /*000009b8*/ MOVW        R4, #303                    @ 0x12f 
    /*000009bc*/ LDR         LR, [R3] 
    /*000009c0*/ MOVW        R2, #0                      @ .LC27 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x434] 
    /*000009c4*/ LDR         IP, [R3, #12] 
    /*000009c8*/ MOVT        R2, #0                      @ .LC27 [R_ARM_MOVT_ABS: .rodata.str1.4+0x434] 
    /*000009cc*/ LDR         R0, [R0, #8] 
    /*000009d0*/ STR         R5, [SP, #12] 
    /*000009d4*/ STR         R0, [SP, #16] 
    /*000009d8*/ MOV         R0, #7 
    /*000009dc*/ LDR         R6, [R3, #52]               @ 0x34 
    /*000009e0*/ STR         LR, [SP, #8] 
    /*000009e4*/ LDR         LR, [R3, #48]               @ 0x30 
    /*000009e8*/ STR         IP, [SP, #4] 
    /*000009ec*/ LDR         IP, [R3, #44]               @ 0x2c 
    /*000009f0*/ STR         R4, [SP] 
    /*000009f4*/ LDRD        R4, [R3, #160]              @ 0xa0 
    /*000009f8*/ STR         R6, [SP, #80]               @ 0x50 
    /*000009fc*/ STR         LR, [SP, #76]               @ 0x4c 
    /*00000a00*/ LDRD        R6, [R3, #152]              @ 0x98 
    /*00000a04*/ STR         IP, [SP, #72]               @ 0x48 
    /*00000a08*/ STRD        R4, [SP, #64]               @ 0x40 
    /*00000a0c*/ LDRD        R4, [R3, #144]              @ 0x90 
    /*00000a10*/ STRD        R6, [SP, #56]               @ 0x38 
    /*00000a14*/ LDRD        R8, [R3, #136]              @ 0x88 
    /*00000a18*/ STRD        R4, [SP, #48]               @ 0x30 
    /*00000a1c*/ LDRD        R6, [R3, #128]              @ 0x80 
    /*00000a20*/ LDRD        R4, [R3, #120]              @ 0x78 
    /*00000a24*/ LDR         R3, [PC, #20]               @ 0x0000000000000a40 
    /*00000a28*/ STRD        R8, [SP, #40]               @ 0x28 
    /*00000a2c*/ STRD        R6, [SP, #32] 
    /*00000a30*/ STRD        R4, [SP, #24] 
    /*00000a34*/ BL          0x0000000000000A34          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000a38*/ ADD         SP, SP, #92                 @ 0x5c 
    /*00000a3c*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    /*00000a40*/ STRDEQ      R0, [R0], -R0               @ <UNPREDICTABLE> 
FUNC_END VGS_DebugPrintImgInfo


FUNC_BEGIN VGS_AdjustOnlineRect
    /*00000a44*/ LDR         R1, [R2] 
    /*00000a48*/ LDR         R3, [R0] 
    /*00000a4c*/ CMP         R1, #0 
    /*00000a50*/ LDR         R1, [R0, #4] 
    /*00000a54*/ LDR         R0, [R2, #76]               @ 0x4c 
    /*00000a58*/ LDRNE       R3, [R2, #12] 
    /*00000a5c*/ LDRNE       R1, [R2, #16] 
    /*00000a60*/ CMP         R0, #0 
    /*00000a64*/ BEQ         VGS_AdjustOnlineRect_xac8
    /*00000a68*/ LDR         R0, [R2, #112]              @ 0x70 
    /*00000a6c*/ CMP         R0, R3 
    /*00000a70*/ BGE         VGS_AdjustOnlineRect_xac0
    /*00000a74*/ LDR         IP, [R2, #116]              @ 0x74 
    /*00000a78*/ CMP         IP, R1 
    /*00000a7c*/ BGE         VGS_AdjustOnlineRect_xac0
    /*00000a80*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00000a84*/ LDR         LR, [R2, #80]               @ 0x50 
    /*00000a88*/ CMP         LR, #0 
    /*00000a8c*/ BEQ         VGS_AdjustOnlineRect_xab8
    /*00000a90*/ LDR         LR, [R2, #120]              @ 0x78 
    /*00000a94*/ ADD         LR, R0, LR 
    /*00000a98*/ CMP         R3, LR 
    /*00000a9c*/ SUBCC       R3, R3, R0 
    /*00000aa0*/ STRCC       R3, [R2, #120]              @ 0x78 
    /*00000aa4*/ LDR         R3, [R2, #124]              @ 0x7c 
    /*00000aa8*/ ADD         R3, IP, R3 
    /*00000aac*/ CMP         R1, R3 
    /*00000ab0*/ SUBCC       R1, R1, IP 
    /*00000ab4*/ STRCC       R1, [R2, #124]              @ 0x7c 
    VGS_AdjustOnlineRect_xab8:
    /*00000ab8*/ MOV         R0, #0 
    /*00000abc*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_AdjustOnlineRect_xac0:
    /*00000ac0*/ MOV         R3, #0 
    /*00000ac4*/ STR         R3, [R2, #76]               @ 0x4c 
    VGS_AdjustOnlineRect_xac8:
    /*00000ac8*/ MOV         R0, #0 
    /*00000acc*/ BX          LR 
FUNC_END VGS_AdjustOnlineRect


FUNC_BEGIN VGS_CheckFramePhyAddr
    /*00000ad0*/ LDR         IP, [PC, #724]              @ 0x0000000000000dac 
    /*00000ad4*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00000ad8*/ MOV         R7, R0 
    /*00000adc*/ LDR         R6, [R0, #16] 
    /*00000ae0*/ SUB         SP, SP, #52                 @ 0x34 
    /*00000ae4*/ LDM         IP!, {R0, R1, R2, R3} 
    /*00000ae8*/ ADD         LR, SP, #24 
    /*00000aec*/ CMP         R6, #2 
    /*00000af0*/ STMIA       LR!, {R0, R1, R2, R3} 
    /*00000af4*/ LDM         IP, {R0, R1} 
    /*00000af8*/ STM         LR, {R0, R1} 
    /*00000afc*/ BEQ         VGS_CheckFramePhyAddr_xd08
    /*00000b00*/ LDR         R2, [R7, #12] 
    /*00000b04*/ LDR         R3, [R7, #20] 
    /*00000b08*/ CMP         R2, #39                     @ 0x27 
    /*00000b0c*/ MOVNE       SL, #2 
    /*00000b10*/ MOVEQ       SL, #1 
    /*00000b14*/ CMP         R3, #0 
    /*00000b18*/ BNE         VGS_CheckFramePhyAddr_xbdc
    /*00000b1c*/ MOV         R4, #0 
    VGS_CheckFramePhyAddr_xb20:
    /*00000b20*/ LDR         R3, [R7, #24] 
    /*00000b24*/ CMP         R3, #0 
    /*00000b28*/ BEQ         VGS_CheckFramePhyAddr_xc50
    /*00000b2c*/ ADD         R3, R7, #56                 @ 0x38 
    /*00000b30*/ ADD         FP, R7, #168                @ 0xa8 
    /*00000b34*/ STR         R3, [SP, #20] 
    /*00000b38*/ MOV         R6, #0 
    /*00000b3c*/ B           VGS_CheckFramePhyAddr_xb4c
    VGS_CheckFramePhyAddr_xb40:
    /*00000b40*/ ADD         R6, R6, #1 
    /*00000b44*/ CMP         SL, R6 
    /*00000b48*/ BEQ         VGS_CheckFramePhyAddr_xc50
    VGS_CheckFramePhyAddr_xb4c:
    /*00000b4c*/ LDR         R3, [SP, #20] 
    /*00000b50*/ LDR         R4, [R7, #4] 
    /*00000b54*/ LDM         FP, {R8, R9} 
    /*00000b58*/ ADD         FP, FP, #8 
    /*00000b5c*/ LDR         R2, [R3], #4 
    /*00000b60*/ SUB         R4, R4, #1 
    /*00000b64*/ MOV         R0, R8 
    /*00000b68*/ UMULL       R4, R5, R4, R2 
    /*00000b6c*/ STR         R3, [SP, #20] 
    /*00000b70*/ MOV         R1, R4 
    /*00000b74*/ BL          0x0000000000000B74          @ hil_is_phys_in_mmz [R_ARM_CALL: +0x0] 
    /*00000b78*/ CMP         R0, #0 
    /*00000b7c*/ BEQ         VGS_CheckFramePhyAddr_xb40
    /*00000b80*/ MOV         R1, R4 
    /*00000b84*/ MOV         R0, R8 
    /*00000b88*/ BL          0x0000000000000B88          @ hil_map_mmz_check_phys [R_ARM_CALL: +0x0] 
    /*00000b8c*/ CMP         R0, #0 
    /*00000b90*/ BEQ         VGS_CheckFramePhyAddr_xb40
    /*00000b94*/ ADD         R6, R6, #4 
    VGS_CheckFramePhyAddr_xb98:
    /*00000b98*/ ADD         R3, SP, #48                 @ 0x30 
    /*00000b9c*/ STR         R8, [SP, #8] 
    /*00000ba0*/ ADD         R6, R3, R6, LSL #2 
    /*00000ba4*/ STR         R9, [SP, #12] 
    /*00000ba8*/ MOVW        R3, #463                    @ 0x1cf 
    /*00000bac*/ MOVW        R2, #0                      @ .LC30 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x558] 
    /*00000bb0*/ LDR         R0, [R6, #-24]              @ 0xffffffe8 
    /*00000bb4*/ MOVT        R2, #0                      @ .LC30 [R_ARM_MOVT_ABS: .rodata.str1.4+0x558] 
    /*00000bb8*/ STR         R3, [SP] 
    /*00000bbc*/ MOV         R1, #45                     @ 0x2d 
    /*00000bc0*/ LDR         R3, [PC, #488]              @ 0x0000000000000db0 
    /*00000bc4*/ STR         R0, [SP, #4] 
    /*00000bc8*/ MOV         R0, #3 
    /*00000bcc*/ BL          0x0000000000000BCC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000bd0*/ MVN         R0, #0 
    VGS_CheckFramePhyAddr_xbd4:
    /*00000bd4*/ ADD         SP, SP, #52                 @ 0x34 
    /*00000bd8*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_CheckFramePhyAddr_xbdc:
    /*00000bdc*/ CMP         R6, #3 
    /*00000be0*/ ADDNE       R3, R7, #32 
    /*00000be4*/ ADDNE       FP, R7, #72                 @ 0x48 
    /*00000be8*/ STRNE       R3, [SP, #20] 
    /*00000bec*/ MOVNE       R6, #0 
    /*00000bf0*/ BNE         VGS_CheckFramePhyAddr_xc04
    /*00000bf4*/ B           VGS_CheckFramePhyAddr_xd80
    VGS_CheckFramePhyAddr_xbf8:
    /*00000bf8*/ ADD         R6, R6, #1 
    /*00000bfc*/ CMP         SL, R6 
    /*00000c00*/ BEQ         VGS_CheckFramePhyAddr_xb20
    VGS_CheckFramePhyAddr_xc04:
    /*00000c04*/ LDR         R3, [SP, #20] 
    /*00000c08*/ LDR         R4, [R7, #4] 
    /*00000c0c*/ LDM         FP, {R8, R9} 
    /*00000c10*/ ADD         FP, FP, #8 
    /*00000c14*/ LDR         R2, [R3], #4 
    /*00000c18*/ SUB         R4, R4, #1 
    /*00000c1c*/ MOV         R0, R8 
    /*00000c20*/ UMULL       R4, R5, R4, R2 
    /*00000c24*/ STR         R3, [SP, #20] 
    /*00000c28*/ MOV         R1, R4 
    /*00000c2c*/ BL          0x0000000000000C2C          @ hil_is_phys_in_mmz [R_ARM_CALL: +0x0] 
    /*00000c30*/ CMP         R0, #0 
    /*00000c34*/ BEQ         VGS_CheckFramePhyAddr_xbf8
    /*00000c38*/ MOV         R1, R4 
    /*00000c3c*/ MOV         R0, R8 
    /*00000c40*/ BL          0x0000000000000C40          @ hil_map_mmz_check_phys [R_ARM_CALL: +0x0] 
    /*00000c44*/ CMP         R0, #0 
    /*00000c48*/ BEQ         VGS_CheckFramePhyAddr_xbf8
    /*00000c4c*/ B           VGS_CheckFramePhyAddr_xb98
    VGS_CheckFramePhyAddr_xc50:
    /*00000c50*/ ADD         FP, R7, #120                @ 0x78 
    /*00000c54*/ MOV         R6, #0 
    /*00000c58*/ B           VGS_CheckFramePhyAddr_xc68
    VGS_CheckFramePhyAddr_xc5c:
    /*00000c5c*/ ADD         R6, R6, #1 
    /*00000c60*/ CMP         SL, R6 
    /*00000c64*/ BEQ         VGS_CheckFramePhyAddr_xd58
    VGS_CheckFramePhyAddr_xc68:
    /*00000c68*/ CMP         R6, #0 
    /*00000c6c*/ BEQ         VGS_CheckFramePhyAddr_xd64
    /*00000c70*/ LDR         R0, [R7, #12] 
    /*00000c74*/ BL          0x0000000000000C74          @ VGS_DRV_IsPixFmtSp420 [R_ARM_CALL: .text+0xb7c4] 
    /*00000c78*/ CMP         R0, #0 
    /*00000c7c*/ BEQ         VGS_CheckFramePhyAddr_xcd8
    /*00000c80*/ LDR         R4, [R7] 
    /*00000c84*/ MOV         R5, #0 
    /*00000c88*/ LDR         R3, [R7, #48]               @ 0x30 
    /*00000c8c*/ LDR         R2, [R7, #4] 
    /*00000c90*/ LSR         R4, R4, #1 
    /*00000c94*/ LSR         R3, R3, #1 
    /*00000c98*/ SUB         R2, R2, #1 
    /*00000c9c*/ UMLAL       R4, R5, R3, R2 
    VGS_CheckFramePhyAddr_xca0:
    /*00000ca0*/ LDM         FP, {R8, R9} 
    /*00000ca4*/ MOV         R1, R4 
    /*00000ca8*/ ADD         FP, FP, #8 
    /*00000cac*/ MOV         R0, R8 
    /*00000cb0*/ BL          0x0000000000000CB0          @ hil_is_phys_in_mmz [R_ARM_CALL: +0x0] 
    /*00000cb4*/ CMP         R0, #0 
    /*00000cb8*/ BEQ         VGS_CheckFramePhyAddr_xc5c
    /*00000cbc*/ MOV         R0, R8 
    /*00000cc0*/ MOV         R1, R4 
    /*00000cc4*/ BL          0x0000000000000CC4          @ hil_map_mmz_check_phys [R_ARM_CALL: +0x0] 
    /*00000cc8*/ CMP         R0, #0 
    /*00000ccc*/ BEQ         VGS_CheckFramePhyAddr_xc5c
    /*00000cd0*/ ADD         R6, R6, #2 
    /*00000cd4*/ B           VGS_CheckFramePhyAddr_xb98
    VGS_CheckFramePhyAddr_xcd8:
    /*00000cd8*/ LDR         R0, [R7, #12] 
    /*00000cdc*/ BL          0x0000000000000CDC          @ VGS_DRV_IsPixFmtSp422 [R_ARM_CALL: .text+0xb7d8] 
    /*00000ce0*/ CMP         R0, #0 
    /*00000ce4*/ BEQ         VGS_CheckFramePhyAddr_xca0
    /*00000ce8*/ LDR         R4, [R7] 
    /*00000cec*/ MOV         R5, #0 
    /*00000cf0*/ LDR         R3, [R7, #4] 
    /*00000cf4*/ LDR         R2, [R7, #48]               @ 0x30 
    /*00000cf8*/ LSR         R4, R4, #1 
    /*00000cfc*/ SUB         R3, R3, #1 
    /*00000d00*/ UMLAL       R4, R5, R2, R3 
    /*00000d04*/ B           VGS_CheckFramePhyAddr_xca0
    VGS_CheckFramePhyAddr_xd08:
    /*00000d08*/ LDM         R7, {R0, R3} 
    /*00000d0c*/ MOV         R5, #0 
    /*00000d10*/ LDR         R2, [R7, #44]               @ 0x2c 
    /*00000d14*/ ADD         R3, R3, #63                 @ 0x3f 
    /*00000d18*/ LDR         R8, [R7, #120]              @ 0x78 
    /*00000d1c*/ BIC         R3, R3, #63                 @ 0x3f 
    /*00000d20*/ MOV         R4, R0 
    /*00000d24*/ SUB         R3, R3, #1 
    /*00000d28*/ LDR         R9, [R7, #124]              @ 0x7c 
    /*00000d2c*/ MOV         R0, R8 
    /*00000d30*/ UMLAL       R4, R5, R2, R3 
    /*00000d34*/ MOV         R1, R4 
    /*00000d38*/ BL          0x0000000000000D38          @ hil_is_phys_in_mmz [R_ARM_CALL: +0x0] 
    /*00000d3c*/ CMP         R0, #0 
    /*00000d40*/ BEQ         VGS_CheckFramePhyAddr_xd58
    /*00000d44*/ MOV         R1, R4 
    /*00000d48*/ MOV         R0, R8 
    /*00000d4c*/ BL          0x0000000000000D4C          @ hil_map_mmz_check_phys [R_ARM_CALL: +0x0] 
    /*00000d50*/ CMP         R0, #0 
    /*00000d54*/ BNE         VGS_CheckFramePhyAddr_xb98
    VGS_CheckFramePhyAddr_xd58:
    /*00000d58*/ MOV         R0, #0 
    /*00000d5c*/ ADD         SP, SP, #52                 @ 0x34 
    /*00000d60*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_CheckFramePhyAddr_xd64:
    /*00000d64*/ LDR         R3, [R7, #4] 
    /*00000d68*/ MOV         R5, #0 
    /*00000d6c*/ LDR         R4, [R7] 
    /*00000d70*/ LDR         R2, [R7, #44]               @ 0x2c 
    /*00000d74*/ SUB         R3, R3, #1 
    /*00000d78*/ UMLAL       R4, R5, R2, R3 
    /*00000d7c*/ B           VGS_CheckFramePhyAddr_xca0
    VGS_CheckFramePhyAddr_xd80:
    /*00000d80*/ MOVW        R1, #398                    @ 0x18e 
    /*00000d84*/ ADD         R3, IP, #8 
    /*00000d88*/ STR         R1, [SP] 
    /*00000d8c*/ MOV         R0, R6 
    /*00000d90*/ MOVW        R2, #0                      @ .LC29 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x508] 
    /*00000d94*/ MOV         R1, #45                     @ 0x2d 
    /*00000d98*/ MOVT        R2, #0                      @ .LC29 [R_ARM_MOVT_ABS: .rodata.str1.4+0x508] 
    /*00000d9c*/ BL          0x0000000000000D9C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000da0*/ MOVW        R0, #32771                  @ 0x8003 
    /*00000da4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00000da8*/ B           VGS_CheckFramePhyAddr_xbd4
    /*00000dac*/ ANDEQ       R0, R0, R8, LSL #2 
    /*00000db0*/ ANDEQ       R0, R0, R0, LSR #2 
FUNC_END VGS_CheckFramePhyAddr


FUNC_BEGIN VgsIoctlCopyTaskInfo
    /*00000db4*/ PUSH        {R4, R5, R6, R7, LR} 
    /*00000db8*/ MOV         R4, R0 
    /*00000dbc*/ SUB         SP, SP, #12 
    /*00000dc0*/ MOV         R0, R1 
    /*00000dc4*/ MOV         R6, R1 
    /*00000dc8*/ BL          0x0000000000000DC8          @ VGS_CheckFramePhyAddr [R_ARM_CALL: .text+0xad0] 
    /*00000dcc*/ CMP         R0, #0 
    /*00000dd0*/ MOVWNE      R3, #5241                   @ 0x1479 
    /*00000dd4*/ MOVWNE      R2, #0                      @ .LC31 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x590] 
    /*00000dd8*/ STRNE       R3, [SP] 
    /*00000ddc*/ MOVTNE      R2, #0                      @ .LC31 [R_ARM_MOVT_ABS: .rodata.str1.4+0x590] 
    /*00000de0*/ BNE         VgsIoctlCopyTaskInfo_xe48
    /*00000de4*/ ADD         R7, R6, #336                @ 0x150 
    /*00000de8*/ MOV         R0, R7 
    /*00000dec*/ BL          0x0000000000000DEC          @ VGS_CheckFramePhyAddr [R_ARM_CALL: .text+0xad0] 
    /*00000df0*/ SUBS        R5, R0, #0 
    /*00000df4*/ BNE         VgsIoctlCopyTaskInfo_xe38
    /*00000df8*/ MOV         R1, R6 
    /*00000dfc*/ MOV         R3, #30 
    /*00000e00*/ MOV         R2, #336                    @ 0x150 
    /*00000e04*/ STR         R5, [R4, #720]              @ 0x2d0 
    /*00000e08*/ STR         R5, [R4, #728]              @ 0x2d8 
    /*00000e0c*/ MOV         R0, R4 
    /*00000e10*/ STR         R5, [R4, #732]              @ 0x2dc 
    /*00000e14*/ STR         R3, [R4, #724]              @ 0x2d4 
    /*00000e18*/ BL          0x0000000000000E18          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00000e1c*/ MOV         R1, R7 
    /*00000e20*/ ADD         R0, R4, #336                @ 0x150 
    /*00000e24*/ MOV         R2, #336                    @ 0x150 
    /*00000e28*/ BL          0x0000000000000E28          @ osal_memcpy [R_ARM_CALL: +0x0] 
    VgsIoctlCopyTaskInfo_xe2c:
    /*00000e2c*/ MOV         R0, R5 
    /*00000e30*/ ADD         SP, SP, #12 
    /*00000e34*/ POP         {R4, R5, R6, R7, PC} 
    VgsIoctlCopyTaskInfo_xe38:
    /*00000e38*/ MOVW        R2, #0                      @ .LC32 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x5cc] 
    /*00000e3c*/ MOVT        R2, #0                      @ .LC32 [R_ARM_MOVT_ABS: .rodata.str1.4+0x5cc] 
    /*00000e40*/ MOV         R3, #5248                   @ 0x1480 
    /*00000e44*/ STR         R3, [SP] 
    VgsIoctlCopyTaskInfo_xe48:
    /*00000e48*/ LDR         R3, [PC, #20]               @ 0x0000000000000e64 
    /*00000e4c*/ MOV         R1, #45                     @ 0x2d 
    /*00000e50*/ MOV         R0, #3 
    /*00000e54*/ MOVW        R5, #32771                  @ 0x8003 
    /*00000e58*/ BL          0x0000000000000E58          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000e5c*/ MOVT        R5, #41005                  @ 0xa02d 
    /*00000e60*/ B           VgsIoctlCopyTaskInfo_xe2c
    /*00000e64*/ ANDEQ       R0, R0, R8, LSR R1 
FUNC_END VgsIoctlCopyTaskInfo


FUNC_BEGIN VGS_VbAdd
    /*00000e68*/ ADD         R3, R0, #464                @ 0x1d0 
    /*00000e6c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00000e70*/ MOV         R4, R0 
    /*00000e74*/ SUB         SP, SP, #16 
    /*00000e78*/ MOV         R0, #1 
    /*00000e7c*/ LDRD        R6, [R4, #120]              @ 0x78 
    /*00000e80*/ LDRD        R8, [R3, #-8] 
    /*00000e84*/ BL          0x0000000000000E84          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00000e88*/ MOV         R1, R7 
    /*00000e8c*/ LDR         R3, [R0, #36]               @ 0x24 
    /*00000e90*/ MOV         R0, R6 
    /*00000e94*/ BLX         R3 
    /*00000e98*/ CMN         R0, #1 
    /*00000e9c*/ BEQ         VGS_VbAdd_xed0
    /*00000ea0*/ MOV         R0, #1 
    /*00000ea4*/ BL          0x0000000000000EA4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00000ea8*/ LDR         IP, [R4, #328]              @ 0x148 
    /*00000eac*/ MOV         R3, #2 
    /*00000eb0*/ MOV         R2, R6 
    /*00000eb4*/ STR         R3, [SP] 
    /*00000eb8*/ MOV         R3, R7 
    /*00000ebc*/ LDR         R1, [R0, #60]               @ 0x3c 
    /*00000ec0*/ MOV         R0, IP 
    /*00000ec4*/ BLX         R1 
    /*00000ec8*/ SUBS        R5, R0, #0 
    /*00000ecc*/ BNE         VGS_VbAdd_xfc8
    VGS_VbAdd_xed0:
    /*00000ed0*/ MOV         R0, #1 
    /*00000ed4*/ BL          0x0000000000000ED4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00000ed8*/ MOV         R1, R9 
    /*00000edc*/ LDR         R3, [R0, #36]               @ 0x24 
    /*00000ee0*/ MOV         R0, R8 
    /*00000ee4*/ BLX         R3 
    /*00000ee8*/ CMN         R0, #1 
    /*00000eec*/ BEQ         VGS_VbAdd_xf20
    /*00000ef0*/ MOV         R0, #1 
    /*00000ef4*/ MOV         SL, #2 
    /*00000ef8*/ BL          0x0000000000000EF8          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00000efc*/ LDR         IP, [R4, #664]              @ 0x298 
    /*00000f00*/ MOV         R2, R8 
    /*00000f04*/ STR         SL, [SP] 
    /*00000f08*/ MOV         R3, R9 
    /*00000f0c*/ LDR         R1, [R0, #60]               @ 0x3c 
    /*00000f10*/ MOV         R0, IP 
    /*00000f14*/ BLX         R1 
    /*00000f18*/ SUBS        R5, R0, #0 
    /*00000f1c*/ BNE         VGS_VbAdd_xf68
    VGS_VbAdd_xf20:
    /*00000f20*/ LDR         R3, [R4, #328]              @ 0x148 
    /*00000f24*/ MOV         R1, #45                     @ 0x2d 
    /*00000f28*/ STRD        R6, [SP] 
    /*00000f2c*/ MOVW        R2, #0                      @ .LC35 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x680] 
    /*00000f30*/ MOV         R0, #7 
    /*00000f34*/ MOVT        R2, #0                      @ .LC35 [R_ARM_MOVT_ABS: .rodata.str1.4+0x680] 
    /*00000f38*/ BL          0x0000000000000F38          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000f3c*/ LDR         R3, [R4, #664]              @ 0x298 
    /*00000f40*/ MOV         R1, #45                     @ 0x2d 
    /*00000f44*/ STRD        R8, [SP] 
    /*00000f48*/ MOVW        R2, #0                      @ .LC36 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x6a4] 
    /*00000f4c*/ MOV         R0, #7 
    /*00000f50*/ MOVT        R2, #0                      @ .LC36 [R_ARM_MOVT_ABS: .rodata.str1.4+0x6a4] 
    /*00000f54*/ MOV         R5, #0 
    /*00000f58*/ BL          0x0000000000000F58          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000f5c*/ MOV         R0, R5 
    /*00000f60*/ ADD         SP, SP, #16 
    /*00000f64*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_VbAdd_xf68:
    /*00000f68*/ LDR         R1, [R4, #732]              @ 0x2dc 
    /*00000f6c*/ MOV         R0, #496                    @ 0x1f0 
    /*00000f70*/ LDR         R3, [R4, #724]              @ 0x2d4 
    /*00000f74*/ MOVW        R2, #0                      @ .LC34 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x644] 
    /*00000f78*/ STR         R0, [SP] 
    /*00000f7c*/ MOVT        R2, #0                      @ .LC34 [R_ARM_MOVT_ABS: .rodata.str1.4+0x644] 
    /*00000f80*/ STR         R1, [SP, #8] 
    /*00000f84*/ MOV         R0, #3 
    /*00000f88*/ MOV         R1, #45                     @ 0x2d 
    /*00000f8c*/ STR         R3, [SP, #4] 
    /*00000f90*/ LDR         R3, [PC, #108]              @ 0x0000000000001004 
    /*00000f94*/ BL          0x0000000000000F94          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000f98*/ MOV         R0, #1 
    /*00000f9c*/ BL          0x0000000000000F9C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00000fa0*/ LDR         IP, [R4, #328]              @ 0x148 
    /*00000fa4*/ MOV         R2, R6 
    /*00000fa8*/ STR         SL, [SP] 
    /*00000fac*/ MOV         R3, R7 
    /*00000fb0*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00000fb4*/ MOV         R0, IP 
    /*00000fb8*/ BLX         R1 
    /*00000fbc*/ MOV         R0, R5 
    /*00000fc0*/ ADD         SP, SP, #16 
    /*00000fc4*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_VbAdd_xfc8:
    /*00000fc8*/ LDR         R1, [R4, #732]              @ 0x2dc 
    /*00000fcc*/ MOV         R0, #484                    @ 0x1e4 
    /*00000fd0*/ LDR         R3, [R4, #724]              @ 0x2d4 
    /*00000fd4*/ MOVW        R2, #0                      @ .LC33 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x608] 
    /*00000fd8*/ STR         R0, [SP] 
    /*00000fdc*/ MOVT        R2, #0                      @ .LC33 [R_ARM_MOVT_ABS: .rodata.str1.4+0x608] 
    /*00000fe0*/ STR         R1, [SP, #8] 
    /*00000fe4*/ MOV         R0, #3 
    /*00000fe8*/ STR         R3, [SP, #4] 
    /*00000fec*/ MOV         R1, #45                     @ 0x2d 
    /*00000ff0*/ LDR         R3, [PC, #12]               @ 0x0000000000001004 
    /*00000ff4*/ BL          0x0000000000000FF4          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00000ff8*/ MOV         R0, R5 
    /*00000ffc*/ ADD         SP, SP, #16 
    /*00001000*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    /*00001004*/ ANDEQ       R0, R0, R0, ASR R1 
FUNC_END VGS_VbAdd


FUNC_BEGIN VGS_VbAddStitch
    /*00001008*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000100c*/ SUB         SP, SP, #60                 @ 0x3c 
    /*00001010*/ MOV         R9, R0 
    /*00001014*/ MOV         R2, #32 
    /*00001018*/ MOV         R1, #0 
    /*0000101c*/ ADD         R0, SP, #24 
    /*00001020*/ BL          0x0000000000001020          @ memset [R_ARM_CALL: +0x0] 
    /*00001024*/ LDR         R3, [R9, #1776]             @ 0x6f0 
    /*00001028*/ CMP         R3, #0 
    /*0000102c*/ BEQ         VGS_VbAddStitch_x10d8
    /*00001030*/ ADD         R3, SP, #24 
    /*00001034*/ MOVW        SL, #0                      @ .LC38 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x70c] 
    /*00001038*/ MOVT        SL, #0                      @ .LC38 [R_ARM_MOVT_ABS: .rodata.str1.4+0x70c] 
    /*0000103c*/ MOV         R7, R9 
    /*00001040*/ MOV         R8, R3 
    /*00001044*/ MOV         R6, #0 
    /*00001048*/ STR         R9, [SP, #20] 
    /*0000104c*/ STR         R3, [SP, #16] 
    VGS_VbAddStitch_x1050:
    /*00001050*/ LDRD        R4, [R7, #128]              @ 0x80 
    /*00001054*/ MOV         R0, #1 
    /*00001058*/ STRD        R4, [R8], #8 
    /*0000105c*/ BL          0x000000000000105C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001060*/ MOV         R1, R5 
    /*00001064*/ LDR         R3, [R0, #36]               @ 0x24 
    /*00001068*/ MOV         R0, R4 
    /*0000106c*/ BLX         R3 
    /*00001070*/ CMN         R0, #1 
    /*00001074*/ MOV         R0, #1 
    /*00001078*/ BEQ         VGS_VbAddStitch_x10a8
    /*0000107c*/ BL          0x000000000000107C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001080*/ LDR         IP, [R7, #336]              @ 0x150 
    /*00001084*/ MOV         R1, #2 
    /*00001088*/ MOV         R2, R4 
    /*0000108c*/ STR         R1, [SP] 
    /*00001090*/ MOV         R3, R5 
    /*00001094*/ LDR         R1, [R0, #60]               @ 0x3c 
    /*00001098*/ MOV         R0, IP 
    /*0000109c*/ BLX         R1 
    /*000010a0*/ CMP         R0, #0 
    /*000010a4*/ BNE         VGS_VbAddStitch_x115c
    VGS_VbAddStitch_x10a8:
    /*000010a8*/ LDR         IP, [R7, #336]!             @ 0x150 
    /*000010ac*/ MOV         R3, R6 
    /*000010b0*/ STRD        R4, [SP, #8] 
    /*000010b4*/ MOV         R2, SL 
    /*000010b8*/ MOV         R1, #45                     @ 0x2d 
    /*000010bc*/ MOV         R0, #7 
    /*000010c0*/ STR         IP, [SP] 
    /*000010c4*/ ADD         R6, R6, #1 
    /*000010c8*/ BL          0x00000000000010C8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000010cc*/ LDR         R3, [R9, #1776]             @ 0x6f0 
    /*000010d0*/ CMP         R3, R6 
    /*000010d4*/ BHI         VGS_VbAddStitch_x1050
    VGS_VbAddStitch_x10d8:
    /*000010d8*/ ADD         R3, R9, #1472               @ 0x5c0 
    /*000010dc*/ MOV         R0, #1 
    /*000010e0*/ LDRD        R4, [R3] 
    /*000010e4*/ BL          0x00000000000010E4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000010e8*/ MOV         R1, R5 
    /*000010ec*/ LDR         R3, [R0, #36]               @ 0x24 
    /*000010f0*/ MOV         R0, R4 
    /*000010f4*/ BLX         R3 
    /*000010f8*/ CMN         R0, #1 
    /*000010fc*/ BEQ         VGS_VbAddStitch_x1130
    /*00001100*/ MOV         R0, #1 
    /*00001104*/ MOV         R6, #2 
    /*00001108*/ BL          0x0000000000001108          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000110c*/ LDR         IP, [R9, #1680]             @ 0x690 
    /*00001110*/ MOV         R2, R4 
    /*00001114*/ STR         R6, [SP] 
    /*00001118*/ MOV         R3, R5 
    /*0000111c*/ LDR         R1, [R0, #60]               @ 0x3c 
    /*00001120*/ MOV         R0, IP 
    /*00001124*/ BLX         R1 
    /*00001128*/ SUBS        FP, R0, #0 
    /*0000112c*/ BNE         VGS_VbAddStitch_x11e4
    VGS_VbAddStitch_x1130:
    /*00001130*/ LDR         R3, [R9, #1680]             @ 0x690 
    /*00001134*/ MOVW        R2, #0                      @ .LC36 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x6a4] 
    /*00001138*/ STRD        R4, [SP] 
    /*0000113c*/ MOVT        R2, #0                      @ .LC36 [R_ARM_MOVT_ABS: .rodata.str1.4+0x6a4] 
    /*00001140*/ MOV         R1, #45                     @ 0x2d 
    /*00001144*/ MOV         R0, #7 
    /*00001148*/ MOV         FP, #0 
    /*0000114c*/ BL          0x000000000000114C          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_VbAddStitch_x1150:
    /*00001150*/ MOV         R0, FP 
    /*00001154*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00001158*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_VbAddStitch_x115c:
    /*0000115c*/ LDR         R1, [R9, #1748]             @ 0x6d4 
    /*00001160*/ MOV         FP, R0 
    /*00001164*/ LDR         R0, [R9, #1740]             @ 0x6cc 
    /*00001168*/ MOVW        R3, #529                    @ 0x211 
    /*0000116c*/ MOVW        R2, #0                      @ .LC37 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x6cc] 
    /*00001170*/ STR         R3, [SP] 
    /*00001174*/ STR         R1, [SP, #12] 
    /*00001178*/ MOVT        R2, #0                      @ .LC37 [R_ARM_MOVT_ABS: .rodata.str1.4+0x6cc] 
    /*0000117c*/ STR         R0, [SP, #8] 
    /*00001180*/ MOV         R1, #45                     @ 0x2d 
    /*00001184*/ STR         R6, [SP, #4] 
    /*00001188*/ MOV         R0, #3 
    /*0000118c*/ LDR         R3, [PC, #212]              @ 0x0000000000001268 
    /*00001190*/ BL          0x0000000000001190          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001194*/ CMP         R6, #0 
    /*00001198*/ BEQ         VGS_VbAddStitch_x1150
    /*0000119c*/ LDR         R7, [SP, #16] 
    /*000011a0*/ MOV         R4, #0 
    /*000011a4*/ LDR         R8, [SP, #20] 
    /*000011a8*/ MOV         R5, #2 
    VGS_VbAddStitch_x11ac:
    /*000011ac*/ MOV         R0, #1 
    /*000011b0*/ ADD         R4, R4, R0 
    /*000011b4*/ BL          0x00000000000011B4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000011b8*/ LDR         IP, [R8, #336]!             @ 0x150 
    /*000011bc*/ LDRD        R2, [R7], #8 
    /*000011c0*/ STR         R5, [SP] 
    /*000011c4*/ LDR         R1, [R0, #64]               @ 0x40 
    /*000011c8*/ MOV         R0, IP 
    /*000011cc*/ BLX         R1 
    /*000011d0*/ CMP         R4, R6 
    /*000011d4*/ BNE         VGS_VbAddStitch_x11ac
    /*000011d8*/ MOV         R0, FP 
    /*000011dc*/ ADD         SP, SP, #60                 @ 0x3c 
    /*000011e0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_VbAddStitch_x11e4:
    /*000011e4*/ LDR         R1, [R9, #1748]             @ 0x6d4 
    /*000011e8*/ MOVW        R0, #553                    @ 0x229 
    /*000011ec*/ LDR         R3, [R9, #1740]             @ 0x6cc 
    /*000011f0*/ MOVW        R2, #0                      @ .LC34 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x644] 
    /*000011f4*/ STR         R0, [SP] 
    /*000011f8*/ MOVT        R2, #0                      @ .LC34 [R_ARM_MOVT_ABS: .rodata.str1.4+0x644] 
    /*000011fc*/ STR         R1, [SP, #8] 
    /*00001200*/ MOV         R0, #3 
    /*00001204*/ STR         R3, [SP, #4] 
    /*00001208*/ MOV         R1, #45                     @ 0x2d 
    /*0000120c*/ LDR         R3, [PC, #84]               @ 0x0000000000001268 
    /*00001210*/ BL          0x0000000000001210          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001214*/ LDR         R3, [R9, #1776]             @ 0x6f0 
    /*00001218*/ CMP         R3, #0 
    /*0000121c*/ BEQ         VGS_VbAddStitch_x1150
    /*00001220*/ ADD         R4, SP, #24 
    /*00001224*/ MOV         R7, R9 
    /*00001228*/ MOV         R5, #0 
    VGS_VbAddStitch_x122c:
    /*0000122c*/ MOV         R0, #1 
    /*00001230*/ ADD         R5, R5, R0 
    /*00001234*/ BL          0x0000000000001234          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001238*/ LDR         IP, [R7, #336]!             @ 0x150 
    /*0000123c*/ LDRD        R2, [R4], #8 
    /*00001240*/ STR         R6, [SP] 
    /*00001244*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00001248*/ MOV         R0, IP 
    /*0000124c*/ BLX         R1 
    /*00001250*/ LDR         R3, [R9, #1776]             @ 0x6f0 
    /*00001254*/ CMP         R3, R5 
    /*00001258*/ BHI         VGS_VbAddStitch_x122c
    /*0000125c*/ MOV         R0, FP 
    /*00001260*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00001264*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*00001268*/ ANDEQ       R0, R0, IP, ASR R1 
FUNC_END VGS_VbAddStitch


FUNC_BEGIN VGS_VbSubInImg
    /*0000126c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00001270*/ MOV         R8, R0 
    /*00001274*/ LDR         R3, [R0, #1764]             @ 0x6e4 
    /*00001278*/ SUB         SP, SP, #16 
    /*0000127c*/ CMP         R3, #7 
    /*00001280*/ BEQ         VGS_VbSubInImg_x12fc
    /*00001284*/ MOV         R0, #1 
    /*00001288*/ LDRD        R4, [R8, #128]              @ 0x80 
    /*0000128c*/ BL          0x000000000000128C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001290*/ MOV         R1, R5 
    /*00001294*/ LDR         R3, [R0, #36]               @ 0x24 
    /*00001298*/ MOV         R0, R4 
    /*0000129c*/ BLX         R3 
    /*000012a0*/ CMN         R0, #1 
    /*000012a4*/ BEQ         VGS_VbSubInImg_x12d8
    /*000012a8*/ MOV         R0, #1 
    /*000012ac*/ BL          0x00000000000012AC          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000012b0*/ LDR         IP, [R8, #336]              @ 0x150 
    /*000012b4*/ MOV         R3, #2 
    /*000012b8*/ MOV         R2, R4 
    /*000012bc*/ STR         R3, [SP] 
    /*000012c0*/ MOV         R3, R5 
    /*000012c4*/ LDR         R1, [R0, #64]               @ 0x40 
    /*000012c8*/ MOV         R0, IP 
    /*000012cc*/ BLX         R1 
    /*000012d0*/ CMP         R0, #0 
    /*000012d4*/ BNE         VGS_VbSubInImg_x13e0
    VGS_VbSubInImg_x12d8:
    /*000012d8*/ LDR         R3, [R8, #336]              @ 0x150 
    /*000012dc*/ MOVW        R2, #0                      @ .LC42 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x7d8] 
    /*000012e0*/ STRD        R4, [SP] 
    /*000012e4*/ MOVT        R2, #0                      @ .LC42 [R_ARM_MOVT_ABS: .rodata.str1.4+0x7d8] 
    /*000012e8*/ MOV         R1, #45                     @ 0x2d 
    /*000012ec*/ MOV         R0, #7 
    /*000012f0*/ BL          0x00000000000012F0          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_VbSubInImg_x12f4:
    /*000012f4*/ ADD         SP, SP, #16 
    /*000012f8*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_VbSubInImg_x12fc:
    /*000012fc*/ LDR         R3, [R0, #1776]             @ 0x6f0 
    /*00001300*/ CMP         R3, #0 
    /*00001304*/ BEQ         VGS_VbSubInImg_x12f4
    /*00001308*/ LDR         SL, [PC, #260]              @ 0x0000000000001414 
    /*0000130c*/ MOVW        R9, #0                      @ .LC39 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x734] 
    /*00001310*/ MOVT        R9, #0                      @ .LC39 [R_ARM_MOVT_ABS: .rodata.str1.4+0x734] 
    /*00001314*/ MOV         R5, R0 
    /*00001318*/ MOV         R4, #0 
    VGS_VbSubInImg_x131c:
    /*0000131c*/ MOV         R0, #1 
    /*00001320*/ LDRD        R6, [R5, #128]              @ 0x80 
    /*00001324*/ BL          0x0000000000001324          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001328*/ MOV         R1, R7 
    /*0000132c*/ LDR         R3, [R0, #36]               @ 0x24 
    /*00001330*/ MOV         R0, R6 
    /*00001334*/ BLX         R3 
    /*00001338*/ CMN         R0, #1 
    /*0000133c*/ MOV         R0, #1 
    /*00001340*/ BEQ         VGS_VbSubInImg_x1370
    /*00001344*/ BL          0x0000000000001344          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001348*/ LDR         IP, [R5, #336]              @ 0x150 
    /*0000134c*/ MOV         R3, #2 
    /*00001350*/ MOV         R2, R6 
    /*00001354*/ STR         R3, [SP] 
    /*00001358*/ MOV         R3, R7 
    /*0000135c*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00001360*/ MOV         R0, IP 
    /*00001364*/ BLX         R1 
    /*00001368*/ CMP         R0, #0 
    /*0000136c*/ BNE         VGS_VbSubInImg_x13ac
    VGS_VbSubInImg_x1370:
    /*00001370*/ LDR         R0, [R5, #336]!             @ 0x150 
    /*00001374*/ MOV         R3, R4 
    /*00001378*/ MOVW        R2, #0                      @ .LC40 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x774] 
    /*0000137c*/ STRD        R6, [SP, #8] 
    /*00001380*/ MOVT        R2, #0                      @ .LC40 [R_ARM_MOVT_ABS: .rodata.str1.4+0x774] 
    /*00001384*/ MOV         R1, #45                     @ 0x2d 
    /*00001388*/ STR         R0, [SP] 
    /*0000138c*/ MOV         R0, #7 
    /*00001390*/ BL          0x0000000000001390          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001394*/ LDR         R3, [R8, #1776]             @ 0x6f0 
    /*00001398*/ ADD         R4, R4, #1 
    /*0000139c*/ CMP         R3, R4 
    /*000013a0*/ BHI         VGS_VbSubInImg_x131c
    /*000013a4*/ ADD         SP, SP, #16 
    /*000013a8*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_VbSubInImg_x13ac:
    /*000013ac*/ LDR         R1, [R8, #1748]             @ 0x6d4 
    /*000013b0*/ MOVW        IP, #594                    @ 0x252 
    /*000013b4*/ LDR         R0, [R8, #1740]             @ 0x6cc 
    /*000013b8*/ MOV         R3, SL 
    /*000013bc*/ STR         R4, [SP, #4] 
    /*000013c0*/ MOV         R2, R9 
    /*000013c4*/ STR         R1, [SP, #12] 
    /*000013c8*/ MOV         R1, #45                     @ 0x2d 
    /*000013cc*/ STR         R0, [SP, #8] 
    /*000013d0*/ MOV         R0, #3 
    /*000013d4*/ STR         IP, [SP] 
    /*000013d8*/ BL          0x00000000000013D8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000013dc*/ B           VGS_VbSubInImg_x1370
    VGS_VbSubInImg_x13e0:
    /*000013e0*/ LDR         R1, [R8, #740]              @ 0x2e4 
    /*000013e4*/ MOVW        R0, #614                    @ 0x266 
    /*000013e8*/ LDR         R3, [R8, #732]              @ 0x2dc 
    /*000013ec*/ MOVW        R2, #0                      @ .LC41 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x79c] 
    /*000013f0*/ STR         R0, [SP] 
    /*000013f4*/ MOVT        R2, #0                      @ .LC41 [R_ARM_MOVT_ABS: .rodata.str1.4+0x79c] 
    /*000013f8*/ STR         R1, [SP, #8] 
    /*000013fc*/ MOV         R0, #3 
    /*00001400*/ STR         R3, [SP, #4] 
    /*00001404*/ MOV         R1, #45                     @ 0x2d 
    /*00001408*/ LDR         R3, [PC, #4]                @ 0x0000000000001414 
    /*0000140c*/ BL          0x000000000000140C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001410*/ B           VGS_VbSubInImg_x12d8
    /*00001414*/ ANDEQ       R0, R0, IP, ROR #2 
FUNC_END VGS_VbSubInImg


FUNC_BEGIN VGS_VbSubOutImg
    /*00001418*/ PUSH        {R4, R6, R7, LR} 
    /*0000141c*/ MOV         R4, R0 
    /*00001420*/ LDR         R3, [R0, #1764]             @ 0x6e4 
    /*00001424*/ SUB         SP, SP, #16 
    /*00001428*/ CMP         R3, #7 
    /*0000142c*/ BEQ         VGS_VbSubOutImg_x14ac
    /*00001430*/ ADD         R3, R0, #464                @ 0x1d0 
    /*00001434*/ MOV         R0, #1 
    /*00001438*/ LDRD        R6, [R3] 
    /*0000143c*/ BL          0x000000000000143C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001440*/ MOV         R1, R7 
    /*00001444*/ LDR         R3, [R0, #36]               @ 0x24 
    /*00001448*/ MOV         R0, R6 
    /*0000144c*/ BLX         R3 
    /*00001450*/ CMN         R0, #1 
    /*00001454*/ BEQ         VGS_VbSubOutImg_x1488
    /*00001458*/ MOV         R0, #1 
    /*0000145c*/ BL          0x000000000000145C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00001460*/ LDR         IP, [R4, #672]              @ 0x2a0 
    /*00001464*/ MOV         R3, #2 
    /*00001468*/ MOV         R2, R6 
    /*0000146c*/ STR         R3, [SP] 
    /*00001470*/ MOV         R3, R7 
    /*00001474*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00001478*/ MOV         R0, IP 
    /*0000147c*/ BLX         R1 
    /*00001480*/ CMP         R0, #0 
    /*00001484*/ BNE         VGS_VbSubOutImg_x1558
    VGS_VbSubOutImg_x1488:
    /*00001488*/ LDR         R3, [R4, #672]              @ 0x2a0 
    /*0000148c*/ MOV         R1, #45                     @ 0x2d 
    /*00001490*/ STRD        R6, [SP] 
    /*00001494*/ MOVW        R2, #0                      @ .LC45 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x860] 
    /*00001498*/ MOV         R0, #7 
    /*0000149c*/ MOVT        R2, #0                      @ .LC45 [R_ARM_MOVT_ABS: .rodata.str1.4+0x860] 
    /*000014a0*/ BL          0x00000000000014A0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000014a4*/ ADD         SP, SP, #16 
    /*000014a8*/ POP         {R4, R6, R7, PC} 
    VGS_VbSubOutImg_x14ac:
    /*000014ac*/ ADD         R3, R0, #1472               @ 0x5c0 
    /*000014b0*/ MOV         R0, #1 
    /*000014b4*/ LDRD        R6, [R3] 
    /*000014b8*/ BL          0x00000000000014B8          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000014bc*/ MOV         R1, R7 
    /*000014c0*/ LDR         R3, [R0, #36]               @ 0x24 
    /*000014c4*/ MOV         R0, R6 
    /*000014c8*/ BLX         R3 
    /*000014cc*/ CMN         R0, #1 
    /*000014d0*/ BEQ         VGS_VbSubOutImg_x1534
    /*000014d4*/ MOV         R0, #1 
    /*000014d8*/ BL          0x00000000000014D8          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000014dc*/ LDR         IP, [R4, #1680]             @ 0x690 
    /*000014e0*/ MOV         R3, #2 
    /*000014e4*/ MOV         R2, R6 
    /*000014e8*/ STR         R3, [SP] 
    /*000014ec*/ MOV         R3, R7 
    /*000014f0*/ LDR         R1, [R0, #64]               @ 0x40 
    /*000014f4*/ MOV         R0, IP 
    /*000014f8*/ BLX         R1 
    /*000014fc*/ CMP         R0, #0 
    /*00001500*/ BEQ         VGS_VbSubOutImg_x1534
    /*00001504*/ LDR         R1, [R4, #1748]             @ 0x6d4 
    /*00001508*/ MOVW        R0, #642                    @ 0x282 
    /*0000150c*/ LDR         R3, [R4, #1740]             @ 0x6cc 
    /*00001510*/ MOVW        R2, #0                      @ .LC43 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x7fc] 
    /*00001514*/ STR         R0, [SP] 
    /*00001518*/ MOVT        R2, #0                      @ .LC43 [R_ARM_MOVT_ABS: .rodata.str1.4+0x7fc] 
    /*0000151c*/ STR         R1, [SP, #8] 
    /*00001520*/ MOV         R0, #3 
    /*00001524*/ STR         R3, [SP, #4] 
    /*00001528*/ MOV         R1, #45                     @ 0x2d 
    /*0000152c*/ LDR         R3, [PC, #88]               @ 0x000000000000158c 
    /*00001530*/ BL          0x0000000000001530          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_VbSubOutImg_x1534:
    /*00001534*/ LDR         R3, [R4, #1680]             @ 0x690 
    /*00001538*/ MOV         R1, #45                     @ 0x2d 
    /*0000153c*/ STRD        R6, [SP] 
    /*00001540*/ MOVW        R2, #0                      @ .LC44 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x838] 
    /*00001544*/ MOV         R0, #7 
    /*00001548*/ MOVT        R2, #0                      @ .LC44 [R_ARM_MOVT_ABS: .rodata.str1.4+0x838] 
    /*0000154c*/ BL          0x000000000000154C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001550*/ ADD         SP, SP, #16 
    /*00001554*/ POP         {R4, R6, R7, PC} 
    VGS_VbSubOutImg_x1558:
    /*00001558*/ LDR         R1, [R4, #740]              @ 0x2e4 
    /*0000155c*/ MOVW        R0, #661                    @ 0x295 
    /*00001560*/ LDR         R3, [R4, #732]              @ 0x2dc 
    /*00001564*/ MOVW        R2, #0                      @ .LC43 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x7fc] 
    /*00001568*/ STR         R0, [SP] 
    /*0000156c*/ MOVT        R2, #0                      @ .LC43 [R_ARM_MOVT_ABS: .rodata.str1.4+0x7fc] 
    /*00001570*/ STR         R1, [SP, #8] 
    /*00001574*/ MOV         R0, #3 
    /*00001578*/ STR         R3, [SP, #4] 
    /*0000157c*/ MOV         R1, #45                     @ 0x2d 
    /*00001580*/ LDR         R3, [PC, #4]                @ 0x000000000000158c 
    /*00001584*/ BL          0x0000000000001584          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001588*/ B           VGS_VbSubOutImg_x1488
    /*0000158c*/ ANDEQ       R0, R0, IP, ROR R1 
FUNC_END VGS_VbSubOutImg


FUNC_BEGIN VGS_ProcTaskInJob
    /*00001590*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00001594*/ SUB         SP, SP, #28 
    /*00001598*/ LDR         SL, [PC, #636]              @ 0x000000000000181c 
    /*0000159c*/ ADD         R7, SP, #24 
    /*000015a0*/ STR         R1, [SP, #12] 
    /*000015a4*/ MOV         R3, #0 
    /*000015a8*/ MOV         R6, R0 
    /*000015ac*/ STR         R3, [R7, #-4]! 
    /*000015b0*/ MOV         R0, SL 
    /*000015b4*/ MOV         R1, R7 
    /*000015b8*/ BL          0x00000000000015B8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000015bc*/ SUB         FP, SL, #4 
    /*000015c0*/ STR         SL, [SP, #8] 
    /*000015c4*/ B           VGS_ProcTaskInJob_x1650
    VGS_ProcTaskInJob_x15c8:
    /*000015c8*/ LDR         R3, [R4, #1768]             @ 0x6e8 
    /*000015cc*/ CMP         R3, #2 
    /*000015d0*/ BEQ         VGS_ProcTaskInJob_x17e4
    /*000015d4*/ LDR         R5, [R4, #728]              @ 0x2d8 
    /*000015d8*/ LDR         R0, [R6, #32] 
    /*000015dc*/ CMP         R5, #0 
    /*000015e0*/ LDR         R1, [R6, #36]               @ 0x24 
    /*000015e4*/ LDR         R2, [R6, #40]               @ 0x28 
    /*000015e8*/ BEQ         VGS_ProcTaskInJob_x17a8
    VGS_ProcTaskInJob_x15ec:
    /*000015ec*/ ADD         R8, R4, #8 
    /*000015f0*/ MOV         R3, R8 
    /*000015f4*/ BLX         R5 
    /*000015f8*/ MOV         R1, #45                     @ 0x2d 
    /*000015fc*/ MOVW        R3, #985                    @ 0x3d9 
    /*00001600*/ MOVW        R2, #0                      @ .LC47 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x88c] 
    /*00001604*/ STR         R3, [SP] 
    /*00001608*/ MOVT        R2, #0                      @ .LC47 [R_ARM_MOVT_ABS: .rodata.str1.4+0x88c] 
    /*0000160c*/ LDR         R3, [PC, #524]              @ 0x0000000000001820 
    /*00001610*/ MOV         R0, #7 
    /*00001614*/ BL          0x0000000000001614          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001618*/ MOV         R0, R8 
    /*0000161c*/ BL          0x000000000000161C          @ VGS_DebugPrintImgInfo [R_ARM_CALL: .text+0x9a4] 
    /*00001620*/ ADD         R0, R4, #344                @ 0x158 
    /*00001624*/ BL          0x0000000000001624          @ VGS_DebugPrintImgInfo [R_ARM_CALL: .text+0x9a4] 
    /*00001628*/ LDR         R8, [R4, #1764]             @ 0x6e4 
    VGS_ProcTaskInJob_x162c:
    /*0000162c*/ CMP         R8, #8 
    /*00001630*/ BNE         VGS_ProcTaskInJob_x17a8
    VGS_ProcTaskInJob_x1634:
    /*00001634*/ MOV         R1, R7 
    /*00001638*/ LDR         R0, [SP, #8] 
    /*0000163c*/ BL          0x000000000000163C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001640*/ LDR         R0, [FP, #8] 
    /*00001644*/ MOV         R1, R4 
    /*00001648*/ ADD         R0, R0, #304                @ 0x130 
    /*0000164c*/ BL          0x000000000000164C          @ VGS_PutTaskToFreeList [R_ARM_CALL: .text+0x7de8] 
    VGS_ProcTaskInJob_x1650:
    /*00001650*/ MOV         R0, R6 
    /*00001654*/ BL          0x0000000000001654          @ VGS_QueryTaskNumInJob [R_ARM_CALL: .text+0x7e0c] 
    /*00001658*/ CMP         R0, #0 
    /*0000165c*/ BLE         VGS_ProcTaskInJob_x17d0
    /*00001660*/ MOV         R0, R6 
    /*00001664*/ BL          0x0000000000001664          @ VGS_GetTaskFromJob [R_ARM_CALL: .text+0x7e14] 
    /*00001668*/ MOV         R1, R7 
    /*0000166c*/ MOV         R4, R0 
    /*00001670*/ MOV         R0, SL 
    /*00001674*/ BL          0x0000000000001674          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001678*/ CMP         R4, #0 
    /*0000167c*/ BEQ         VGS_ProcTaskInJob_x17fc
    VGS_ProcTaskInJob_x1680:
    /*00001680*/ LDR         R3, [R4, #1764]             @ 0x6e4 
    /*00001684*/ CMP         R3, #7 
    /*00001688*/ LDREQ       R3, [SP, #12] 
    /*0000168c*/ STREQ       R3, [R4, #1752]             @ 0x6d8 
    /*00001690*/ BEQ         VGS_ProcTaskInJob_x17b4
    /*00001694*/ CMP         R3, #8 
    /*00001698*/ LDR         R3, [SP, #12] 
    /*0000169c*/ STR         R3, [R4, #744]              @ 0x2e8 
    /*000016a0*/ BNE         VGS_ProcTaskInJob_x17b4
    VGS_ProcTaskInJob_x16a4:
    /*000016a4*/ LDR         R3, [R4, #1760]             @ 0x6e0 
    /*000016a8*/ CMN         R3, #1 
    /*000016ac*/ BEQ         VGS_ProcTaskInJob_x1710
    /*000016b0*/ MOV         R0, #1 
    /*000016b4*/ BL          0x00000000000016B4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000016b8*/ LDR         R3, [R0, #40]               @ 0x28 
    /*000016bc*/ LDR         R0, [R4, #1760]             @ 0x6e0 
    /*000016c0*/ BLX         R3 
    /*000016c4*/ MOV         R5, R0 
    /*000016c8*/ MOV         R0, #1 
    /*000016cc*/ BL          0x00000000000016CC          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000016d0*/ LDR         R3, [R0, #52]               @ 0x34 
    /*000016d4*/ LDR         R0, [R4, #1760]             @ 0x6e0 
    /*000016d8*/ BLX         R3 
    /*000016dc*/ MOV         R8, R0 
    /*000016e0*/ MOV         R0, #1 
    /*000016e4*/ MOV         R9, R1 
    /*000016e8*/ BL          0x00000000000016E8          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000016ec*/ MOV         R3, R9 
    /*000016f0*/ MOV         R1, #2 
    /*000016f4*/ MOV         R2, R8 
    /*000016f8*/ STR         R1, [SP] 
    /*000016fc*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00001700*/ MOV         R0, R5 
    /*00001704*/ BLX         R1 
    /*00001708*/ MVN         R3, #0 
    /*0000170c*/ STR         R3, [R4, #1760]             @ 0x6e0 
    VGS_ProcTaskInJob_x1710:
    /*00001710*/ LDR         R8, [R4, #1764]             @ 0x6e4 
    /*00001714*/ CMP         R8, #0 
    /*00001718*/ BEQ         VGS_ProcTaskInJob_x15c8
    VGS_ProcTaskInJob_x171c:
    /*0000171c*/ ADD         R0, R6, #32 
    /*00001720*/ CMP         R8, #7 
    /*00001724*/ LDM         R0, {R0, R1, R2} 
    /*00001728*/ BNE         VGS_ProcTaskInJob_x17c0
    /*0000172c*/ LDR         R9, [R4, #1736]             @ 0x6c8 
    /*00001730*/ CMP         R9, #0 
    /*00001734*/ BEQ         VGS_ProcTaskInJob_x17a8
    /*00001738*/ ADD         R5, R4, #8 
    /*0000173c*/ MOV         R3, R5 
    /*00001740*/ BLX         R9 
    /*00001744*/ MOV         R0, R8 
    /*00001748*/ MOVW        R3, #970                    @ 0x3ca 
    /*0000174c*/ MOVW        R2, #0                      @ .LC47 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x88c] 
    /*00001750*/ STR         R3, [SP] 
    /*00001754*/ MOVT        R2, #0                      @ .LC47 [R_ARM_MOVT_ABS: .rodata.str1.4+0x88c] 
    /*00001758*/ LDR         R3, [PC, #192]              @ 0x0000000000001820 
    /*0000175c*/ MOV         R1, #45                     @ 0x2d 
    /*00001760*/ BL          0x0000000000001760          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001764*/ LDR         R3, [R4, #1776]             @ 0x6f0 
    /*00001768*/ CMP         R3, #0 
    /*0000176c*/ MOVNE       R8, #0 
    /*00001770*/ BEQ         VGS_ProcTaskInJob_x1790
    VGS_ProcTaskInJob_x1774:
    /*00001774*/ MOV         R0, R5 
    /*00001778*/ ADD         R8, R8, #1 
    /*0000177c*/ BL          0x000000000000177C          @ VGS_DebugPrintImgInfo [R_ARM_CALL: .text+0x9a4] 
    /*00001780*/ LDR         R3, [R4, #1776]             @ 0x6f0 
    /*00001784*/ ADD         R5, R5, #336                @ 0x150 
    /*00001788*/ CMP         R8, R3 
    /*0000178c*/ BCC         VGS_ProcTaskInJob_x1774
    VGS_ProcTaskInJob_x1790:
    /*00001790*/ ADD         R0, R4, #1344               @ 0x540 
    /*00001794*/ ADD         R0, R0, #8 
    /*00001798*/ BL          0x0000000000001798          @ VGS_DebugPrintImgInfo [R_ARM_CALL: .text+0x9a4] 
    /*0000179c*/ LDR         R8, [R4, #1764]             @ 0x6e4 
    /*000017a0*/ CMP         R8, #8 
    /*000017a4*/ BEQ         VGS_ProcTaskInJob_x1634
    VGS_ProcTaskInJob_x17a8:
    /*000017a8*/ MOV         R0, R4 
    /*000017ac*/ BL          0x00000000000017AC          @ VGS_VbSubOutImg [R_ARM_CALL: .text+0x1418] 
    /*000017b0*/ B           VGS_ProcTaskInJob_x1634
    VGS_ProcTaskInJob_x17b4:
    /*000017b4*/ MOV         R0, R4 
    /*000017b8*/ BL          0x00000000000017B8          @ VGS_VbSubInImg [R_ARM_CALL: .text+0x126c] 
    /*000017bc*/ B           VGS_ProcTaskInJob_x16a4
    VGS_ProcTaskInJob_x17c0:
    /*000017c0*/ LDR         R5, [R4, #728]              @ 0x2d8 
    /*000017c4*/ CMP         R5, #0 
    /*000017c8*/ BNE         VGS_ProcTaskInJob_x15ec
    /*000017cc*/ B           VGS_ProcTaskInJob_x162c
    VGS_ProcTaskInJob_x17d0:
    /*000017d0*/ MOV         R1, R7 
    /*000017d4*/ LDR         R0, [PC, #64]               @ 0x000000000000181c 
    /*000017d8*/ BL          0x00000000000017D8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000017dc*/ ADD         SP, SP, #28 
    /*000017e0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_ProcTaskInJob_x17e4:
    /*000017e4*/ MOV         R2, #336                    @ 0x150 
    /*000017e8*/ ADD         R1, R4, #752                @ 0x2f0 
    /*000017ec*/ ADD         R0, R4, #8 
    /*000017f0*/ BL          0x00000000000017F0          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*000017f4*/ LDR         R8, [R4, #1764]             @ 0x6e4 
    /*000017f8*/ B           VGS_ProcTaskInJob_x171c
    VGS_ProcTaskInJob_x17fc:
    /*000017fc*/ MOVW        R3, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x888] 
    /*00001800*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00001804*/ MOVT        R3, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x888] 
    /*00001808*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*0000180c*/ MOVW        R2, #1026                   @ 0x402 
    /*00001810*/ LDR         R1, [PC, #12]               @ 0x0000000000001824 
    /*00001814*/ BL          0x0000000000001814          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00001818*/ B           VGS_ProcTaskInJob_x1680
    /*0000181c*/ ANDEQ       R0, R0, R4 
    /*00001820*/ ANDEQ       R0, R0, R0, LSR #3 
    /*00001824*/ ANDEQ       R0, R0, IP, LSL #3 
FUNC_END VGS_ProcTaskInJob


FUNC_BEGIN VGS_EndJob
    /*00001828*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*0000182c*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00001830*/ SUB         SP, SP, #24 
    /*00001834*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00001838*/ SUBS        R6, R0, #0 
    /*0000183c*/ MOV         R3, #0 
    /*00001840*/ MOV         R8, R2 
    /*00001844*/ STR         R3, [SP, #20] 
    /*00001848*/ LDR         R7, [R5, #8] 
    /*0000184c*/ BLT         VGS_EndJob_x1998
    /*00001850*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00001854*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00001858*/ LDR         R3, [R3] 
    /*0000185c*/ CMP         R3, R6 
    /*00001860*/ BLS         VGS_EndJob_x1998
    VGS_EndJob_x1864:
    /*00001864*/ LDR         R3, [R5] 
    /*00001868*/ CMP         R3, #1 
    /*0000186c*/ BNE         VGS_EndJob_x1af4
    /*00001870*/ LDR         R0, [PC, #904]              @ 0x0000000000001c00 
    /*00001874*/ BL          0x0000000000001874          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00001878*/ LDR         R1, [R5, #8] 
    /*0000187c*/ LDR         R3, [PC, #896]              @ 0x0000000000001c04 
    /*00001880*/ MOVW        R0, #3148                   @ 0xc4c 
    /*00001884*/ MOVW        R2, #0                      @ .LC48 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x8cc] 
    /*00001888*/ MOVT        R2, #0                      @ .LC48 [R_ARM_MOVT_ABS: .rodata.str1.4+0x8cc] 
    /*0000188c*/ LDR         IP, [R1, #4] 
    /*00001890*/ MOV         R1, #45                     @ 0x2d 
    /*00001894*/ LDR         R4, [IP, R6, LSL #2] 
    /*00001898*/ STM         SP, {R0, R6} 
    /*0000189c*/ MOV         R0, #6 
    /*000018a0*/ STR         R4, [SP, #8] 
    /*000018a4*/ BL          0x00000000000018A4          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000018a8*/ ADD         R0, R4, #164                @ 0xa4 
    /*000018ac*/ BL          0x00000000000018AC          @ osal_gettimeofday [R_ARM_CALL: +0x0] 
    /*000018b0*/ ADD         R1, SP, #20 
    /*000018b4*/ LDR         R0, [PC, #844]              @ 0x0000000000001c08 
    /*000018b8*/ BL          0x00000000000018B8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000018bc*/ LDR         R3, [R4, #20] 
    /*000018c0*/ CMP         R3, #1 
    /*000018c4*/ BNE         VGS_EndJob_x1b20
    /*000018c8*/ LDR         R6, [R4, #24] 
    /*000018cc*/ CMP         R6, #0 
    /*000018d0*/ BEQ         VGS_EndJob_x1b6c
    /*000018d4*/ MOV         R1, R4 
    /*000018d8*/ MOV         R0, R7 
    /*000018dc*/ BL          0x00000000000018DC          @ VGS_GetJobFromCreatedList [R_ARM_CALL: .text+0x8330] 
    /*000018e0*/ CMP         R8, #0 
    /*000018e4*/ BEQ         VGS_EndJob_x1904
    /*000018e8*/ ADD         R6, R4, #48                 @ 0x30 
    /*000018ec*/ MOV         R2, #64                     @ 0x40 
    /*000018f0*/ MOV         R1, R8 
    /*000018f4*/ MOV         R0, R6 
    /*000018f8*/ BL          0x00000000000018F8          @ osal_memcmp [R_ARM_CALL: +0x0] 
    /*000018fc*/ CMP         R0, #0 
    /*00001900*/ BNE         VGS_EndJob_x1ae0
    VGS_EndJob_x1904:
    /*00001904*/ LDR         R3, [R4, #128]              @ 0x80 
    /*00001908*/ MOV         R2, #3 
    /*0000190c*/ ADD         R1, SP, #20 
    /*00001910*/ STR         R2, [R4, #20] 
    /*00001914*/ CMP         R3, #1 
    /*00001918*/ LDR         R0, [PC, #744]              @ 0x0000000000001c08 
    /*0000191c*/ STREQ       R3, [R4, #132]              @ 0x84 
    /*00001920*/ BL          0x0000000000001920          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001924*/ LDR         R3, [R4, #32] 
    /*00001928*/ CMP         R3, #59                     @ 0x3b 
    /*0000192c*/ BHI         VGS_EndJob_x1aa4
    VGS_EndJob_x1930:
    /*00001930*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00001934*/ ADD         R1, SP, #20 
    /*00001938*/ LDR         R0, [PC, #712]              @ 0x0000000000001c08 
    /*0000193c*/ CMP         R3, #0 
    /*00001940*/ BEQ         VGS_EndJob_x19b4
    /*00001944*/ BL          0x0000000000001944          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001948*/ LDR         R2, [R4, #40]               @ 0x28 
    /*0000194c*/ LDR         R1, [R4, #36]               @ 0x24 
    /*00001950*/ MOV         R3, R7 
    /*00001954*/ LDR         R0, [R4, #32] 
    /*00001958*/ STR         R4, [SP] 
    /*0000195c*/ BL          0x000000000000195C          @ VGS_PutJobToBusyList [R_ARM_CALL: .text+0x85fc] 
    /*00001960*/ MOV         R3, #2 
    /*00001964*/ MOV         R0, R4 
    /*00001968*/ STR         R3, [R4, #20] 
    /*0000196c*/ BL          0x000000000000196C          @ VGS_DrvCommSubmitJob [R_ARM_CALL: .text+0x9bc4] 
    /*00001970*/ CMP         R0, #0 
    /*00001974*/ BNE         VGS_EndJob_x1bb4
    VGS_EndJob_x1978:
    /*00001978*/ ADD         R1, SP, #20 
    /*0000197c*/ LDR         R0, [PC, #644]              @ 0x0000000000001c08 
    /*00001980*/ BL          0x0000000000001980          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    VGS_EndJob_x1984:
    /*00001984*/ LDR         R0, [PC, #628]              @ 0x0000000000001c00 
    /*00001988*/ BL          0x0000000000001988          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000198c*/ MOV         R0, #0 
    VGS_EndJob_x1990:
    /*00001990*/ ADD         SP, SP, #24 
    /*00001994*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_EndJob_x1998:
    /*00001998*/ MOV         R0, R6 
    /*0000199c*/ BL          0x0000000000000854 
    /*000019a0*/ CMP         R0, #0 
    /*000019a4*/ BEQ         VGS_EndJob_x1864
    /*000019a8*/ MOVW        R0, #32771                  @ 0x8003 
    /*000019ac*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000019b0*/ B           VGS_EndJob_x1990
    VGS_EndJob_x19b4:
    /*000019b4*/ BL          0x00000000000019B4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000019b8*/ ADD         R0, R4, #32 
    /*000019bc*/ MOV         R3, R7 
    /*000019c0*/ LDM         R0, {R0, R1, R2} 
    /*000019c4*/ BL          0x00000000000019C4          @ VGS_QueryBusyJobNum [R_ARM_CALL: .text+0x8688] 
    /*000019c8*/ CMP         R0, #0 
    /*000019cc*/ BNE         VGS_EndJob_x1a5c
    /*000019d0*/ ADD         R0, R4, #32 
    /*000019d4*/ MOV         R3, R7 
    /*000019d8*/ LDM         R0, {R0, R1, R2} 
    /*000019dc*/ BL          0x00000000000019DC          @ VGS_QueryProcJobNum [R_ARM_CALL: .text+0x8824] 
    /*000019e0*/ CMP         R0, #0 
    /*000019e4*/ BNE         VGS_EndJob_x1a5c
    /*000019e8*/ ADD         R1, SP, #20 
    /*000019ec*/ LDR         R0, [PC, #532]              @ 0x0000000000001c08 
    /*000019f0*/ BL          0x00000000000019F0          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000019f4*/ MOV         R1, #1 
    /*000019f8*/ MOV         R0, R4 
    /*000019fc*/ BL          0x0000000000001590 
    /*00001a00*/ LDR         R6, [R4, #104]              @ 0x68 
    /*00001a04*/ CMP         R6, #0 
    /*00001a08*/ BEQ         VGS_EndJob_x1a24
    /*00001a0c*/ ADD         R0, R4, #32 
    /*00001a10*/ MOV         R2, #1 
    /*00001a14*/ ADD         R3, R4, #48                 @ 0x30 
    /*00001a18*/ STR         R2, [R4, #96]               @ 0x60 
    /*00001a1c*/ LDM         R0, {R0, R1, R2} 
    /*00001a20*/ BLX         R6 
    VGS_EndJob_x1a24:
    /*00001a24*/ ADD         R1, SP, #20 
    /*00001a28*/ LDR         R0, [PC, #472]              @ 0x0000000000001c08 
    /*00001a2c*/ BL          0x0000000000001A2C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001a30*/ LDR         R1, [R4, #128]              @ 0x80 
    /*00001a34*/ MOV         R2, #0 
    /*00001a38*/ MOV         R3, #6 
    /*00001a3c*/ CMP         R1, R2 
    /*00001a40*/ STR         R2, [R4, #132]              @ 0x84 
    /*00001a44*/ STR         R3, [R4, #20] 
    /*00001a48*/ BNE         VGS_EndJob_x1978
    /*00001a4c*/ MOV         R1, R4 
    /*00001a50*/ LDR         R0, [R5, #8] 
    /*00001a54*/ BL          0x0000000000001A54          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*00001a58*/ B           VGS_EndJob_x1978
    VGS_EndJob_x1a5c:
    /*00001a5c*/ ADD         R0, R4, #32 
    /*00001a60*/ MOV         R3, R7 
    /*00001a64*/ LDM         R0, {R0, R1, R2} 
    /*00001a68*/ BL          0x0000000000001A68          @ VGS_QueryBusyJobNum [R_ARM_CALL: .text+0x8688] 
    /*00001a6c*/ MOV         R3, R7 
    /*00001a70*/ LDR         R2, [R4, #40]               @ 0x28 
    /*00001a74*/ LDR         R1, [R4, #36]               @ 0x24 
    /*00001a78*/ CMP         R0, #0 
    /*00001a7c*/ LDR         R0, [R4, #32] 
    /*00001a80*/ STR         R4, [SP] 
    /*00001a84*/ BNE         VGS_EndJob_x1ac4
    /*00001a88*/ BL          0x0000000000001A88          @ VGS_PutJobToProcList [R_ARM_CALL: .text+0x8798] 
    /*00001a8c*/ MOV         R3, #6 
    /*00001a90*/ ADD         R1, SP, #20 
    /*00001a94*/ LDR         R0, [PC, #364]              @ 0x0000000000001c08 
    /*00001a98*/ STR         R3, [R4, #20] 
    /*00001a9c*/ BL          0x0000000000001A9C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001aa0*/ B           VGS_EndJob_x1984
    VGS_EndJob_x1aa4:
    /*00001aa4*/ MOVW        R3, #0                      @ .LC50 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x93c] 
    /*00001aa8*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00001aac*/ MOVT        R3, #0                      @ .LC50 [R_ARM_MOVT_ABS: .rodata.str1.4+0x93c] 
    /*00001ab0*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00001ab4*/ MOVW        R2, #3241                   @ 0xca9 
    /*00001ab8*/ LDR         R1, [PC, #324]              @ 0x0000000000001c04 
    /*00001abc*/ BL          0x0000000000001ABC          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00001ac0*/ B           VGS_EndJob_x1930
    VGS_EndJob_x1ac4:
    /*00001ac4*/ BL          0x0000000000001AC4          @ VGS_PutJobToBusyList [R_ARM_CALL: .text+0x85fc] 
    /*00001ac8*/ MOV         R3, #2 
    /*00001acc*/ ADD         R1, SP, #20 
    /*00001ad0*/ LDR         R0, [PC, #304]              @ 0x0000000000001c08 
    /*00001ad4*/ STR         R3, [R4, #20] 
    /*00001ad8*/ BL          0x0000000000001AD8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001adc*/ B           VGS_EndJob_x1984
    VGS_EndJob_x1ae0:
    /*00001ae0*/ MOV         R1, R8 
    /*00001ae4*/ MOV         R0, R6 
    /*00001ae8*/ MOV         R2, #64                     @ 0x40 
    /*00001aec*/ BL          0x0000000000001AEC          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00001af0*/ B           VGS_EndJob_x1904
    VGS_EndJob_x1af4:
    /*00001af4*/ MOVW        R3, #3144                   @ 0xc48 
    /*00001af8*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00001afc*/ STR         R3, [SP] 
    /*00001b00*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00001b04*/ LDR         R3, [PC, #248]              @ 0x0000000000001c04 
    /*00001b08*/ MOV         R1, #45                     @ 0x2d 
    /*00001b0c*/ MOV         R0, #3 
    /*00001b10*/ BL          0x0000000000001B10          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001b14*/ MOVW        R0, #32784                  @ 0x8010 
    /*00001b18*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00001b1c*/ B           VGS_EndJob_x1990
    VGS_EndJob_x1b20:
    /*00001b20*/ STR         R3, [SP, #4] 
    /*00001b24*/ MOV         R1, #45                     @ 0x2d 
    /*00001b28*/ MOVW        R3, #3207                   @ 0xc87 
    /*00001b2c*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00001b30*/ STR         R3, [SP] 
    /*00001b34*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00001b38*/ LDR         R3, [PC, #196]              @ 0x0000000000001c04 
    /*00001b3c*/ MOV         R0, #3 
    /*00001b40*/ BL          0x0000000000001B40          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001b44*/ LDR         R0, [PC, #188]              @ 0x0000000000001c08 
    /*00001b48*/ ADD         R1, SP, #20 
    /*00001b4c*/ MOV         R3, #0 
    /*00001b50*/ STR         R3, [R4, #132]              @ 0x84 
    VGS_EndJob_x1b54:
    /*00001b54*/ BL          0x0000000000001B54          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001b58*/ LDR         R0, [PC, #160]              @ 0x0000000000001c00 
    /*00001b5c*/ BL          0x0000000000001B5C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00001b60*/ MOVW        R0, #32771                  @ 0x8003 
    /*00001b64*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00001b68*/ B           VGS_EndJob_x1990
    VGS_EndJob_x1b6c:
    /*00001b6c*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00001b70*/ MOVW        LR, #3217                   @ 0xc91 
    /*00001b74*/ MOV         R1, #45                     @ 0x2d 
    /*00001b78*/ MOVW        R2, #0                      @ .LC49 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x8f8] 
    /*00001b7c*/ LDR         R3, [PC, #128]              @ 0x0000000000001c04 
    /*00001b80*/ MOVT        R2, #0                      @ .LC49 [R_ARM_MOVT_ABS: .rodata.str1.4+0x8f8] 
    /*00001b84*/ STR         R0, [SP, #12] 
    /*00001b88*/ MOV         R0, #3 
    /*00001b8c*/ LDR         IP, [R4, #32] 
    /*00001b90*/ STR         IP, [SP, #8] 
    /*00001b94*/ LDR         IP, [R4, #120]              @ 0x78 
    /*00001b98*/ STR         LR, [SP] 
    /*00001b9c*/ STR         IP, [SP, #4] 
    /*00001ba0*/ BL          0x0000000000001BA0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001ba4*/ STR         R6, [R4, #132]              @ 0x84 
    /*00001ba8*/ ADD         R1, SP, #20 
    /*00001bac*/ LDR         R0, [PC, #84]               @ 0x0000000000001c08 
    /*00001bb0*/ B           VGS_EndJob_x1b54
    VGS_EndJob_x1bb4:
    /*00001bb4*/ MOVW        R3, #3299                   @ 0xce3 
    /*00001bb8*/ MOV         R1, #45                     @ 0x2d 
    /*00001bbc*/ STR         R3, [SP] 
    /*00001bc0*/ MOVW        R2, #0                      @ .LC51 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x95c] 
    /*00001bc4*/ LDR         R3, [PC, #56]               @ 0x0000000000001c04 
    /*00001bc8*/ MOVT        R2, #0                      @ .LC51 [R_ARM_MOVT_ABS: .rodata.str1.4+0x95c] 
    /*00001bcc*/ MOV         R0, #3 
    /*00001bd0*/ BL          0x0000000000001BD0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001bd4*/ MOV         R3, #0 
    /*00001bd8*/ ADD         R1, SP, #20 
    /*00001bdc*/ LDR         R0, [PC, #36]               @ 0x0000000000001c08 
    /*00001be0*/ STR         R3, [R4, #132]              @ 0x84 
    /*00001be4*/ STR         R3, [R4, #128]              @ 0x80 
    /*00001be8*/ BL          0x0000000000001BE8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001bec*/ LDR         R0, [PC, #12]               @ 0x0000000000001c00 
    /*00001bf0*/ BL          0x0000000000001BF0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00001bf4*/ MOVW        R0, #32777                  @ 0x8009 
    /*00001bf8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00001bfc*/ B           VGS_EndJob_x1990
    /*00001c00*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00001c04*/ @           <UNDEFINED> instruction: 0x000001b8 
    /*00001c08*/ ANDEQ       R0, R0, R4 
FUNC_END VGS_EndJob


FUNC_BEGIN VGS_EndJobBlock
    /*00001c0c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00001c10*/ SUBS        R5, R0, #0 
    /*00001c14*/ SUB         SP, SP, #44                 @ 0x2c 
    /*00001c18*/ MOV         R3, #0 
    /*00001c1c*/ STR         R3, [SP, #28] 
    /*00001c20*/ BLT         VGS_EndJobBlock_x1d14
    /*00001c24*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00001c28*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00001c2c*/ LDR         R3, [R3] 
    /*00001c30*/ CMP         R3, R5 
    /*00001c34*/ BLS         VGS_EndJobBlock_x1d14
    VGS_EndJobBlock_x1c38:
    /*00001c38*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00001c3c*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00001c40*/ LDR         R3, [R4] 
    /*00001c44*/ CMP         R3, #1 
    /*00001c48*/ BNE         VGS_EndJobBlock_x1db0
    /*00001c4c*/ ADD         R0, R4, #16 
    /*00001c50*/ BL          0x0000000000001C50          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00001c54*/ ADD         R0, R4, #4 
    /*00001c58*/ ADD         R1, SP, #28 
    /*00001c5c*/ BL          0x0000000000001C5C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001c60*/ LDR         R3, [R4, #8] 
    /*00001c64*/ LDR         R3, [R3, #4] 
    /*00001c68*/ LDR         R8, [R3, R5, LSL #2] 
    /*00001c6c*/ LDR         R6, [R8, #20] 
    /*00001c70*/ CMP         R6, #1 
    /*00001c74*/ BNE         VGS_EndJobBlock_x1ddc
    /*00001c78*/ ADD         R1, SP, #28 
    /*00001c7c*/ ADD         R0, R4, #4 
    /*00001c80*/ STR         R6, [R8, #128]              @ 0x80 
    /*00001c84*/ BL          0x0000000000001C84          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001c88*/ MOV         R1, R6 
    /*00001c8c*/ MOV         R2, #0 
    /*00001c90*/ MOV         R0, R5 
    /*00001c94*/ BL          0x0000000000001C94          @ VGS_EndJob [R_ARM_CALL: .text+0x1828] 
    /*00001c98*/ SUBS        R9, R0, #0 
    /*00001c9c*/ BNE         VGS_EndJobBlock_x1d78
    /*00001ca0*/ LDR         SL, [R8, #112]              @ 0x70 
    /*00001ca4*/ MOVW        R6, #0                      @ VGS_JobState [R_ARM_MOVW_ABS_NC: .text+0x28] 
    /*00001ca8*/ ADD         R5, SP, #40                 @ 0x28 
    /*00001cac*/ ADD         R7, R8, #116                @ 0x74 
    /*00001cb0*/ MOVT        R6, #0                      @ VGS_JobState [R_ARM_MOVT_ABS: .text+0x28] 
    /*00001cb4*/ MOV         R2, R8 
    /*00001cb8*/ STR         SL, [SP, #36]               @ 0x24 
    /*00001cbc*/ STR         R8, [R5, #-8]! 
    VGS_EndJobBlock_x1cc0:
    /*00001cc0*/ LDR         R3, [R2, #20] 
    /*00001cc4*/ SUB         R1, R3, #6 
    /*00001cc8*/ CMP         R3, #0 
    /*00001ccc*/ CMPNE       R1, #1 
    /*00001cd0*/ BHI         VGS_EndJobBlock_x1ce4
    /*00001cd4*/ LDR         R1, [SP, #36]               @ 0x24 
    /*00001cd8*/ LDR         R3, [R2, #112]              @ 0x70 
    /*00001cdc*/ CMP         R1, R3 
    /*00001ce0*/ BEQ         VGS_EndJobBlock_x1d50
    VGS_EndJobBlock_x1ce4:
    /*00001ce4*/ LDR         FP, [R4] 
    /*00001ce8*/ CMP         FP, #1 
    /*00001cec*/ BEQ         VGS_EndJobBlock_x1d30
    VGS_EndJobBlock_x1cf0:
    /*00001cf0*/ LDR         R3, [R8, #20] 
    /*00001cf4*/ SUB         R3, R3, #6 
    /*00001cf8*/ CMP         R3, #1 
    /*00001cfc*/ BLS         VGS_EndJobBlock_x1e20
    VGS_EndJobBlock_x1d00:
    /*00001d00*/ LDR         R0, [PC, #408]              @ 0x0000000000001ea0 
    /*00001d04*/ BL          0x0000000000001D04          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_EndJobBlock_x1d08:
    /*00001d08*/ MOV         R0, R9 
    /*00001d0c*/ ADD         SP, SP, #44                 @ 0x2c 
    /*00001d10*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_EndJobBlock_x1d14:
    /*00001d14*/ MOV         R0, R5 
    /*00001d18*/ BL          0x0000000000000854 
    /*00001d1c*/ CMP         R0, #0 
    /*00001d20*/ BEQ         VGS_EndJobBlock_x1c38
    /*00001d24*/ MOVW        R9, #32771                  @ 0x8003 
    /*00001d28*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00001d2c*/ B           VGS_EndJobBlock_x1d08
    VGS_EndJobBlock_x1d30:
    /*00001d30*/ MOV         R2, R5 
    /*00001d34*/ MOV         R1, R6 
    /*00001d38*/ MOV         R0, R7 
    /*00001d3c*/ BL          0x0000000000001D3C          @ osal_wait_uninterruptible [R_ARM_CALL: +0x0] 
    /*00001d40*/ CMP         R0, #0 
    /*00001d44*/ BLT         VGS_EndJobBlock_x1e50
    /*00001d48*/ LDR         R2, [SP, #32] 
    /*00001d4c*/ B           VGS_EndJobBlock_x1cc0
    VGS_EndJobBlock_x1d50:
    /*00001d50*/ LDR         R3, [R2, #24] 
    /*00001d54*/ CMP         R3, #0 
    /*00001d58*/ BNE         VGS_EndJobBlock_x1ce4
    /*00001d5c*/ LDR         R3, [R2, #124]              @ 0x7c 
    /*00001d60*/ CMP         R3, #0 
    /*00001d64*/ BNE         VGS_EndJobBlock_x1ce4
    /*00001d68*/ LDR         R3, [R2, #132]              @ 0x84 
    /*00001d6c*/ CMP         R3, #0 
    /*00001d70*/ BNE         VGS_EndJobBlock_x1ce4
    /*00001d74*/ B           VGS_EndJobBlock_x1cf0
    VGS_EndJobBlock_x1d78:
    /*00001d78*/ MOV         R1, #45                     @ 0x2d 
    /*00001d7c*/ STR         R5, [SP, #4] 
    /*00001d80*/ MOVW        R3, #3364                   @ 0xd24 
    /*00001d84*/ MOVW        R2, #0                      @ .LC52 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x988] 
    /*00001d88*/ STR         R3, [SP] 
    /*00001d8c*/ MOVT        R2, #0                      @ .LC52 [R_ARM_MOVT_ABS: .rodata.str1.4+0x988] 
    /*00001d90*/ LDR         R3, [PC, #268]              @ 0x0000000000001ea4 
    /*00001d94*/ MOV         R0, #3 
    /*00001d98*/ BL          0x0000000000001D98          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001d9c*/ ADD         R0, R4, #16 
    /*00001da0*/ BL          0x0000000000001DA0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00001da4*/ MOV         R0, R9 
    /*00001da8*/ ADD         SP, SP, #44                 @ 0x2c 
    /*00001dac*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_EndJobBlock_x1db0:
    /*00001db0*/ MOVW        R3, #3342                   @ 0xd0e 
    /*00001db4*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00001db8*/ STR         R3, [SP] 
    /*00001dbc*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00001dc0*/ LDR         R3, [PC, #220]              @ 0x0000000000001ea4 
    /*00001dc4*/ MOV         R1, #45                     @ 0x2d 
    /*00001dc8*/ MOV         R0, #3 
    /*00001dcc*/ MOVW        R9, #32784                  @ 0x8010 
    /*00001dd0*/ BL          0x0000000000001DD0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001dd4*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00001dd8*/ B           VGS_EndJobBlock_x1d08
    VGS_EndJobBlock_x1ddc:
    /*00001ddc*/ MOVW        R3, #3354                   @ 0xd1a 
    /*00001de0*/ MOV         R1, #45                     @ 0x2d 
    /*00001de4*/ STR         R3, [SP] 
    /*00001de8*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00001dec*/ LDR         R3, [PC, #176]              @ 0x0000000000001ea4 
    /*00001df0*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00001df4*/ STR         R6, [SP, #4] 
    /*00001df8*/ MOV         R0, #3 
    /*00001dfc*/ BL          0x0000000000001DFC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001e00*/ ADD         R1, SP, #28 
    /*00001e04*/ ADD         R0, R4, #4 
    /*00001e08*/ MOVW        R9, #32771                  @ 0x8003 
    /*00001e0c*/ BL          0x0000000000001E0C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001e10*/ ADD         R0, R4, #16 
    /*00001e14*/ BL          0x0000000000001E14          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00001e18*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00001e1c*/ B           VGS_EndJobBlock_x1d08
    VGS_EndJobBlock_x1e20:
    /*00001e20*/ ADD         R1, SP, #28 
    /*00001e24*/ LDR         R0, [PC, #124]              @ 0x0000000000001ea8 
    /*00001e28*/ BL          0x0000000000001E28          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001e2c*/ LDR         R0, [R4, #8] 
    /*00001e30*/ MOV         R3, #0 
    /*00001e34*/ MOV         R1, R8 
    /*00001e38*/ STR         R3, [R8, #128]              @ 0x80 
    /*00001e3c*/ BL          0x0000000000001E3C          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*00001e40*/ ADD         R1, SP, #28 
    /*00001e44*/ LDR         R0, [PC, #92]               @ 0x0000000000001ea8 
    /*00001e48*/ BL          0x0000000000001E48          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001e4c*/ B           VGS_EndJobBlock_x1d00
    VGS_EndJobBlock_x1e50:
    /*00001e50*/ STR         SL, [SP, #16] 
    /*00001e54*/ MOVW        LR, #3377                   @ 0xd31 
    /*00001e58*/ LDR         IP, [R8, #112]              @ 0x70 
    /*00001e5c*/ MOV         R0, FP 
    /*00001e60*/ LDR         R1, [R4] 
    /*00001e64*/ MOVW        R2, #0                      @ .LC53 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x9b8] 
    /*00001e68*/ LDR         R3, [PC, #52]               @ 0x0000000000001ea4 
    /*00001e6c*/ MOVT        R2, #0                      @ .LC53 [R_ARM_MOVT_ABS: .rodata.str1.4+0x9b8] 
    /*00001e70*/ STR         IP, [SP, #12] 
    /*00001e74*/ MOV         R9, #65024                  @ 0xfe00 
    /*00001e78*/ STR         R1, [SP, #8] 
    /*00001e7c*/ MOV         R1, #45                     @ 0x2d 
    /*00001e80*/ LDR         IP, [R8, #20] 
    /*00001e84*/ MOVT        R9, #65535                  @ 0xffff 
    /*00001e88*/ STR         LR, [SP] 
    /*00001e8c*/ STR         IP, [SP, #4] 
    /*00001e90*/ BL          0x0000000000001E90          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00001e94*/ LDR         R0, [PC, #4]                @ 0x0000000000001ea0 
    /*00001e98*/ BL          0x0000000000001E98          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00001e9c*/ B           VGS_EndJobBlock_x1d08
    /*00001ea0*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00001ea4*/ ANDEQ       R0, R0, R4, ASR #3 
    /*00001ea8*/ ANDEQ       R0, R0, R4 
FUNC_END VGS_EndJobBlock


FUNC_BEGIN VGS_CancelJob
    /*00001eac*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00001eb0*/ SUBS        R6, R0, #0 
    /*00001eb4*/ SUB         SP, SP, #32 
    /*00001eb8*/ MOV         R3, #0 
    /*00001ebc*/ STR         R3, [SP, #28] 
    /*00001ec0*/ BLT         VGS_CancelJob_x2090
    /*00001ec4*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00001ec8*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00001ecc*/ LDR         R3, [R3] 
    /*00001ed0*/ CMP         R3, R6 
    /*00001ed4*/ BLS         VGS_CancelJob_x2090
    VGS_CancelJob_x1ed8:
    /*00001ed8*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00001edc*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00001ee0*/ LDR         R3, [R5] 
    /*00001ee4*/ CMP         R3, #0 
    /*00001ee8*/ BEQ         VGS_CancelJob_x2174
    /*00001eec*/ ADD         R0, R5, #16 
    /*00001ef0*/ BL          0x0000000000001EF0          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00001ef4*/ LDR         R3, [R5, #8] 
    /*00001ef8*/ ADD         R1, SP, #28 
    /*00001efc*/ ADD         R0, R5, #4 
    /*00001f00*/ LDR         R3, [R3, #4] 
    /*00001f04*/ LDR         R4, [R3, R6, LSL #2] 
    /*00001f08*/ ADD         R7, R4, #32 
    /*00001f0c*/ LDM         R7, {R7, R8, R9} 
    /*00001f10*/ BL          0x0000000000001F10          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001f14*/ LDR         R3, [R4, #20] 
    /*00001f18*/ CMP         R3, #3 
    /*00001f1c*/ CMPNE       R3, #0 
    /*00001f20*/ MOVEQ       SL, #1 
    /*00001f24*/ MOVNE       SL, #0 
    /*00001f28*/ BEQ         VGS_CancelJob_x21a0
    /*00001f2c*/ LDR         R2, [R4, #100]              @ 0x64 
    /*00001f30*/ CMP         R2, #0 
    /*00001f34*/ BNE         VGS_CancelJob_x20ac
    /*00001f38*/ LDR         R2, [R4, #124]              @ 0x7c 
    /*00001f3c*/ CMP         R2, #1 
    /*00001f40*/ BEQ         VGS_CancelJob_x2268
    /*00001f44*/ CMP         R3, #2 
    /*00001f48*/ MOV         R2, #1 
    /*00001f4c*/ STR         R2, [R4, #124]              @ 0x7c 
    /*00001f50*/ BEQ         VGS_CancelJob_x20e4
    /*00001f54*/ CMP         R3, #6 
    /*00001f58*/ BEQ         VGS_CancelJob_x2158
    /*00001f5c*/ CMP         R3, #1 
    /*00001f60*/ BEQ         VGS_CancelJob_x2114
    /*00001f64*/ MOVW        R3, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x888] 
    /*00001f68*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00001f6c*/ MOVT        R3, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x888] 
    /*00001f70*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00001f74*/ MOVW        R2, #3939                   @ 0xf63 
    /*00001f78*/ LDR         R1, [PC, #820]              @ 0x00000000000022b4 
    /*00001f7c*/ BL          0x0000000000001F7C          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_CancelJob_x1f80:
    /*00001f80*/ MOV         R3, #6 
    /*00001f84*/ ADD         R1, SP, #28 
    /*00001f88*/ STR         R3, [R4, #20] 
    /*00001f8c*/ LDR         R0, [PC, #804]              @ 0x00000000000022b8 
    /*00001f90*/ BL          0x0000000000001F90          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00001f94*/ LDR         R3, [R5, #1032]             @ 0x408 
    /*00001f98*/ MOV         R0, R4 
    /*00001f9c*/ ADD         R3, R3, #1 
    /*00001fa0*/ STR         R3, [R5, #1032]             @ 0x408 
    /*00001fa4*/ BL          0x0000000000001FA4          @ VGS_QueryTaskNumInJob [R_ARM_CALL: .text+0x7e0c] 
    /*00001fa8*/ LDR         R3, [R5, #1044]             @ 0x414 
    /*00001fac*/ MOV         R1, #3 
    /*00001fb0*/ ADD         R3, R3, R0 
    /*00001fb4*/ MOV         R0, R4 
    /*00001fb8*/ STR         R3, [R5, #1044]             @ 0x414 
    /*00001fbc*/ BL          0x0000000000001590 
    /*00001fc0*/ LDR         R7, [R4, #104]              @ 0x68 
    /*00001fc4*/ CMP         R7, #0 
    /*00001fc8*/ BEQ         VGS_CancelJob_x1fe4
    /*00001fcc*/ ADD         R0, R4, #32 
    /*00001fd0*/ MOV         R2, #3 
    /*00001fd4*/ ADD         R3, R4, #48                 @ 0x30 
    /*00001fd8*/ STR         R2, [R4, #96]               @ 0x60 
    /*00001fdc*/ LDM         R0, {R0, R1, R2} 
    /*00001fe0*/ BLX         R7 
    VGS_CancelJob_x1fe4:
    /*00001fe4*/ ADD         R1, SP, #28 
    /*00001fe8*/ LDR         R0, [PC, #712]              @ 0x00000000000022b8 
    /*00001fec*/ BL          0x0000000000001FEC          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00001ff0*/ LDR         R3, [R4, #132]              @ 0x84 
    /*00001ff4*/ MOV         R2, #0 
    /*00001ff8*/ STR         R2, [R4, #124]              @ 0x7c 
    /*00001ffc*/ CMP         R3, R2 
    /*00002000*/ BNE         VGS_CancelJob_x2100
    /*00002004*/ LDR         R1, [R4, #20] 
    /*00002008*/ CMP         R1, R2 
    /*0000200c*/ BEQ         VGS_CancelJob_x2100
    /*00002010*/ LDR         R2, [R4, #24] 
    /*00002014*/ CMP         R2, #0 
    /*00002018*/ BNE         VGS_CancelJob_x2124
    VGS_CancelJob_x201c:
    /*0000201c*/ MOV         R1, R4 
    /*00002020*/ LDR         R0, [R5, #8] 
    /*00002024*/ BL          0x0000000000002024          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    VGS_CancelJob_x2028:
    /*00002028*/ ADD         R1, SP, #28 
    /*0000202c*/ LDR         R0, [PC, #644]              @ 0x00000000000022b8 
    /*00002030*/ BL          0x0000000000002030          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00002034*/ LDR         R0, [R5, #8] 
    /*00002038*/ BL          0x0000000000002038          @ VGS_QueryFreeJobNum [R_ARM_CALL: .text+0x7ee4] 
    /*0000203c*/ MOV         R7, R0 
    /*00002040*/ LDR         R0, [R5, #8] 
    /*00002044*/ ADD         R0, R0, #304                @ 0x130 
    /*00002048*/ BL          0x0000000000002048          @ VGS_QueryFreeTaskNum [R_ARM_CALL: .text+0x7d58] 
    /*0000204c*/ MOVW        R3, #3977                   @ 0xf89 
    /*00002050*/ MOV         R1, #45                     @ 0x2d 
    /*00002054*/ STR         R3, [SP] 
    /*00002058*/ STR         R7, [SP, #12] 
    /*0000205c*/ MOVW        R2, #0                      @ .LC61 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xb50] 
    /*00002060*/ LDR         R3, [PC, #588]              @ 0x00000000000022b4 
    /*00002064*/ MOVT        R2, #0                      @ .LC61 [R_ARM_MOVT_ABS: .rodata.str1.4+0xb50] 
    /*00002068*/ STR         R4, [SP, #8] 
    /*0000206c*/ STR         R6, [SP, #4] 
    /*00002070*/ STR         R0, [SP, #16] 
    /*00002074*/ MOV         R0, #7 
    /*00002078*/ BL          0x0000000000002078          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000207c*/ LDR         R0, [PC, #568]              @ 0x00000000000022bc 
    /*00002080*/ BL          0x0000000000002080          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00002084*/ MOV         R0, #0 
    VGS_CancelJob_x2088:
    /*00002088*/ ADD         SP, SP, #32 
    /*0000208c*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_CancelJob_x2090:
    /*00002090*/ MOV         R0, R6 
    /*00002094*/ BL          0x0000000000000854 
    /*00002098*/ CMP         R0, #0 
    /*0000209c*/ BEQ         VGS_CancelJob_x1ed8
    VGS_CancelJob_x20a0:
    /*000020a0*/ MOVW        R0, #32771                  @ 0x8003 
    /*000020a4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000020a8*/ B           VGS_CancelJob_x2088
    VGS_CancelJob_x20ac:
    /*000020ac*/ SUB         R2, R3, #1 
    /*000020b0*/ CMP         R2, #1 
    /*000020b4*/ BHI         VGS_CancelJob_x21fc
    /*000020b8*/ LDR         R2, [R4, #124]              @ 0x7c 
    /*000020bc*/ CMP         R2, #1 
    /*000020c0*/ BEQ         VGS_CancelJob_x2268
    /*000020c4*/ CMP         R3, #1 
    /*000020c8*/ MOV         R3, #1 
    /*000020cc*/ STR         R3, [R4, #124]              @ 0x7c 
    /*000020d0*/ BEQ         VGS_CancelJob_x2114
    /*000020d4*/ MOV         R0, R6 
    /*000020d8*/ BL          0x00000000000020D8          @ VGS_DrvCommCancelJob [R_ARM_CALL: .text+0x8ab0] 
    /*000020dc*/ CMP         R0, #0 
    /*000020e0*/ BNE         VGS_CancelJob_x2224
    VGS_CancelJob_x20e4:
    /*000020e4*/ LDR         R3, [R5, #8] 
    /*000020e8*/ MOV         R2, R9 
    /*000020ec*/ STR         R4, [SP] 
    /*000020f0*/ MOV         R1, R8 
    /*000020f4*/ MOV         R0, R7 
    /*000020f8*/ BL          0x00000000000020F8          @ VGS_GetJobFromBusyList [R_ARM_CALL: .text+0x8534] 
    /*000020fc*/ B           VGS_CancelJob_x1f80
    VGS_CancelJob_x2100:
    /*00002100*/ MOV         R3, #0 
    /*00002104*/ ADD         R0, R4, #116                @ 0x74 
    /*00002108*/ STR         R3, [R4, #132]              @ 0x84 
    /*0000210c*/ BL          0x000000000000210C          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00002110*/ B           VGS_CancelJob_x2028
    VGS_CancelJob_x2114:
    /*00002114*/ MOV         R1, R4 
    /*00002118*/ LDR         R0, [R5, #8] 
    /*0000211c*/ BL          0x000000000000211C          @ VGS_GetJobFromCreatedList [R_ARM_CALL: .text+0x8330] 
    /*00002120*/ B           VGS_CancelJob_x1f80
    VGS_CancelJob_x2124:
    /*00002124*/ LDR         IP, [R4, #128]              @ 0x80 
    /*00002128*/ MOVW        R0, #3963                   @ 0xf7b 
    /*0000212c*/ STR         R3, [SP, #8] 
    /*00002130*/ MOVW        R2, #0                      @ .LC60 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xb28] 
    /*00002134*/ STR         R1, [SP, #4] 
    /*00002138*/ MOVT        R2, #0                      @ .LC60 [R_ARM_MOVT_ABS: .rodata.str1.4+0xb28] 
    /*0000213c*/ STR         R0, [SP] 
    /*00002140*/ MOV         R1, #45                     @ 0x2d 
    /*00002144*/ STR         IP, [SP, #12] 
    /*00002148*/ MOV         R0, #3 
    /*0000214c*/ LDR         R3, [PC, #352]              @ 0x00000000000022b4 
    /*00002150*/ BL          0x0000000000002150          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002154*/ B           VGS_CancelJob_x201c
    VGS_CancelJob_x2158:
    /*00002158*/ LDR         R3, [R5, #8] 
    /*0000215c*/ MOV         R2, R9 
    /*00002160*/ STR         R4, [SP] 
    /*00002164*/ MOV         R1, R8 
    /*00002168*/ MOV         R0, R7 
    /*0000216c*/ BL          0x000000000000216C          @ VGS_GetJobFromProcList [R_ARM_CALL: .text+0x86d0] 
    /*00002170*/ B           VGS_CancelJob_x1f80
    VGS_CancelJob_x2174:
    /*00002174*/ MOVW        R3, #3861                   @ 0xf15 
    /*00002178*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*0000217c*/ STR         R3, [SP] 
    /*00002180*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00002184*/ LDR         R3, [PC, #296]              @ 0x00000000000022b4 
    /*00002188*/ MOV         R1, #45                     @ 0x2d 
    /*0000218c*/ MOV         R0, #3 
    /*00002190*/ BL          0x0000000000002190          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002194*/ MOVW        R0, #32784                  @ 0x8010 
    /*00002198*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000219c*/ B           VGS_CancelJob_x2088
    VGS_CancelJob_x21a0:
    /*000021a0*/ CMP         R3, #0 
    /*000021a4*/ MOVW        R2, #0                      @ .LC55 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x9f8] 
    /*000021a8*/ MOVW        R1, #0                      @ .LC54 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x9f0] 
    /*000021ac*/ MOVT        R2, #0                      @ .LC55 [R_ARM_MOVT_ABS: .rodata.str1.4+0x9f8] 
    /*000021b0*/ MOVT        R1, #0                      @ .LC54 [R_ARM_MOVT_ABS: .rodata.str1.4+0x9f0] 
    /*000021b4*/ STR         R3, [SP, #4] 
    /*000021b8*/ MOV         R0, #3 
    /*000021bc*/ MOVNE       R3, R2 
    /*000021c0*/ MOVEQ       R3, R1 
    /*000021c4*/ MOVW        R2, #3875                   @ 0xf23 
    /*000021c8*/ STR         R3, [SP, #8] 
    /*000021cc*/ MOV         R1, #45                     @ 0x2d 
    /*000021d0*/ STR         R2, [SP] 
    /*000021d4*/ MOVW        R2, #0                      @ .LC56 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xa0c] 
    /*000021d8*/ LDR         R3, [PC, #212]              @ 0x00000000000022b4 
    /*000021dc*/ MOVT        R2, #0                      @ .LC56 [R_ARM_MOVT_ABS: .rodata.str1.4+0xa0c] 
    /*000021e0*/ BL          0x00000000000021E0          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_CancelJob_x21e4:
    /*000021e4*/ ADD         R0, R5, #4 
    /*000021e8*/ ADD         R1, SP, #28 
    /*000021ec*/ BL          0x00000000000021EC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000021f0*/ ADD         R0, R5, #16 
    /*000021f4*/ BL          0x00000000000021F4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000021f8*/ B           VGS_CancelJob_x20a0
    VGS_CancelJob_x21fc:
    /*000021fc*/ STR         R3, [SP, #4] 
    /*00002200*/ MOVW        R2, #0                      @ .LC57 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xa58] 
    /*00002204*/ MOVW        R3, #3884                   @ 0xf2c 
    /*00002208*/ MOVT        R2, #0                      @ .LC57 [R_ARM_MOVT_ABS: .rodata.str1.4+0xa58] 
    /*0000220c*/ STR         R3, [SP] 
    /*00002210*/ MOV         R1, #45                     @ 0x2d 
    /*00002214*/ LDR         R3, [PC, #152]              @ 0x00000000000022b4 
    /*00002218*/ MOV         R0, #3 
    /*0000221c*/ BL          0x000000000000221C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002220*/ B           VGS_CancelJob_x21e4
    VGS_CancelJob_x2224:
    /*00002224*/ STR         SL, [R4, #124]              @ 0x7c 
    /*00002228*/ MOVW        R3, #3914                   @ 0xf4a 
    /*0000222c*/ MOV         R1, #45                     @ 0x2d 
    /*00002230*/ STR         R3, [SP] 
    /*00002234*/ MOVW        R2, #0                      @ .LC59 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xaf8] 
    /*00002238*/ LDR         R3, [PC, #116]              @ 0x00000000000022b4 
    /*0000223c*/ MOVT        R2, #0                      @ .LC59 [R_ARM_MOVT_ABS: .rodata.str1.4+0xaf8] 
    /*00002240*/ MOV         R0, #3 
    /*00002244*/ BL          0x0000000000002244          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002248*/ ADD         R1, SP, #28 
    /*0000224c*/ ADD         R0, R5, #4 
    /*00002250*/ BL          0x0000000000002250          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00002254*/ ADD         R0, R5, #16 
    /*00002258*/ BL          0x0000000000002258          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000225c*/ MOVW        R0, #32777                  @ 0x8009 
    /*00002260*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00002264*/ B           VGS_CancelJob_x2088
    VGS_CancelJob_x2268:
    /*00002268*/ STR         R3, [SP, #8] 
    /*0000226c*/ MOV         R1, #45                     @ 0x2d 
    /*00002270*/ LDR         R0, [R4, #120]              @ 0x78 
    /*00002274*/ MOVW        R3, #3893                   @ 0xf35 
    /*00002278*/ MOVW        R2, #0                      @ .LC58 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xab4] 
    /*0000227c*/ STR         R3, [SP] 
    /*00002280*/ MOVT        R2, #0                      @ .LC58 [R_ARM_MOVT_ABS: .rodata.str1.4+0xab4] 
    /*00002284*/ LDR         R3, [PC, #40]               @ 0x00000000000022b4 
    /*00002288*/ STR         R0, [SP, #4] 
    /*0000228c*/ MOV         R0, #3 
    /*00002290*/ BL          0x0000000000002290          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002294*/ ADD         R1, SP, #28 
    /*00002298*/ LDR         R0, [PC, #24]               @ 0x00000000000022b8 
    /*0000229c*/ BL          0x000000000000229C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000022a0*/ LDR         R0, [PC, #20]               @ 0x00000000000022bc 
    /*000022a4*/ BL          0x00000000000022A4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000022a8*/ MOVW        R0, #32777                  @ 0x8009 
    /*000022ac*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000022b0*/ B           VGS_CancelJob_x2088
    /*000022b4*/ LDRDEQ      R0, [R0], -R4 
    /*000022b8*/ ANDEQ       R0, R0, R4 
    /*000022bc*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_CancelJob


FUNC_BEGIN VGS_CancelJobByModDev
    /*000022c0*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*000022c4*/ MOV         R9, R0 
    /*000022c8*/ SUB         R0, R0, #3 
    /*000022cc*/ SUB         SP, SP, #52                 @ 0x34 
    /*000022d0*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000022d4*/ CMP         R0, #42                     @ 0x2a 
    /*000022d8*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000022dc*/ MOV         R8, R2 
    /*000022e0*/ MOV         R2, #0 
    /*000022e4*/ STR         R2, [SP, #44]               @ 0x2c 
    /*000022e8*/ LDR         SL, [R5, #8] 
    /*000022ec*/ BLS         VGS_CancelJobByModDev_x2324
    VGS_CancelJobByModDev_x22f0:
    /*000022f0*/ MOVW        R3, #4040                   @ 0xfc8 
    /*000022f4*/ STR         R9, [SP, #4] 
    /*000022f8*/ STR         R3, [SP] 
    /*000022fc*/ MOVW        R2, #0                      @ .LC16 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1d4] 
    /*00002300*/ LDR         R3, [PC, #1148]             @ 0x0000000000002784 
    /*00002304*/ MOVT        R2, #0                      @ .LC16 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1d4] 
    /*00002308*/ MOV         R1, #45                     @ 0x2d 
    /*0000230c*/ MOV         R0, #3 
    /*00002310*/ BL          0x0000000000002310          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002314*/ MOVW        R0, #32771                  @ 0x8003 
    /*00002318*/ MOVT        R0, #41005                  @ 0xa02d 
    VGS_CancelJobByModDev_x231c:
    /*0000231c*/ ADD         SP, SP, #52                 @ 0x34 
    /*00002320*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_CancelJobByModDev_x2324:
    /*00002324*/ MOVW        R2, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*00002328*/ MOVT        R2, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*0000232c*/ ADD         R0, R2, R0 
    /*00002330*/ LDRB        R4, [R0, #84]               @ 0x54 
    /*00002334*/ CMP         R4, #12 
    /*00002338*/ BHI         VGS_CancelJobByModDev_x22f0
    /*0000233c*/ MOV         R7, R1 
    /*00002340*/ ADD         R1, R5, R4, LSL #2 
    /*00002344*/ LDR         R1, [R1, #20] 
    /*00002348*/ CMP         R1, R7 
    /*0000234c*/ BLS         VGS_CancelJobByModDev_x26e4
    /*00002350*/ ADD         R6, R4, #12 
    /*00002354*/ ADD         R1, R5, R6, LSL #2 
    /*00002358*/ LDR         R1, [R1, #24] 
    /*0000235c*/ CMP         R1, R8 
    /*00002360*/ BLS         VGS_CancelJobByModDev_x2718
    /*00002364*/ CMP         R3, #0 
    /*00002368*/ BEQ         VGS_CancelJobByModDev_x26a0
    VGS_CancelJobByModDev_x236c:
    /*0000236c*/ LDR         R3, [R5] 
    /*00002370*/ CMP         R3, #0 
    /*00002374*/ BEQ         VGS_CancelJobByModDev_x26b8
    /*00002378*/ LDR         R0, [PC, #1032]             @ 0x0000000000002788 
    /*0000237c*/ ADD         R6, R5, R6, LSL #2 
    /*00002380*/ BL          0x0000000000002380          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00002384*/ LDR         R0, [PC, #1024]             @ 0x000000000000278c 
    /*00002388*/ ADD         R1, SP, #44                 @ 0x2c 
    /*0000238c*/ ADD         R4, SL, R4, LSL #2 
    /*00002390*/ BL          0x0000000000002390          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002394*/ LDR         R3, [R6, #24] 
    /*00002398*/ LDR         R2, [R4, #244]              @ 0xf4 
    /*0000239c*/ MLA         R3, R3, R7, R8 
    /*000023a0*/ STR         R2, [SP, #32] 
    /*000023a4*/ STR         R3, [SP, #28] 
    /*000023a8*/ LDR         R3, [R2, R3, LSL #2] 
    /*000023ac*/ CMP         R3, #1 
    /*000023b0*/ BEQ         VGS_CancelJobByModDev_x2738
    /*000023b4*/ LDR         R1, [SP, #32] 
    /*000023b8*/ MOV         R3, #1 
    /*000023bc*/ LDR         R0, [SP, #28] 
    /*000023c0*/ MOV         R2, R8 
    /*000023c4*/ LDR         R6, [PC, #960]              @ 0x000000000000278c 
    /*000023c8*/ STR         R3, [R1, R0, LSL #2] 
    /*000023cc*/ MOV         R1, R7 
    /*000023d0*/ MOV         R0, R9 
    /*000023d4*/ BL          0x00000000000023D4          @ VGS_DrvCommSetCancelFlags [R_ARM_CALL: .text+0x8924] 
    /*000023d8*/ MOVW        R3, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x888] 
    /*000023dc*/ MOV         R4, R3 
    /*000023e0*/ ADD         R1, SP, #44                 @ 0x2c 
    /*000023e4*/ LDR         R0, [PC, #928]              @ 0x000000000000278c 
    /*000023e8*/ BL          0x00000000000023E8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000023ec*/ MOV         R3, R4 
    /*000023f0*/ MOVT        R3, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x888] 
    /*000023f4*/ STR         R3, [SP, #36]               @ 0x24 
    /*000023f8*/ B           VGS_CancelJobByModDev_x2420
    VGS_CancelJobByModDev_x23fc:
    /*000023fc*/ LDR         R2, [R4, #24] 
    /*00002400*/ CMP         R2, #0 
    /*00002404*/ BNE         VGS_CancelJobByModDev_x2598
    VGS_CancelJobByModDev_x2408:
    /*00002408*/ MOV         R1, R4 
    /*0000240c*/ LDR         R0, [R5, #8] 
    /*00002410*/ BL          0x0000000000002410          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    VGS_CancelJobByModDev_x2414:
    /*00002414*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00002418*/ MOV         R0, R6 
    /*0000241c*/ BL          0x000000000000241C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    VGS_CancelJobByModDev_x2420:
    /*00002420*/ MOV         R3, SL 
    /*00002424*/ MOV         R2, R8 
    /*00002428*/ MOV         R1, R7 
    /*0000242c*/ MOV         R0, R9 
    /*00002430*/ BL          0x0000000000002430          @ VGS_QueryBusyJobNum [R_ARM_CALL: .text+0x8688] 
    /*00002434*/ CMP         R0, #0 
    /*00002438*/ BEQ         VGS_CancelJobByModDev_x2614
    /*0000243c*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00002440*/ MOV         R0, R6 
    /*00002444*/ BL          0x0000000000002444          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002448*/ MOV         R3, SL 
    /*0000244c*/ MOV         R2, R8 
    /*00002450*/ MOV         R1, R7 
    /*00002454*/ MOV         R0, R9 
    /*00002458*/ BL          0x0000000000002458          @ VGS_QueryFirstJobFromBusyList [R_ARM_CALL: .text+0x84ac] 
    /*0000245c*/ SUBS        R4, R0, #0 
    /*00002460*/ BEQ         VGS_CancelJobByModDev_x2664
    VGS_CancelJobByModDev_x2464:
    /*00002464*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00002468*/ CMP         R3, #0 
    /*0000246c*/ BEQ         VGS_CancelJobByModDev_x249c
    /*00002470*/ LDR         R0, [R4, #120]              @ 0x78 
    /*00002474*/ BL          0x0000000000002474          @ VGS_DrvCommCancelJob [R_ARM_CALL: .text+0x8ab0] 
    /*00002478*/ CMP         R0, #0 
    /*0000247c*/ BNE         VGS_CancelJobByModDev_x25d0
    /*00002480*/ MOV         R3, SL 
    /*00002484*/ MOV         R2, R8 
    /*00002488*/ MOV         R1, R7 
    /*0000248c*/ MOV         R0, R9 
    /*00002490*/ BL          0x0000000000002490          @ VGS_GetFirstJobFromBusyList [R_ARM_CALL: .text+0x83c8] 
    /*00002494*/ SUBS        R4, R0, #0 
    /*00002498*/ BEQ         VGS_CancelJobByModDev_x2680
    VGS_CancelJobByModDev_x249c:
    /*0000249c*/ MOV         R2, #1 
    /*000024a0*/ MOV         R3, #6 
    /*000024a4*/ STR         R2, [R4, #124]              @ 0x7c 
    /*000024a8*/ ADD         R1, SP, #44                 @ 0x2c 
    /*000024ac*/ STR         R3, [R4, #20] 
    /*000024b0*/ MOV         R0, R6 
    /*000024b4*/ BL          0x00000000000024B4          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000024b8*/ LDR         R3, [R5, #1032]             @ 0x408 
    /*000024bc*/ MOV         R0, R4 
    /*000024c0*/ ADD         R3, R3, #1 
    /*000024c4*/ STR         R3, [R5, #1032]             @ 0x408 
    /*000024c8*/ BL          0x00000000000024C8          @ VGS_QueryTaskNumInJob [R_ARM_CALL: .text+0x7e0c] 
    /*000024cc*/ LDR         R3, [R5, #1044]             @ 0x414 
    /*000024d0*/ MOV         R1, #3 
    /*000024d4*/ ADD         R3, R3, R0 
    /*000024d8*/ MOV         R0, R4 
    /*000024dc*/ STR         R3, [R5, #1044]             @ 0x414 
    /*000024e0*/ BL          0x0000000000001590 
    /*000024e4*/ LDR         FP, [R4, #104]              @ 0x68 
    /*000024e8*/ CMP         FP, #0 
    /*000024ec*/ BEQ         VGS_CancelJobByModDev_x2508
    /*000024f0*/ ADD         R0, R4, #32 
    /*000024f4*/ MOV         R2, #3 
    /*000024f8*/ ADD         R3, R4, #48                 @ 0x30 
    /*000024fc*/ STR         R2, [R4, #96]               @ 0x60 
    /*00002500*/ LDM         R0, {R0, R1, R2} 
    /*00002504*/ BLX         FP 
    VGS_CancelJobByModDev_x2508:
    /*00002508*/ LDR         R0, [R5, #8] 
    /*0000250c*/ LDR         FP, [R4, #120]              @ 0x78 
    /*00002510*/ BL          0x0000000000002510          @ VGS_QueryFreeJobNum [R_ARM_CALL: .text+0x7ee4] 
    /*00002514*/ STR         R0, [SP, #24] 
    /*00002518*/ LDR         R0, [R5, #8] 
    /*0000251c*/ ADD         R0, R0, #304                @ 0x130 
    /*00002520*/ BL          0x0000000000002520          @ VGS_QueryFreeTaskNum [R_ARM_CALL: .text+0x7d58] 
    /*00002524*/ LDR         R3, [SP, #24] 
    /*00002528*/ MOV         R1, #45                     @ 0x2d 
    /*0000252c*/ STR         FP, [SP, #4] 
    /*00002530*/ STR         R4, [SP, #8] 
    /*00002534*/ MOVW        R2, #0                      @ .LC65 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xc40] 
    /*00002538*/ STR         R3, [SP, #12] 
    /*0000253c*/ MOVT        R2, #0                      @ .LC65 [R_ARM_MOVT_ABS: .rodata.str1.4+0xc40] 
    /*00002540*/ MOVW        R3, #4114                   @ 0x1012 
    /*00002544*/ STR         R3, [SP] 
    /*00002548*/ LDR         R3, [PC, #564]              @ 0x0000000000002784 
    /*0000254c*/ STR         R0, [SP, #16] 
    /*00002550*/ MOV         R0, #7 
    /*00002554*/ BL          0x0000000000002554          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002558*/ ADD         R1, SP, #44                 @ 0x2c 
    /*0000255c*/ MOV         R0, R6 
    /*00002560*/ BL          0x0000000000002560          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002564*/ LDR         R3, [R4, #132]              @ 0x84 
    /*00002568*/ MOV         R2, #0 
    /*0000256c*/ STR         R2, [R4, #124]              @ 0x7c 
    /*00002570*/ CMP         R3, R2 
    /*00002574*/ BNE         VGS_CancelJobByModDev_x2584
    /*00002578*/ LDR         R1, [R4, #20] 
    /*0000257c*/ CMP         R1, R2 
    /*00002580*/ BNE         VGS_CancelJobByModDev_x23fc
    VGS_CancelJobByModDev_x2584:
    /*00002584*/ MOV         R3, #0 
    /*00002588*/ ADD         R0, R4, #116                @ 0x74 
    /*0000258c*/ STR         R3, [R4, #132]              @ 0x84 
    /*00002590*/ BL          0x0000000000002590          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00002594*/ B           VGS_CancelJobByModDev_x2414
    VGS_CancelJobByModDev_x2598:
    /*00002598*/ STR         R3, [SP, #16] 
    /*0000259c*/ MOVW        R0, #4122                   @ 0x101a 
    /*000025a0*/ LDR         IP, [R4, #128]              @ 0x80 
    /*000025a4*/ MOVW        R2, #0                      @ .LC66 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xc98] 
    /*000025a8*/ STR         R3, [SP, #8] 
    /*000025ac*/ MOVT        R2, #0                      @ .LC66 [R_ARM_MOVT_ABS: .rodata.str1.4+0xc98] 
    /*000025b0*/ STR         R1, [SP, #4] 
    /*000025b4*/ MOV         R1, #45                     @ 0x2d 
    /*000025b8*/ STR         R0, [SP] 
    /*000025bc*/ MOV         R0, #3 
    /*000025c0*/ LDR         R3, [PC, #444]              @ 0x0000000000002784 
    /*000025c4*/ STR         IP, [SP, #12] 
    /*000025c8*/ BL          0x00000000000025C8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000025cc*/ B           VGS_CancelJobByModDev_x2408
    VGS_CancelJobByModDev_x25d0:
    /*000025d0*/ LDR         R1, [R4, #40]               @ 0x28 
    /*000025d4*/ MOVW        R0, #4089                   @ 0xff9 
    /*000025d8*/ MOVW        R2, #0                      @ .LC63 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xbec] 
    /*000025dc*/ LDR         R3, [PC, #416]              @ 0x0000000000002784 
    /*000025e0*/ MOVT        R2, #0                      @ .LC63 [R_ARM_MOVT_ABS: .rodata.str1.4+0xbec] 
    /*000025e4*/ STR         R1, [SP, #12] 
    /*000025e8*/ MOV         R1, #45                     @ 0x2d 
    /*000025ec*/ LDR         IP, [R4, #36]               @ 0x24 
    /*000025f0*/ STR         IP, [SP, #8] 
    /*000025f4*/ LDR         IP, [R4, #32] 
    /*000025f8*/ STR         R0, [SP] 
    /*000025fc*/ MOV         R0, #7 
    /*00002600*/ STR         IP, [SP, #4] 
    /*00002604*/ BL          0x0000000000002604          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002608*/ ADD         R1, SP, #44                 @ 0x2c 
    /*0000260c*/ LDR         R0, [PC, #376]              @ 0x000000000000278c 
    /*00002610*/ BL          0x0000000000002610          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    VGS_CancelJobByModDev_x2614:
    /*00002614*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00002618*/ LDR         R0, [PC, #364]              @ 0x000000000000278c 
    /*0000261c*/ BL          0x000000000000261C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002620*/ LDR         IP, [SP, #28] 
    /*00002624*/ LDR         R3, [SP, #32] 
    /*00002628*/ MOV         R4, #0 
    /*0000262c*/ MOV         R2, R8 
    /*00002630*/ MOV         R1, R7 
    /*00002634*/ MOV         R0, R9 
    /*00002638*/ STR         R4, [R3, IP, LSL #2] 
    /*0000263c*/ MOV         R3, R4 
    /*00002640*/ BL          0x0000000000002640          @ VGS_DrvCommSetCancelFlags [R_ARM_CALL: .text+0x8924] 
    /*00002644*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00002648*/ LDR         R0, [PC, #316]              @ 0x000000000000278c 
    /*0000264c*/ BL          0x000000000000264C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00002650*/ LDR         R0, [PC, #304]              @ 0x0000000000002788 
    /*00002654*/ BL          0x0000000000002654          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00002658*/ MOV         R0, R4 
    /*0000265c*/ ADD         SP, SP, #52                 @ 0x34 
    /*00002660*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_CancelJobByModDev_x2664:
    /*00002664*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00002668*/ LDR         R3, [SP, #36]               @ 0x24 
    /*0000266c*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00002670*/ MOV         R2, #4080                   @ 0xff0 
    /*00002674*/ LDR         R1, [PC, #264]              @ 0x0000000000002784 
    /*00002678*/ BL          0x0000000000002678          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000267c*/ B           VGS_CancelJobByModDev_x2464
    VGS_CancelJobByModDev_x2680:
    /*00002680*/ MOVW        R3, #0                      @ .LC64 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xc30] 
    /*00002684*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00002688*/ MOVT        R3, #0                      @ .LC64 [R_ARM_MOVT_ABS: .rodata.str1.4+0xc30] 
    /*0000268c*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00002690*/ MOV         R2, #4096                   @ 0x1000 
    /*00002694*/ LDR         R1, [PC, #232]              @ 0x0000000000002784 
    /*00002698*/ BL          0x0000000000002698          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000269c*/ B           VGS_CancelJobByModDev_x249c
    VGS_CancelJobByModDev_x26a0:
    /*000026a0*/ BL          0x0000000000000504 
    /*000026a4*/ CMP         R0, #0 
    /*000026a8*/ MOVWNE      R0, #32774                  @ 0x8006 
    /*000026ac*/ MOVTNE      R0, #41005                  @ 0xa02d 
    /*000026b0*/ BNE         VGS_CancelJobByModDev_x231c
    /*000026b4*/ B           VGS_CancelJobByModDev_x236c
    VGS_CancelJobByModDev_x26b8:
    /*000026b8*/ MOVW        R3, #4047                   @ 0xfcf 
    /*000026bc*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*000026c0*/ STR         R3, [SP] 
    /*000026c4*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*000026c8*/ LDR         R3, [PC, #180]              @ 0x0000000000002784 
    /*000026cc*/ MOV         R1, #45                     @ 0x2d 
    /*000026d0*/ MOV         R0, #3 
    /*000026d4*/ BL          0x00000000000026D4          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000026d8*/ MOVW        R0, #32784                  @ 0x8010 
    /*000026dc*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000026e0*/ B           VGS_CancelJobByModDev_x231c
    VGS_CancelJobByModDev_x26e4:
    /*000026e4*/ ADD         R3, R2, #484                @ 0x1e4 
    /*000026e8*/ MOVW        R2, #0                      @ .LC17 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x204] 
    /*000026ec*/ MOVT        R2, #0                      @ .LC17 [R_ARM_MOVT_ABS: .rodata.str1.4+0x204] 
    /*000026f0*/ MOVW        R1, #4041                   @ 0xfc9 
    /*000026f4*/ STR         R7, [SP, #8] 
    /*000026f8*/ STR         R9, [SP, #4] 
    /*000026fc*/ STR         R1, [SP] 
    VGS_CancelJobByModDev_x2700:
    /*00002700*/ MOV         R1, #45                     @ 0x2d 
    /*00002704*/ MOV         R0, #3 
    /*00002708*/ BL          0x0000000000002708          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000270c*/ MOVW        R0, #32771                  @ 0x8003 
    /*00002710*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00002714*/ B           VGS_CancelJobByModDev_x231c
    VGS_CancelJobByModDev_x2718:
    /*00002718*/ ADD         R3, R2, #484                @ 0x1e4 
    /*0000271c*/ MOVW        R1, #4042                   @ 0xfca 
    /*00002720*/ MOVW        R2, #0                      @ .LC18 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x244] 
    /*00002724*/ STR         R8, [SP, #8] 
    /*00002728*/ STR         R9, [SP, #4] 
    /*0000272c*/ MOVT        R2, #0                      @ .LC18 [R_ARM_MOVT_ABS: .rodata.str1.4+0x244] 
    /*00002730*/ STR         R1, [SP] 
    /*00002734*/ B           VGS_CancelJobByModDev_x2700
    VGS_CancelJobByModDev_x2738:
    /*00002738*/ MOVW        R3, #4060                   @ 0xfdc 
    /*0000273c*/ MOV         R1, #45                     @ 0x2d 
    /*00002740*/ STR         R3, [SP] 
    /*00002744*/ MOVW        R2, #0                      @ .LC62 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xba8] 
    /*00002748*/ LDR         R3, [PC, #52]               @ 0x0000000000002784 
    /*0000274c*/ MOVT        R2, #0                      @ .LC62 [R_ARM_MOVT_ABS: .rodata.str1.4+0xba8] 
    /*00002750*/ STR         R8, [SP, #12] 
    /*00002754*/ MOV         R0, #3 
    /*00002758*/ STR         R7, [SP, #8] 
    /*0000275c*/ STR         R9, [SP, #4] 
    /*00002760*/ BL          0x0000000000002760          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002764*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00002768*/ LDR         R0, [PC, #28]               @ 0x000000000000278c 
    /*0000276c*/ BL          0x000000000000276C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00002770*/ LDR         R0, [PC, #16]               @ 0x0000000000002788 
    /*00002774*/ BL          0x0000000000002774          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00002778*/ MOVW        R0, #32777                  @ 0x8009 
    /*0000277c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00002780*/ B           VGS_CancelJobByModDev_x231c
    /*00002784*/ ANDEQ       R0, R0, R4, ROR #3 
    /*00002788*/ ANDEQ       R0, R0, R0, LSL R0 
    /*0000278c*/ ANDEQ       R0, R0, R4 
FUNC_END VGS_CancelJobByModDev


FUNC_BEGIN VGS_InitJobProcInfo
    /*00002790*/ MOV         R2, #92                     @ 0x5c 
    /*00002794*/ MOV         R1, #0 
    VGS_InitJobProcInfo_x2798:
    /*00002798*/ B           VGS_InitJobProcInfo_x2798   @ osal_memset [R_ARM_JUMP24: +0x0] 
FUNC_END VGS_InitJobProcInfo


FUNC_BEGIN VGS_GetCmpMode
    /*0000279c*/ LDR         R3, [R1, #20] 
    /*000027a0*/ STR         R3, [R0, #68]               @ 0x44 
    /*000027a4*/ LDR         R3, [R1, #356]              @ 0x164 
    /*000027a8*/ STR         R3, [R0, #72]               @ 0x48 
    /*000027ac*/ BX          LR 
FUNC_END VGS_GetCmpMode


FUNC_BEGIN VGS_GetCmpModeStitch
    /*000027b0*/ LDR         R3, [R1, #20] 
    /*000027b4*/ STR         R3, [R0, #68]               @ 0x44 
    /*000027b8*/ LDR         R3, [R1, #1364]             @ 0x554 
    /*000027bc*/ STR         R3, [R0, #72]               @ 0x48 
    /*000027c0*/ BX          LR 
FUNC_END VGS_GetCmpModeStitch


FUNC_BEGIN VGS_AddJobProcArea
    /*000027c4*/ LDR         IP, [R0, #20] 
    /*000027c8*/ LDR         R3, [R0, #24] 
    /*000027cc*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*000027d0*/ ADD         R1, IP, R1 
    /*000027d4*/ LDR         LR, [R0, #12] 
    /*000027d8*/ ADD         R2, R3, R2 
    /*000027dc*/ STR         R1, [R0, #20] 
    /*000027e0*/ ADD         LR, LR, #1 
    /*000027e4*/ STR         R2, [R0, #24] 
    /*000027e8*/ STR         LR, [R0, #12] 
    /*000027ec*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END VGS_AddJobProcArea


FUNC_BEGIN VGS_AddQuadRangleCoverJobProcArea
    /*000027f0*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*000027f4*/ MOV         R4, R1 
    /*000027f8*/ MOV         R5, R0 
    /*000027fc*/ LDR         R3, [R1, #32] 
    /*00002800*/ LDR         R2, [R1, #24] 
    /*00002804*/ LDR         R0, [R4, #8] 
    /*00002808*/ LDR         R1, [R1, #16] 
    /*0000280c*/ BL          0x000000000000280C          @ VGS_GetMinCoordinate [R_ARM_CALL: .text+0xb80c] 
    /*00002810*/ LDR         R3, [R4, #36]               @ 0x24 
    /*00002814*/ LDR         R2, [R4, #28] 
    /*00002818*/ LDR         R1, [R4, #20] 
    /*0000281c*/ MOV         R8, R0 
    /*00002820*/ LDR         R0, [R4, #12] 
    /*00002824*/ BL          0x0000000000002824          @ VGS_GetMinCoordinate [R_ARM_CALL: .text+0xb80c] 
    /*00002828*/ LDR         R3, [R4, #32] 
    /*0000282c*/ LDR         R2, [R4, #24] 
    /*00002830*/ LDR         R1, [R4, #16] 
    /*00002834*/ MOV         R6, R0 
    /*00002838*/ LDR         R0, [R4, #8] 
    /*0000283c*/ BL          0x000000000000283C          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00002840*/ LDR         R3, [R4, #36]               @ 0x24 
    /*00002844*/ LDR         R2, [R4, #28] 
    /*00002848*/ LDR         R1, [R4, #20] 
    /*0000284c*/ MOV         R7, R0 
    /*00002850*/ LDR         R0, [R4, #12] 
    /*00002854*/ BL          0x0000000000002854          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00002858*/ SUB         R7, R7, R8 
    /*0000285c*/ LDR         R1, [R5, #12] 
    /*00002860*/ LDR         R2, [R5, #20] 
    /*00002864*/ LDR         R3, [R5, #24] 
    /*00002868*/ ADD         R1, R1, #1 
    /*0000286c*/ STR         R1, [R5, #12] 
    /*00002870*/ SUB         R0, R0, R6 
    /*00002874*/ MUL         R0, R0, R7 
    /*00002878*/ ADD         R2, R2, R0 
    /*0000287c*/ ADD         R0, R3, R0 
    /*00002880*/ STR         R2, [R5, #20] 
    /*00002884*/ STR         R0, [R5, #24] 
    /*00002888*/ POP         {R4, R5, R6, R7, R8, PC} 
FUNC_END VGS_AddQuadRangleCoverJobProcArea


FUNC_BEGIN VGS_GetHwEndTime
    /*0000288c*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00002890*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00002894*/ PUSH        {R4, LR} 
    /*00002898*/ LDR         R3, [R3, #8] 
    /*0000289c*/ LDR         R3, [R3, #4] 
    /*000028a0*/ LDR         R4, [R3, R0, LSL #2] 
    /*000028a4*/ ADD         R0, R4, #188                @ 0xbc 
    /*000028a8*/ BL          0x00000000000028A8          @ osal_gettimeofday [R_ARM_CALL: +0x0] 
    /*000028ac*/ LDR         R3, [R4, #188]              @ 0xbc 
    /*000028b0*/ LDR         IP, [R4, #180]              @ 0xb4 
    /*000028b4*/ MOVW        R1, #16960                  @ 0x4240 
    /*000028b8*/ LDR         R2, [R4, #192]              @ 0xc0 
    /*000028bc*/ MOVT        R1, #15 
    /*000028c0*/ LDR         R0, [R4, #184]              @ 0xb8 
    /*000028c4*/ SUB         R3, R3, IP 
    /*000028c8*/ SUB         R2, R2, R0 
    /*000028cc*/ MLA         R3, R1, R3, R2 
    /*000028d0*/ STR         R3, [R4, #200]              @ 0xc8 
    /*000028d4*/ POP         {R4, PC} 
FUNC_END VGS_GetHwEndTime


FUNC_BEGIN VGS_GetHwStartTime
    /*000028d8*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000028dc*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000028e0*/ LDR         R3, [R3, #8] 
    /*000028e4*/ LDR         R3, [R3, #4] 
    /*000028e8*/ LDR         R0, [R3, R0, LSL #2] 
    /*000028ec*/ ADD         R0, R0, #180                @ 0xb4 
    VGS_GetHwStartTime_x28f0:
    /*000028f0*/ B           VGS_GetHwStartTime_x28f0    @ osal_gettimeofday [R_ARM_JUMP24: +0x0] 
FUNC_END VGS_GetHwStartTime


FUNC_BEGIN VGS_RlsTmpBuff
    /*000028f4*/ LDR         R3, [R0, #1760]             @ 0x6e0 
    /*000028f8*/ CMN         R3, #1 
    /*000028fc*/ BXEQ        LR 
    /*00002900*/ PUSH        {R4, R5, R6, R7, LR} 
    /*00002904*/ MOV         R4, R0 
    /*00002908*/ SUB         SP, SP, #12 
    /*0000290c*/ MOV         R0, #1 
    /*00002910*/ BL          0x0000000000002910          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00002914*/ LDR         R3, [R0, #40]               @ 0x28 
    /*00002918*/ LDR         R0, [R4, #1760]             @ 0x6e0 
    /*0000291c*/ BLX         R3 
    /*00002920*/ MOV         R5, R0 
    /*00002924*/ MOV         R0, #1 
    /*00002928*/ BL          0x0000000000002928          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000292c*/ LDR         R3, [R0, #52]               @ 0x34 
    /*00002930*/ LDR         R0, [R4, #1760]             @ 0x6e0 
    /*00002934*/ BLX         R3 
    /*00002938*/ MOV         R6, R0 
    /*0000293c*/ MOV         R0, #1 
    /*00002940*/ MOV         R7, R1 
    /*00002944*/ BL          0x0000000000002944          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00002948*/ MOV         R3, R7 
    /*0000294c*/ MOV         R2, R6 
    /*00002950*/ MOV         R1, #2 
    /*00002954*/ STR         R1, [SP] 
    /*00002958*/ LDR         R1, [R0, #64]               @ 0x40 
    /*0000295c*/ MOV         R0, R5 
    /*00002960*/ BLX         R1 
    /*00002964*/ MVN         R3, #0 
    /*00002968*/ STR         R3, [R4, #1760]             @ 0x6e0 
    /*0000296c*/ ADD         SP, SP, #12 
    /*00002970*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END VGS_RlsTmpBuff


FUNC_BEGIN VGS_DrvCallBack
    /*00002974*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00002978*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*0000297c*/ SUBS        FP, R0, #0 
    /*00002980*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00002984*/ SUB         SP, SP, #20 
    /*00002988*/ LDR         R6, [R4, #8] 
    /*0000298c*/ BLT         VGS_DrvCallBack_x29a4
    /*00002990*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00002994*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00002998*/ LDR         R3, [R3] 
    /*0000299c*/ CMP         FP, R3 
    /*000029a0*/ BCC         VGS_DrvCallBack_x2af0
    VGS_DrvCallBack_x29a4:
    /*000029a4*/ MOV         R0, FP 
    /*000029a8*/ BL          0x0000000000000854 
    /*000029ac*/ CMP         R0, #0 
    /*000029b0*/ BNE         VGS_DrvCallBack_x2af8
    /*000029b4*/ LDR         R3, [R4, #8] 
    VGS_DrvCallBack_x29b8:
    /*000029b8*/ LDR         R3, [R3, #4] 
    /*000029bc*/ LDR         R3, [R3, FP, LSL #2] 
    /*000029c0*/ MOV         R2, R3 
    /*000029c4*/ STR         R3, [SP, #12] 
    /*000029c8*/ LDR         R3, [R3, #20] 
    /*000029cc*/ LDR         R9, [R2, #32] 
    /*000029d0*/ CMP         R3, #2 
    /*000029d4*/ LDR         R7, [R2, #36]               @ 0x24 
    /*000029d8*/ LDR         R8, [R2, #40]               @ 0x28 
    /*000029dc*/ BEQ         VGS_DrvCallBack_x29fc
    /*000029e0*/ MOVW        R3, #0                      @ .LC67 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xcc0] 
    /*000029e4*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*000029e8*/ MOVT        R3, #0                      @ .LC67 [R_ARM_MOVT_ABS: .rodata.str1.4+0xcc0] 
    /*000029ec*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*000029f0*/ MOVW        R2, #1123                   @ 0x463 
    /*000029f4*/ LDR         R1, [PC, #264]              @ 0x0000000000002b04 
    /*000029f8*/ BL          0x00000000000029F8          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_DrvCallBack_x29fc:
    /*000029fc*/ SUB         R2, R9, #3 
    /*00002a00*/ CMP         R2, #42                     @ 0x2a 
    /*00002a04*/ MOVWLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*00002a08*/ MOVTLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*00002a0c*/ ADDLS       R3, R3, R2 
    /*00002a10*/ MOVHI       R3, #13 
    /*00002a14*/ LDRBLS      R3, [R3, #84]               @ 0x54 
    /*00002a18*/ ADD         R4, R4, R3, LSL #2 
    /*00002a1c*/ ADD         R2, R6, R3, LSL #2 
    /*00002a20*/ LDR         R3, [R4, #72]               @ 0x48 
    /*00002a24*/ LDR         SL, [R2, #28] 
    /*00002a28*/ MLA         R3, R3, R7, R8 
    /*00002a2c*/ LDR         R4, [SL, R3, LSL #3] 
    /*00002a30*/ ADD         SL, SL, R3, LSL #3 
    /*00002a34*/ CMP         SL, R4 
    /*00002a38*/ LDR         R5, [R4] 
    /*00002a3c*/ BEQ         VGS_DrvCallBack_x2aac
    VGS_DrvCallBack_x2a40:
    /*00002a40*/ LDR         IP, [R4, #100]              @ 0x64 
    /*00002a44*/ MOV         R3, R6 
    /*00002a48*/ MOV         R2, R8 
    /*00002a4c*/ MOV         R1, R7 
    /*00002a50*/ CMP         IP, #0 
    /*00002a54*/ MOV         R0, R9 
    /*00002a58*/ BEQ         VGS_DrvCallBack_x2a68
    /*00002a5c*/ LDR         IP, [R4, #120]              @ 0x78 
    /*00002a60*/ CMP         FP, IP 
    /*00002a64*/ BNE         VGS_DrvCallBack_x2aac
    VGS_DrvCallBack_x2a68:
    /*00002a68*/ STR         R4, [SP] 
    /*00002a6c*/ BL          0x0000000000002A6C          @ VGS_GetJobFromBusyList [R_ARM_CALL: .text+0x8534] 
    /*00002a70*/ STR         R4, [SP] 
    /*00002a74*/ MOV         R3, R6 
    /*00002a78*/ MOV         R2, R8 
    /*00002a7c*/ MOV         R1, R7 
    /*00002a80*/ MOV         R0, R9 
    /*00002a84*/ BL          0x0000000000002A84          @ VGS_PutJobToProcList [R_ARM_CALL: .text+0x8798] 
    /*00002a88*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00002a8c*/ CMP         R3, #0 
    /*00002a90*/ MOVNE       R3, #5 
    /*00002a94*/ MOVEQ       R3, #6 
    /*00002a98*/ CMP         R5, SL 
    /*00002a9c*/ STR         R3, [R4, #20] 
    /*00002aa0*/ MOV         R4, R5 
    /*00002aa4*/ LDR         R5, [R5] 
    /*00002aa8*/ BNE         VGS_DrvCallBack_x2a40
    VGS_DrvCallBack_x2aac:
    /*00002aac*/ LDR         R3, [SP, #12] 
    /*00002ab0*/ LDR         R1, [R3, #20] 
    /*00002ab4*/ CMP         R1, #5 
    /*00002ab8*/ BEQ         VGS_DrvCallBack_x2ae4
    /*00002abc*/ MOVW        R0, #0                      @ .LC68 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xce8] 
    /*00002ac0*/ MOVT        R0, #0                      @ .LC68 [R_ARM_MOVT_ABS: .rodata.str1.4+0xce8] 
    /*00002ac4*/ BL          0x0000000000002AC4          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00002ac8*/ MOVW        R3, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x888] 
    /*00002acc*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00002ad0*/ MOVT        R3, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x888] 
    /*00002ad4*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00002ad8*/ MOVW        R2, #1149                   @ 0x47d 
    /*00002adc*/ LDR         R1, [PC, #32]               @ 0x0000000000002b04 
    /*00002ae0*/ BL          0x0000000000002AE0          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_DrvCallBack_x2ae4:
    /*00002ae4*/ MOV         R0, #0 
    VGS_DrvCallBack_x2ae8:
    /*00002ae8*/ ADD         SP, SP, #20 
    /*00002aec*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCallBack_x2af0:
    /*00002af0*/ MOV         R3, R6 
    /*00002af4*/ B           VGS_DrvCallBack_x29b8
    VGS_DrvCallBack_x2af8:
    /*00002af8*/ MOVW        R0, #32771                  @ 0x8003 
    /*00002afc*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00002b00*/ B           VGS_DrvCallBack_x2ae8
    /*00002b04*/ STRDEQ      R0, [R0], -IP 
FUNC_END VGS_DrvCallBack


FUNC_BEGIN VGS_GetFreeStitchTask
    /*00002b08*/ PUSH        {R4, R5, R6, LR} 
    /*00002b0c*/ SUB         SP, SP, #16 
    /*00002b10*/ ADD         R5, SP, #16 
    /*00002b14*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00002b18*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00002b1c*/ MOV         R3, #0 
    /*00002b20*/ ADD         R0, R4, #4 
    /*00002b24*/ STR         R3, [R5, #-4]! 
    /*00002b28*/ MOV         R1, R5 
    /*00002b2c*/ BL          0x0000000000002B2C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002b30*/ LDR         R0, [R4, #8] 
    /*00002b34*/ ADD         R0, R0, #304                @ 0x130 
    /*00002b38*/ BL          0x0000000000002B38          @ VGS_GetTaskFromFreeList [R_ARM_CALL: .text+0x7d60] 
    /*00002b3c*/ MOV         R1, R5 
    /*00002b40*/ MOV         R6, R0 
    /*00002b44*/ ADD         R0, R4, #4 
    /*00002b48*/ BL          0x0000000000002B48          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00002b4c*/ CMP         R6, #0 
    /*00002b50*/ ADDNE       R0, R6, #8 
    /*00002b54*/ BEQ         VGS_GetFreeStitchTask_x2b60
    VGS_GetFreeStitchTask_x2b58:
    /*00002b58*/ ADD         SP, SP, #16 
    /*00002b5c*/ POP         {R4, R5, R6, PC} 
    VGS_GetFreeStitchTask_x2b60:
    /*00002b60*/ MOVW        R3, #1245                   @ 0x4dd 
    /*00002b64*/ MOVW        R2, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x0] 
    /*00002b68*/ STR         R3, [SP] 
    /*00002b6c*/ MOVT        R2, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x0] 
    /*00002b70*/ LDR         R3, [PC, #16]               @ 0x0000000000002b88 
    /*00002b74*/ MOV         R1, #45                     @ 0x2d 
    /*00002b78*/ MOV         R0, #3 
    /*00002b7c*/ BL          0x0000000000002B7C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002b80*/ MOV         R0, R6 
    /*00002b84*/ B           VGS_GetFreeStitchTask_x2b58
    /*00002b88*/ ANDEQ       R0, R0, IP, LSL #4 
FUNC_END VGS_GetFreeStitchTask


FUNC_BEGIN VGS_PutFreeStitchTask
    /*00002b8c*/ PUSH        {R4, R5, LR} 
    /*00002b90*/ SUBS        R5, R0, #0 
    /*00002b94*/ SUB         SP, SP, #12 
    /*00002b98*/ MOV         R3, #0 
    /*00002b9c*/ STR         R3, [SP, #4] 
    /*00002ba0*/ BEQ         VGS_PutFreeStitchTask_x2bd4
    /*00002ba4*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00002ba8*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00002bac*/ ADD         R0, R4, #4 
    /*00002bb0*/ ADD         R1, SP, #4 
    /*00002bb4*/ BL          0x0000000000002BB4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002bb8*/ LDR         R0, [R4, #8] 
    /*00002bbc*/ SUB         R1, R5, #8 
    /*00002bc0*/ ADD         R0, R0, #304                @ 0x130 
    /*00002bc4*/ BL          0x0000000000002BC4          @ VGS_PutTaskToFreeList [R_ARM_CALL: .text+0x7de8] 
    /*00002bc8*/ ADD         R1, SP, #4 
    /*00002bcc*/ ADD         R0, R4, #4 
    /*00002bd0*/ BL          0x0000000000002BD0          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    VGS_PutFreeStitchTask_x2bd4:
    /*00002bd4*/ ADD         SP, SP, #12 
    /*00002bd8*/ POP         {R4, R5, PC} 
FUNC_END VGS_PutFreeStitchTask


FUNC_BEGIN VGS_AddOSDTaskEx
    /*00002bdc*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00002be0*/ SUB         SP, SP, #28 
    /*00002be4*/ MOV         R3, #0 
    /*00002be8*/ MOV         R6, R0 
    /*00002bec*/ MOV         R5, R1 
    /*00002bf0*/ MOV         R8, R2 
    /*00002bf4*/ STR         R3, [SP, #20] 
    /*00002bf8*/ BL          0x0000000000002BF8          @ VGS_HAL_IsSupportOSDMode [R_ARM_CALL: .text+0xffd4] 
    /*00002bfc*/ CMP         R0, #1 
    /*00002c00*/ BNE         VGS_AddOSDTaskEx_x2f70
    /*00002c04*/ CMP         R6, #0 
    /*00002c08*/ BLT         VGS_AddOSDTaskEx_x2e3c
    /*00002c0c*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00002c10*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00002c14*/ LDR         R3, [R3] 
    /*00002c18*/ CMP         R3, R6 
    /*00002c1c*/ BLS         VGS_AddOSDTaskEx_x2e3c
    VGS_AddOSDTaskEx_x2c20:
    /*00002c20*/ CMP         R8, #0 
    /*00002c24*/ BEQ         VGS_AddOSDTaskEx_x2f40
    VGS_AddOSDTaskEx_x2c28:
    /*00002c28*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00002c2c*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00002c30*/ LDR         R3, [R4] 
    /*00002c34*/ CMP         R3, #1 
    /*00002c38*/ BNE         VGS_AddOSDTaskEx_x2ed0
    /*00002c3c*/ ADD         R0, R4, #16 
    /*00002c40*/ BL          0x0000000000002C40          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00002c44*/ LDR         R3, [R4, #8] 
    /*00002c48*/ LDR         R3, [R3, #4] 
    /*00002c4c*/ LDR         R4, [R3, R6, LSL #2] 
    /*00002c50*/ LDR         R0, [R4, #20] 
    /*00002c54*/ CMP         R0, #1 
    /*00002c58*/ BEQ         VGS_AddOSDTaskEx_x2c68
    /*00002c5c*/ BL          0x0000000000000894 
    /*00002c60*/ CMP         R0, #0 
    /*00002c64*/ BNE         VGS_AddOSDTaskEx_x2e4c
    VGS_AddOSDTaskEx_x2c68:
    /*00002c68*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00002c6c*/ CMP         R3, #0 
    /*00002c70*/ BEQ         VGS_AddOSDTaskEx_x2fec
    /*00002c74*/ LDR         R2, [R4, #32] 
    /*00002c78*/ LDR         R3, [R5, #724]              @ 0x2d4 
    /*00002c7c*/ CMP         R2, R3 
    /*00002c80*/ BNE         VGS_AddOSDTaskEx_x2f9c
    /*00002c84*/ LDR         R2, [R4, #36]               @ 0x24 
    /*00002c88*/ LDR         R3, [R5, #728]              @ 0x2d8 
    /*00002c8c*/ CMP         R2, R3 
    /*00002c90*/ BNE         VGS_AddOSDTaskEx_x2fb8
    /*00002c94*/ LDR         R2, [R4, #40]               @ 0x28 
    /*00002c98*/ LDR         R3, [R5, #732]              @ 0x2dc 
    /*00002c9c*/ CMP         R2, R3 
    /*00002ca0*/ BNE         VGS_AddOSDTaskEx_x2efc
    /*00002ca4*/ MOV         R0, R5 
    /*00002ca8*/ BL          0x0000000000002CA8          @ VGS_DRV_CheckInImage [R_ARM_CALL: .text+0xed58] 
    /*00002cac*/ SUBS        R7, R0, #0 
    /*00002cb0*/ BNE         VGS_AddOSDTaskEx_x2e58
    /*00002cb4*/ ADD         R9, R5, #336                @ 0x150 
    /*00002cb8*/ MOV         R0, R9 
    /*00002cbc*/ BL          0x0000000000002CBC          @ VGS_DRV_CheckOutImage [R_ARM_CALL: .text+0xee14] 
    /*00002cc0*/ SUBS        R7, R0, #0 
    /*00002cc4*/ BNE         VGS_AddOSDTaskEx_x2eb8
    /*00002cc8*/ MOV         R1, R9 
    /*00002ccc*/ MOV         R0, R5 
    /*00002cd0*/ BL          0x0000000000002CD0          @ VGS_DRV_CheckInOutImage [R_ARM_CALL: .text+0xeebc] 
    /*00002cd4*/ SUBS        R7, R0, #0 
    /*00002cd8*/ BNE         VGS_AddOSDTaskEx_x2ea0
    /*00002cdc*/ MOV         R2, R7 
    /*00002ce0*/ MOV         R1, R9 
    /*00002ce4*/ MOV         R0, R5 
    /*00002ce8*/ BL          0x0000000000002CE8          @ VGS_DRV_CheckYuvDynamicRange [R_ARM_CALL: .text+0xf8d0] 
    /*00002cec*/ SUBS        R7, R0, #0 
    /*00002cf0*/ BNE         VGS_AddOSDTaskEx_x2f58
    /*00002cf4*/ MOV         R0, R9 
    /*00002cf8*/ BL          0x0000000000002CF8          @ VGS_DRV_CheckOsdDynamicRange [R_ARM_CALL: .text+0xf048] 
    /*00002cfc*/ SUBS        R7, R0, #0 
    /*00002d00*/ BNE         VGS_AddOSDTaskEx_x2fd4
    /*00002d04*/ LDR         R3, [R5, #20] 
    /*00002d08*/ LDR         R2, [R5, #356]              @ 0x164 
    /*00002d0c*/ CMP         R3, R2 
    /*00002d10*/ BNE         VGS_AddOSDTaskEx_x3064
    /*00002d14*/ MOV         R0, R8 
    /*00002d18*/ BL          0x0000000000002D18          @ VGS_DRV_CheckOsd [R_ARM_CALL: .text+0xf050] 
    /*00002d1c*/ CMP         R0, #0 
    /*00002d20*/ BNE         VGS_AddOSDTaskEx_x30c4
    /*00002d24*/ ADD         R0, R8, #32 
    /*00002d28*/ BL          0x0000000000002D28          @ VGS_DRV_CheckDstRect [R_ARM_CALL: .text+0xfabc] 
    /*00002d2c*/ SUBS        R7, R0, #0 
    /*00002d30*/ BNE         VGS_AddOSDTaskEx_x2e8c
    /*00002d34*/ SUB         R6, R5, #8 
    /*00002d38*/ MOV         R1, R8 
    /*00002d3c*/ MOV         R2, #80                     @ 0x50 
    /*00002d40*/ ADD         R0, R6, #1776               @ 0x6f0 
    /*00002d44*/ BL          0x0000000000002D44          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00002d48*/ ADD         R1, R6, #1808               @ 0x710 
    /*00002d4c*/ MOV         R0, R5 
    /*00002d50*/ BL          0x0000000000002D50          @ VGS_DRV_IsRectOut [R_ARM_CALL: .text+0xe974] 
    /*00002d54*/ CMP         R0, #0 
    /*00002d58*/ STRNE       R7, [R5, #1768]             @ 0x6e8 
    /*00002d5c*/ BNE         VGS_AddOSDTaskEx_x2da4
    /*00002d60*/ LDR         R3, [R5, #1768]             @ 0x6e8 
    /*00002d64*/ CMP         R3, #1 
    /*00002d68*/ BNE         VGS_AddOSDTaskEx_x2da4
    /*00002d6c*/ LDR         R1, [R5, #1800]             @ 0x708 
    /*00002d70*/ LDR         R3, [R5, #1808]             @ 0x710 
    /*00002d74*/ LDR         R2, [R5] 
    /*00002d78*/ ADD         R3, R1, R3 
    /*00002d7c*/ CMP         R3, R2 
    /*00002d80*/ LDR         R3, [R5, #1812]             @ 0x714 
    /*00002d84*/ SUBHI       R2, R2, R1 
    /*00002d88*/ LDR         R1, [R5, #1804]             @ 0x70c 
    /*00002d8c*/ STRHI       R2, [R5, #1808]             @ 0x710 
    /*00002d90*/ LDR         R2, [R5, #4] 
    /*00002d94*/ ADD         R3, R1, R3 
    /*00002d98*/ CMP         R3, R2 
    /*00002d9c*/ SUBHI       R2, R2, R1 
    /*00002da0*/ STRHI       R2, [R5, #1812]             @ 0x714 
    VGS_AddOSDTaskEx_x2da4:
    /*00002da4*/ MOV         R3, #1 
    /*00002da8*/ LDR         R0, [PC, #840]              @ 0x00000000000030f8 
    /*00002dac*/ ADD         R1, SP, #20 
    /*00002db0*/ STR         R3, [R5, #1756]             @ 0x6dc 
    /*00002db4*/ BL          0x0000000000002DB4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00002db8*/ LDR         R8, [R4, #20] 
    /*00002dbc*/ CMP         R8, #1 
    /*00002dc0*/ BNE         VGS_AddOSDTaskEx_x3080
    /*00002dc4*/ MOV         R0, R5 
    /*00002dc8*/ BL          0x0000000000002DC8          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*00002dcc*/ SUBS        R7, R0, #0 
    /*00002dd0*/ BNE         VGS_AddOSDTaskEx_x3028
    /*00002dd4*/ MOV         R0, R6 
    /*00002dd8*/ MOV         R1, R4 
    /*00002ddc*/ BL          0x0000000000002DDC          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*00002de0*/ ADD         R1, SP, #20 
    /*00002de4*/ LDR         R0, [PC, #780]              @ 0x00000000000030f8 
    /*00002de8*/ BL          0x0000000000002DE8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00002dec*/ LDR         R3, [R5, #20] 
    /*00002df0*/ LDR         R1, [R4, #156]              @ 0x9c 
    /*00002df4*/ LDR         R2, [R4, #160]              @ 0xa0 
    /*00002df8*/ STR         R3, [R4, #204]              @ 0xcc 
    /*00002dfc*/ LDR         R3, [R5, #356]              @ 0x164 
    /*00002e00*/ STRB        R8, [R4, #215]              @ 0xd7 
    /*00002e04*/ LDR         R0, [R4, #148]              @ 0x94 
    /*00002e08*/ STR         R3, [R4, #208]              @ 0xd0 
    /*00002e0c*/ LDR         IP, [R5, #1808]             @ 0x710 
    /*00002e10*/ ADD         R0, R0, #1 
    /*00002e14*/ LDR         R3, [R5, #1812]             @ 0x714 
    /*00002e18*/ STR         R0, [R4, #148]              @ 0x94 
    /*00002e1c*/ LDR         R0, [PC, #728]              @ 0x00000000000030fc 
    /*00002e20*/ MUL         R3, R3, IP 
    /*00002e24*/ ADD         R1, R1, R3 
    /*00002e28*/ ADD         R3, R2, R3 
    /*00002e2c*/ STR         R1, [R4, #156]              @ 0x9c 
    /*00002e30*/ STR         R3, [R4, #160]              @ 0xa0 
    /*00002e34*/ BL          0x0000000000002E34          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00002e38*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x2e3c:
    /*00002e3c*/ MOV         R0, R6 
    /*00002e40*/ BL          0x0000000000000854 
    /*00002e44*/ CMP         R0, #0 
    /*00002e48*/ BEQ         VGS_AddOSDTaskEx_x2c20
    VGS_AddOSDTaskEx_x2e4c:
    /*00002e4c*/ MOVW        R7, #32771                  @ 0x8003 
    /*00002e50*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00002e54*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x2e58:
    /*00002e58*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00002e5c*/ MOVW        R2, #0                      @ .LC74 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe50] 
    /*00002e60*/ LDR         R3, [PC, #664]              @ 0x0000000000003100 
    /*00002e64*/ MOVT        R2, #0                      @ .LC74 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe50] 
    /*00002e68*/ MOVW        LR, #1427                   @ 0x593 
    VGS_AddOSDTaskEx_x2e6c:
    /*00002e6c*/ STR         R0, [SP, #12] 
    /*00002e70*/ MOV         R1, #45                     @ 0x2d 
    /*00002e74*/ MOV         R0, #3 
    /*00002e78*/ LDR         IP, [R4, #32] 
    /*00002e7c*/ STR         R6, [SP, #4] 
    VGS_AddOSDTaskEx_x2e80:
    /*00002e80*/ STR         LR, [SP] 
    /*00002e84*/ STR         IP, [SP, #8] 
    /*00002e88*/ BL          0x0000000000002E88          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_AddOSDTaskEx_x2e8c:
    /*00002e8c*/ LDR         R0, [PC, #616]              @ 0x00000000000030fc 
    /*00002e90*/ BL          0x0000000000002E90          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddOSDTaskEx_x2e94:
    /*00002e94*/ MOV         R0, R7 
    /*00002e98*/ ADD         SP, SP, #28 
    /*00002e9c*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddOSDTaskEx_x2ea0:
    /*00002ea0*/ MOVW        R2, #0                      @ .LC76 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xee8] 
    /*00002ea4*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00002ea8*/ MOVW        LR, #1443                   @ 0x5a3 
    /*00002eac*/ LDR         R3, [PC, #588]              @ 0x0000000000003100 
    /*00002eb0*/ MOVT        R2, #0                      @ .LC76 [R_ARM_MOVT_ABS: .rodata.str1.4+0xee8] 
    /*00002eb4*/ B           VGS_AddOSDTaskEx_x2e6c
    VGS_AddOSDTaskEx_x2eb8:
    /*00002eb8*/ MOVW        R2, #0                      @ .LC75 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe9c] 
    /*00002ebc*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00002ec0*/ MOVW        LR, #1435                   @ 0x59b 
    /*00002ec4*/ LDR         R3, [PC, #564]              @ 0x0000000000003100 
    /*00002ec8*/ MOVT        R2, #0                      @ .LC75 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe9c] 
    /*00002ecc*/ B           VGS_AddOSDTaskEx_x2e6c
    VGS_AddOSDTaskEx_x2ed0:
    /*00002ed0*/ MOVW        R3, #1398                   @ 0x576 
    /*00002ed4*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00002ed8*/ STR         R3, [SP] 
    /*00002edc*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00002ee0*/ LDR         R3, [PC, #536]              @ 0x0000000000003100 
    /*00002ee4*/ MOV         R1, #45                     @ 0x2d 
    /*00002ee8*/ MOV         R0, #3 
    /*00002eec*/ MOVW        R7, #32784                  @ 0x8010 
    /*00002ef0*/ BL          0x0000000000002EF0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002ef4*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00002ef8*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x2efc:
    /*00002efc*/ STR         R2, [SP, #8] 
    /*00002f00*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*00002f04*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*00002f08*/ MOVW        R1, #1418                   @ 0x58a 
    /*00002f0c*/ STR         R3, [SP, #4] 
    /*00002f10*/ STR         R1, [SP] 
    VGS_AddOSDTaskEx_x2f14:
    /*00002f14*/ LDR         R3, [PC, #484]              @ 0x0000000000003100 
    /*00002f18*/ MOV         R1, #45                     @ 0x2d 
    /*00002f1c*/ MOV         R0, #3 
    /*00002f20*/ MOVW        R7, #32771                  @ 0x8003 
    /*00002f24*/ BL          0x0000000000002F24          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002f28*/ LDR         R0, [PC, #460]              @ 0x00000000000030fc 
    /*00002f2c*/ BL          0x0000000000002F2C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00002f30*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00002f34*/ MOV         R0, R7 
    /*00002f38*/ ADD         SP, SP, #28 
    /*00002f3c*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddOSDTaskEx_x2f40:
    /*00002f40*/ BL          0x0000000000000504 
    /*00002f44*/ CMP         R0, #0 
    /*00002f48*/ MOVWNE      R7, #32774                  @ 0x8006 
    /*00002f4c*/ MOVTNE      R7, #41005                  @ 0xa02d 
    /*00002f50*/ BNE         VGS_AddOSDTaskEx_x2e94
    /*00002f54*/ B           VGS_AddOSDTaskEx_x2c28
    VGS_AddOSDTaskEx_x2f58:
    /*00002f58*/ MOVW        R2, #0                      @ .LC77 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xf30] 
    /*00002f5c*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00002f60*/ MOVW        LR, #1451                   @ 0x5ab 
    /*00002f64*/ LDR         R3, [PC, #404]              @ 0x0000000000003100 
    /*00002f68*/ MOVT        R2, #0                      @ .LC77 [R_ARM_MOVT_ABS: .rodata.str1.4+0xf30] 
    /*00002f6c*/ B           VGS_AddOSDTaskEx_x2e6c
    VGS_AddOSDTaskEx_x2f70:
    /*00002f70*/ MOVW        R3, #1389                   @ 0x56d 
    /*00002f74*/ MOVW        R2, #0                      @ .LC69 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd04] 
    /*00002f78*/ STR         R3, [SP] 
    /*00002f7c*/ MOVT        R2, #0                      @ .LC69 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd04] 
    /*00002f80*/ LDR         R3, [PC, #376]              @ 0x0000000000003100 
    /*00002f84*/ MOV         R1, #45                     @ 0x2d 
    /*00002f88*/ MOV         R0, #3 
    /*00002f8c*/ MOVW        R7, #32776                  @ 0x8008 
    /*00002f90*/ BL          0x0000000000002F90          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00002f94*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00002f98*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x2f9c:
    /*00002f9c*/ STR         R2, [SP, #8] 
    /*00002fa0*/ MOVW        R1, #1416                   @ 0x588 
    /*00002fa4*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00002fa8*/ STR         R3, [SP, #4] 
    /*00002fac*/ STR         R1, [SP] 
    /*00002fb0*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*00002fb4*/ B           VGS_AddOSDTaskEx_x2f14
    VGS_AddOSDTaskEx_x2fb8:
    /*00002fb8*/ STR         R2, [SP, #8] 
    /*00002fbc*/ MOVW        R1, #1417                   @ 0x589 
    /*00002fc0*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*00002fc4*/ STR         R3, [SP, #4] 
    /*00002fc8*/ STR         R1, [SP] 
    /*00002fcc*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*00002fd0*/ B           VGS_AddOSDTaskEx_x2f14
    VGS_AddOSDTaskEx_x2fd4:
    /*00002fd4*/ MOVW        R2, #0                      @ .LC77 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xf30] 
    /*00002fd8*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00002fdc*/ MOVW        LR, #1459                   @ 0x5b3 
    /*00002fe0*/ LDR         R3, [PC, #280]              @ 0x0000000000003100 
    /*00002fe4*/ MOVT        R2, #0                      @ .LC77 [R_ARM_MOVT_ABS: .rodata.str1.4+0xf30] 
    /*00002fe8*/ B           VGS_AddOSDTaskEx_x2e6c
    VGS_AddOSDTaskEx_x2fec:
    /*00002fec*/ LDR         R1, [PC, #272]              @ 0x0000000000003104 
    /*00002ff0*/ MOVW        R3, #1410                   @ 0x582 
    /*00002ff4*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*00002ff8*/ STR         R3, [SP] 
    /*00002ffc*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*00003000*/ LDR         R3, [PC, #248]              @ 0x0000000000003100 
    /*00003004*/ STR         R1, [SP, #4] 
    /*00003008*/ MOV         R0, #3 
    /*0000300c*/ MOV         R1, #45                     @ 0x2d 
    /*00003010*/ MOVW        R7, #32771                  @ 0x8003 
    /*00003014*/ BL          0x0000000000003014          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003018*/ LDR         R0, [PC, #220]              @ 0x00000000000030fc 
    /*0000301c*/ BL          0x000000000000301C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003020*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00003024*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x3028:
    /*00003028*/ MOV         R1, #45                     @ 0x2d 
    /*0000302c*/ STR         R7, [SP, #4] 
    /*00003030*/ MOVW        R3, #1527                   @ 0x5f7 
    /*00003034*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*00003038*/ STR         R3, [SP] 
    /*0000303c*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*00003040*/ LDR         R3, [PC, #184]              @ 0x0000000000003100 
    /*00003044*/ MOV         R0, #3 
    /*00003048*/ BL          0x0000000000003048          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000304c*/ LDR         R0, [PC, #168]              @ 0x00000000000030fc 
    /*00003050*/ BL          0x0000000000003050          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003054*/ ADD         R1, SP, #20 
    /*00003058*/ LDR         R0, [PC, #152]              @ 0x00000000000030f8 
    /*0000305c*/ BL          0x000000000000305C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003060*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x3064:
    /*00003064*/ STR         R2, [SP, #8] 
    /*00003068*/ MOVW        R1, #1469                   @ 0x5bd 
    /*0000306c*/ MOVW        R2, #0                      @ .LC78 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xf84] 
    /*00003070*/ STR         R3, [SP, #4] 
    /*00003074*/ STR         R1, [SP] 
    /*00003078*/ MOVT        R2, #0                      @ .LC78 [R_ARM_MOVT_ABS: .rodata.str1.4+0xf84] 
    /*0000307c*/ B           VGS_AddOSDTaskEx_x2f14
    VGS_AddOSDTaskEx_x3080:
    /*00003080*/ MOV         R1, #45                     @ 0x2d 
    /*00003084*/ MOVW        R3, #1517                   @ 0x5ed 
    /*00003088*/ STR         R8, [SP, #4] 
    /*0000308c*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00003090*/ STR         R3, [SP] 
    /*00003094*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00003098*/ LDR         R3, [PC, #96]               @ 0x0000000000003100 
    /*0000309c*/ MOV         R0, #4 
    /*000030a0*/ BL          0x00000000000030A0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000030a4*/ LDR         R0, [PC, #80]               @ 0x00000000000030fc 
    /*000030a8*/ BL          0x00000000000030A8          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000030ac*/ ADD         R1, SP, #20 
    /*000030b0*/ LDR         R0, [PC, #64]               @ 0x00000000000030f8 
    /*000030b4*/ MOVW        R7, #32777                  @ 0x8009 
    /*000030b8*/ BL          0x00000000000030B8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000030bc*/ MOVT        R7, #41005                  @ 0xa02d 
    /*000030c0*/ B           VGS_AddOSDTaskEx_x2e94
    VGS_AddOSDTaskEx_x30c4:
    /*000030c4*/ LDR         R0, [R4, #36]               @ 0x24 
    /*000030c8*/ MOVW        R2, #0                      @ .LC79 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xfe8] 
    /*000030cc*/ MOVW        R7, #32771                  @ 0x8003 
    /*000030d0*/ MOVW        LR, #1478                   @ 0x5c6 
    /*000030d4*/ LDR         R3, [PC, #36]               @ 0x0000000000003100 
    /*000030d8*/ MOVT        R2, #0                      @ .LC79 [R_ARM_MOVT_ABS: .rodata.str1.4+0xfe8] 
    /*000030dc*/ STR         R0, [SP, #12] 
    /*000030e0*/ MOV         R1, #45                     @ 0x2d 
    /*000030e4*/ LDR         IP, [R4, #32] 
    /*000030e8*/ MOV         R0, #3 
    /*000030ec*/ STR         R6, [SP, #4] 
    /*000030f0*/ MOVT        R7, #41005                  @ 0xa02d 
    /*000030f4*/ B           VGS_AddOSDTaskEx_x2e80
    /*000030f8*/ ANDEQ       R0, R0, R4 
    /*000030fc*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00003100*/ ANDEQ       R0, R0, R4, LSR #4 
    /*00003104*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddOSDTaskEx


FUNC_BEGIN VGS_AddOSDTask
    /*00003108*/ PUSH        {R4, R5, LR} 
    /*0000310c*/ SUBS        R4, R1, #0 
    /*00003110*/ SUB         SP, SP, #12 
    /*00003114*/ MOV         R5, R0 
    /*00003118*/ BEQ         VGS_AddOSDTask_x3144
    VGS_AddOSDTask_x311c:
    /*0000311c*/ MOV         R0, R5 
    /*00003120*/ MOV         R1, R4 
    /*00003124*/ BL          0x0000000000003124          @ VGS_AddOSDTaskEx [R_ARM_CALL: .text+0x2bdc] 
    /*00003128*/ SUBS        R5, R0, #0 
    /*0000312c*/ BEQ         VGS_AddOSDTask_x3138
    /*00003130*/ MOV         R0, R4 
    /*00003134*/ BL          0x0000000000003134          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddOSDTask_x3138:
    /*00003138*/ MOV         R0, R5 
    /*0000313c*/ ADD         SP, SP, #12 
    /*00003140*/ POP         {R4, R5, PC} 
    VGS_AddOSDTask_x3144:
    /*00003144*/ STR         R2, [SP, #4] 
    /*00003148*/ BL          0x0000000000000504 
    /*0000314c*/ LDR         R2, [SP, #4] 
    /*00003150*/ CMP         R0, #0 
    /*00003154*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*00003158*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*0000315c*/ BNE         VGS_AddOSDTask_x3138
    /*00003160*/ B           VGS_AddOSDTask_x311c
FUNC_END VGS_AddOSDTask


FUNC_BEGIN VGS_AddRotationTaskEx
    /*00003164*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00003168*/ SUB         SP, SP, #52                 @ 0x34 
    /*0000316c*/ MOV         R3, #0 
    /*00003170*/ MOV         R8, R0 
    /*00003174*/ MOV         R6, R1 
    /*00003178*/ MOV         SL, R2 
    /*0000317c*/ STR         R3, [SP, #44]               @ 0x2c 
    /*00003180*/ BL          0x0000000000003180          @ VGS_HAL_IsSupportRotation [R_ARM_CALL: .text+0xffdc] 
    /*00003184*/ CMP         R0, #1 
    /*00003188*/ BNE         VGS_AddRotationTaskEx_x34e4
    /*0000318c*/ CMP         R8, #0 
    /*00003190*/ BLT         VGS_AddRotationTaskEx_x3424
    /*00003194*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00003198*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*0000319c*/ LDR         R3, [R3] 
    /*000031a0*/ CMP         R3, R8 
    /*000031a4*/ BLS         VGS_AddRotationTaskEx_x3424
    VGS_AddRotationTaskEx_x31a8:
    /*000031a8*/ CMP         SL, #3 
    /*000031ac*/ BHI         VGS_AddRotationTaskEx_x36f4
    /*000031b0*/ MOVW        R7, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000031b4*/ MOVT        R7, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000031b8*/ LDR         R3, [R7] 
    /*000031bc*/ CMP         R3, #1 
    /*000031c0*/ BNE         VGS_AddRotationTaskEx_x34b8
    /*000031c4*/ ADD         R0, R7, #16 
    /*000031c8*/ BL          0x00000000000031C8          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*000031cc*/ LDR         R3, [R7, #8] 
    /*000031d0*/ LDR         R3, [R3, #4] 
    /*000031d4*/ LDR         R5, [R3, R8, LSL #2] 
    /*000031d8*/ LDR         R0, [R5, #20] 
    /*000031dc*/ CMP         R0, #1 
    /*000031e0*/ BEQ         VGS_AddRotationTaskEx_x31f0
    /*000031e4*/ BL          0x0000000000000894 
    /*000031e8*/ CMP         R0, #0 
    /*000031ec*/ BNE         VGS_AddRotationTaskEx_x3434
    VGS_AddRotationTaskEx_x31f0:
    /*000031f0*/ LDR         R2, [R5, #32] 
    /*000031f4*/ LDR         R3, [R6, #724]              @ 0x2d4 
    /*000031f8*/ CMP         R2, R3 
    /*000031fc*/ BNE         VGS_AddRotationTaskEx_x3510
    /*00003200*/ LDR         R2, [R5, #36]               @ 0x24 
    /*00003204*/ LDR         R3, [R6, #728]              @ 0x2d8 
    /*00003208*/ CMP         R2, R3 
    /*0000320c*/ BNE         VGS_AddRotationTaskEx_x354c
    /*00003210*/ LDR         R2, [R5, #40]               @ 0x28 
    /*00003214*/ LDR         R3, [R6, #732]              @ 0x2dc 
    /*00003218*/ CMP         R2, R3 
    /*0000321c*/ BNE         VGS_AddRotationTaskEx_x3568
    /*00003220*/ LDR         R3, [R5, #100]              @ 0x64 
    /*00003224*/ CMP         R3, #0 
    /*00003228*/ BEQ         VGS_AddRotationTaskEx_x3584
    /*0000322c*/ MOV         R0, R6 
    /*00003230*/ BL          0x0000000000003230          @ VGS_DRV_CheckInImage [R_ARM_CALL: .text+0xed58] 
    /*00003234*/ SUBS        R9, R0, #0 
    /*00003238*/ BNE         VGS_AddRotationTaskEx_x3440
    /*0000323c*/ ADD         R4, R6, #336                @ 0x150 
    /*00003240*/ MOV         R0, R4 
    /*00003244*/ BL          0x0000000000003244          @ VGS_DRV_CheckOutImage [R_ARM_CALL: .text+0xee14] 
    /*00003248*/ SUBS        R9, R0, #0 
    /*0000324c*/ BNE         VGS_AddRotationTaskEx_x34a0
    /*00003250*/ MOV         R2, R9 
    /*00003254*/ MOV         R1, R4 
    /*00003258*/ MOV         R0, R6 
    /*0000325c*/ BL          0x000000000000325C          @ VGS_DRV_CheckYuvDynamicRange [R_ARM_CALL: .text+0xf8d0] 
    /*00003260*/ SUBS        R9, R0, #0 
    /*00003264*/ BNE         VGS_AddRotationTaskEx_x3488
    /*00003268*/ LDRD        R0, [R6, #120]              @ 0x78 
    /*0000326c*/ LDRD        R2, [R4, #120]              @ 0x78 
    /*00003270*/ CMP         R1, R3 
    /*00003274*/ CMPEQ       R0, R2 
    /*00003278*/ BEQ         VGS_AddRotationTaskEx_x37e0
    /*0000327c*/ LDRD        R0, [R6, #128]              @ 0x80 
    /*00003280*/ LDRD        R2, [R4, #128]              @ 0x80 
    /*00003284*/ CMP         R1, R3 
    /*00003288*/ CMPEQ       R0, R2 
    /*0000328c*/ BEQ         VGS_AddRotationTaskEx_x37e0
    /*00003290*/ MOV         R1, R4 
    /*00003294*/ MOV         R2, SL 
    /*00003298*/ MOV         R0, R6 
    /*0000329c*/ BL          0x000000000000329C          @ VGS_DRV_CheckRotationInfo [R_ARM_CALL: .text+0xe9a4] 
    /*000032a0*/ SUBS        R9, R0, #0 
    /*000032a4*/ BNE         VGS_AddRotationTaskEx_x3410
    /*000032a8*/ MOV         R3, #1 
    /*000032ac*/ MOV         R4, #0 
    /*000032b0*/ SUB         R2, R6, #8 
    /*000032b4*/ STR         R4, [SP, #20] 
    /*000032b8*/ STR         R4, [SP, #32] 
    /*000032bc*/ MOV         FP, R3 
    /*000032c0*/ LDR         R8, [PC, #1356]             @ 0x0000000000003814 
    /*000032c4*/ STR         R2, [SP, #36]               @ 0x24 
    /*000032c8*/ STR         SL, [SP, #24] 
    /*000032cc*/ STR         R7, [SP, #16] 
    /*000032d0*/ B           VGS_AddRotationTaskEx_x32dc
    VGS_AddRotationTaskEx_x32d4:
    /*000032d4*/ ADD         R4, R4, #1 
    /*000032d8*/ ADD         FP, FP, #1 
    VGS_AddRotationTaskEx_x32dc:
    /*000032dc*/ CMP         R4, #0 
    /*000032e0*/ LDREQ       R3, [SP, #36]               @ 0x24 
    /*000032e4*/ STREQ       R3, [SP, #32] 
    /*000032e8*/ MOVEQ       R7, R3 
    /*000032ec*/ BEQ         VGS_AddRotationTaskEx_x3338
    /*000032f0*/ ADD         R1, SP, #44                 @ 0x2c 
    /*000032f4*/ MOV         R0, R8 
    /*000032f8*/ BL          0x00000000000032F8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000032fc*/ LDR         R3, [SP, #16] 
    /*00003300*/ LDR         R0, [R3, #8] 
    /*00003304*/ ADD         R0, R0, #304                @ 0x130 
    /*00003308*/ BL          0x0000000000003308          @ VGS_GetTaskFromFreeList [R_ARM_CALL: .text+0x7d60] 
    /*0000330c*/ SUBS        R7, R0, #0 
    /*00003310*/ BEQ         VGS_AddRotationTaskEx_x35c0
    /*00003314*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00003318*/ MOV         R0, R8 
    /*0000331c*/ BL          0x000000000000331C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003320*/ MOV         R2, #744                    @ 0x2e8 
    /*00003324*/ MOV         R1, R6 
    /*00003328*/ ADD         R0, R7, #8 
    /*0000332c*/ BL          0x000000000000332C          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00003330*/ LDR         R3, [SP, #20] 
    /*00003334*/ STR         R3, [R7, #728]              @ 0x2d8 
    VGS_AddRotationTaskEx_x3338:
    /*00003338*/ LDR         R3, [SP, #24] 
    /*0000333c*/ MOV         R2, #6 
    /*00003340*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00003344*/ STR         R2, [R7, #1764]             @ 0x6e4 
    /*00003348*/ BIC         SL, R3, #2 
    /*0000334c*/ MOV         R0, R8 
    /*00003350*/ CMP         SL, #1 
    /*00003354*/ STR         R3, [R7, #1780]             @ 0x6f4 
    /*00003358*/ STREQ       R4, [R7, #1776]             @ 0x6f0 
    /*0000335c*/ BL          0x000000000000335C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00003360*/ LDR         R9, [R5, #20] 
    /*00003364*/ CMP         R9, #1 
    /*00003368*/ BNE         VGS_AddRotationTaskEx_x364c
    /*0000336c*/ ADD         R0, R7, #8 
    /*00003370*/ BL          0x0000000000003370          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*00003374*/ SUBS        R3, R0, #0 
    /*00003378*/ STR         R3, [SP, #28] 
    /*0000337c*/ BNE         VGS_AddRotationTaskEx_x36a4
    /*00003380*/ MOV         R1, R5 
    /*00003384*/ MOV         R0, R7 
    /*00003388*/ BL          0x0000000000003388          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*0000338c*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00003390*/ MOV         R0, R8 
    /*00003394*/ BL          0x0000000000003394          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003398*/ LDR         R2, [R7, #28] 
    /*0000339c*/ LDR         IP, [R5, #156]              @ 0x9c 
    /*000033a0*/ LDR         R3, [R5, #160]              @ 0xa0 
    /*000033a4*/ STR         R2, [R5, #204]              @ 0xcc 
    /*000033a8*/ LDR         R2, [R7, #364]              @ 0x16c 
    /*000033ac*/ STRB        R9, [R5, #221]              @ 0xdd 
    /*000033b0*/ STR         R2, [R5, #208]              @ 0xd0 
    /*000033b4*/ LDR         R0, [R6, #340]              @ 0x154 
    /*000033b8*/ LDM         R6, {R1, LR} 
    /*000033bc*/ LDR         R2, [R6, #336]              @ 0x150 
    /*000033c0*/ MLA         R1, LR, R1, IP 
    /*000033c4*/ MLA         R2, R0, R2, R3 
    /*000033c8*/ LDR         R0, [R5, #148]              @ 0x94 
    /*000033cc*/ ADD         R0, R0, #1 
    /*000033d0*/ STR         R0, [R5, #148]              @ 0x94 
    /*000033d4*/ STR         R1, [R5, #156]              @ 0x9c 
    /*000033d8*/ STR         R2, [R5, #160]              @ 0xa0 
    /*000033dc*/ LDR         R2, [R6, #348]              @ 0x15c 
    /*000033e0*/ CMP         R2, #39                     @ 0x27 
    /*000033e4*/ BEQ         VGS_AddRotationTaskEx_x340c
    /*000033e8*/ CMP         SL, #0 
    /*000033ec*/ BEQ         VGS_AddRotationTaskEx_x340c
    /*000033f0*/ CMP         R4, #0 
    /*000033f4*/ LDREQ       R3, [R7, #728]              @ 0x2d8 
    /*000033f8*/ STREQ       R4, [R7, #728]              @ 0x2d8 
    /*000033fc*/ STREQ       R3, [SP, #20] 
    /*00003400*/ BEQ         VGS_AddRotationTaskEx_x32d4
    /*00003404*/ CMP         FP, #1 
    /*00003408*/ BLS         VGS_AddRotationTaskEx_x32d4
    VGS_AddRotationTaskEx_x340c:
    /*0000340c*/ LDR         R9, [SP, #28] 
    VGS_AddRotationTaskEx_x3410:
    /*00003410*/ LDR         R0, [PC, #1024]             @ 0x0000000000003818 
    /*00003414*/ BL          0x0000000000003414          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003418*/ MOV         R0, R9 
    /*0000341c*/ ADD         SP, SP, #52                 @ 0x34 
    /*00003420*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_AddRotationTaskEx_x3424:
    /*00003424*/ MOV         R0, R8 
    /*00003428*/ BL          0x0000000000000854 
    /*0000342c*/ CMP         R0, #0 
    /*00003430*/ BEQ         VGS_AddRotationTaskEx_x31a8
    VGS_AddRotationTaskEx_x3434:
    /*00003434*/ MOVW        R9, #32771                  @ 0x8003 
    /*00003438*/ MOVT        R9, #41005                  @ 0xa02d 
    /*0000343c*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x3440:
    /*00003440*/ LDR         R0, [R5, #36]               @ 0x24 
    /*00003444*/ MOVW        R2, #0                      @ .LC74 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe50] 
    /*00003448*/ LDR         R3, [PC, #972]              @ 0x000000000000381c 
    /*0000344c*/ MOVT        R2, #0                      @ .LC74 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe50] 
    /*00003450*/ MOVW        LR, #1636                   @ 0x664 
    VGS_AddRotationTaskEx_x3454:
    /*00003454*/ STR         R0, [SP, #12] 
    /*00003458*/ MOV         R1, #45                     @ 0x2d 
    /*0000345c*/ LDR         IP, [R5, #32] 
    /*00003460*/ MOV         R0, #3 
    /*00003464*/ STR         R8, [SP, #4] 
    /*00003468*/ STR         LR, [SP] 
    /*0000346c*/ STR         IP, [SP, #8] 
    /*00003470*/ BL          0x0000000000003470          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003474*/ LDR         R0, [PC, #924]              @ 0x0000000000003818 
    /*00003478*/ BL          0x0000000000003478          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddRotationTaskEx_x347c:
    /*0000347c*/ MOV         R0, R9 
    /*00003480*/ ADD         SP, SP, #52                 @ 0x34 
    /*00003484*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_AddRotationTaskEx_x3488:
    /*00003488*/ MOVW        R2, #0                      @ .LC77 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xf30] 
    /*0000348c*/ LDR         R0, [R5, #36]               @ 0x24 
    /*00003490*/ MOVW        LR, #1652                   @ 0x674 
    /*00003494*/ LDR         R3, [PC, #896]              @ 0x000000000000381c 
    /*00003498*/ MOVT        R2, #0                      @ .LC77 [R_ARM_MOVT_ABS: .rodata.str1.4+0xf30] 
    /*0000349c*/ B           VGS_AddRotationTaskEx_x3454
    VGS_AddRotationTaskEx_x34a0:
    /*000034a0*/ MOVW        R2, #0                      @ .LC75 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe9c] 
    /*000034a4*/ LDR         R0, [R5, #36]               @ 0x24 
    /*000034a8*/ MOVW        LR, #1644                   @ 0x66c 
    /*000034ac*/ LDR         R3, [PC, #872]              @ 0x000000000000381c 
    /*000034b0*/ MOVT        R2, #0                      @ .LC75 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe9c] 
    /*000034b4*/ B           VGS_AddRotationTaskEx_x3454
    VGS_AddRotationTaskEx_x34b8:
    /*000034b8*/ MOVW        R3, #1607                   @ 0x647 
    /*000034bc*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*000034c0*/ STR         R3, [SP] 
    /*000034c4*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*000034c8*/ LDR         R3, [PC, #844]              @ 0x000000000000381c 
    /*000034cc*/ MOV         R1, #45                     @ 0x2d 
    /*000034d0*/ MOV         R0, #3 
    /*000034d4*/ MOVW        R9, #32784                  @ 0x8010 
    /*000034d8*/ BL          0x00000000000034D8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000034dc*/ MOVT        R9, #41005                  @ 0xa02d 
    /*000034e0*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x34e4:
    /*000034e4*/ MOVW        R3, #1598                   @ 0x63e 
    /*000034e8*/ MOVW        R2, #0                      @ .LC81 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1060] 
    /*000034ec*/ STR         R3, [SP] 
    /*000034f0*/ MOVT        R2, #0                      @ .LC81 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1060] 
    /*000034f4*/ LDR         R3, [PC, #800]              @ 0x000000000000381c 
    /*000034f8*/ MOV         R1, #45                     @ 0x2d 
    /*000034fc*/ MOV         R0, #3 
    /*00003500*/ MOVW        R9, #32776                  @ 0x8008 
    /*00003504*/ BL          0x0000000000003504          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003508*/ MOVT        R9, #41005                  @ 0xa02d 
    /*0000350c*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x3510:
    /*00003510*/ STR         R2, [SP, #8] 
    /*00003514*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00003518*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*0000351c*/ MOVW        R1, #1617                   @ 0x651 
    /*00003520*/ STR         R3, [SP, #4] 
    /*00003524*/ STR         R1, [SP] 
    VGS_AddRotationTaskEx_x3528:
    /*00003528*/ LDR         R3, [PC, #748]              @ 0x000000000000381c 
    /*0000352c*/ MOV         R1, #45                     @ 0x2d 
    /*00003530*/ MOV         R0, #3 
    /*00003534*/ MOVW        R9, #32771                  @ 0x8003 
    /*00003538*/ BL          0x0000000000003538          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000353c*/ LDR         R0, [PC, #724]              @ 0x0000000000003818 
    /*00003540*/ BL          0x0000000000003540          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003544*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00003548*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x354c:
    /*0000354c*/ STR         R2, [SP, #8] 
    /*00003550*/ MOVW        R1, #1618                   @ 0x652 
    /*00003554*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*00003558*/ STR         R3, [SP, #4] 
    /*0000355c*/ STR         R1, [SP] 
    /*00003560*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*00003564*/ B           VGS_AddRotationTaskEx_x3528
    VGS_AddRotationTaskEx_x3568:
    /*00003568*/ STR         R2, [SP, #8] 
    /*0000356c*/ MOVW        R1, #1619                   @ 0x653 
    /*00003570*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*00003574*/ STR         R3, [SP, #4] 
    /*00003578*/ STR         R1, [SP] 
    /*0000357c*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*00003580*/ B           VGS_AddRotationTaskEx_x3528
    VGS_AddRotationTaskEx_x3584:
    /*00003584*/ LDR         R1, [PC, #660]              @ 0x0000000000003820 
    /*00003588*/ MOVW        R3, #1624                   @ 0x658 
    /*0000358c*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*00003590*/ STR         R3, [SP] 
    /*00003594*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*00003598*/ LDR         R3, [PC, #636]              @ 0x000000000000381c 
    /*0000359c*/ STR         R1, [SP, #4] 
    /*000035a0*/ MOV         R0, #3 
    /*000035a4*/ MOV         R1, #45                     @ 0x2d 
    /*000035a8*/ MOVW        R9, #32771                  @ 0x8003 
    /*000035ac*/ BL          0x00000000000035AC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000035b0*/ LDR         R0, [PC, #608]              @ 0x0000000000003818 
    /*000035b4*/ BL          0x00000000000035B4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000035b8*/ MOVT        R9, #41005                  @ 0xa02d 
    /*000035bc*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x35c0:
    /*000035c0*/ LDR         R4, [SP, #32] 
    /*000035c4*/ CMP         R4, #0 
    /*000035c8*/ BEQ         VGS_AddRotationTaskEx_x360c
    /*000035cc*/ MOV         R0, R4 
    /*000035d0*/ BL          0x00000000000035D0          @ VGS_VbSubInImg [R_ARM_CALL: .text+0x126c] 
    /*000035d4*/ MOV         R0, R4 
    /*000035d8*/ BL          0x00000000000035D8          @ VGS_VbSubOutImg [R_ARM_CALL: .text+0x1418] 
    /*000035dc*/ LDR         R1, [R4, #4] 
    /*000035e0*/ LDR         R0, [R4] 
    /*000035e4*/ MOV         R2, #256                    @ 0x100 
    /*000035e8*/ MOV         R3, #512                    @ 0x200 
    /*000035ec*/ MOVT        R2, #16 
    /*000035f0*/ MOVT        R3, #32 
    /*000035f4*/ STR         R1, [R0, #4] 
    /*000035f8*/ STR         R0, [R1] 
    /*000035fc*/ STM         R4, {R2, R3} 
    /*00003600*/ LDR         R3, [R5, #24] 
    /*00003604*/ SUB         R3, R3, #1 
    /*00003608*/ STR         R3, [R5, #24] 
    VGS_AddRotationTaskEx_x360c:
    /*0000360c*/ MOV         R1, #45                     @ 0x2d 
    /*00003610*/ MOVW        R3, #1698                   @ 0x6a2 
    /*00003614*/ MOVW        R2, #0                      @ .LC84 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1118] 
    /*00003618*/ STR         R3, [SP] 
    /*0000361c*/ MOVT        R2, #0                      @ .LC84 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1118] 
    /*00003620*/ LDR         R3, [PC, #500]              @ 0x000000000000381c 
    /*00003624*/ MOV         R0, #3 
    /*00003628*/ MOVW        R9, #32782                  @ 0x800e 
    /*0000362c*/ BL          0x000000000000362C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003630*/ LDR         R0, [PC, #480]              @ 0x0000000000003818 
    /*00003634*/ BL          0x0000000000003634          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003638*/ ADD         R1, SP, #44                 @ 0x2c 
    /*0000363c*/ LDR         R0, [PC, #464]              @ 0x0000000000003814 
    /*00003640*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00003644*/ BL          0x0000000000003644          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003648*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x364c:
    /*0000364c*/ CMP         R4, #1 
    /*00003650*/ MOV         FP, R7 
    /*00003654*/ MOV         R3, R9 
    /*00003658*/ LDR         R7, [SP, #16] 
    /*0000365c*/ BEQ         VGS_AddRotationTaskEx_x371c
    VGS_AddRotationTaskEx_x3660:
    /*00003660*/ MOV         R1, #45                     @ 0x2d 
    /*00003664*/ STR         R3, [SP, #4] 
    /*00003668*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*0000366c*/ MOVW        R3, #1736                   @ 0x6c8 
    /*00003670*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00003674*/ STR         R3, [SP] 
    /*00003678*/ MOV         R0, #4 
    /*0000367c*/ LDR         R3, [PC, #408]              @ 0x000000000000381c 
    /*00003680*/ BL          0x0000000000003680          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003684*/ LDR         R0, [PC, #396]              @ 0x0000000000003818 
    /*00003688*/ BL          0x0000000000003688          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000368c*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00003690*/ LDR         R0, [PC, #380]              @ 0x0000000000003814 
    /*00003694*/ MOVW        R9, #32777                  @ 0x8009 
    /*00003698*/ BL          0x0000000000003698          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000369c*/ MOVT        R9, #41005                  @ 0xa02d 
    /*000036a0*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x36a4:
    /*000036a4*/ CMP         R4, #1 
    /*000036a8*/ MOV         FP, R7 
    /*000036ac*/ MOV         R9, R3 
    /*000036b0*/ LDR         R7, [SP, #16] 
    /*000036b4*/ BEQ         VGS_AddRotationTaskEx_x3780
    VGS_AddRotationTaskEx_x36b8:
    /*000036b8*/ MOV         R1, #45                     @ 0x2d 
    /*000036bc*/ STR         R9, [SP, #4] 
    /*000036c0*/ MOVW        R3, #1757                   @ 0x6dd 
    /*000036c4*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*000036c8*/ STR         R3, [SP] 
    /*000036cc*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*000036d0*/ LDR         R3, [PC, #324]              @ 0x000000000000381c 
    /*000036d4*/ MOV         R0, #3 
    /*000036d8*/ BL          0x00000000000036D8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000036dc*/ LDR         R0, [PC, #308]              @ 0x0000000000003818 
    /*000036e0*/ BL          0x00000000000036E0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000036e4*/ ADD         R1, SP, #44                 @ 0x2c 
    /*000036e8*/ LDR         R0, [PC, #292]              @ 0x0000000000003814 
    /*000036ec*/ BL          0x00000000000036EC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000036f0*/ B           VGS_AddRotationTaskEx_x347c
    VGS_AddRotationTaskEx_x36f4:
    /*000036f4*/ MOVW        R3, #1604                   @ 0x644 
    /*000036f8*/ STR         SL, [SP, #4] 
    /*000036fc*/ STR         R3, [SP] 
    /*00003700*/ MOVW        R2, #0                      @ .LC82 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1094] 
    /*00003704*/ LDR         R3, [PC, #272]              @ 0x000000000000381c 
    /*00003708*/ MOVT        R2, #0                      @ .LC82 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1094] 
    /*0000370c*/ MOV         R1, #45                     @ 0x2d 
    /*00003710*/ MOV         R0, #3 
    /*00003714*/ BL          0x0000000000003714          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003718*/ B           VGS_AddRotationTaskEx_x3434
    VGS_AddRotationTaskEx_x371c:
    /*0000371c*/ LDR         R4, [SP, #32] 
    /*00003720*/ CMP         R4, #0 
    /*00003724*/ BEQ         VGS_AddRotationTaskEx_x3768
    /*00003728*/ MOV         R0, R4 
    /*0000372c*/ BL          0x000000000000372C          @ VGS_VbSubInImg [R_ARM_CALL: .text+0x126c] 
    /*00003730*/ MOV         R0, R4 
    /*00003734*/ BL          0x0000000000003734          @ VGS_VbSubOutImg [R_ARM_CALL: .text+0x1418] 
    /*00003738*/ LDR         R0, [R4, #4] 
    /*0000373c*/ LDR         IP, [R4] 
    /*00003740*/ MOV         R1, #256                    @ 0x100 
    /*00003744*/ MOV         R2, #512                    @ 0x200 
    /*00003748*/ MOVT        R1, #16 
    /*0000374c*/ MOVT        R2, #32 
    /*00003750*/ STR         R0, [IP, #4] 
    /*00003754*/ STR         IP, [R0] 
    /*00003758*/ STM         R4, {R1, R2} 
    /*0000375c*/ LDR         R2, [R5, #24] 
    /*00003760*/ SUB         R2, R2, #1 
    /*00003764*/ STR         R2, [R5, #24] 
    VGS_AddRotationTaskEx_x3768:
    /*00003768*/ LDR         R0, [R7, #8] 
    /*0000376c*/ MOV         R1, FP 
    /*00003770*/ ADD         R0, R0, #304                @ 0x130 
    /*00003774*/ BL          0x0000000000003774          @ VGS_PutTaskToFreeList [R_ARM_CALL: .text+0x7de8] 
    /*00003778*/ LDR         R3, [R5, #20] 
    /*0000377c*/ B           VGS_AddRotationTaskEx_x3660
    VGS_AddRotationTaskEx_x3780:
    /*00003780*/ LDR         R4, [SP, #32] 
    /*00003784*/ CMP         R4, #0 
    /*00003788*/ BEQ         VGS_AddRotationTaskEx_x37cc
    /*0000378c*/ MOV         R0, R4 
    /*00003790*/ BL          0x0000000000003790          @ VGS_VbSubInImg [R_ARM_CALL: .text+0x126c] 
    /*00003794*/ MOV         R0, R4 
    /*00003798*/ BL          0x0000000000003798          @ VGS_VbSubOutImg [R_ARM_CALL: .text+0x1418] 
    /*0000379c*/ LDR         R0, [R4, #4] 
    /*000037a0*/ LDR         IP, [R4] 
    /*000037a4*/ MOV         R1, #256                    @ 0x100 
    /*000037a8*/ MOV         R2, #512                    @ 0x200 
    /*000037ac*/ MOVT        R1, #16 
    /*000037b0*/ MOVT        R2, #32 
    /*000037b4*/ STR         R0, [IP, #4] 
    /*000037b8*/ STR         IP, [R0] 
    /*000037bc*/ STM         R4, {R1, R2} 
    /*000037c0*/ LDR         R2, [R5, #24] 
    /*000037c4*/ SUB         R2, R2, #1 
    /*000037c8*/ STR         R2, [R5, #24] 
    VGS_AddRotationTaskEx_x37cc:
    /*000037cc*/ LDR         R0, [R7, #8] 
    /*000037d0*/ MOV         R1, FP 
    /*000037d4*/ ADD         R0, R0, #304                @ 0x130 
    /*000037d8*/ BL          0x00000000000037D8          @ VGS_PutTaskToFreeList [R_ARM_CALL: .text+0x7de8] 
    /*000037dc*/ B           VGS_AddRotationTaskEx_x36b8
    VGS_AddRotationTaskEx_x37e0:
    /*000037e0*/ MOVW        R3, #1660                   @ 0x67c 
    /*000037e4*/ MOV         R1, #45                     @ 0x2d 
    /*000037e8*/ STR         R3, [SP] 
    /*000037ec*/ MOVW        R2, #0                      @ .LC83 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x10cc] 
    /*000037f0*/ LDR         R3, [PC, #36]               @ 0x000000000000381c 
    /*000037f4*/ MOVT        R2, #0                      @ .LC83 [R_ARM_MOVT_ABS: .rodata.str1.4+0x10cc] 
    /*000037f8*/ MOV         R0, #3 
    /*000037fc*/ MOVW        R9, #32771                  @ 0x8003 
    /*00003800*/ BL          0x0000000000003800          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003804*/ LDR         R0, [PC, #12]               @ 0x0000000000003818 
    /*00003808*/ BL          0x0000000000003808          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000380c*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00003810*/ B           VGS_AddRotationTaskEx_x347c
    /*00003814*/ ANDEQ       R0, R0, R4 
    /*00003818*/ ANDEQ       R0, R0, R0, LSL R0 
    /*0000381c*/ ANDEQ       R0, R0, R8, LSR R2 
    /*00003820*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddRotationTaskEx


FUNC_BEGIN VGS_AddRotationTask
    /*00003824*/ PUSH        {R4, R5, LR} 
    /*00003828*/ SUBS        R4, R1, #0 
    /*0000382c*/ SUB         SP, SP, #12 
    /*00003830*/ MOV         R5, R0 
    /*00003834*/ BEQ         VGS_AddRotationTask_x3860
    VGS_AddRotationTask_x3838:
    /*00003838*/ MOV         R0, R5 
    /*0000383c*/ MOV         R1, R4 
    /*00003840*/ BL          0x0000000000003840          @ VGS_AddRotationTaskEx [R_ARM_CALL: .text+0x3164] 
    /*00003844*/ SUBS        R5, R0, #0 
    /*00003848*/ BEQ         VGS_AddRotationTask_x3854
    /*0000384c*/ MOV         R0, R4 
    /*00003850*/ BL          0x0000000000003850          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddRotationTask_x3854:
    /*00003854*/ MOV         R0, R5 
    /*00003858*/ ADD         SP, SP, #12 
    /*0000385c*/ POP         {R4, R5, PC} 
    VGS_AddRotationTask_x3860:
    /*00003860*/ STR         R2, [SP, #4] 
    /*00003864*/ BL          0x0000000000000504 
    /*00003868*/ LDR         R2, [SP, #4] 
    /*0000386c*/ CMP         R0, #0 
    /*00003870*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*00003874*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*00003878*/ BNE         VGS_AddRotationTask_x3854
    /*0000387c*/ B           VGS_AddRotationTask_x3838
FUNC_END VGS_AddRotationTask


FUNC_BEGIN VGS_AddCoverTaskEx
    /*00003880*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00003884*/ SUBS        R7, R0, #0 
    /*00003888*/ SUB         SP, SP, #28 
    /*0000388c*/ MOV         R3, #0 
    /*00003890*/ MOV         R5, R1 
    /*00003894*/ MOV         R8, R2 
    /*00003898*/ STR         R3, [SP, #20] 
    /*0000389c*/ BLT         VGS_AddCoverTaskEx_x39d4
    /*000038a0*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*000038a4*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*000038a8*/ LDR         R3, [R3] 
    /*000038ac*/ CMP         R3, R7 
    /*000038b0*/ BLS         VGS_AddCoverTaskEx_x39d4
    VGS_AddCoverTaskEx_x38b4:
    /*000038b4*/ CMP         R8, #0 
    /*000038b8*/ BEQ         VGS_AddCoverTaskEx_x3b9c
    VGS_AddCoverTaskEx_x38bc:
    /*000038bc*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000038c0*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000038c4*/ LDR         R3, [R4] 
    /*000038c8*/ CMP         R3, #1 
    /*000038cc*/ BNE         VGS_AddCoverTaskEx_x3b2c
    /*000038d0*/ ADD         R0, R4, #16 
    /*000038d4*/ BL          0x00000000000038D4          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*000038d8*/ LDR         R3, [R4, #8] 
    /*000038dc*/ LDR         R3, [R3, #4] 
    /*000038e0*/ LDR         R4, [R3, R7, LSL #2] 
    /*000038e4*/ LDR         R0, [R4, #20] 
    /*000038e8*/ CMP         R0, #1 
    /*000038ec*/ BEQ         VGS_AddCoverTaskEx_x38fc
    /*000038f0*/ BL          0x0000000000000894 
    /*000038f4*/ CMP         R0, #0 
    /*000038f8*/ BNE         VGS_AddCoverTaskEx_x39e4
    VGS_AddCoverTaskEx_x38fc:
    /*000038fc*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00003900*/ CMP         R3, #0 
    /*00003904*/ BEQ         VGS_AddCoverTaskEx_x3c6c
    /*00003908*/ LDR         R2, [R4, #32] 
    /*0000390c*/ LDR         R3, [R5, #724]              @ 0x2d4 
    /*00003910*/ CMP         R2, R3 
    /*00003914*/ BNE         VGS_AddCoverTaskEx_x3be0
    /*00003918*/ LDR         R2, [R4, #36]               @ 0x24 
    /*0000391c*/ LDR         R3, [R5, #728]              @ 0x2d8 
    /*00003920*/ CMP         R2, R3 
    /*00003924*/ BNE         VGS_AddCoverTaskEx_x3bfc
    /*00003928*/ LDR         R2, [R4, #40]               @ 0x28 
    /*0000392c*/ LDR         R3, [R5, #732]              @ 0x2dc 
    /*00003930*/ CMP         R2, R3 
    /*00003934*/ BNE         VGS_AddCoverTaskEx_x3b58
    /*00003938*/ MOV         R0, R5 
    /*0000393c*/ BL          0x000000000000393C          @ VGS_DRV_CheckInImage [R_ARM_CALL: .text+0xed58] 
    /*00003940*/ SUBS        R6, R0, #0 
    /*00003944*/ BNE         VGS_AddCoverTaskEx_x3ae0
    /*00003948*/ ADD         R9, R5, #336                @ 0x150 
    /*0000394c*/ MOV         R0, R9 
    /*00003950*/ BL          0x0000000000003950          @ VGS_DRV_CheckOutImage [R_ARM_CALL: .text+0xee14] 
    /*00003954*/ SUBS        R6, R0, #0 
    /*00003958*/ BNE         VGS_AddCoverTaskEx_x3ae0
    /*0000395c*/ MOV         R1, R9 
    /*00003960*/ MOV         R0, R5 
    /*00003964*/ BL          0x0000000000003964          @ VGS_DRV_CheckInOutImage [R_ARM_CALL: .text+0xeebc] 
    /*00003968*/ SUBS        R6, R0, #0 
    /*0000396c*/ BNE         VGS_AddCoverTaskEx_x3af4
    /*00003970*/ MOV         R2, R6 
    /*00003974*/ MOV         R1, R9 
    /*00003978*/ MOV         R0, R5 
    /*0000397c*/ BL          0x000000000000397C          @ VGS_DRV_CheckYuvDynamicRange [R_ARM_CALL: .text+0xf8d0] 
    /*00003980*/ SUBS        R6, R0, #0 
    /*00003984*/ BNE         VGS_AddCoverTaskEx_x3bb4
    /*00003988*/ MOV         R0, R8 
    /*0000398c*/ BL          0x000000000000398C          @ VGS_DRV_CheckCover [R_ARM_CALL: .text+0xf1bc] 
    /*00003990*/ SUBS        R6, R0, #0 
    /*00003994*/ BNE         VGS_AddCoverTaskEx_x3ae0
    /*00003998*/ LDR         R3, [R5, #724]              @ 0x2d4 
    /*0000399c*/ SUB         R2, R3, #6 
    /*000039a0*/ CMP         R2, #31 
    /*000039a4*/ BLS         VGS_AddCoverTaskEx_x39f0
    VGS_AddCoverTaskEx_x39a8:
    /*000039a8*/ LDR         R3, [R5, #20] 
    /*000039ac*/ LDR         R2, [R5, #356]              @ 0x164 
    /*000039b0*/ CMP         R3, R2 
    /*000039b4*/ BEQ         VGS_AddCoverTaskEx_x3a04
    /*000039b8*/ STR         R2, [SP, #8] 
    /*000039bc*/ MOVW        R1, #2047                   @ 0x7ff 
    /*000039c0*/ MOVW        R2, #0                      @ .LC78 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xf84] 
    /*000039c4*/ STR         R3, [SP, #4] 
    /*000039c8*/ STR         R1, [SP] 
    /*000039cc*/ MOVT        R2, #0                      @ .LC78 [R_ARM_MOVT_ABS: .rodata.str1.4+0xf84] 
    /*000039d0*/ B           VGS_AddCoverTaskEx_x3b70
    VGS_AddCoverTaskEx_x39d4:
    /*000039d4*/ MOV         R0, R7 
    /*000039d8*/ BL          0x0000000000000854 
    /*000039dc*/ CMP         R0, #0 
    /*000039e0*/ BEQ         VGS_AddCoverTaskEx_x38b4
    VGS_AddCoverTaskEx_x39e4:
    /*000039e4*/ MOVW        R6, #32771                  @ 0x8003 
    /*000039e8*/ MOVT        R6, #41005                  @ 0xa02d 
    /*000039ec*/ B           VGS_AddCoverTaskEx_x3ae8
    VGS_AddCoverTaskEx_x39f0:
    /*000039f0*/ MOVW        R3, #1025                   @ 0x401 
    /*000039f4*/ MOVT        R3, #32768                  @ 0x8000 
    /*000039f8*/ MVN         R3, R3, LSR R2 
    /*000039fc*/ TST         R3, #1 
    /*00003a00*/ BNE         VGS_AddCoverTaskEx_x39a8
    VGS_AddCoverTaskEx_x3a04:
    /*00003a04*/ LDR         R3, [R8, #4] 
    /*00003a08*/ CMP         R3, #0 
    /*00003a0c*/ BEQ         VGS_AddCoverTaskEx_x3bcc
    /*00003a10*/ LDR         R2, [R5, #4] 
    /*00003a14*/ MOV         R0, R8 
    /*00003a18*/ LDR         R1, [R5] 
    /*00003a1c*/ BL          0x0000000000003A1C          @ VGS_DRV_CheckQuadRangleCover [R_ARM_CALL: .text+0xe874] 
    /*00003a20*/ SUBS        R6, R0, #0 
    /*00003a24*/ BNE         VGS_AddCoverTaskEx_x3d38
    VGS_AddCoverTaskEx_x3a28:
    /*00003a28*/ SUB         R9, R5, #8 
    /*00003a2c*/ MOV         R2, #52                     @ 0x34 
    /*00003a30*/ ADD         R0, R9, #1776               @ 0x6f0 
    /*00003a34*/ MOV         R1, R8 
    /*00003a38*/ BL          0x0000000000003A38          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00003a3c*/ LDR         R6, [R8, #4] 
    /*00003a40*/ CMP         R6, #0 
    /*00003a44*/ BEQ         VGS_AddCoverTaskEx_x3c54
    VGS_AddCoverTaskEx_x3a48:
    /*00003a48*/ MOV         R3, #2 
    /*00003a4c*/ ADD         R1, SP, #20 
    /*00003a50*/ STR         R3, [R5, #1756]             @ 0x6dc 
    /*00003a54*/ LDR         R0, [PC, #844]              @ 0x0000000000003da8 
    /*00003a58*/ BL          0x0000000000003A58          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00003a5c*/ LDR         R7, [R4, #20] 
    /*00003a60*/ CMP         R7, #1 
    /*00003a64*/ BNE         VGS_AddCoverTaskEx_x3d64
    /*00003a68*/ MOV         R0, R5 
    /*00003a6c*/ BL          0x0000000000003A6C          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*00003a70*/ SUBS        R6, R0, #0 
    /*00003a74*/ BNE         VGS_AddCoverTaskEx_x3c18
    /*00003a78*/ MOV         R0, R9 
    /*00003a7c*/ MOV         R1, R4 
    /*00003a80*/ BL          0x0000000000003A80          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*00003a84*/ ADD         R1, SP, #20 
    /*00003a88*/ LDR         R0, [PC, #792]              @ 0x0000000000003da8 
    /*00003a8c*/ BL          0x0000000000003A8C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003a90*/ LDR         R3, [R5, #20] 
    /*00003a94*/ STR         R3, [R4, #204]              @ 0xcc 
    /*00003a98*/ LDR         R3, [R5, #356]              @ 0x164 
    /*00003a9c*/ STRB        R7, [R4, #213]              @ 0xd5 
    /*00003aa0*/ STR         R3, [R4, #208]              @ 0xd0 
    /*00003aa4*/ LDR         R3, [R8, #4] 
    /*00003aa8*/ CMP         R3, #0 
    /*00003aac*/ BNE         VGS_AddCoverTaskEx_x3ca8
    /*00003ab0*/ LDR         R0, [R5, #1784]             @ 0x6f8 
    /*00003ab4*/ LDR         R3, [R5, #1788]             @ 0x6fc 
    /*00003ab8*/ LDR         R1, [R4, #156]              @ 0x9c 
    /*00003abc*/ LDR         R2, [R4, #160]              @ 0xa0 
    /*00003ac0*/ MUL         R3, R3, R0 
    /*00003ac4*/ LDR         R0, [R4, #148]              @ 0x94 
    /*00003ac8*/ ADD         R0, R0, #1 
    /*00003acc*/ STR         R0, [R4, #148]              @ 0x94 
    /*00003ad0*/ ADD         R1, R1, R3 
    /*00003ad4*/ ADD         R3, R2, R3 
    /*00003ad8*/ STR         R1, [R4, #156]              @ 0x9c 
    /*00003adc*/ STR         R3, [R4, #160]              @ 0xa0 
    VGS_AddCoverTaskEx_x3ae0:
    /*00003ae0*/ LDR         R0, [PC, #708]              @ 0x0000000000003dac 
    /*00003ae4*/ BL          0x0000000000003AE4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddCoverTaskEx_x3ae8:
    /*00003ae8*/ MOV         R0, R6 
    /*00003aec*/ ADD         SP, SP, #28 
    /*00003af0*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddCoverTaskEx_x3af4:
    /*00003af4*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00003af8*/ MOVW        R2, #0                      @ .LC85 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x114c] 
    /*00003afc*/ LDR         R3, [PC, #684]              @ 0x0000000000003db0 
    /*00003b00*/ MOVT        R2, #0                      @ .LC85 [R_ARM_MOVT_ABS: .rodata.str1.4+0x114c] 
    /*00003b04*/ MOVW        LR, #2021                   @ 0x7e5 
    VGS_AddCoverTaskEx_x3b08:
    /*00003b08*/ STR         R0, [SP, #12] 
    /*00003b0c*/ MOV         R1, #45                     @ 0x2d 
    /*00003b10*/ LDR         IP, [R4, #32] 
    /*00003b14*/ MOV         R0, #3 
    /*00003b18*/ STR         R7, [SP, #4] 
    /*00003b1c*/ STR         LR, [SP] 
    /*00003b20*/ STR         IP, [SP, #8] 
    /*00003b24*/ BL          0x0000000000003B24          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003b28*/ B           VGS_AddCoverTaskEx_x3ae0
    VGS_AddCoverTaskEx_x3b2c:
    /*00003b2c*/ MOVW        R3, #1977                   @ 0x7b9 
    /*00003b30*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00003b34*/ STR         R3, [SP] 
    /*00003b38*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00003b3c*/ LDR         R3, [PC, #620]              @ 0x0000000000003db0 
    /*00003b40*/ MOV         R1, #45                     @ 0x2d 
    /*00003b44*/ MOV         R0, #3 
    /*00003b48*/ MOVW        R6, #32784                  @ 0x8010 
    /*00003b4c*/ BL          0x0000000000003B4C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003b50*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00003b54*/ B           VGS_AddCoverTaskEx_x3ae8
    VGS_AddCoverTaskEx_x3b58:
    /*00003b58*/ STR         R2, [SP, #8] 
    /*00003b5c*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*00003b60*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*00003b64*/ MOVW        R1, #1997                   @ 0x7cd 
    /*00003b68*/ STR         R3, [SP, #4] 
    /*00003b6c*/ STR         R1, [SP] 
    VGS_AddCoverTaskEx_x3b70:
    /*00003b70*/ LDR         R3, [PC, #568]              @ 0x0000000000003db0 
    /*00003b74*/ MOV         R1, #45                     @ 0x2d 
    /*00003b78*/ MOV         R0, #3 
    /*00003b7c*/ MOVW        R6, #32771                  @ 0x8003 
    /*00003b80*/ BL          0x0000000000003B80          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003b84*/ LDR         R0, [PC, #544]              @ 0x0000000000003dac 
    /*00003b88*/ BL          0x0000000000003B88          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003b8c*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00003b90*/ MOV         R0, R6 
    /*00003b94*/ ADD         SP, SP, #28 
    /*00003b98*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddCoverTaskEx_x3b9c:
    /*00003b9c*/ BL          0x0000000000000504 
    /*00003ba0*/ CMP         R0, #0 
    /*00003ba4*/ MOVWNE      R6, #32774                  @ 0x8006 
    /*00003ba8*/ MOVTNE      R6, #41005                  @ 0xa02d 
    /*00003bac*/ BNE         VGS_AddCoverTaskEx_x3ae8
    /*00003bb0*/ B           VGS_AddCoverTaskEx_x38bc
    VGS_AddCoverTaskEx_x3bb4:
    /*00003bb4*/ MOVW        R2, #0                      @ .LC86 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x11a0] 
    /*00003bb8*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00003bbc*/ MOVW        LR, #2029                   @ 0x7ed 
    /*00003bc0*/ LDR         R3, [PC, #488]              @ 0x0000000000003db0 
    /*00003bc4*/ MOVT        R2, #0                      @ .LC86 [R_ARM_MOVT_ABS: .rodata.str1.4+0x11a0] 
    /*00003bc8*/ B           VGS_AddCoverTaskEx_x3b08
    VGS_AddCoverTaskEx_x3bcc:
    /*00003bcc*/ ADD         R0, R8, #8 
    /*00003bd0*/ BL          0x0000000000003BD0          @ VGS_DRV_CheckDstRect [R_ARM_CALL: .text+0xfabc] 
    /*00003bd4*/ SUBS        R6, R0, #0 
    /*00003bd8*/ BEQ         VGS_AddCoverTaskEx_x3a28
    /*00003bdc*/ B           VGS_AddCoverTaskEx_x3ae0
    VGS_AddCoverTaskEx_x3be0:
    /*00003be0*/ STR         R2, [SP, #8] 
    /*00003be4*/ MOVW        R1, #1995                   @ 0x7cb 
    /*00003be8*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00003bec*/ STR         R3, [SP, #4] 
    /*00003bf0*/ STR         R1, [SP] 
    /*00003bf4*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*00003bf8*/ B           VGS_AddCoverTaskEx_x3b70
    VGS_AddCoverTaskEx_x3bfc:
    /*00003bfc*/ STR         R2, [SP, #8] 
    /*00003c00*/ MOVW        R1, #1996                   @ 0x7cc 
    /*00003c04*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*00003c08*/ STR         R3, [SP, #4] 
    /*00003c0c*/ STR         R1, [SP] 
    /*00003c10*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*00003c14*/ B           VGS_AddCoverTaskEx_x3b70
    VGS_AddCoverTaskEx_x3c18:
    /*00003c18*/ MOV         R1, #45                     @ 0x2d 
    /*00003c1c*/ STR         R6, [SP, #4] 
    /*00003c20*/ MOV         R3, #2112                   @ 0x840 
    /*00003c24*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*00003c28*/ STR         R3, [SP] 
    /*00003c2c*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*00003c30*/ LDR         R3, [PC, #376]              @ 0x0000000000003db0 
    /*00003c34*/ MOV         R0, #3 
    /*00003c38*/ BL          0x0000000000003C38          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003c3c*/ LDR         R0, [PC, #360]              @ 0x0000000000003dac 
    /*00003c40*/ BL          0x0000000000003C40          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003c44*/ ADD         R1, SP, #20 
    /*00003c48*/ LDR         R0, [PC, #344]              @ 0x0000000000003da8 
    /*00003c4c*/ BL          0x0000000000003C4C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003c50*/ B           VGS_AddCoverTaskEx_x3ae8
    VGS_AddCoverTaskEx_x3c54:
    /*00003c54*/ ADD         R1, R5, #1776               @ 0x6f0 
    /*00003c58*/ MOV         R0, R5 
    /*00003c5c*/ BL          0x0000000000003C5C          @ VGS_DRV_IsRectOut [R_ARM_CALL: .text+0xe974] 
    /*00003c60*/ CMP         R0, #0 
    /*00003c64*/ STRNE       R6, [R5, #1768]             @ 0x6e8 
    /*00003c68*/ B           VGS_AddCoverTaskEx_x3a48
    VGS_AddCoverTaskEx_x3c6c:
    /*00003c6c*/ LDR         R1, [PC, #320]              @ 0x0000000000003db4 
    /*00003c70*/ MOVW        R3, #1989                   @ 0x7c5 
    /*00003c74*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*00003c78*/ STR         R3, [SP] 
    /*00003c7c*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*00003c80*/ LDR         R3, [PC, #296]              @ 0x0000000000003db0 
    /*00003c84*/ STR         R1, [SP, #4] 
    /*00003c88*/ MOV         R0, #3 
    /*00003c8c*/ MOV         R1, #45                     @ 0x2d 
    /*00003c90*/ MOVW        R6, #32771                  @ 0x8003 
    /*00003c94*/ BL          0x0000000000003C94          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003c98*/ LDR         R0, [PC, #268]              @ 0x0000000000003dac 
    /*00003c9c*/ BL          0x0000000000003C9C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003ca0*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00003ca4*/ B           VGS_AddCoverTaskEx_x3ae8
    VGS_AddCoverTaskEx_x3ca8:
    /*00003ca8*/ LDR         R3, [R5, #1808]             @ 0x710 
    /*00003cac*/ LDR         R2, [R5, #1800]             @ 0x708 
    /*00003cb0*/ LDR         R1, [R5, #1792]             @ 0x700 
    /*00003cb4*/ LDR         R0, [R5, #1784]             @ 0x6f8 
    /*00003cb8*/ BL          0x0000000000003CB8          @ VGS_GetMinCoordinate [R_ARM_CALL: .text+0xb80c] 
    /*00003cbc*/ LDR         R3, [R5, #1812]             @ 0x714 
    /*00003cc0*/ LDR         R2, [R5, #1804]             @ 0x70c 
    /*00003cc4*/ LDR         R1, [R5, #1796]             @ 0x704 
    /*00003cc8*/ MOV         R9, R0 
    /*00003ccc*/ LDR         R0, [R5, #1788]             @ 0x6fc 
    /*00003cd0*/ BL          0x0000000000003CD0          @ VGS_GetMinCoordinate [R_ARM_CALL: .text+0xb80c] 
    /*00003cd4*/ LDR         R3, [R5, #1808]             @ 0x710 
    /*00003cd8*/ LDR         R2, [R5, #1800]             @ 0x708 
    /*00003cdc*/ LDR         R1, [R5, #1792]             @ 0x700 
    /*00003ce0*/ MOV         R7, R0 
    /*00003ce4*/ LDR         R0, [R5, #1784]             @ 0x6f8 
    /*00003ce8*/ BL          0x0000000000003CE8          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00003cec*/ LDR         R3, [R5, #1812]             @ 0x714 
    /*00003cf0*/ LDR         R2, [R5, #1804]             @ 0x70c 
    /*00003cf4*/ LDR         R1, [R5, #1796]             @ 0x704 
    /*00003cf8*/ MOV         R8, R0 
    /*00003cfc*/ LDR         R0, [R5, #1788]             @ 0x6fc 
    /*00003d00*/ BL          0x0000000000003D00          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00003d04*/ LDR         R3, [R4, #148]              @ 0x94 
    /*00003d08*/ SUB         R8, R8, R9 
    /*00003d0c*/ LDR         R1, [R4, #156]              @ 0x9c 
    /*00003d10*/ ADD         R3, R3, #1 
    /*00003d14*/ STR         R3, [R4, #148]              @ 0x94 
    /*00003d18*/ LDR         R2, [R4, #160]              @ 0xa0 
    /*00003d1c*/ SUB         R3, R0, R7 
    /*00003d20*/ MUL         R3, R3, R8 
    /*00003d24*/ ADD         R1, R1, R3 
    /*00003d28*/ ADD         R3, R2, R3 
    /*00003d2c*/ STR         R1, [R4, #156]              @ 0x9c 
    /*00003d30*/ STR         R3, [R4, #160]              @ 0xa0 
    /*00003d34*/ B           VGS_AddCoverTaskEx_x3ae0
    VGS_AddCoverTaskEx_x3d38:
    /*00003d38*/ MOVW        R3, #2069                   @ 0x815 
    /*00003d3c*/ MOV         R1, #45                     @ 0x2d 
    /*00003d40*/ STR         R3, [SP] 
    /*00003d44*/ MOVW        R2, #0                      @ .LC87 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x11f4] 
    /*00003d48*/ LDR         R3, [PC, #96]               @ 0x0000000000003db0 
    /*00003d4c*/ MOVT        R2, #0                      @ .LC87 [R_ARM_MOVT_ABS: .rodata.str1.4+0x11f4] 
    /*00003d50*/ MOV         R0, #3 
    /*00003d54*/ BL          0x0000000000003D54          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003d58*/ LDR         R0, [PC, #76]               @ 0x0000000000003dac 
    /*00003d5c*/ BL          0x0000000000003D5C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003d60*/ B           VGS_AddCoverTaskEx_x3ae8
    VGS_AddCoverTaskEx_x3d64:
    /*00003d64*/ MOV         R1, #45                     @ 0x2d 
    /*00003d68*/ MOVW        R3, #2102                   @ 0x836 
    /*00003d6c*/ STR         R7, [SP, #4] 
    /*00003d70*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00003d74*/ STR         R3, [SP] 
    /*00003d78*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00003d7c*/ LDR         R3, [PC, #44]               @ 0x0000000000003db0 
    /*00003d80*/ MOV         R0, #4 
    /*00003d84*/ BL          0x0000000000003D84          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00003d88*/ LDR         R0, [PC, #28]               @ 0x0000000000003dac 
    /*00003d8c*/ BL          0x0000000000003D8C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003d90*/ ADD         R1, SP, #20 
    /*00003d94*/ LDR         R0, [PC, #12]               @ 0x0000000000003da8 
    /*00003d98*/ MOVW        R6, #32777                  @ 0x8009 
    /*00003d9c*/ BL          0x0000000000003D9C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003da0*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00003da4*/ B           VGS_AddCoverTaskEx_x3ae8
    /*00003da8*/ ANDEQ       R0, R0, R4 
    /*00003dac*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00003db0*/ ANDEQ       R0, R0, R0, ASR R2 
    /*00003db4*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddCoverTaskEx


FUNC_BEGIN VGS_AddCoverTask
    /*00003db8*/ PUSH        {R4, R5, LR} 
    /*00003dbc*/ SUBS        R4, R1, #0 
    /*00003dc0*/ SUB         SP, SP, #12 
    /*00003dc4*/ MOV         R5, R0 
    /*00003dc8*/ BEQ         VGS_AddCoverTask_x3df4
    VGS_AddCoverTask_x3dcc:
    /*00003dcc*/ MOV         R0, R5 
    /*00003dd0*/ MOV         R1, R4 
    /*00003dd4*/ BL          0x0000000000003DD4          @ VGS_AddCoverTaskEx [R_ARM_CALL: .text+0x3880] 
    /*00003dd8*/ SUBS        R5, R0, #0 
    /*00003ddc*/ BEQ         VGS_AddCoverTask_x3de8
    /*00003de0*/ MOV         R0, R4 
    /*00003de4*/ BL          0x0000000000003DE4          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddCoverTask_x3de8:
    /*00003de8*/ MOV         R0, R5 
    /*00003dec*/ ADD         SP, SP, #12 
    /*00003df0*/ POP         {R4, R5, PC} 
    VGS_AddCoverTask_x3df4:
    /*00003df4*/ STR         R2, [SP, #4] 
    /*00003df8*/ BL          0x0000000000000504 
    /*00003dfc*/ LDR         R2, [SP, #4] 
    /*00003e00*/ CMP         R0, #0 
    /*00003e04*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*00003e08*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*00003e0c*/ BNE         VGS_AddCoverTask_x3de8
    /*00003e10*/ B           VGS_AddCoverTask_x3dcc
FUNC_END VGS_AddCoverTask


FUNC_BEGIN VGS_AddGetLumaStatTaskEx
    /*00003e14*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00003e18*/ SUBS        R7, R0, #0 
    /*00003e1c*/ SUB         SP, SP, #28 
    /*00003e20*/ MOV         R3, #0 
    /*00003e24*/ MOV         R5, R1 
    /*00003e28*/ MOV         R6, R2 
    /*00003e2c*/ STR         R3, [SP, #20] 
    /*00003e30*/ BLT         VGS_AddGetLumaStatTaskEx_x3fcc
    /*00003e34*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00003e38*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00003e3c*/ LDR         R3, [R3] 
    /*00003e40*/ CMP         R3, R7 
    /*00003e44*/ BLS         VGS_AddGetLumaStatTaskEx_x3fcc
    VGS_AddGetLumaStatTaskEx_x3e48:
    /*00003e48*/ CMP         R6, #0 
    /*00003e4c*/ BEQ         VGS_AddGetLumaStatTaskEx_x40b8
    VGS_AddGetLumaStatTaskEx_x3e50:
    /*00003e50*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00003e54*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00003e58*/ LDR         R3, [R4] 
    /*00003e5c*/ CMP         R3, #1 
    /*00003e60*/ BNE         VGS_AddGetLumaStatTaskEx_x4048
    /*00003e64*/ ADD         R0, R4, #16 
    /*00003e68*/ BL          0x0000000000003E68          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00003e6c*/ LDR         R3, [R4, #8] 
    /*00003e70*/ LDR         R3, [R3, #4] 
    /*00003e74*/ LDR         R4, [R3, R7, LSL #2] 
    /*00003e78*/ LDR         R0, [R4, #20] 
    /*00003e7c*/ CMP         R0, #1 
    /*00003e80*/ BEQ         VGS_AddGetLumaStatTaskEx_x3e90
    /*00003e84*/ BL          0x0000000000000894 
    /*00003e88*/ CMP         R0, #0 
    /*00003e8c*/ BNE         VGS_AddGetLumaStatTaskEx_x3fdc
    VGS_AddGetLumaStatTaskEx_x3e90:
    /*00003e90*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00003e94*/ CMP         R3, #1 
    /*00003e98*/ BNE         VGS_AddGetLumaStatTaskEx_x40d0
    /*00003e9c*/ LDR         R2, [R4, #32] 
    /*00003ea0*/ LDR         R3, [R5, #724]              @ 0x2d4 
    /*00003ea4*/ CMP         R2, R3 
    /*00003ea8*/ BNE         VGS_AddGetLumaStatTaskEx_x4108
    /*00003eac*/ LDR         R2, [R4, #36]               @ 0x24 
    /*00003eb0*/ LDR         R3, [R5, #728]              @ 0x2d8 
    /*00003eb4*/ CMP         R2, R3 
    /*00003eb8*/ BNE         VGS_AddGetLumaStatTaskEx_x4124
    /*00003ebc*/ LDR         R2, [R4, #40]               @ 0x28 
    /*00003ec0*/ LDR         R3, [R5, #732]              @ 0x2dc 
    /*00003ec4*/ CMP         R2, R3 
    /*00003ec8*/ BNE         VGS_AddGetLumaStatTaskEx_x4074
    /*00003ecc*/ MOV         R0, R5 
    /*00003ed0*/ BL          0x0000000000003ED0          @ VGS_DRV_CheckInImage [R_ARM_CALL: .text+0xed58] 
    /*00003ed4*/ SUBS        R7, R0, #0 
    /*00003ed8*/ BNE         VGS_AddGetLumaStatTaskEx_x3ff0
    /*00003edc*/ MOV         R1, R6 
    /*00003ee0*/ MOV         R0, R5 
    /*00003ee4*/ BL          0x0000000000003EE4          @ VGS_DRV_CheckLumaStatInfo [R_ARM_CALL: .text+0xe1e4] 
    /*00003ee8*/ SUBS        R7, R0, #0 
    /*00003eec*/ BNE         VGS_AddGetLumaStatTaskEx_x3ff0
    /*00003ef0*/ LDR         R1, [R6] 
    /*00003ef4*/ SUB         R9, R5, #8 
    /*00003ef8*/ LDR         R3, [R6, #8] 
    /*00003efc*/ ADD         R0, R9, #1776               @ 0x6f0 
    /*00003f00*/ LDR         R2, [R5] 
    /*00003f04*/ MOV         R7, #4 
    /*00003f08*/ ADD         R3, R1, R3 
    /*00003f0c*/ CMP         R3, R2 
    /*00003f10*/ LDR         R3, [R6, #12] 
    /*00003f14*/ SUBHI       R2, R2, R1 
    /*00003f18*/ LDR         R1, [R6, #4] 
    /*00003f1c*/ STRHI       R2, [R6, #8] 
    /*00003f20*/ LDR         R2, [R5, #4] 
    /*00003f24*/ ADD         R3, R1, R3 
    /*00003f28*/ CMP         R3, R2 
    /*00003f2c*/ SUBHI       R2, R2, R1 
    /*00003f30*/ MOV         R1, R6 
    /*00003f34*/ STRHI       R2, [R6, #12] 
    /*00003f38*/ MOV         R2, #32 
    /*00003f3c*/ BL          0x0000000000003F3C          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00003f40*/ ADD         R1, SP, #20 
    /*00003f44*/ STR         R7, [R5, #1756]             @ 0x6dc 
    /*00003f48*/ LDR         R0, [PC, #564]              @ 0x0000000000004184 
    /*00003f4c*/ BL          0x0000000000003F4C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00003f50*/ LDR         R8, [R4, #20] 
    /*00003f54*/ CMP         R8, #1 
    /*00003f58*/ BNE         VGS_AddGetLumaStatTaskEx_x4140
    /*00003f5c*/ MOV         R0, R5 
    /*00003f60*/ BL          0x0000000000003F60          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*00003f64*/ SUBS        R7, R0, #0 
    /*00003f68*/ BNE         VGS_AddGetLumaStatTaskEx_x4004
    /*00003f6c*/ MOV         R0, R9 
    /*00003f70*/ MOV         R1, R4 
    /*00003f74*/ BL          0x0000000000003F74          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*00003f78*/ ADD         R1, SP, #20 
    /*00003f7c*/ LDR         R0, [PC, #512]              @ 0x0000000000004184 
    /*00003f80*/ BL          0x0000000000003F80          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00003f84*/ LDR         R3, [R5, #20] 
    /*00003f88*/ LDR         R1, [R4, #156]              @ 0x9c 
    /*00003f8c*/ LDR         R2, [R4, #148]              @ 0x94 
    /*00003f90*/ STR         R3, [R4, #204]              @ 0xcc 
    /*00003f94*/ LDR         R3, [R5, #356]              @ 0x164 
    /*00003f98*/ ADD         R2, R2, #1 
    /*00003f9c*/ STRB        R8, [R4, #218]              @ 0xda 
    /*00003fa0*/ LDR         R0, [PC, #480]              @ 0x0000000000004188 
    /*00003fa4*/ STR         R3, [R4, #208]              @ 0xd0 
    /*00003fa8*/ LDR         R3, [R6, #8] 
    /*00003fac*/ LDR         IP, [R6, #12] 
    /*00003fb0*/ STR         R2, [R4, #148]              @ 0x94 
    /*00003fb4*/ MLA         R3, IP, R3, R1 
    /*00003fb8*/ STR         R3, [R4, #156]              @ 0x9c 
    /*00003fbc*/ BL          0x0000000000003FBC          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00003fc0*/ MOV         R0, R7 
    /*00003fc4*/ ADD         SP, SP, #28 
    /*00003fc8*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddGetLumaStatTaskEx_x3fcc:
    /*00003fcc*/ MOV         R0, R7 
    /*00003fd0*/ BL          0x0000000000000854 
    /*00003fd4*/ CMP         R0, #0 
    /*00003fd8*/ BEQ         VGS_AddGetLumaStatTaskEx_x3e48
    VGS_AddGetLumaStatTaskEx_x3fdc:
    /*00003fdc*/ MOVW        R7, #32771                  @ 0x8003 
    /*00003fe0*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00003fe4*/ MOV         R0, R7 
    /*00003fe8*/ ADD         SP, SP, #28 
    /*00003fec*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddGetLumaStatTaskEx_x3ff0:
    /*00003ff0*/ LDR         R0, [PC, #400]              @ 0x0000000000004188 
    /*00003ff4*/ BL          0x0000000000003FF4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddGetLumaStatTaskEx_x3ff8:
    /*00003ff8*/ MOV         R0, R7 
    /*00003ffc*/ ADD         SP, SP, #28 
    /*00004000*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddGetLumaStatTaskEx_x4004:
    /*00004004*/ MOV         R1, #45                     @ 0x2d 
    /*00004008*/ STR         R7, [SP, #4] 
    /*0000400c*/ MOVW        R3, #2265                   @ 0x8d9 
    /*00004010*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*00004014*/ STR         R3, [SP] 
    /*00004018*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*0000401c*/ LDR         R3, [PC, #360]              @ 0x000000000000418c 
    /*00004020*/ MOV         R0, #3 
    /*00004024*/ BL          0x0000000000004024          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004028*/ LDR         R0, [PC, #344]              @ 0x0000000000004188 
    /*0000402c*/ BL          0x000000000000402C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004030*/ ADD         R1, SP, #20 
    /*00004034*/ LDR         R0, [PC, #328]              @ 0x0000000000004184 
    /*00004038*/ BL          0x0000000000004038          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000403c*/ MOV         R0, R7 
    /*00004040*/ ADD         SP, SP, #28 
    /*00004044*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddGetLumaStatTaskEx_x4048:
    /*00004048*/ MOVW        R3, #2189                   @ 0x88d 
    /*0000404c*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00004050*/ STR         R3, [SP] 
    /*00004054*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00004058*/ LDR         R3, [PC, #300]              @ 0x000000000000418c 
    /*0000405c*/ MOV         R1, #45                     @ 0x2d 
    /*00004060*/ MOV         R0, #3 
    /*00004064*/ MOVW        R7, #32784                  @ 0x8010 
    /*00004068*/ BL          0x0000000000004068          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000406c*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00004070*/ B           VGS_AddGetLumaStatTaskEx_x3ff8
    VGS_AddGetLumaStatTaskEx_x4074:
    /*00004074*/ STR         R2, [SP, #8] 
    /*00004078*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*0000407c*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*00004080*/ MOVW        R1, #2209                   @ 0x8a1 
    /*00004084*/ STR         R3, [SP, #4] 
    /*00004088*/ STR         R1, [SP] 
    VGS_AddGetLumaStatTaskEx_x408c:
    /*0000408c*/ LDR         R3, [PC, #248]              @ 0x000000000000418c 
    /*00004090*/ MOV         R1, #45                     @ 0x2d 
    /*00004094*/ MOV         R0, #3 
    /*00004098*/ MOVW        R7, #32771                  @ 0x8003 
    /*0000409c*/ BL          0x000000000000409C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000040a0*/ LDR         R0, [PC, #224]              @ 0x0000000000004188 
    /*000040a4*/ BL          0x00000000000040A4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000040a8*/ MOVT        R7, #41005                  @ 0xa02d 
    /*000040ac*/ MOV         R0, R7 
    /*000040b0*/ ADD         SP, SP, #28 
    /*000040b4*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_AddGetLumaStatTaskEx_x40b8:
    /*000040b8*/ BL          0x0000000000000504 
    /*000040bc*/ CMP         R0, #0 
    /*000040c0*/ MOVWNE      R7, #32774                  @ 0x8006 
    /*000040c4*/ MOVTNE      R7, #41005                  @ 0xa02d 
    /*000040c8*/ BNE         VGS_AddGetLumaStatTaskEx_x3ff8
    /*000040cc*/ B           VGS_AddGetLumaStatTaskEx_x3e50
    VGS_AddGetLumaStatTaskEx_x40d0:
    /*000040d0*/ LDR         R1, [PC, #184]              @ 0x0000000000004190 
    /*000040d4*/ MOVW        R0, #2201                   @ 0x899 
    /*000040d8*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*000040dc*/ STR         R0, [SP] 
    /*000040e0*/ ADD         R3, R1, R3, LSL #3 
    /*000040e4*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*000040e8*/ STR         R3, [SP, #4] 
    /*000040ec*/ MOV         R1, #45                     @ 0x2d 
    /*000040f0*/ LDR         R3, [PC, #148]              @ 0x000000000000418c 
    /*000040f4*/ MOV         R0, #3 
    /*000040f8*/ BL          0x00000000000040F8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000040fc*/ LDR         R0, [PC, #132]              @ 0x0000000000004188 
    /*00004100*/ BL          0x0000000000004100          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004104*/ B           VGS_AddGetLumaStatTaskEx_x3fdc
    VGS_AddGetLumaStatTaskEx_x4108:
    /*00004108*/ STR         R2, [SP, #8] 
    /*0000410c*/ MOVW        R1, #2207                   @ 0x89f 
    /*00004110*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00004114*/ STR         R3, [SP, #4] 
    /*00004118*/ STR         R1, [SP] 
    /*0000411c*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*00004120*/ B           VGS_AddGetLumaStatTaskEx_x408c
    VGS_AddGetLumaStatTaskEx_x4124:
    /*00004124*/ STR         R2, [SP, #8] 
    /*00004128*/ MOV         R1, #2208                   @ 0x8a0 
    /*0000412c*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*00004130*/ STR         R3, [SP, #4] 
    /*00004134*/ STR         R1, [SP] 
    /*00004138*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*0000413c*/ B           VGS_AddGetLumaStatTaskEx_x408c
    VGS_AddGetLumaStatTaskEx_x4140:
    /*00004140*/ MOV         R1, #45                     @ 0x2d 
    /*00004144*/ MOV         R0, R7 
    /*00004148*/ MOVW        R3, #2255                   @ 0x8cf 
    /*0000414c*/ STR         R8, [SP, #4] 
    /*00004150*/ STR         R3, [SP] 
    /*00004154*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00004158*/ LDR         R3, [PC, #44]               @ 0x000000000000418c 
    /*0000415c*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00004160*/ BL          0x0000000000004160          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004164*/ LDR         R0, [PC, #28]               @ 0x0000000000004188 
    /*00004168*/ BL          0x0000000000004168          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000416c*/ ADD         R1, SP, #20 
    /*00004170*/ LDR         R0, [PC, #12]               @ 0x0000000000004184 
    /*00004174*/ MOVW        R7, #32777                  @ 0x8009 
    /*00004178*/ BL          0x0000000000004178          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000417c*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00004180*/ B           VGS_AddGetLumaStatTaskEx_x3ff8
    /*00004184*/ ANDEQ       R0, R0, R4 
    /*00004188*/ ANDEQ       R0, R0, R0, LSL R0 
    /*0000418c*/ ANDEQ       R0, R0, R4, ROR #4 
    /*00004190*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddGetLumaStatTaskEx


FUNC_BEGIN VGS_AddGetLumaStatTask
    /*00004194*/ PUSH        {R4, R5, LR} 
    /*00004198*/ SUBS        R4, R1, #0 
    /*0000419c*/ SUB         SP, SP, #12 
    /*000041a0*/ MOV         R5, R0 
    /*000041a4*/ BEQ         VGS_AddGetLumaStatTask_x41d0
    VGS_AddGetLumaStatTask_x41a8:
    /*000041a8*/ MOV         R0, R5 
    /*000041ac*/ MOV         R1, R4 
    /*000041b0*/ BL          0x00000000000041B0          @ VGS_AddGetLumaStatTaskEx [R_ARM_CALL: .text+0x3e14] 
    /*000041b4*/ SUBS        R5, R0, #0 
    /*000041b8*/ BEQ         VGS_AddGetLumaStatTask_x41c4
    /*000041bc*/ MOV         R0, R4 
    /*000041c0*/ BL          0x00000000000041C0          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddGetLumaStatTask_x41c4:
    /*000041c4*/ MOV         R0, R5 
    /*000041c8*/ ADD         SP, SP, #12 
    /*000041cc*/ POP         {R4, R5, PC} 
    VGS_AddGetLumaStatTask_x41d0:
    /*000041d0*/ STR         R2, [SP, #4] 
    /*000041d4*/ BL          0x0000000000000504 
    /*000041d8*/ LDR         R2, [SP, #4] 
    /*000041dc*/ CMP         R0, #0 
    /*000041e0*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*000041e4*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*000041e8*/ BNE         VGS_AddGetLumaStatTask_x41c4
    /*000041ec*/ B           VGS_AddGetLumaStatTask_x41a8
FUNC_END VGS_AddGetLumaStatTask


FUNC_BEGIN VGS_AddOnlineTaskEx
    /*000041f0*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*000041f4*/ MOV         R8, R2 
    /*000041f8*/ LDR         R2, [R1, #4] 
    /*000041fc*/ SUB         SP, SP, #44                 @ 0x2c 
    /*00004200*/ MOV         SL, R3 
    /*00004204*/ LDR         R3, [R1] 
    /*00004208*/ SUBS        R6, R0, #0 
    /*0000420c*/ MOV         R4, R1 
    /*00004210*/ STR         R2, [SP, #28] 
    /*00004214*/ LDR         R2, [R1, #336]              @ 0x150 
    /*00004218*/ STR         R3, [SP, #24] 
    /*0000421c*/ MOV         R3, #0 
    /*00004220*/ LDR         FP, [R1, #340]              @ 0x154 
    /*00004224*/ STR         R2, [SP, #20] 
    /*00004228*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000422c*/ BLT         VGS_AddOnlineTaskEx_x44e8
    /*00004230*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00004234*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00004238*/ LDR         R3, [R3] 
    /*0000423c*/ CMP         R3, R6 
    /*00004240*/ BLS         VGS_AddOnlineTaskEx_x44e8
    VGS_AddOnlineTaskEx_x4244:
    /*00004244*/ CMP         R8, #0 
    /*00004248*/ BEQ         VGS_AddOnlineTaskEx_x4604
    VGS_AddOnlineTaskEx_x424c:
    /*0000424c*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00004250*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00004254*/ LDR         R3, [R5] 
    /*00004258*/ CMP         R3, #1 
    /*0000425c*/ BNE         VGS_AddOnlineTaskEx_x457c
    /*00004260*/ ADD         R0, R5, #16 
    /*00004264*/ BL          0x0000000000004264          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00004268*/ LDR         R3, [R5, #8] 
    /*0000426c*/ LDR         R3, [R3, #4] 
    /*00004270*/ LDR         R5, [R3, R6, LSL #2] 
    /*00004274*/ LDR         R0, [R5, #20] 
    /*00004278*/ CMP         R0, #1 
    /*0000427c*/ BEQ         VGS_AddOnlineTaskEx_x428c
    /*00004280*/ BL          0x0000000000000894 
    /*00004284*/ CMP         R0, #0 
    /*00004288*/ BNE         VGS_AddOnlineTaskEx_x44f8
    VGS_AddOnlineTaskEx_x428c:
    /*0000428c*/ LDR         R3, [R5, #100]              @ 0x64 
    /*00004290*/ CMP         R3, #0 
    /*00004294*/ BEQ         VGS_AddOnlineTaskEx_x46cc
    /*00004298*/ LDR         R2, [R5, #32] 
    /*0000429c*/ LDR         R3, [R4, #724]              @ 0x2d4 
    /*000042a0*/ CMP         R2, R3 
    /*000042a4*/ BNE         VGS_AddOnlineTaskEx_x4678
    /*000042a8*/ LDR         R2, [R5, #36]               @ 0x24 
    /*000042ac*/ LDR         R3, [R4, #728]              @ 0x2d8 
    /*000042b0*/ CMP         R2, R3 
    /*000042b4*/ BNE         VGS_AddOnlineTaskEx_x4694
    /*000042b8*/ LDR         R2, [R5, #40]               @ 0x28 
    /*000042bc*/ LDR         R3, [R4, #732]              @ 0x2dc 
    /*000042c0*/ CMP         R2, R3 
    /*000042c4*/ BNE         VGS_AddOnlineTaskEx_x45c0
    /*000042c8*/ MOV         R0, R4 
    /*000042cc*/ BL          0x00000000000042CC          @ VGS_DRV_CheckInImage [R_ARM_CALL: .text+0xed58] 
    /*000042d0*/ SUBS        R7, R0, #0 
    /*000042d4*/ BNE         VGS_AddOnlineTaskEx_x4504
    /*000042d8*/ ADD         R9, R4, #336                @ 0x150 
    /*000042dc*/ MOV         R0, R9 
    /*000042e0*/ BL          0x00000000000042E0          @ VGS_DRV_CheckOutImage [R_ARM_CALL: .text+0xee14] 
    /*000042e4*/ SUBS        R7, R0, #0 
    /*000042e8*/ BNE         VGS_AddOnlineTaskEx_x4564
    /*000042ec*/ MOV         R2, #1 
    /*000042f0*/ MOV         R1, R9 
    /*000042f4*/ MOV         R0, R4 
    /*000042f8*/ BL          0x00000000000042F8          @ VGS_DRV_CheckYuvDynamicRange [R_ARM_CALL: .text+0xf8d0] 
    /*000042fc*/ SUBS        R7, R0, #0 
    /*00004300*/ BNE         VGS_AddOnlineTaskEx_x454c
    /*00004304*/ LDR         R3, [R4, #12] 
    /*00004308*/ CMP         R3, #39                     @ 0x27 
    /*0000430c*/ BNE         VGS_AddOnlineTaskEx_x431c
    /*00004310*/ LDR         R3, [R4, #348]              @ 0x15c 
    /*00004314*/ CMP         R3, #39                     @ 0x27 
    /*00004318*/ BNE         VGS_AddOnlineTaskEx_x474c
    VGS_AddOnlineTaskEx_x431c:
    /*0000431c*/ MOV         R1, R9 
    /*00004320*/ MOV         R2, R8 
    /*00004324*/ MOV         R0, R4 
    /*00004328*/ BL          0x0000000000004328          @ VGS_DRV_CheckOnlineInfo [R_ARM_CALL: .text+0xfc38] 
    /*0000432c*/ SUBS        R7, R0, #0 
    /*00004330*/ BNE         VGS_AddOnlineTaskEx_x45a8
    /*00004334*/ SUB         R6, R4, #8 
    /*00004338*/ MOV         R2, #320                    @ 0x140 
    /*0000433c*/ ADD         R0, R6, #1776               @ 0x6f0 
    /*00004340*/ MOV         R1, R8 
    /*00004344*/ BL          0x0000000000004344          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00004348*/ LDR         R3, [SL, #4] 
    /*0000434c*/ CMP         R3, #2 
    /*00004350*/ STR         R3, [R4, #1760]             @ 0x6e0 
    /*00004354*/ BEQ         VGS_AddOnlineTaskEx_x46b0
    VGS_AddOnlineTaskEx_x4358:
    /*00004358*/ LDR         R2, [R4, #1768]             @ 0x6e8 
    /*0000435c*/ LDR         R1, [R4, #1844]             @ 0x734 
    /*00004360*/ CMP         R2, #0 
    /*00004364*/ LDR         R3, [R4] 
    /*00004368*/ LDR         R2, [R4, #4] 
    /*0000436c*/ LDRNE       R3, [R4, #1780]             @ 0x6f4 
    /*00004370*/ LDRNE       R2, [R4, #1784]             @ 0x6f8 
    /*00004374*/ CMP         R1, #0 
    /*00004378*/ BEQ         VGS_AddOnlineTaskEx_x43c8
    /*0000437c*/ LDR         R1, [R4, #1880]             @ 0x758 
    /*00004380*/ CMP         R1, R3 
    /*00004384*/ BGE         VGS_AddOnlineTaskEx_x461c
    /*00004388*/ LDR         R0, [R4, #1884]             @ 0x75c 
    /*0000438c*/ CMP         R0, R2 
    /*00004390*/ BGE         VGS_AddOnlineTaskEx_x461c
    /*00004394*/ LDR         IP, [R4, #1848]             @ 0x738 
    /*00004398*/ CMP         IP, #0 
    /*0000439c*/ BEQ         VGS_AddOnlineTaskEx_x43c8
    /*000043a0*/ LDR         IP, [R4, #1888]             @ 0x760 
    /*000043a4*/ ADD         IP, R1, IP 
    /*000043a8*/ CMP         R3, IP 
    /*000043ac*/ SUBCC       R3, R3, R1 
    /*000043b0*/ STRCC       R3, [R4, #1888]             @ 0x760 
    /*000043b4*/ LDR         R3, [R4, #1892]             @ 0x764 
    /*000043b8*/ ADD         R3, R0, R3 
    /*000043bc*/ CMP         R2, R3 
    /*000043c0*/ SUBCC       R2, R2, R0 
    /*000043c4*/ STRCC       R2, [R4, #1892]             @ 0x764 
    VGS_AddOnlineTaskEx_x43c8:
    /*000043c8*/ MOV         R3, #0 
    /*000043cc*/ ADD         R1, SP, #36                 @ 0x24 
    /*000043d0*/ STR         R3, [R4, #1756]             @ 0x6dc 
    /*000043d4*/ LDR         R0, [PC, #932]              @ 0x0000000000004780 
    /*000043d8*/ BL          0x00000000000043D8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000043dc*/ LDR         R3, [R5, #20] 
    /*000043e0*/ CMP         R3, #1 
    /*000043e4*/ BNE         VGS_AddOnlineTaskEx_x4708
    /*000043e8*/ MOV         R0, R4 
    /*000043ec*/ BL          0x00000000000043EC          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*000043f0*/ SUBS        R7, R0, #0 
    /*000043f4*/ BNE         VGS_AddOnlineTaskEx_x463c
    /*000043f8*/ MOV         R0, R6 
    /*000043fc*/ MOV         R1, R5 
    /*00004400*/ BL          0x0000000000004400          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*00004404*/ ADD         R1, SP, #36                 @ 0x24 
    /*00004408*/ LDR         R0, [PC, #880]              @ 0x0000000000004780 
    /*0000440c*/ BL          0x000000000000440C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004410*/ LDR         R3, [R4, #20] 
    /*00004414*/ STR         R3, [R5, #204]              @ 0xcc 
    /*00004418*/ LDR         R3, [R4, #356]              @ 0x164 
    /*0000441c*/ STR         R3, [R5, #208]              @ 0xd0 
    /*00004420*/ LDR         R3, [R8] 
    /*00004424*/ CMP         R3, #1 
    /*00004428*/ STRBEQ      R3, [R5, #212]              @ 0xd4 
    /*0000442c*/ LDREQ       R3, [R8, #12] 
    /*00004430*/ STREQ       R3, [SP, #24] 
    /*00004434*/ LDREQ       R3, [R8, #16] 
    /*00004438*/ STREQ       R3, [SP, #28] 
    /*0000443c*/ LDR         R3, [R8, #20] 
    /*00004440*/ CMP         R3, #1 
    /*00004444*/ STRBEQ      R3, [R5, #213]              @ 0xd5 
    /*00004448*/ LDR         R3, [R8, #76]               @ 0x4c 
    /*0000444c*/ CMP         R3, #1 
    /*00004450*/ STRBEQ      R3, [R5, #215]              @ 0xd7 
    /*00004454*/ LDR         R3, [R8, #204]              @ 0xcc 
    /*00004458*/ CMP         R3, #1 
    /*0000445c*/ STRBEQ      R3, [R5, #219]              @ 0xdb 
    /*00004460*/ LDR         R3, [R8, #296]              @ 0x128 
    /*00004464*/ CMP         R3, #1 
    /*00004468*/ STRBEQ      R3, [R5, #217]              @ 0xd9 
    /*0000446c*/ LDR         R3, [R4, #24] 
    /*00004470*/ SUB         R3, R3, #2 
    /*00004474*/ CMP         R3, #1 
    /*00004478*/ BLS         VGS_AddOnlineTaskEx_x4628
    VGS_AddOnlineTaskEx_x447c:
    /*0000447c*/ LDR         R3, [R8, #184]              @ 0xb8 
    /*00004480*/ LDR         R1, [SP, #28] 
    /*00004484*/ CMP         R3, #1 
    /*00004488*/ LDREQ       R3, [R8, #196]              @ 0xc4 
    /*0000448c*/ LDREQ       FP, [R8, #200]              @ 0xc8 
    /*00004490*/ STREQ       R3, [SP, #20] 
    /*00004494*/ LDR         R3, [SP, #24] 
    /*00004498*/ LDR         R2, [SP, #20] 
    /*0000449c*/ CMP         R1, FP 
    /*000044a0*/ CMPEQ       R3, R2 
    /*000044a4*/ LDR         R2, [R5, #156]              @ 0x9c 
    /*000044a8*/ LDR         R1, [R5, #160]              @ 0xa0 
    /*000044ac*/ MOVNE       R3, #1 
    /*000044b0*/ STRBNE      R3, [R5, #216]              @ 0xd8 
    /*000044b4*/ LDR         R0, [R4, #4] 
    /*000044b8*/ LDR         R3, [R4] 
    /*000044bc*/ MLA         R3, R0, R3, R2 
    /*000044c0*/ LDR         R0, [SP, #20] 
    /*000044c4*/ LDR         R2, [R5, #148]              @ 0x94 
    /*000044c8*/ MLA         FP, FP, R0, R1 
    /*000044cc*/ ADD         R2, R2, #1 
    /*000044d0*/ STR         R3, [R5, #156]              @ 0x9c 
    /*000044d4*/ STR         R2, [R5, #148]              @ 0x94 
    /*000044d8*/ LDR         R0, [PC, #676]              @ 0x0000000000004784 
    /*000044dc*/ STR         FP, [R5, #160]              @ 0xa0 
    /*000044e0*/ BL          0x00000000000044E0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000044e4*/ B           VGS_AddOnlineTaskEx_x4540
    VGS_AddOnlineTaskEx_x44e8:
    /*000044e8*/ MOV         R0, R6 
    /*000044ec*/ BL          0x0000000000000854 
    /*000044f0*/ CMP         R0, #0 
    /*000044f4*/ BEQ         VGS_AddOnlineTaskEx_x4244
    VGS_AddOnlineTaskEx_x44f8:
    /*000044f8*/ MOVW        R7, #32771                  @ 0x8003 
    /*000044fc*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00004500*/ B           VGS_AddOnlineTaskEx_x4540
    VGS_AddOnlineTaskEx_x4504:
    /*00004504*/ LDR         R0, [R5, #36]               @ 0x24 
    /*00004508*/ MOVW        R2, #0                      @ .LC74 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe50] 
    /*0000450c*/ LDR         R3, [PC, #628]              @ 0x0000000000004788 
    /*00004510*/ MOVT        R2, #0                      @ .LC74 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe50] 
    /*00004514*/ MOVW        LR, #2374                   @ 0x946 
    VGS_AddOnlineTaskEx_x4518:
    /*00004518*/ STR         R0, [SP, #12] 
    /*0000451c*/ MOV         R1, #45                     @ 0x2d 
    /*00004520*/ MOV         R0, #3 
    /*00004524*/ LDR         IP, [R5, #32] 
    /*00004528*/ STR         R6, [SP, #4] 
    VGS_AddOnlineTaskEx_x452c:
    /*0000452c*/ STR         LR, [SP] 
    /*00004530*/ STR         IP, [SP, #8] 
    /*00004534*/ BL          0x0000000000004534          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004538*/ LDR         R0, [PC, #580]              @ 0x0000000000004784 
    /*0000453c*/ BL          0x000000000000453C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddOnlineTaskEx_x4540:
    /*00004540*/ MOV         R0, R7 
    /*00004544*/ ADD         SP, SP, #44                 @ 0x2c 
    /*00004548*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_AddOnlineTaskEx_x454c:
    /*0000454c*/ MOVW        R2, #0                      @ .LC88 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x122c] 
    /*00004550*/ LDR         R0, [R5, #36]               @ 0x24 
    /*00004554*/ MOVW        LR, #2390                   @ 0x956 
    /*00004558*/ LDR         R3, [PC, #552]              @ 0x0000000000004788 
    /*0000455c*/ MOVT        R2, #0                      @ .LC88 [R_ARM_MOVT_ABS: .rodata.str1.4+0x122c] 
    /*00004560*/ B           VGS_AddOnlineTaskEx_x4518
    VGS_AddOnlineTaskEx_x4564:
    /*00004564*/ MOVW        R2, #0                      @ .LC75 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe9c] 
    /*00004568*/ LDR         R0, [R5, #36]               @ 0x24 
    /*0000456c*/ MOVW        LR, #2382                   @ 0x94e 
    /*00004570*/ LDR         R3, [PC, #528]              @ 0x0000000000004788 
    /*00004574*/ MOVT        R2, #0                      @ .LC75 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe9c] 
    /*00004578*/ B           VGS_AddOnlineTaskEx_x4518
    VGS_AddOnlineTaskEx_x457c:
    /*0000457c*/ MOVW        R3, #2345                   @ 0x929 
    /*00004580*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00004584*/ STR         R3, [SP] 
    /*00004588*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*0000458c*/ LDR         R3, [PC, #500]              @ 0x0000000000004788 
    /*00004590*/ MOV         R1, #45                     @ 0x2d 
    /*00004594*/ MOV         R0, #3 
    /*00004598*/ MOVW        R7, #32784                  @ 0x8010 
    /*0000459c*/ BL          0x000000000000459C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000045a0*/ MOVT        R7, #41005                  @ 0xa02d 
    /*000045a4*/ B           VGS_AddOnlineTaskEx_x4540
    VGS_AddOnlineTaskEx_x45a8:
    /*000045a8*/ MOVW        R2, #0                      @ .LC90 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x12f4] 
    /*000045ac*/ LDR         R0, [R5, #36]               @ 0x24 
    /*000045b0*/ MOVW        LR, #2405                   @ 0x965 
    /*000045b4*/ LDR         R3, [PC, #460]              @ 0x0000000000004788 
    /*000045b8*/ MOVT        R2, #0                      @ .LC90 [R_ARM_MOVT_ABS: .rodata.str1.4+0x12f4] 
    /*000045bc*/ B           VGS_AddOnlineTaskEx_x4518
    VGS_AddOnlineTaskEx_x45c0:
    /*000045c0*/ STR         R2, [SP, #8] 
    /*000045c4*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*000045c8*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*000045cc*/ MOVW        R1, #2365                   @ 0x93d 
    /*000045d0*/ STR         R3, [SP, #4] 
    /*000045d4*/ STR         R1, [SP] 
    VGS_AddOnlineTaskEx_x45d8:
    /*000045d8*/ LDR         R3, [PC, #424]              @ 0x0000000000004788 
    /*000045dc*/ MOV         R1, #45                     @ 0x2d 
    /*000045e0*/ MOV         R0, #3 
    /*000045e4*/ MOVW        R7, #32771                  @ 0x8003 
    /*000045e8*/ BL          0x00000000000045E8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000045ec*/ LDR         R0, [PC, #400]              @ 0x0000000000004784 
    /*000045f0*/ BL          0x00000000000045F0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000045f4*/ MOVT        R7, #41005                  @ 0xa02d 
    /*000045f8*/ MOV         R0, R7 
    /*000045fc*/ ADD         SP, SP, #44                 @ 0x2c 
    /*00004600*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_AddOnlineTaskEx_x4604:
    /*00004604*/ BL          0x0000000000000504 
    /*00004608*/ CMP         R0, #0 
    /*0000460c*/ MOVWNE      R7, #32774                  @ 0x8006 
    /*00004610*/ MOVTNE      R7, #41005                  @ 0xa02d 
    /*00004614*/ BNE         VGS_AddOnlineTaskEx_x4540
    /*00004618*/ B           VGS_AddOnlineTaskEx_x424c
    VGS_AddOnlineTaskEx_x461c:
    /*0000461c*/ MOV         R3, #0 
    /*00004620*/ STR         R3, [R4, #1844]             @ 0x734 
    /*00004624*/ B           VGS_AddOnlineTaskEx_x43c8
    VGS_AddOnlineTaskEx_x4628:
    /*00004628*/ LDR         R3, [R4, #360]              @ 0x168 
    /*0000462c*/ CMP         R3, #1 
    /*00004630*/ MOVLS       R3, #1 
    /*00004634*/ STRBLS      R3, [R5, #214]              @ 0xd6 
    /*00004638*/ B           VGS_AddOnlineTaskEx_x447c
    VGS_AddOnlineTaskEx_x463c:
    /*0000463c*/ MOV         R1, #45                     @ 0x2d 
    /*00004640*/ STR         R7, [SP, #4] 
    /*00004644*/ MOVW        R3, #2457                   @ 0x999 
    /*00004648*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*0000464c*/ STR         R3, [SP] 
    /*00004650*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*00004654*/ LDR         R3, [PC, #300]              @ 0x0000000000004788 
    /*00004658*/ MOV         R0, #3 
    /*0000465c*/ BL          0x000000000000465C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004660*/ LDR         R0, [PC, #284]              @ 0x0000000000004784 
    /*00004664*/ BL          0x0000000000004664          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004668*/ ADD         R1, SP, #36                 @ 0x24 
    /*0000466c*/ LDR         R0, [PC, #268]              @ 0x0000000000004780 
    /*00004670*/ BL          0x0000000000004670          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004674*/ B           VGS_AddOnlineTaskEx_x4540
    VGS_AddOnlineTaskEx_x4678:
    /*00004678*/ STR         R2, [SP, #8] 
    /*0000467c*/ MOVW        R1, #2363                   @ 0x93b 
    /*00004680*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00004684*/ STR         R3, [SP, #4] 
    /*00004688*/ STR         R1, [SP] 
    /*0000468c*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*00004690*/ B           VGS_AddOnlineTaskEx_x45d8
    VGS_AddOnlineTaskEx_x4694:
    /*00004694*/ STR         R2, [SP, #8] 
    /*00004698*/ MOVW        R1, #2364                   @ 0x93c 
    /*0000469c*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*000046a0*/ STR         R3, [SP, #4] 
    /*000046a4*/ STR         R1, [SP] 
    /*000046a8*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*000046ac*/ B           VGS_AddOnlineTaskEx_x45d8
    VGS_AddOnlineTaskEx_x46b0:
    /*000046b0*/ MOV         R1, SL 
    /*000046b4*/ MOV         R2, #336                    @ 0x150 
    /*000046b8*/ LDR         R3, [R1], #8 
    /*000046bc*/ ADD         R0, R4, #744                @ 0x2e8 
    /*000046c0*/ STR         R3, [R4, #1752]             @ 0x6d8 
    /*000046c4*/ BL          0x00000000000046C4          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*000046c8*/ B           VGS_AddOnlineTaskEx_x4358
    VGS_AddOnlineTaskEx_x46cc:
    /*000046cc*/ LDR         R1, [PC, #184]              @ 0x000000000000478c 
    /*000046d0*/ MOVW        R3, #2357                   @ 0x935 
    /*000046d4*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*000046d8*/ STR         R3, [SP] 
    /*000046dc*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*000046e0*/ LDR         R3, [PC, #160]              @ 0x0000000000004788 
    /*000046e4*/ STR         R1, [SP, #4] 
    /*000046e8*/ MOV         R0, #3 
    /*000046ec*/ MOV         R1, #45                     @ 0x2d 
    /*000046f0*/ MOVW        R7, #32771                  @ 0x8003 
    /*000046f4*/ BL          0x00000000000046F4          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000046f8*/ LDR         R0, [PC, #132]              @ 0x0000000000004784 
    /*000046fc*/ BL          0x00000000000046FC          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004700*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00004704*/ B           VGS_AddOnlineTaskEx_x4540
    VGS_AddOnlineTaskEx_x4708:
    /*00004708*/ MOV         R1, #45                     @ 0x2d 
    /*0000470c*/ STR         R3, [SP, #4] 
    /*00004710*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00004714*/ MOVW        R3, #2447                   @ 0x98f 
    /*00004718*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*0000471c*/ STR         R3, [SP] 
    /*00004720*/ MOV         R0, #4 
    /*00004724*/ LDR         R3, [PC, #92]               @ 0x0000000000004788 
    /*00004728*/ BL          0x0000000000004728          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000472c*/ LDR         R0, [PC, #80]               @ 0x0000000000004784 
    /*00004730*/ BL          0x0000000000004730          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004734*/ ADD         R1, SP, #36                 @ 0x24 
    /*00004738*/ LDR         R0, [PC, #64]               @ 0x0000000000004780 
    /*0000473c*/ MOVW        R7, #32777                  @ 0x8009 
    /*00004740*/ BL          0x0000000000004740          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004744*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00004748*/ B           VGS_AddOnlineTaskEx_x4540
    VGS_AddOnlineTaskEx_x474c:
    /*0000474c*/ LDR         R0, [R5, #36]               @ 0x24 
    /*00004750*/ MOVW        R2, #0                      @ .LC89 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1280] 
    /*00004754*/ MOVW        R7, #32771                  @ 0x8003 
    /*00004758*/ MOVW        LR, #2397                   @ 0x95d 
    /*0000475c*/ LDR         R3, [PC, #36]               @ 0x0000000000004788 
    /*00004760*/ MOVT        R2, #0                      @ .LC89 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1280] 
    /*00004764*/ STR         R0, [SP, #12] 
    /*00004768*/ MOV         R1, #45                     @ 0x2d 
    /*0000476c*/ LDR         IP, [R5, #32] 
    /*00004770*/ MOV         R0, #3 
    /*00004774*/ STR         R6, [SP, #4] 
    /*00004778*/ MOVT        R7, #41005                  @ 0xa02d 
    /*0000477c*/ B           VGS_AddOnlineTaskEx_x452c
    /*00004780*/ ANDEQ       R0, R0, R4 
    /*00004784*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00004788*/ ANDEQ       R0, R0, R0, LSL #5 
    /*0000478c*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddOnlineTaskEx


FUNC_BEGIN VGS_AddOnlineTask
    /*00004790*/ PUSH        {R4, R5, R6, LR} 
    /*00004794*/ SUB         SP, SP, #344                @ 0x158 
    /*00004798*/ MOV         R4, R1 
    /*0000479c*/ MOV         R5, R0 
    /*000047a0*/ MOV         R6, R2 
    /*000047a4*/ MOV         R0, SP 
    /*000047a8*/ MOV         R2, #344                    @ 0x158 
    /*000047ac*/ MOV         R1, #0 
    /*000047b0*/ BL          0x00000000000047B0          @ memset [R_ARM_CALL: +0x0] 
    /*000047b4*/ CMP         R4, #0 
    /*000047b8*/ BEQ         VGS_AddOnlineTask_x47f4
    VGS_AddOnlineTask_x47bc:
    /*000047bc*/ MOV         R0, R5 
    /*000047c0*/ MOV         R3, SP 
    /*000047c4*/ MOV         R2, R6 
    /*000047c8*/ MOV         R1, R4 
    /*000047cc*/ MOV         IP, #0 
    /*000047d0*/ STR         IP, [SP, #4] 
    /*000047d4*/ BL          0x00000000000047D4          @ VGS_AddOnlineTaskEx [R_ARM_CALL: .text+0x41f0] 
    /*000047d8*/ SUBS        R5, R0, #0 
    /*000047dc*/ BEQ         VGS_AddOnlineTask_x47e8
    /*000047e0*/ MOV         R0, R4 
    /*000047e4*/ BL          0x00000000000047E4          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddOnlineTask_x47e8:
    /*000047e8*/ MOV         R0, R5 
    /*000047ec*/ ADD         SP, SP, #344                @ 0x158 
    /*000047f0*/ POP         {R4, R5, R6, PC} 
    VGS_AddOnlineTask_x47f4:
    /*000047f4*/ BL          0x0000000000000504 
    /*000047f8*/ CMP         R0, #0 
    /*000047fc*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*00004800*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*00004804*/ BNE         VGS_AddOnlineTask_x47e8
    /*00004808*/ B           VGS_AddOnlineTask_x47bc
FUNC_END VGS_AddOnlineTask


FUNC_BEGIN VGS_Add2ScaleTaskEx
    /*0000480c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00004810*/ SUB         SP, SP, #148                @ 0x94 
    /*00004814*/ MOV         R6, R1 
    /*00004818*/ ADD         R1, SP, #144                @ 0x90 
    /*0000481c*/ MOV         R8, #0 
    /*00004820*/ STR         R0, [SP, #24] 
    /*00004824*/ STR         R2, [SP, #28] 
    /*00004828*/ ADD         R3, R6, #336                @ 0x150 
    /*0000482c*/ STR         R8, [R1, #-88]!             @ 0xffffffa8 
    /*00004830*/ MOV         R2, R6 
    /*00004834*/ ADD         R0, SP, #52                 @ 0x34 
    /*00004838*/ STR         R8, [SP, #44]               @ 0x2c 
    /*0000483c*/ STR         R8, [SP, #48]               @ 0x30 
    /*00004840*/ STR         R8, [SP, #52]               @ 0x34 
    /*00004844*/ BL          0x0000000000004844          @ VGS_DRV_CalTempSize [R_ARM_CALL: .text+0xe498] 
    /*00004848*/ BL          0x0000000000004848          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*0000484c*/ SUBS        R4, R0, #0 
    /*00004850*/ BEQ         VGS_Add2ScaleTaskEx_x4bc4
    /*00004854*/ MOV         R0, #2 
    /*00004858*/ MOV         R3, #45                     @ 0x2d 
    /*0000485c*/ STR         R8, [SP, #64]               @ 0x40 
    /*00004860*/ STR         R3, [SP, #60]               @ 0x3c 
    /*00004864*/ STR         R8, [SP, #68]               @ 0x44 
    /*00004868*/ BL          0x0000000000004868          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000486c*/ ADD         R1, SP, #48                 @ 0x30 
    /*00004870*/ LDR         R3, [R0, #60]               @ 0x3c 
    /*00004874*/ ADD         R0, SP, #60                 @ 0x3c 
    /*00004878*/ BLX         R3 
    /*0000487c*/ LDR         LR, [R6, #360]              @ 0x168 
    /*00004880*/ LDR         IP, [R6, #348]              @ 0x15c 
    /*00004884*/ MOV         R0, #2 
    /*00004888*/ LDR         R2, [SP, #52]               @ 0x34 
    /*0000488c*/ LDR         R5, [R6, #356]              @ 0x164 
    /*00004890*/ LDR         R1, [R6, #352]              @ 0x160 
    /*00004894*/ LDR         R3, [SP, #56]               @ 0x38 
    /*00004898*/ STR         LR, [SP, #92]               @ 0x5c 
    /*0000489c*/ STR         IP, [SP, #72]               @ 0x48 
    /*000048a0*/ STR         R2, [SP, #76]               @ 0x4c 
    /*000048a4*/ STR         R5, [SP, #96]               @ 0x60 
    /*000048a8*/ STR         R1, [SP, #100]              @ 0x64 
    /*000048ac*/ STR         R3, [SP, #80]               @ 0x50 
    /*000048b0*/ STR         R8, [SP, #104]              @ 0x68 
    /*000048b4*/ STR         R8, [SP, #88]               @ 0x58 
    /*000048b8*/ STR         R8, [SP, #84]               @ 0x54 
    /*000048bc*/ BL          0x00000000000048BC          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000048c0*/ ADD         R1, SP, #108                @ 0x6c 
    /*000048c4*/ LDR         R3, [R0, #120]              @ 0x78 
    /*000048c8*/ ADD         R0, SP, #72                 @ 0x48 
    /*000048cc*/ BLX         R3 
    /*000048d0*/ MOV         R0, #1 
    /*000048d4*/ BL          0x00000000000048D4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*000048d8*/ LDR         R3, [SP, #48]               @ 0x30 
    /*000048dc*/ MOV         R2, #2 
    /*000048e0*/ MOV         R1, R8 
    /*000048e4*/ LDR         R5, [R0, #12] 
    /*000048e8*/ LDR         R0, [SP, #108]              @ 0x6c 
    /*000048ec*/ BLX         R5 
    /*000048f0*/ CMN         R0, #1 
    /*000048f4*/ MOV         R9, R0 
    /*000048f8*/ BEQ         VGS_Add2ScaleTaskEx_x4bd0
    /*000048fc*/ MOV         R1, R6 
    /*00004900*/ MOV         R2, #744                    @ 0x2e8 
    /*00004904*/ MOV         R0, R4 
    /*00004908*/ ADD         R5, R4, #336                @ 0x150 
    /*0000490c*/ BL          0x000000000000490C          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00004910*/ LDR         R2, [SP, #52]               @ 0x34 
    /*00004914*/ LDR         R3, [SP, #56]               @ 0x38 
    /*00004918*/ MOV         R0, #1 
    /*0000491c*/ MOV         FP, #0 
    /*00004920*/ MOVW        R7, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00004924*/ STR         R2, [R4, #336]              @ 0x150 
    /*00004928*/ MOVT        R7, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*0000492c*/ STR         R3, [R4, #340]              @ 0x154 
    /*00004930*/ BL          0x0000000000004930          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00004934*/ LDR         R3, [R0, #52]               @ 0x34 
    /*00004938*/ MOV         R0, R9 
    /*0000493c*/ BLX         R3 
    /*00004940*/ MOV         R3, R1 
    /*00004944*/ LDR         R1, [SP, #120]              @ 0x78 
    /*00004948*/ MOV         R2, R0 
    /*0000494c*/ STRD        R2, [R5, #72]               @ 0x48 
    /*00004950*/ ADDS        R2, R2, R1 
    /*00004954*/ MOV         R0, #1 
    /*00004958*/ ADC         R3, R3, #0 
    /*0000495c*/ STRD        R2, [R5, #80]               @ 0x50 
    /*00004960*/ BL          0x0000000000004960          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00004964*/ LDR         R3, [R0, #48]               @ 0x30 
    /*00004968*/ MOV         R0, R9 
    /*0000496c*/ BLX         R3 
    /*00004970*/ LDR         LR, [SP, #120]              @ 0x78 
    /*00004974*/ LDR         IP, [SP, #112]              @ 0x70 
    /*00004978*/ LDR         SL, [SP, #116]              @ 0x74 
    /*0000497c*/ ADDS        R2, R0, LR 
    /*00004980*/ STRD        R0, [R5, #96]               @ 0x60 
    /*00004984*/ ADC         R3, R1, #0 
    /*00004988*/ STRD        R2, [R5, #104]              @ 0x68 
    /*0000498c*/ ADDS        R2, R0, SL 
    /*00004990*/ STR         IP, [R4, #368]              @ 0x170 
    /*00004994*/ STR         IP, [R4, #372]              @ 0x174 
    /*00004998*/ ADC         R3, R1, FP 
    /*0000499c*/ STR         IP, [R4, #376]              @ 0x178 
    /*000049a0*/ MOV         R1, #0 
    /*000049a4*/ STRD        R2, [SP, #8] 
    /*000049a8*/ LDRD        R2, [R5, #72]               @ 0x48 
    /*000049ac*/ LDR         R0, [SP, #132]              @ 0x84 
    /*000049b0*/ ADDS        SL, SL, R2 
    /*000049b4*/ LDR         LR, [SP, #128]              @ 0x80 
    /*000049b8*/ ADC         FP, FP, R3 
    /*000049bc*/ LDRD        R2, [SP, #8] 
    /*000049c0*/ STRD        SL, [R5, #120]              @ 0x78 
    /*000049c4*/ LDR         IP, [SP, #124]              @ 0x7c 
    /*000049c8*/ STRD        R2, [SP, #16] 
    /*000049cc*/ STRD        R2, [R5, #144]              @ 0x90 
    /*000049d0*/ ADDS        R2, SL, R0 
    /*000049d4*/ ADC         R3, FP, R1 
    /*000049d8*/ STRD        R2, [SP, #32] 
    /*000049dc*/ LDRD        R2, [SP, #16] 
    /*000049e0*/ ADDS        R2, R2, R0 
    /*000049e4*/ ADC         R3, R3, R1 
    /*000049e8*/ STRD        R2, [SP, #16] 
    /*000049ec*/ LDRD        R2, [SP, #32] 
    /*000049f0*/ STRD        R2, [R5, #128]              @ 0x80 
    /*000049f4*/ STRD        R2, [R5, #136]              @ 0x88 
    /*000049f8*/ MOV         R2, LR 
    /*000049fc*/ ADDS        R0, SL, R2 
    /*00004a00*/ MOV         R3, #0 
    /*00004a04*/ ADC         R1, FP, R3 
    /*00004a08*/ LDRD        SL, [SP, #8] 
    /*00004a0c*/ LDR         LR, [SP, #140]              @ 0x8c 
    /*00004a10*/ ADDS        SL, SL, R2 
    /*00004a14*/ STRD        R0, [SP, #8] 
    /*00004a18*/ ADC         FP, FP, R3 
    /*00004a1c*/ STRD        SL, [SP, #32] 
    /*00004a20*/ LDRD        SL, [SP, #16] 
    /*00004a24*/ ADDS        R0, R0, LR 
    /*00004a28*/ MOV         R3, #0 
    /*00004a2c*/ ADC         R1, R1, R3 
    /*00004a30*/ STRD        R0, [SP, #16] 
    /*00004a34*/ STRD        SL, [R5, #152]              @ 0x98 
    /*00004a38*/ STRD        SL, [R5, #160]              @ 0xa0 
    /*00004a3c*/ LDRD        SL, [SP, #32] 
    /*00004a40*/ ADDS        R0, SL, LR 
    /*00004a44*/ ADC         R1, FP, R3 
    /*00004a48*/ STRD        R0, [SP, #32] 
    /*00004a4c*/ LDRD        R0, [SP, #8] 
    /*00004a50*/ LDRD        R2, [SP, #16] 
    /*00004a54*/ STR         IP, [R4, #380]              @ 0x17c 
    /*00004a58*/ STR         IP, [R4, #384]              @ 0x180 
    /*00004a5c*/ STR         IP, [R4, #388]              @ 0x184 
    /*00004a60*/ STRD        R0, [R5, #168]              @ 0xa8 
    /*00004a64*/ MOV         R0, #1 
    /*00004a68*/ LDR         R1, [SP, #136]              @ 0x88 
    /*00004a6c*/ STRD        R2, [R5, #176]              @ 0xb0 
    /*00004a70*/ STRD        R2, [R5, #184]              @ 0xb8 
    /*00004a74*/ LDRD        R2, [SP, #32] 
    /*00004a78*/ STRD        SL, [R5, #192]              @ 0xc0 
    /*00004a7c*/ STRD        R2, [R5, #200]              @ 0xc8 
    /*00004a80*/ STRD        R2, [R5, #208]              @ 0xd0 
    /*00004a84*/ STR         R1, [R4, #392]              @ 0x188 
    /*00004a88*/ STR         R1, [R4, #396]              @ 0x18c 
    /*00004a8c*/ STR         R1, [R4, #400]              @ 0x190 
    /*00004a90*/ BL          0x0000000000004A90          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00004a94*/ LDR         R3, [R0, #40]               @ 0x28 
    /*00004a98*/ MOV         R0, R9 
    /*00004a9c*/ BLX         R3 
    /*00004aa0*/ MOV         R3, #45                     @ 0x2d 
    /*00004aa4*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00004aa8*/ STR         R3, [R4, #668]              @ 0x29c 
    /*00004aac*/ STR         R8, [R4, #720]              @ 0x2d0 
    /*00004ab0*/ STR         R0, [R4, #664]              @ 0x298 
    /*00004ab4*/ ADD         R0, R7, #180                @ 0xb4 
    /*00004ab8*/ BL          0x0000000000004AB8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00004abc*/ ADD         IP, R4, #464                @ 0x1d0 
    /*00004ac0*/ LDR         R3, [PC, #320]              @ 0x0000000000004c08 
    /*00004ac4*/ MOV         R1, R4 
    /*00004ac8*/ LDRD        SL, [IP, #-8] 
    /*00004acc*/ MOV         LR, #1 
    /*00004ad0*/ LDR         R2, [SP, #28] 
    /*00004ad4*/ LDR         R0, [SP, #24] 
    /*00004ad8*/ STRD        SL, [SP, #8] 
    /*00004adc*/ STR         LR, [R7, #1052]             @ 0x41c 
    /*00004ae0*/ LDR         FP, [R4, #664]              @ 0x298 
    /*00004ae4*/ BL          0x0000000000004AE4          @ VGS_AddOnlineTaskEx [R_ARM_CALL: .text+0x41f0] 
    /*00004ae8*/ SUBS        SL, R0, #0 
    /*00004aec*/ BNE         VGS_Add2ScaleTaskEx_x4b84
    /*00004af0*/ MOV         R2, #336                    @ 0x150 
    /*00004af4*/ MOV         R1, R6 
    /*00004af8*/ ADD         R0, R7, #1056               @ 0x420 
    /*00004afc*/ STR         R9, [R7, #1048]             @ 0x418 
    /*00004b00*/ MOV         R4, #2 
    /*00004b04*/ STR         R4, [R7, #1052]             @ 0x41c 
    /*00004b08*/ BL          0x0000000000004B08          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00004b0c*/ MOV         R1, R5 
    /*00004b10*/ MOV         R2, #336                    @ 0x150 
    /*00004b14*/ MOV         R0, R6 
    /*00004b18*/ BL          0x0000000000004B18          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00004b1c*/ LDR         R2, [SP, #28] 
    /*00004b20*/ MOV         R1, R6 
    /*00004b24*/ LDR         R0, [SP, #24] 
    /*00004b28*/ LDR         R3, [PC, #216]              @ 0x0000000000004c08 
    /*00004b2c*/ BL          0x0000000000004B2C          @ VGS_AddOnlineTaskEx [R_ARM_CALL: .text+0x41f0] 
    /*00004b30*/ SUBS        SL, R0, #0 
    /*00004b34*/ BNE         VGS_Add2ScaleTaskEx_x4b50
    /*00004b38*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00004b3c*/ ADD         R0, R7, #180                @ 0xb4 
    /*00004b40*/ BL          0x0000000000004B40          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    VGS_Add2ScaleTaskEx_x4b44:
    /*00004b44*/ MOV         R0, SL 
    /*00004b48*/ ADD         SP, SP, #148                @ 0x94 
    /*00004b4c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_Add2ScaleTaskEx_x4b50:
    /*00004b50*/ MOV         R0, #1 
    /*00004b54*/ BL          0x0000000000004B54          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00004b58*/ STR         R4, [SP] 
    /*00004b5c*/ LDRD        R2, [SP, #8] 
    /*00004b60*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00004b64*/ MOV         R0, FP 
    /*00004b68*/ BLX         R1 
    /*00004b6c*/ ADD         R0, R7, #180                @ 0xb4 
    /*00004b70*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00004b74*/ BL          0x0000000000004B74          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004b78*/ MOV         R0, SL 
    /*00004b7c*/ ADD         SP, SP, #148                @ 0x94 
    /*00004b80*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_Add2ScaleTaskEx_x4b84:
    /*00004b84*/ MOV         R0, #1 
    /*00004b88*/ BL          0x0000000000004B88          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00004b8c*/ LDRD        R2, [SP, #8] 
    /*00004b90*/ MOV         R1, #2 
    /*00004b94*/ STR         R1, [SP] 
    /*00004b98*/ LDR         R1, [R0, #64]               @ 0x40 
    /*00004b9c*/ MOV         R0, FP 
    /*00004ba0*/ BLX         R1 
    /*00004ba4*/ MOV         R0, R4 
    /*00004ba8*/ BL          0x0000000000004BA8          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00004bac*/ ADD         R0, R7, #180                @ 0xb4 
    /*00004bb0*/ ADD         R1, SP, #44                 @ 0x2c 
    /*00004bb4*/ BL          0x0000000000004BB4          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004bb8*/ MOV         R0, SL 
    /*00004bbc*/ ADD         SP, SP, #148                @ 0x94 
    /*00004bc0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_Add2ScaleTaskEx_x4bc4:
    /*00004bc4*/ MOVW        SL, #32782                  @ 0x800e 
    /*00004bc8*/ MOVT        SL, #41005                  @ 0xa02d 
    /*00004bcc*/ B           VGS_Add2ScaleTaskEx_x4b44
    VGS_Add2ScaleTaskEx_x4bd0:
    /*00004bd0*/ MOV         R0, R4 
    /*00004bd4*/ MOVW        SL, #32781                  @ 0x800d 
    /*00004bd8*/ BL          0x0000000000004BD8          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00004bdc*/ LDR         R3, [SP, #108]              @ 0x6c 
    /*00004be0*/ MOVW        R0, #2615                   @ 0xa37 
    /*00004be4*/ MOV         R1, #45                     @ 0x2d 
    /*00004be8*/ MOVW        R2, #0                      @ .LC91 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1344] 
    /*00004bec*/ MOVT        R2, #0                      @ .LC91 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1344] 
    /*00004bf0*/ STM         SP, {R0, R3} 
    /*00004bf4*/ MOV         R0, #3 
    /*00004bf8*/ LDR         R3, [PC, #12]               @ 0x0000000000004c0c 
    /*00004bfc*/ MOVT        SL, #41005                  @ 0xa02d 
    /*00004c00*/ BL          0x0000000000004C00          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004c04*/ B           VGS_Add2ScaleTaskEx_x4b44
    /*00004c08*/ ANDEQ       R0, R0, R8, LSL R4 
    /*00004c0c*/ MULEQ       R0, R4, R2 
FUNC_END VGS_Add2ScaleTaskEx


FUNC_BEGIN VGS_Add2ScaleTask
    /*00004c10*/ PUSH        {R4, R5, LR} 
    /*00004c14*/ SUB         SP, SP, #324                @ 0x144 
    /*00004c18*/ MOV         R4, R1 
    /*00004c1c*/ MOV         R5, R0 
    /*00004c20*/ MOV         R2, #320                    @ 0x140 
    /*00004c24*/ MOV         R0, SP 
    /*00004c28*/ MOV         R1, #0 
    /*00004c2c*/ BL          0x0000000000004C2C          @ memset [R_ARM_CALL: +0x0] 
    /*00004c30*/ CMP         R4, #0 
    /*00004c34*/ BEQ         VGS_Add2ScaleTask_x4ca4
    VGS_Add2ScaleTask_x4c38:
    /*00004c38*/ ADD         R1, R4, #336                @ 0x150 
    /*00004c3c*/ MOV         R0, R4 
    /*00004c40*/ BL          0x0000000000004C40          @ VGS_DRV_IsNeed2Scale [R_ARM_CALL: .text+0xe448] 
    /*00004c44*/ CMP         R0, #0 
    /*00004c48*/ BEQ         VGS_Add2ScaleTask_x4c84
    /*00004c4c*/ MOV         R0, R5 
    /*00004c50*/ MOV         R2, SP 
    /*00004c54*/ MOV         R1, R4 
    /*00004c58*/ BL          0x0000000000004C58          @ VGS_Add2ScaleTaskEx [R_ARM_CALL: .text+0x480c] 
    /*00004c5c*/ SUBS        R5, R0, #0 
    /*00004c60*/ BNE         VGS_Add2ScaleTask_x4c70
    VGS_Add2ScaleTask_x4c64:
    /*00004c64*/ MOV         R0, R5 
    /*00004c68*/ ADD         SP, SP, #324                @ 0x144 
    /*00004c6c*/ POP         {R4, R5, PC} 
    VGS_Add2ScaleTask_x4c70:
    /*00004c70*/ MOV         R0, R4 
    /*00004c74*/ BL          0x0000000000004C74          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00004c78*/ MOV         R0, R5 
    /*00004c7c*/ ADD         SP, SP, #324                @ 0x144 
    /*00004c80*/ POP         {R4, R5, PC} 
    VGS_Add2ScaleTask_x4c84:
    /*00004c84*/ MOV         R2, SP 
    /*00004c88*/ MOV         R1, R4 
    /*00004c8c*/ MOV         R0, R5 
    /*00004c90*/ BL          0x0000000000004C90          @ VGS_AddOnlineTask [R_ARM_CALL: .text+0x4790] 
    /*00004c94*/ MOV         R5, R0 
    /*00004c98*/ MOV         R0, R5 
    /*00004c9c*/ ADD         SP, SP, #324                @ 0x144 
    /*00004ca0*/ POP         {R4, R5, PC} 
    VGS_Add2ScaleTask_x4ca4:
    /*00004ca4*/ BL          0x0000000000000504 
    /*00004ca8*/ CMP         R0, #0 
    /*00004cac*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*00004cb0*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*00004cb4*/ BNE         VGS_Add2ScaleTask_x4c64
    /*00004cb8*/ B           VGS_Add2ScaleTask_x4c38
FUNC_END VGS_Add2ScaleTask


FUNC_BEGIN VGS_AddBypassTaskEx
    /*00004cbc*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00004cc0*/ SUBS        R6, R0, #0 
    /*00004cc4*/ SUB         SP, SP, #24 
    /*00004cc8*/ MOV         R3, #0 
    /*00004ccc*/ MOV         R4, R1 
    /*00004cd0*/ STR         R3, [SP, #20] 
    /*00004cd4*/ BLT         VGS_AddBypassTaskEx_x4dcc
    /*00004cd8*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00004cdc*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00004ce0*/ LDR         R3, [R3] 
    /*00004ce4*/ CMP         R3, R6 
    /*00004ce8*/ BLS         VGS_AddBypassTaskEx_x4dcc
    VGS_AddBypassTaskEx_x4cec:
    /*00004cec*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00004cf0*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00004cf4*/ LDR         R3, [R5] 
    /*00004cf8*/ CMP         R3, #1 
    /*00004cfc*/ BNE         VGS_AddBypassTaskEx_x4e34
    /*00004d00*/ ADD         R0, R5, #16 
    /*00004d04*/ BL          0x0000000000004D04          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00004d08*/ LDR         R3, [R5, #8] 
    /*00004d0c*/ LDR         R3, [R3, #4] 
    /*00004d10*/ LDR         R5, [R3, R6, LSL #2] 
    /*00004d14*/ LDR         R0, [R5, #20] 
    /*00004d18*/ CMP         R0, #1 
    /*00004d1c*/ BEQ         VGS_AddBypassTaskEx_x4d2c
    /*00004d20*/ BL          0x0000000000000894 
    /*00004d24*/ CMP         R0, #0 
    /*00004d28*/ BNE         VGS_AddBypassTaskEx_x4ddc
    VGS_AddBypassTaskEx_x4d2c:
    /*00004d2c*/ LDR         R2, [R5, #32] 
    /*00004d30*/ LDR         R3, [R4, #724]              @ 0x2d4 
    /*00004d34*/ CMP         R2, R3 
    /*00004d38*/ BNE         VGS_AddBypassTaskEx_x4ea4
    /*00004d3c*/ LDR         R2, [R5, #36]               @ 0x24 
    /*00004d40*/ LDR         R3, [R4, #728]              @ 0x2d8 
    /*00004d44*/ CMP         R2, R3 
    /*00004d48*/ BNE         VGS_AddBypassTaskEx_x4ee8
    /*00004d4c*/ LDR         R2, [R5, #40]               @ 0x28 
    /*00004d50*/ LDR         R3, [R4, #732]              @ 0x2dc 
    /*00004d54*/ CMP         R2, R3 
    /*00004d58*/ BNE         VGS_AddBypassTaskEx_x4f04
    /*00004d5c*/ LDR         R3, [R5, #100]              @ 0x64 
    /*00004d60*/ CMP         R3, #0 
    /*00004d64*/ BNE         VGS_AddBypassTaskEx_x4f20
    /*00004d68*/ MOV         R8, #3 
    /*00004d6c*/ LDR         R0, [PC, #484]              @ 0x0000000000004f58 
    /*00004d70*/ ADD         R1, SP, #20 
    /*00004d74*/ STR         R8, [R4, #1756]             @ 0x6dc 
    /*00004d78*/ BL          0x0000000000004D78          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00004d7c*/ LDR         R7, [R5, #20] 
    /*00004d80*/ CMP         R7, #1 
    /*00004d84*/ BNE         VGS_AddBypassTaskEx_x4e60
    /*00004d88*/ MOV         R0, R4 
    /*00004d8c*/ SUB         R4, R4, #8 
    /*00004d90*/ BL          0x0000000000004D90          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*00004d94*/ SUBS        R6, R0, #0 
    /*00004d98*/ BNE         VGS_AddBypassTaskEx_x4df0
    /*00004d9c*/ MOV         R0, R4 
    /*00004da0*/ MOV         R1, R5 
    /*00004da4*/ BL          0x0000000000004DA4          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*00004da8*/ LDR         R0, [PC, #424]              @ 0x0000000000004f58 
    /*00004dac*/ ADD         R1, SP, #20 
    /*00004db0*/ BL          0x0000000000004DB0          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004db4*/ STRB        R7, [R5, #223]              @ 0xdf 
    /*00004db8*/ LDR         R0, [PC, #412]              @ 0x0000000000004f5c 
    /*00004dbc*/ BL          0x0000000000004DBC          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddBypassTaskEx_x4dc0:
    /*00004dc0*/ MOV         R0, R6 
    /*00004dc4*/ ADD         SP, SP, #24 
    /*00004dc8*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_AddBypassTaskEx_x4dcc:
    /*00004dcc*/ MOV         R0, R6 
    /*00004dd0*/ BL          0x0000000000000854 
    /*00004dd4*/ CMP         R0, #0 
    /*00004dd8*/ BEQ         VGS_AddBypassTaskEx_x4cec
    VGS_AddBypassTaskEx_x4ddc:
    /*00004ddc*/ MOVW        R6, #32771                  @ 0x8003 
    /*00004de0*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00004de4*/ MOV         R0, R6 
    /*00004de8*/ ADD         SP, SP, #24 
    /*00004dec*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_AddBypassTaskEx_x4df0:
    /*00004df0*/ MOV         R1, #45                     @ 0x2d 
    /*00004df4*/ STR         R6, [SP, #4] 
    /*00004df8*/ MOV         R0, R8 
    /*00004dfc*/ MOVW        R3, #2779                   @ 0xadb 
    /*00004e00*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*00004e04*/ STR         R3, [SP] 
    /*00004e08*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*00004e0c*/ LDR         R3, [PC, #332]              @ 0x0000000000004f60 
    /*00004e10*/ BL          0x0000000000004E10          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004e14*/ LDR         R0, [PC, #320]              @ 0x0000000000004f5c 
    /*00004e18*/ BL          0x0000000000004E18          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004e1c*/ ADD         R1, SP, #20 
    /*00004e20*/ LDR         R0, [PC, #304]              @ 0x0000000000004f58 
    /*00004e24*/ BL          0x0000000000004E24          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004e28*/ MOV         R0, R6 
    /*00004e2c*/ ADD         SP, SP, #24 
    /*00004e30*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_AddBypassTaskEx_x4e34:
    /*00004e34*/ MOVW        R3, #2737                   @ 0xab1 
    /*00004e38*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*00004e3c*/ STR         R3, [SP] 
    /*00004e40*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00004e44*/ LDR         R3, [PC, #276]              @ 0x0000000000004f60 
    /*00004e48*/ MOV         R1, #45                     @ 0x2d 
    /*00004e4c*/ MOV         R0, #3 
    /*00004e50*/ MOVW        R6, #32784                  @ 0x8010 
    /*00004e54*/ BL          0x0000000000004E54          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004e58*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00004e5c*/ B           VGS_AddBypassTaskEx_x4dc0
    VGS_AddBypassTaskEx_x4e60:
    /*00004e60*/ MOV         R1, #45                     @ 0x2d 
    /*00004e64*/ MOVW        R3, #2769                   @ 0xad1 
    /*00004e68*/ STR         R7, [SP, #4] 
    /*00004e6c*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00004e70*/ STR         R3, [SP] 
    /*00004e74*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*00004e78*/ LDR         R3, [PC, #224]              @ 0x0000000000004f60 
    /*00004e7c*/ MOV         R0, #4 
    /*00004e80*/ BL          0x0000000000004E80          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004e84*/ LDR         R0, [PC, #208]              @ 0x0000000000004f5c 
    /*00004e88*/ BL          0x0000000000004E88          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004e8c*/ ADD         R1, SP, #20 
    /*00004e90*/ LDR         R0, [PC, #192]              @ 0x0000000000004f58 
    /*00004e94*/ MOVW        R6, #32777                  @ 0x8009 
    /*00004e98*/ BL          0x0000000000004E98          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00004e9c*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00004ea0*/ B           VGS_AddBypassTaskEx_x4dc0
    VGS_AddBypassTaskEx_x4ea4:
    /*00004ea4*/ STR         R2, [SP, #8] 
    /*00004ea8*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00004eac*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*00004eb0*/ MOVW        R1, #2747                   @ 0xabb 
    /*00004eb4*/ STR         R3, [SP, #4] 
    /*00004eb8*/ STR         R1, [SP] 
    VGS_AddBypassTaskEx_x4ebc:
    /*00004ebc*/ LDR         R3, [PC, #156]              @ 0x0000000000004f60 
    /*00004ec0*/ MOV         R1, #45                     @ 0x2d 
    /*00004ec4*/ MOV         R0, #3 
    /*00004ec8*/ MOVW        R6, #32771                  @ 0x8003 
    /*00004ecc*/ BL          0x0000000000004ECC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004ed0*/ LDR         R0, [PC, #132]              @ 0x0000000000004f5c 
    /*00004ed4*/ BL          0x0000000000004ED4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004ed8*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00004edc*/ MOV         R0, R6 
    /*00004ee0*/ ADD         SP, SP, #24 
    /*00004ee4*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_AddBypassTaskEx_x4ee8:
    /*00004ee8*/ STR         R2, [SP, #8] 
    /*00004eec*/ MOVW        R1, #2748                   @ 0xabc 
    /*00004ef0*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*00004ef4*/ STR         R3, [SP, #4] 
    /*00004ef8*/ STR         R1, [SP] 
    /*00004efc*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*00004f00*/ B           VGS_AddBypassTaskEx_x4ebc
    VGS_AddBypassTaskEx_x4f04:
    /*00004f04*/ STR         R2, [SP, #8] 
    /*00004f08*/ MOVW        R1, #2749                   @ 0xabd 
    /*00004f0c*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*00004f10*/ STR         R3, [SP, #4] 
    /*00004f14*/ STR         R1, [SP] 
    /*00004f18*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*00004f1c*/ B           VGS_AddBypassTaskEx_x4ebc
    VGS_AddBypassTaskEx_x4f20:
    /*00004f20*/ LDR         R1, [PC, #60]               @ 0x0000000000004f64 
    /*00004f24*/ MOVW        R0, #2754                   @ 0xac2 
    /*00004f28*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*00004f2c*/ STR         R0, [SP] 
    /*00004f30*/ ADD         R3, R1, R3, LSL #3 
    /*00004f34*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*00004f38*/ STR         R3, [SP, #4] 
    /*00004f3c*/ MOV         R1, #45                     @ 0x2d 
    /*00004f40*/ LDR         R3, [PC, #24]               @ 0x0000000000004f60 
    /*00004f44*/ MOV         R0, #3 
    /*00004f48*/ BL          0x0000000000004F48          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00004f4c*/ LDR         R0, [PC, #8]                @ 0x0000000000004f5c 
    /*00004f50*/ BL          0x0000000000004F50          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00004f54*/ B           VGS_AddBypassTaskEx_x4ddc
    /*00004f58*/ ANDEQ       R0, R0, R4 
    /*00004f5c*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00004f60*/ ANDEQ       R0, R0, R8, LSR #5 
    /*00004f64*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddBypassTaskEx


FUNC_BEGIN VGS_AddBypassTask
    /*00004f68*/ PUSH        {R4, R5, R6, LR} 
    /*00004f6c*/ SUBS        R4, R1, #0 
    /*00004f70*/ MOV         R5, R0 
    /*00004f74*/ BEQ         VGS_AddBypassTask_x4f9c
    VGS_AddBypassTask_x4f78:
    /*00004f78*/ MOV         R0, R5 
    /*00004f7c*/ MOV         R1, R4 
    /*00004f80*/ BL          0x0000000000004F80          @ VGS_AddBypassTaskEx [R_ARM_CALL: .text+0x4cbc] 
    /*00004f84*/ SUBS        R5, R0, #0 
    /*00004f88*/ BEQ         VGS_AddBypassTask_x4f94
    /*00004f8c*/ MOV         R0, R4 
    /*00004f90*/ BL          0x0000000000004F90          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddBypassTask_x4f94:
    /*00004f94*/ MOV         R0, R5 
    /*00004f98*/ POP         {R4, R5, R6, PC} 
    VGS_AddBypassTask_x4f9c:
    /*00004f9c*/ BL          0x0000000000000504 
    /*00004fa0*/ CMP         R0, #0 
    /*00004fa4*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*00004fa8*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*00004fac*/ BNE         VGS_AddBypassTask_x4f94
    /*00004fb0*/ B           VGS_AddBypassTask_x4f78
FUNC_END VGS_AddBypassTask


FUNC_BEGIN VGS_AddQuickCopyTaskEx
    /*00004fb4*/ PUSH        {R4, R5, R6, R7, LR} 
    /*00004fb8*/ SUB         SP, SP, #28 
    /*00004fbc*/ MOV         R3, #0 
    /*00004fc0*/ MOV         R6, R0 
    /*00004fc4*/ MOV         R5, R1 
    /*00004fc8*/ STR         R3, [SP, #20] 
    /*00004fcc*/ BL          0x0000000000004FCC          @ VGS_HAL_IsSupportOSDMode [R_ARM_CALL: .text+0xffd4] 
    /*00004fd0*/ CMP         R0, #1 
    /*00004fd4*/ BNE         VGS_AddQuickCopyTaskEx_x5230
    /*00004fd8*/ CMP         R6, #0 
    /*00004fdc*/ BLT         VGS_AddQuickCopyTaskEx_x5144
    /*00004fe0*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00004fe4*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00004fe8*/ LDR         R3, [R3] 
    /*00004fec*/ CMP         R3, R6 
    /*00004ff0*/ BLS         VGS_AddQuickCopyTaskEx_x5144
    VGS_AddQuickCopyTaskEx_x4ff4:
    /*00004ff4*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00004ff8*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00004ffc*/ LDR         R3, [R4] 
    /*00005000*/ CMP         R3, #1 
    /*00005004*/ BNE         VGS_AddQuickCopyTaskEx_x51ec
    /*00005008*/ ADD         R0, R4, #16 
    /*0000500c*/ BL          0x000000000000500C          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00005010*/ LDR         R3, [R4, #8] 
    /*00005014*/ LDR         R3, [R3, #4] 
    /*00005018*/ LDR         R4, [R3, R6, LSL #2] 
    /*0000501c*/ LDR         R0, [R4, #20] 
    /*00005020*/ CMP         R0, #1 
    /*00005024*/ BEQ         VGS_AddQuickCopyTaskEx_x5034
    /*00005028*/ BL          0x0000000000000894 
    /*0000502c*/ CMP         R0, #0 
    /*00005030*/ BNE         VGS_AddQuickCopyTaskEx_x5154
    VGS_AddQuickCopyTaskEx_x5034:
    /*00005034*/ LDR         R2, [R4, #32] 
    /*00005038*/ LDR         R3, [R5, #724]              @ 0x2d4 
    /*0000503c*/ CMP         R2, R3 
    /*00005040*/ BNE         VGS_AddQuickCopyTaskEx_x525c
    /*00005044*/ LDR         R2, [R4, #36]               @ 0x24 
    /*00005048*/ LDR         R3, [R5, #728]              @ 0x2d8 
    /*0000504c*/ CMP         R2, R3 
    /*00005050*/ BNE         VGS_AddQuickCopyTaskEx_x52a0
    /*00005054*/ LDR         R2, [R4, #40]               @ 0x28 
    /*00005058*/ LDR         R3, [R5, #732]              @ 0x2dc 
    /*0000505c*/ CMP         R2, R3 
    /*00005060*/ BNE         VGS_AddQuickCopyTaskEx_x52d8
    /*00005064*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00005068*/ CMP         R3, #0 
    /*0000506c*/ BEQ         VGS_AddQuickCopyTaskEx_x5338
    /*00005070*/ MOV         R0, R5 
    /*00005074*/ BL          0x0000000000005074          @ VGS_DRV_CheckImageQuickCopy [R_ARM_CALL: .text+0xebd4] 
    /*00005078*/ SUBS        R7, R0, #0 
    /*0000507c*/ BNE         VGS_AddQuickCopyTaskEx_x5160
    /*00005080*/ ADD         R0, R5, #336                @ 0x150 
    /*00005084*/ BL          0x0000000000005084          @ VGS_DRV_CheckImageQuickCopy [R_ARM_CALL: .text+0xebd4] 
    /*00005088*/ SUBS        R7, R0, #0 
    /*0000508c*/ BNE         VGS_AddQuickCopyTaskEx_x5218
    /*00005090*/ LDR         R3, [R5, #12] 
    /*00005094*/ LDR         R2, [R5, #348]              @ 0x15c 
    /*00005098*/ CMP         R3, R2 
    /*0000509c*/ BNE         VGS_AddQuickCopyTaskEx_x52bc
    /*000050a0*/ MOV         R3, #5 
    /*000050a4*/ LDR         R0, [PC, #712]              @ 0x0000000000005374 
    /*000050a8*/ ADD         R1, SP, #20 
    /*000050ac*/ STR         R3, [R5, #1756]             @ 0x6dc 
    /*000050b0*/ BL          0x00000000000050B0          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000050b4*/ LDR         R6, [R4, #20] 
    /*000050b8*/ CMP         R6, #1 
    /*000050bc*/ BNE         VGS_AddQuickCopyTaskEx_x52f4
    /*000050c0*/ MOV         R0, R5 
    /*000050c4*/ BL          0x00000000000050C4          @ VGS_VbAdd [R_ARM_CALL: .text+0xe68] 
    /*000050c8*/ SUBS        R7, R0, #0 
    /*000050cc*/ BNE         VGS_AddQuickCopyTaskEx_x51a8
    /*000050d0*/ MOV         R1, R4 
    /*000050d4*/ SUB         R0, R5, #8 
    /*000050d8*/ BL          0x00000000000050D8          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*000050dc*/ ADD         R1, SP, #20 
    /*000050e0*/ LDR         R0, [PC, #652]              @ 0x0000000000005374 
    /*000050e4*/ BL          0x00000000000050E4          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000050e8*/ LDR         R3, [R5, #20] 
    /*000050ec*/ LDR         R0, [R4, #160]              @ 0xa0 
    /*000050f0*/ LDR         LR, [R4, #156]              @ 0x9c 
    /*000050f4*/ STR         R3, [R4, #204]              @ 0xcc 
    /*000050f8*/ LDR         R3, [R5, #356]              @ 0x164 
    /*000050fc*/ STRB        R6, [R4, #220]              @ 0xdc 
    /*00005100*/ LDR         R1, [R4, #148]              @ 0x94 
    /*00005104*/ STR         R3, [R4, #208]              @ 0xd0 
    /*00005108*/ LDR         R2, [R5] 
    /*0000510c*/ ADD         R1, R1, #1 
    /*00005110*/ LDR         R6, [R5, #4] 
    /*00005114*/ LDR         R3, [R5, #336]              @ 0x150 
    /*00005118*/ LDR         IP, [R5, #340]              @ 0x154 
    /*0000511c*/ MLA         R2, R6, R2, LR 
    /*00005120*/ STR         R1, [R4, #148]              @ 0x94 
    /*00005124*/ MLA         R3, IP, R3, R0 
    /*00005128*/ LDR         R0, [PC, #584]              @ 0x0000000000005378 
    /*0000512c*/ STR         R2, [R4, #156]              @ 0x9c 
    /*00005130*/ STR         R3, [R4, #160]              @ 0xa0 
    /*00005134*/ BL          0x0000000000005134          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00005138*/ MOV         R0, R7 
    /*0000513c*/ ADD         SP, SP, #28 
    /*00005140*/ POP         {R4, R5, R6, R7, PC} 
    VGS_AddQuickCopyTaskEx_x5144:
    /*00005144*/ MOV         R0, R6 
    /*00005148*/ BL          0x0000000000000854 
    /*0000514c*/ CMP         R0, #0 
    /*00005150*/ BEQ         VGS_AddQuickCopyTaskEx_x4ff4
    VGS_AddQuickCopyTaskEx_x5154:
    /*00005154*/ MOVW        R7, #32771                  @ 0x8003 
    /*00005158*/ MOVT        R7, #41005                  @ 0xa02d 
    /*0000515c*/ B           VGS_AddQuickCopyTaskEx_x519c
    VGS_AddQuickCopyTaskEx_x5160:
    /*00005160*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00005164*/ MOVW        R2, #0                      @ .LC74 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe50] 
    /*00005168*/ LDR         R3, [PC, #524]              @ 0x000000000000537c 
    /*0000516c*/ MOVT        R2, #0                      @ .LC74 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe50] 
    /*00005170*/ MOVW        LR, #2875                   @ 0xb3b 
    VGS_AddQuickCopyTaskEx_x5174:
    /*00005174*/ STR         R0, [SP, #12] 
    /*00005178*/ MOV         R1, #45                     @ 0x2d 
    /*0000517c*/ LDR         IP, [R4, #32] 
    /*00005180*/ MOV         R0, #3 
    /*00005184*/ STR         R6, [SP, #4] 
    /*00005188*/ STR         LR, [SP] 
    /*0000518c*/ STR         IP, [SP, #8] 
    /*00005190*/ BL          0x0000000000005190          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005194*/ LDR         R0, [PC, #476]              @ 0x0000000000005378 
    /*00005198*/ BL          0x0000000000005198          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_AddQuickCopyTaskEx_x519c:
    /*0000519c*/ MOV         R0, R7 
    /*000051a0*/ ADD         SP, SP, #28 
    /*000051a4*/ POP         {R4, R5, R6, R7, PC} 
    VGS_AddQuickCopyTaskEx_x51a8:
    /*000051a8*/ MOV         R1, #45                     @ 0x2d 
    /*000051ac*/ STR         R7, [SP, #4] 
    /*000051b0*/ MOVW        R3, #2917                   @ 0xb65 
    /*000051b4*/ MOVW        R2, #0                      @ .LC80 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1030] 
    /*000051b8*/ STR         R3, [SP] 
    /*000051bc*/ MOVT        R2, #0                      @ .LC80 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1030] 
    /*000051c0*/ LDR         R3, [PC, #436]              @ 0x000000000000537c 
    /*000051c4*/ MOV         R0, #3 
    /*000051c8*/ BL          0x00000000000051C8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000051cc*/ LDR         R0, [PC, #420]              @ 0x0000000000005378 
    /*000051d0*/ BL          0x00000000000051D0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000051d4*/ ADD         R1, SP, #20 
    /*000051d8*/ LDR         R0, [PC, #404]              @ 0x0000000000005374 
    /*000051dc*/ BL          0x00000000000051DC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000051e0*/ MOV         R0, R7 
    /*000051e4*/ ADD         SP, SP, #28 
    /*000051e8*/ POP         {R4, R5, R6, R7, PC} 
    VGS_AddQuickCopyTaskEx_x51ec:
    /*000051ec*/ MOVW        R3, #2846                   @ 0xb1e 
    /*000051f0*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*000051f4*/ STR         R3, [SP] 
    /*000051f8*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*000051fc*/ LDR         R3, [PC, #376]              @ 0x000000000000537c 
    /*00005200*/ MOV         R1, #45                     @ 0x2d 
    /*00005204*/ MOV         R0, #3 
    /*00005208*/ MOVW        R7, #32784                  @ 0x8010 
    /*0000520c*/ BL          0x000000000000520C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005210*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00005214*/ B           VGS_AddQuickCopyTaskEx_x519c
    VGS_AddQuickCopyTaskEx_x5218:
    /*00005218*/ MOVW        R2, #0                      @ .LC75 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe9c] 
    /*0000521c*/ LDR         R0, [R4, #36]               @ 0x24 
    /*00005220*/ MOVW        LR, #2883                   @ 0xb43 
    /*00005224*/ LDR         R3, [PC, #336]              @ 0x000000000000537c 
    /*00005228*/ MOVT        R2, #0                      @ .LC75 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe9c] 
    /*0000522c*/ B           VGS_AddQuickCopyTaskEx_x5174
    VGS_AddQuickCopyTaskEx_x5230:
    /*00005230*/ MOVW        R3, #2838                   @ 0xb16 
    /*00005234*/ MOVW        R2, #0                      @ .LC92 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1374] 
    /*00005238*/ STR         R3, [SP] 
    /*0000523c*/ MOVT        R2, #0                      @ .LC92 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1374] 
    /*00005240*/ LDR         R3, [PC, #308]              @ 0x000000000000537c 
    /*00005244*/ MOV         R1, #45                     @ 0x2d 
    /*00005248*/ MOV         R0, #3 
    /*0000524c*/ MOVW        R7, #32776                  @ 0x8008 
    /*00005250*/ BL          0x0000000000005250          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005254*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00005258*/ B           VGS_AddQuickCopyTaskEx_x519c
    VGS_AddQuickCopyTaskEx_x525c:
    /*0000525c*/ STR         R2, [SP, #8] 
    /*00005260*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*00005264*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*00005268*/ MOVW        R1, #2856                   @ 0xb28 
    /*0000526c*/ STR         R3, [SP, #4] 
    /*00005270*/ STR         R1, [SP] 
    VGS_AddQuickCopyTaskEx_x5274:
    /*00005274*/ LDR         R3, [PC, #256]              @ 0x000000000000537c 
    /*00005278*/ MOV         R1, #45                     @ 0x2d 
    /*0000527c*/ MOV         R0, #3 
    /*00005280*/ MOVW        R7, #32771                  @ 0x8003 
    /*00005284*/ BL          0x0000000000005284          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005288*/ LDR         R0, [PC, #232]              @ 0x0000000000005378 
    /*0000528c*/ BL          0x000000000000528C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00005290*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00005294*/ MOV         R0, R7 
    /*00005298*/ ADD         SP, SP, #28 
    /*0000529c*/ POP         {R4, R5, R6, R7, PC} 
    VGS_AddQuickCopyTaskEx_x52a0:
    /*000052a0*/ STR         R2, [SP, #8] 
    /*000052a4*/ MOVW        R1, #2857                   @ 0xb29 
    /*000052a8*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*000052ac*/ STR         R3, [SP, #4] 
    /*000052b0*/ STR         R1, [SP] 
    /*000052b4*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*000052b8*/ B           VGS_AddQuickCopyTaskEx_x5274
    VGS_AddQuickCopyTaskEx_x52bc:
    /*000052bc*/ STR         R2, [SP, #8] 
    /*000052c0*/ MOVW        R1, #2891                   @ 0xb4b 
    /*000052c4*/ MOVW        R2, #0                      @ .LC93 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x13ac] 
    /*000052c8*/ STR         R3, [SP, #4] 
    /*000052cc*/ STR         R1, [SP] 
    /*000052d0*/ MOVT        R2, #0                      @ .LC93 [R_ARM_MOVT_ABS: .rodata.str1.4+0x13ac] 
    /*000052d4*/ B           VGS_AddQuickCopyTaskEx_x5274
    VGS_AddQuickCopyTaskEx_x52d8:
    /*000052d8*/ STR         R2, [SP, #8] 
    /*000052dc*/ MOVW        R1, #2858                   @ 0xb2a 
    /*000052e0*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*000052e4*/ STR         R3, [SP, #4] 
    /*000052e8*/ STR         R1, [SP] 
    /*000052ec*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*000052f0*/ B           VGS_AddQuickCopyTaskEx_x5274
    VGS_AddQuickCopyTaskEx_x52f4:
    /*000052f4*/ MOV         R1, #45                     @ 0x2d 
    /*000052f8*/ MOVW        R3, #2907                   @ 0xb5b 
    /*000052fc*/ STR         R6, [SP, #4] 
    /*00005300*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*00005304*/ STR         R3, [SP] 
    /*00005308*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*0000530c*/ LDR         R3, [PC, #104]              @ 0x000000000000537c 
    /*00005310*/ MOV         R0, #4 
    /*00005314*/ BL          0x0000000000005314          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005318*/ LDR         R0, [PC, #88]               @ 0x0000000000005378 
    /*0000531c*/ BL          0x000000000000531C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00005320*/ ADD         R1, SP, #20 
    /*00005324*/ LDR         R0, [PC, #72]               @ 0x0000000000005374 
    /*00005328*/ MOVW        R7, #32777                  @ 0x8009 
    /*0000532c*/ BL          0x000000000000532C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00005330*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00005334*/ B           VGS_AddQuickCopyTaskEx_x519c
    VGS_AddQuickCopyTaskEx_x5338:
    /*00005338*/ LDR         R1, [PC, #64]               @ 0x0000000000005380 
    /*0000533c*/ MOVW        R3, #2863                   @ 0xb2f 
    /*00005340*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*00005344*/ STR         R3, [SP] 
    /*00005348*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*0000534c*/ LDR         R3, [PC, #40]               @ 0x000000000000537c 
    /*00005350*/ STR         R1, [SP, #4] 
    /*00005354*/ MOV         R0, #3 
    /*00005358*/ MOV         R1, #45                     @ 0x2d 
    /*0000535c*/ MOVW        R7, #32771                  @ 0x8003 
    /*00005360*/ BL          0x0000000000005360          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005364*/ LDR         R0, [PC, #12]               @ 0x0000000000005378 
    /*00005368*/ BL          0x0000000000005368          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000536c*/ MOVT        R7, #41005                  @ 0xa02d 
    /*00005370*/ B           VGS_AddQuickCopyTaskEx_x519c
    /*00005374*/ ANDEQ       R0, R0, R4 
    /*00005378*/ ANDEQ       R0, R0, R0, LSL R0 
    /*0000537c*/ @           <UNDEFINED> instruction: 0x000002bc 
    /*00005380*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddQuickCopyTaskEx


FUNC_BEGIN VGS_AddQuickCopyTask
    /*00005384*/ PUSH        {R4, R5, R6, LR} 
    /*00005388*/ SUBS        R4, R1, #0 
    /*0000538c*/ MOV         R5, R0 
    /*00005390*/ BEQ         VGS_AddQuickCopyTask_x53b8
    VGS_AddQuickCopyTask_x5394:
    /*00005394*/ MOV         R0, R5 
    /*00005398*/ MOV         R1, R4 
    /*0000539c*/ BL          0x000000000000539C          @ VGS_AddQuickCopyTaskEx [R_ARM_CALL: .text+0x4fb4] 
    /*000053a0*/ SUBS        R5, R0, #0 
    /*000053a4*/ BEQ         VGS_AddQuickCopyTask_x53b0
    /*000053a8*/ MOV         R0, R4 
    /*000053ac*/ BL          0x00000000000053AC          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddQuickCopyTask_x53b0:
    /*000053b0*/ MOV         R0, R5 
    /*000053b4*/ POP         {R4, R5, R6, PC} 
    VGS_AddQuickCopyTask_x53b8:
    /*000053b8*/ BL          0x0000000000000504 
    /*000053bc*/ CMP         R0, #0 
    /*000053c0*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*000053c4*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*000053c8*/ BNE         VGS_AddQuickCopyTask_x53b0
    /*000053cc*/ B           VGS_AddQuickCopyTask_x5394
FUNC_END VGS_AddQuickCopyTask


FUNC_BEGIN VGS_AddGMETaskEx
    /*000053d0*/ PUSH        {R4, R5, R6, R7, LR} 
    /*000053d4*/ SUB         SP, SP, #28 
    /*000053d8*/ MOV         R3, #0 
    /*000053dc*/ MOV         R6, R0 
    /*000053e0*/ MOV         R5, R1 
    /*000053e4*/ MOV         R7, R2 
    /*000053e8*/ STR         R3, [SP, #20] 
    /*000053ec*/ BL          0x00000000000053EC          @ VGS_HAL_IsSupportGMEMode [R_ARM_CALL: .text+0xffe4] 
    /*000053f0*/ CMP         R0, #0 
    /*000053f4*/ BEQ         VGS_AddGMETaskEx_x5648
    /*000053f8*/ CMP         R6, #0 
    /*000053fc*/ BLT         VGS_AddGMETaskEx_x54f4
    /*00005400*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00005404*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00005408*/ LDR         R3, [R3] 
    /*0000540c*/ CMP         R3, R6 
    /*00005410*/ BLS         VGS_AddGMETaskEx_x54f4
    VGS_AddGMETaskEx_x5414:
    /*00005414*/ CMP         R7, #0 
    /*00005418*/ BEQ         VGS_AddGMETaskEx_x5580
    VGS_AddGMETaskEx_x541c:
    /*0000541c*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00005420*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00005424*/ LDR         R3, [R4] 
    /*00005428*/ CMP         R3, #1 
    /*0000542c*/ BNE         VGS_AddGMETaskEx_x5514
    /*00005430*/ ADD         R0, R4, #16 
    /*00005434*/ BL          0x0000000000005434          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00005438*/ LDR         R3, [R4, #8] 
    /*0000543c*/ LDR         R3, [R3, #4] 
    /*00005440*/ LDR         R4, [R3, R6, LSL #2] 
    /*00005444*/ LDR         R0, [R4, #20] 
    /*00005448*/ CMP         R0, #1 
    /*0000544c*/ BEQ         VGS_AddGMETaskEx_x545c
    /*00005450*/ BL          0x0000000000000894 
    /*00005454*/ CMP         R0, #0 
    /*00005458*/ BNE         VGS_AddGMETaskEx_x5504
    VGS_AddGMETaskEx_x545c:
    /*0000545c*/ LDR         R2, [R4, #32] 
    /*00005460*/ LDR         R3, [R5, #724]              @ 0x2d4 
    /*00005464*/ CMP         R2, R3 
    /*00005468*/ BNE         VGS_AddGMETaskEx_x55dc
    /*0000546c*/ LDR         R2, [R4, #36]               @ 0x24 
    /*00005470*/ LDR         R3, [R5, #728]              @ 0x2d8 
    /*00005474*/ CMP         R2, R3 
    /*00005478*/ BNE         VGS_AddGMETaskEx_x5610
    /*0000547c*/ LDR         R2, [R4, #40]               @ 0x28 
    /*00005480*/ LDR         R3, [R5, #732]              @ 0x2dc 
    /*00005484*/ CMP         R2, R3 
    /*00005488*/ BNE         VGS_AddGMETaskEx_x562c
    /*0000548c*/ LDR         R3, [R4, #100]              @ 0x64 
    /*00005490*/ CMP         R3, #1 
    /*00005494*/ BNE         VGS_AddGMETaskEx_x5540
    /*00005498*/ LDR         R3, [R7] 
    /*0000549c*/ MOV         R2, #8 
    /*000054a0*/ LDR         R0, [PC, #460]              @ 0x0000000000005674 
    /*000054a4*/ ADD         R1, SP, #20 
    /*000054a8*/ STR         R2, [R5, #1756]             @ 0x6dc 
    /*000054ac*/ SUB         R5, R5, #8 
    /*000054b0*/ STR         R3, [R5, #1776]             @ 0x6f0 
    /*000054b4*/ BL          0x00000000000054B4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000054b8*/ LDR         R6, [R4, #20] 
    /*000054bc*/ CMP         R6, #1 
    /*000054c0*/ BNE         VGS_AddGMETaskEx_x5598
    /*000054c4*/ MOV         R0, R5 
    /*000054c8*/ MOV         R1, R4 
    /*000054cc*/ BL          0x00000000000054CC          @ VGS_PutTaskToJob [R_ARM_CALL: .text+0x7eac] 
    /*000054d0*/ ADD         R1, SP, #20 
    /*000054d4*/ LDR         R0, [PC, #408]              @ 0x0000000000005674 
    /*000054d8*/ BL          0x00000000000054D8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000054dc*/ STRB        R6, [R4, #224]              @ 0xe0 
    /*000054e0*/ LDR         R0, [PC, #400]              @ 0x0000000000005678 
    /*000054e4*/ BL          0x00000000000054E4          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000054e8*/ MOV         R0, #0 
    VGS_AddGMETaskEx_x54ec:
    /*000054ec*/ ADD         SP, SP, #28 
    /*000054f0*/ POP         {R4, R5, R6, R7, PC} 
    VGS_AddGMETaskEx_x54f4:
    /*000054f4*/ MOV         R0, R6 
    /*000054f8*/ BL          0x0000000000000854 
    /*000054fc*/ CMP         R0, #0 
    /*00005500*/ BEQ         VGS_AddGMETaskEx_x5414
    VGS_AddGMETaskEx_x5504:
    /*00005504*/ MOVW        R0, #32771                  @ 0x8003 
    /*00005508*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000550c*/ ADD         SP, SP, #28 
    /*00005510*/ POP         {R4, R5, R6, R7, PC} 
    VGS_AddGMETaskEx_x5514:
    /*00005514*/ MOVW        R3, #2987                   @ 0xbab 
    /*00005518*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*0000551c*/ STR         R3, [SP] 
    /*00005520*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*00005524*/ LDR         R3, [PC, #336]              @ 0x000000000000567c 
    /*00005528*/ MOV         R1, #45                     @ 0x2d 
    /*0000552c*/ MOV         R0, #3 
    /*00005530*/ BL          0x0000000000005530          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005534*/ MOVW        R0, #32784                  @ 0x8010 
    /*00005538*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000553c*/ B           VGS_AddGMETaskEx_x54ec
    VGS_AddGMETaskEx_x5540:
    /*00005540*/ LDR         R1, [PC, #312]              @ 0x0000000000005680 
    /*00005544*/ MOVW        R0, #3004                   @ 0xbbc 
    /*00005548*/ MOVW        R2, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd34] 
    /*0000554c*/ STR         R0, [SP] 
    /*00005550*/ ADD         R3, R1, R3, LSL #3 
    /*00005554*/ MOVT        R2, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd34] 
    /*00005558*/ STR         R3, [SP, #4] 
    /*0000555c*/ MOV         R1, #45                     @ 0x2d 
    /*00005560*/ LDR         R3, [PC, #276]              @ 0x000000000000567c 
    /*00005564*/ MOV         R0, #3 
    /*00005568*/ BL          0x0000000000005568          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000556c*/ LDR         R0, [PC, #260]              @ 0x0000000000005678 
    /*00005570*/ BL          0x0000000000005570          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00005574*/ MOVW        R0, #32771                  @ 0x8003 
    /*00005578*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000557c*/ B           VGS_AddGMETaskEx_x54ec
    VGS_AddGMETaskEx_x5580:
    /*00005580*/ BL          0x0000000000000504 
    /*00005584*/ CMP         R0, #0 
    /*00005588*/ MOVWNE      R0, #32774                  @ 0x8006 
    /*0000558c*/ MOVTNE      R0, #41005                  @ 0xa02d 
    /*00005590*/ BNE         VGS_AddGMETaskEx_x54ec
    /*00005594*/ B           VGS_AddGMETaskEx_x541c
    VGS_AddGMETaskEx_x5598:
    /*00005598*/ MOV         R1, #45                     @ 0x2d 
    /*0000559c*/ MOVW        R3, #3020                   @ 0xbcc 
    /*000055a0*/ STR         R6, [SP, #4] 
    /*000055a4*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3f8] 
    /*000055a8*/ STR         R3, [SP] 
    /*000055ac*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3f8] 
    /*000055b0*/ LDR         R3, [PC, #196]              @ 0x000000000000567c 
    /*000055b4*/ MOV         R0, #4 
    /*000055b8*/ BL          0x00000000000055B8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000055bc*/ LDR         R0, [PC, #180]              @ 0x0000000000005678 
    /*000055c0*/ BL          0x00000000000055C0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000055c4*/ LDR         R0, [PC, #168]              @ 0x0000000000005674 
    /*000055c8*/ ADD         R1, SP, #20 
    /*000055cc*/ BL          0x00000000000055CC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000055d0*/ MOVW        R0, #32777                  @ 0x8009 
    /*000055d4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000055d8*/ B           VGS_AddGMETaskEx_x54ec
    VGS_AddGMETaskEx_x55dc:
    /*000055dc*/ STR         R2, [SP, #8] 
    /*000055e0*/ MOVW        R2, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xd68] 
    /*000055e4*/ MOVT        R2, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0xd68] 
    /*000055e8*/ MOVW        R1, #2997                   @ 0xbb5 
    /*000055ec*/ STR         R3, [SP, #4] 
    /*000055f0*/ STR         R1, [SP] 
    VGS_AddGMETaskEx_x55f4:
    /*000055f4*/ LDR         R3, [PC, #128]              @ 0x000000000000567c 
    /*000055f8*/ MOV         R1, #45                     @ 0x2d 
    /*000055fc*/ MOV         R0, #3 
    /*00005600*/ BL          0x0000000000005600          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005604*/ LDR         R0, [PC, #108]              @ 0x0000000000005678 
    /*00005608*/ BL          0x0000000000005608          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*0000560c*/ B           VGS_AddGMETaskEx_x5504
    VGS_AddGMETaskEx_x5610:
    /*00005610*/ STR         R2, [SP, #8] 
    /*00005614*/ MOVW        R1, #2998                   @ 0xbb6 
    /*00005618*/ MOVW        R2, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xdb8] 
    /*0000561c*/ STR         R3, [SP, #4] 
    /*00005620*/ STR         R1, [SP] 
    /*00005624*/ MOVT        R2, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0xdb8] 
    /*00005628*/ B           VGS_AddGMETaskEx_x55f4
    VGS_AddGMETaskEx_x562c:
    /*0000562c*/ STR         R2, [SP, #8] 
    /*00005630*/ MOVW        R1, #2999                   @ 0xbb7 
    /*00005634*/ MOVW        R2, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0xe04] 
    /*00005638*/ STR         R3, [SP, #4] 
    /*0000563c*/ STR         R1, [SP] 
    /*00005640*/ MOVT        R2, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0xe04] 
    /*00005644*/ B           VGS_AddGMETaskEx_x55f4
    VGS_AddGMETaskEx_x5648:
    /*00005648*/ MOVW        R3, #2978                   @ 0xba2 
    /*0000564c*/ MOVW        R2, #0                      @ .LC94 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1404] 
    /*00005650*/ STR         R3, [SP] 
    /*00005654*/ MOVT        R2, #0                      @ .LC94 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1404] 
    /*00005658*/ LDR         R3, [PC, #28]               @ 0x000000000000567c 
    /*0000565c*/ MOV         R1, #45                     @ 0x2d 
    /*00005660*/ MOV         R0, #3 
    /*00005664*/ BL          0x0000000000005664          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005668*/ MOVW        R0, #32776                  @ 0x8008 
    /*0000566c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00005670*/ B           VGS_AddGMETaskEx_x54ec
    /*00005674*/ ANDEQ       R0, R0, R4 
    /*00005678*/ ANDEQ       R0, R0, R0, LSL R0 
    /*0000567c*/ LDRDEQ      R0, [R0], -R4 
    /*00005680*/ ANDEQ       R0, R0, R0, LSL R0 
FUNC_END VGS_AddGMETaskEx


FUNC_BEGIN VGS_AddGMETask
    /*00005684*/ PUSH        {R4, R5, LR} 
    /*00005688*/ SUBS        R4, R1, #0 
    /*0000568c*/ SUB         SP, SP, #12 
    /*00005690*/ MOV         R5, R0 
    /*00005694*/ BEQ         VGS_AddGMETask_x56c0
    VGS_AddGMETask_x5698:
    /*00005698*/ MOV         R0, R5 
    /*0000569c*/ MOV         R1, R4 
    /*000056a0*/ BL          0x00000000000056A0          @ VGS_AddGMETaskEx [R_ARM_CALL: .text+0x53d0] 
    /*000056a4*/ SUBS        R5, R0, #0 
    /*000056a8*/ BEQ         VGS_AddGMETask_x56b4
    /*000056ac*/ MOV         R0, R4 
    /*000056b0*/ BL          0x00000000000056B0          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    VGS_AddGMETask_x56b4:
    /*000056b4*/ MOV         R0, R5 
    /*000056b8*/ ADD         SP, SP, #12 
    /*000056bc*/ POP         {R4, R5, PC} 
    VGS_AddGMETask_x56c0:
    /*000056c0*/ STR         R2, [SP, #4] 
    /*000056c4*/ BL          0x0000000000000504 
    /*000056c8*/ LDR         R2, [SP, #4] 
    /*000056cc*/ CMP         R0, #0 
    /*000056d0*/ MOVWNE      R5, #32774                  @ 0x8006 
    /*000056d4*/ MOVTNE      R5, #41005                  @ 0xa02d 
    /*000056d8*/ BNE         VGS_AddGMETask_x56b4
    /*000056dc*/ B           VGS_AddGMETask_x5698
FUNC_END VGS_AddGMETask


FUNC_BEGIN VGS_UsrEndJob
    /*000056e0*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*000056e4*/ SUBS        R5, R0, #0 
    /*000056e8*/ SUB         SP, SP, #44                 @ 0x2c 
    /*000056ec*/ MOV         R3, #0 
    /*000056f0*/ STR         R3, [SP, #28] 
    /*000056f4*/ BLT         VGS_UsrEndJob_x5800
    /*000056f8*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*000056fc*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00005700*/ LDR         R3, [R3] 
    /*00005704*/ CMP         R3, R5 
    /*00005708*/ BLS         VGS_UsrEndJob_x5800
    VGS_UsrEndJob_x570c:
    /*0000570c*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00005710*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00005714*/ LDR         R6, [R4] 
    /*00005718*/ CMP         R6, #1 
    /*0000571c*/ BNE         VGS_UsrEndJob_x589c
    /*00005720*/ ADD         R0, R4, #16 
    /*00005724*/ BL          0x0000000000005724          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00005728*/ ADD         R0, R4, #4 
    /*0000572c*/ ADD         R1, SP, #28 
    /*00005730*/ BL          0x0000000000005730          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00005734*/ LDR         R3, [R4, #8] 
    /*00005738*/ LDR         R3, [R3, #4] 
    /*0000573c*/ LDR         R8, [R3, R5, LSL #2] 
    /*00005740*/ LDR         R3, [R8, #32] 
    /*00005744*/ CMP         R3, #30 
    /*00005748*/ BNE         VGS_UsrEndJob_x58c8
    /*0000574c*/ ADD         R1, SP, #28 
    /*00005750*/ ADD         R0, R4, #4 
    /*00005754*/ STR         R6, [R8, #128]              @ 0x80 
    /*00005758*/ BL          0x0000000000005758          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000575c*/ MOV         R1, R6 
    /*00005760*/ MOV         R2, #0 
    /*00005764*/ MOV         R0, R5 
    /*00005768*/ BL          0x0000000000005768          @ VGS_EndJob [R_ARM_CALL: .text+0x1828] 
    /*0000576c*/ SUBS        R9, R0, #0 
    /*00005770*/ BNE         VGS_UsrEndJob_x5864
    /*00005774*/ LDR         SL, [R8, #112]              @ 0x70 
    /*00005778*/ MOVW        R6, #0                      @ VGS_JobState [R_ARM_MOVW_ABS_NC: .text+0x28] 
    /*0000577c*/ ADD         R5, SP, #40                 @ 0x28 
    /*00005780*/ ADD         R7, R8, #116                @ 0x74 
    /*00005784*/ MOVT        R6, #0                      @ VGS_JobState [R_ARM_MOVT_ABS: .text+0x28] 
    /*00005788*/ MOV         R2, R8 
    /*0000578c*/ STR         SL, [SP, #36]               @ 0x24 
    /*00005790*/ STR         R8, [R5, #-8]! 
    VGS_UsrEndJob_x5794:
    /*00005794*/ LDR         R3, [R2, #20] 
    /*00005798*/ SUB         R1, R3, #6 
    /*0000579c*/ CMP         R3, #0 
    /*000057a0*/ CMPNE       R1, #1 
    /*000057a4*/ BHI         VGS_UsrEndJob_x57b8
    /*000057a8*/ LDR         R1, [SP, #36]               @ 0x24 
    /*000057ac*/ LDR         R3, [R2, #112]              @ 0x70 
    /*000057b0*/ CMP         R1, R3 
    /*000057b4*/ BEQ         VGS_UsrEndJob_x583c
    VGS_UsrEndJob_x57b8:
    /*000057b8*/ LDR         FP, [R4] 
    /*000057bc*/ CMP         FP, #1 
    /*000057c0*/ BEQ         VGS_UsrEndJob_x581c
    VGS_UsrEndJob_x57c4:
    /*000057c4*/ ADD         R1, SP, #28 
    /*000057c8*/ LDR         R0, [PC, #412]              @ 0x000000000000596c 
    /*000057cc*/ BL          0x00000000000057CC          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000057d0*/ LDR         R3, [R8, #20] 
    /*000057d4*/ SUB         R3, R3, #6 
    /*000057d8*/ CMP         R3, #1 
    /*000057dc*/ BLS         VGS_UsrEndJob_x590c
    VGS_UsrEndJob_x57e0:
    /*000057e0*/ LDR         R0, [PC, #388]              @ 0x000000000000596c 
    /*000057e4*/ ADD         R1, SP, #28 
    /*000057e8*/ BL          0x00000000000057E8          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000057ec*/ LDR         R0, [PC, #380]              @ 0x0000000000005970 
    /*000057f0*/ BL          0x00000000000057F0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    VGS_UsrEndJob_x57f4:
    /*000057f4*/ MOV         R0, R9 
    /*000057f8*/ ADD         SP, SP, #44                 @ 0x2c 
    /*000057fc*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrEndJob_x5800:
    /*00005800*/ MOV         R0, R5 
    /*00005804*/ BL          0x0000000000000854 
    /*00005808*/ CMP         R0, #0 
    /*0000580c*/ BEQ         VGS_UsrEndJob_x570c
    /*00005810*/ MOVW        R9, #32771                  @ 0x8003 
    /*00005814*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00005818*/ B           VGS_UsrEndJob_x57f4
    VGS_UsrEndJob_x581c:
    /*0000581c*/ MOV         R2, R5 
    /*00005820*/ MOV         R1, R6 
    /*00005824*/ MOV         R0, R7 
    /*00005828*/ BL          0x0000000000005828          @ osal_wait_uninterruptible [R_ARM_CALL: +0x0] 
    /*0000582c*/ CMP         R0, #0 
    /*00005830*/ BLT         VGS_UsrEndJob_x591c
    /*00005834*/ LDR         R2, [SP, #32] 
    /*00005838*/ B           VGS_UsrEndJob_x5794
    VGS_UsrEndJob_x583c:
    /*0000583c*/ LDR         R3, [R2, #24] 
    /*00005840*/ CMP         R3, #0 
    /*00005844*/ BNE         VGS_UsrEndJob_x57b8
    /*00005848*/ LDR         R3, [R2, #124]              @ 0x7c 
    /*0000584c*/ CMP         R3, #0 
    /*00005850*/ BNE         VGS_UsrEndJob_x57b8
    /*00005854*/ LDR         R3, [R2, #132]              @ 0x84 
    /*00005858*/ CMP         R3, #0 
    /*0000585c*/ BNE         VGS_UsrEndJob_x57b8
    /*00005860*/ B           VGS_UsrEndJob_x57c4
    VGS_UsrEndJob_x5864:
    /*00005864*/ MOV         R1, #45                     @ 0x2d 
    /*00005868*/ STR         R5, [SP, #4] 
    /*0000586c*/ MOVW        R3, #3448                   @ 0xd78 
    /*00005870*/ MOVW        R2, #0                      @ .LC52 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x988] 
    /*00005874*/ STR         R3, [SP] 
    /*00005878*/ MOVT        R2, #0                      @ .LC52 [R_ARM_MOVT_ABS: .rodata.str1.4+0x988] 
    /*0000587c*/ LDR         R3, [PC, #240]              @ 0x0000000000005974 
    /*00005880*/ MOV         R0, #3 
    /*00005884*/ BL          0x0000000000005884          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005888*/ ADD         R0, R4, #16 
    /*0000588c*/ BL          0x000000000000588C          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00005890*/ MOV         R0, R9 
    /*00005894*/ ADD         SP, SP, #44                 @ 0x2c 
    /*00005898*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrEndJob_x589c:
    /*0000589c*/ MOVW        R3, #3421                   @ 0xd5d 
    /*000058a0*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b4] 
    /*000058a4*/ STR         R3, [SP] 
    /*000058a8*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b4] 
    /*000058ac*/ LDR         R3, [PC, #192]              @ 0x0000000000005974 
    /*000058b0*/ MOV         R1, #45                     @ 0x2d 
    /*000058b4*/ MOV         R0, #3 
    /*000058b8*/ MOVW        R9, #32784                  @ 0x8010 
    /*000058bc*/ BL          0x00000000000058BC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000058c0*/ MOVT        R9, #41005                  @ 0xa02d 
    /*000058c4*/ B           VGS_UsrEndJob_x57f4
    VGS_UsrEndJob_x58c8:
    /*000058c8*/ MOV         R1, #45                     @ 0x2d 
    /*000058cc*/ MOVW        R3, #3429                   @ 0xd65 
    /*000058d0*/ STR         R5, [SP, #4] 
    /*000058d4*/ MOVW        R2, #0                      @ .LC95 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1434] 
    /*000058d8*/ STR         R3, [SP] 
    /*000058dc*/ MOVT        R2, #0                      @ .LC95 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1434] 
    /*000058e0*/ LDR         R3, [PC, #140]              @ 0x0000000000005974 
    /*000058e4*/ MOV         R0, #3 
    /*000058e8*/ BL          0x00000000000058E8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000058ec*/ ADD         R0, R4, #16 
    /*000058f0*/ BL          0x00000000000058F0          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000058f4*/ ADD         R1, SP, #28 
    /*000058f8*/ ADD         R0, R4, #4 
    /*000058fc*/ MOVW        R9, #32777                  @ 0x8009 
    /*00005900*/ BL          0x0000000000005900          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00005904*/ MOVT        R9, #41005                  @ 0xa02d 
    /*00005908*/ B           VGS_UsrEndJob_x57f4
    VGS_UsrEndJob_x590c:
    /*0000590c*/ MOV         R1, R8 
    /*00005910*/ LDR         R0, [R4, #8] 
    /*00005914*/ BL          0x0000000000005914          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*00005918*/ B           VGS_UsrEndJob_x57e0
    VGS_UsrEndJob_x591c:
    /*0000591c*/ STR         SL, [SP, #16] 
    /*00005920*/ MOVW        LR, #3461                   @ 0xd85 
    /*00005924*/ LDR         IP, [R8, #112]              @ 0x70 
    /*00005928*/ MOV         R0, FP 
    /*0000592c*/ LDR         R1, [R4] 
    /*00005930*/ MOVW        R2, #0                      @ .LC53 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x9b8] 
    /*00005934*/ LDR         R3, [PC, #56]               @ 0x0000000000005974 
    /*00005938*/ MOVT        R2, #0                      @ .LC53 [R_ARM_MOVT_ABS: .rodata.str1.4+0x9b8] 
    /*0000593c*/ STR         IP, [SP, #12] 
    /*00005940*/ MOV         R9, #65024                  @ 0xfe00 
    /*00005944*/ STR         R1, [SP, #8] 
    /*00005948*/ MOV         R1, #45                     @ 0x2d 
    /*0000594c*/ LDR         IP, [R8, #20] 
    /*00005950*/ MOVT        R9, #65535                  @ 0xffff 
    /*00005954*/ STR         LR, [SP] 
    /*00005958*/ STR         IP, [SP, #4] 
    /*0000595c*/ BL          0x000000000000595C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005960*/ LDR         R0, [PC, #8]                @ 0x0000000000005970 
    /*00005964*/ BL          0x0000000000005964          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*00005968*/ B           VGS_UsrEndJob_x57f4
    /*0000596c*/ ANDEQ       R0, R0, R4 
    /*00005970*/ ANDEQ       R0, R0, R0, LSL R0 
    /*00005974*/ ANDEQ       R0, R0, R8, ROR #5 
FUNC_END VGS_UsrEndJob


FUNC_BEGIN VGS_UsrAddOnlineTask
    /*00005978*/ PUSH        {R4, R5, R6, LR} 
    /*0000597c*/ SUB         SP, SP, #344                @ 0x158 
    /*00005980*/ MOV         R4, R0 
    /*00005984*/ MOV         R5, R1 
    /*00005988*/ MOV         R6, R2 
    /*0000598c*/ MOV         R0, SP 
    /*00005990*/ MOV         R2, #344                    @ 0x158 
    /*00005994*/ MOV         R1, #0 
    /*00005998*/ BL          0x0000000000005998          @ memset [R_ARM_CALL: +0x0] 
    /*0000599c*/ CMP         R4, #0 
    /*000059a0*/ BLT         VGS_UsrAddOnlineTask_x59ec
    /*000059a4*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*000059a8*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*000059ac*/ LDR         R3, [R3] 
    /*000059b0*/ CMP         R3, R4 
    /*000059b4*/ BLS         VGS_UsrAddOnlineTask_x59ec
    VGS_UsrAddOnlineTask_x59b8:
    /*000059b8*/ CMP         R5, #0 
    /*000059bc*/ BEQ         VGS_UsrAddOnlineTask_x5a08
    VGS_UsrAddOnlineTask_x59c0:
    /*000059c0*/ CMP         R6, #0 
    /*000059c4*/ BEQ         VGS_UsrAddOnlineTask_x5a24
    VGS_UsrAddOnlineTask_x59c8:
    /*000059c8*/ MOV         R3, SP 
    /*000059cc*/ MOV         R2, R6 
    /*000059d0*/ MOV         R1, R5 
    /*000059d4*/ MOV         R0, R4 
    /*000059d8*/ MOV         IP, #0 
    /*000059dc*/ STR         IP, [SP, #4] 
    /*000059e0*/ BL          0x00000000000059E0          @ VGS_AddOnlineTaskEx [R_ARM_CALL: .text+0x41f0] 
    VGS_UsrAddOnlineTask_x59e4:
    /*000059e4*/ ADD         SP, SP, #344                @ 0x158 
    /*000059e8*/ POP         {R4, R5, R6, PC} 
    VGS_UsrAddOnlineTask_x59ec:
    /*000059ec*/ MOV         R0, R4 
    /*000059f0*/ BL          0x0000000000000854 
    /*000059f4*/ CMP         R0, #0 
    /*000059f8*/ BEQ         VGS_UsrAddOnlineTask_x59b8
    /*000059fc*/ MOVW        R0, #32771                  @ 0x8003 
    /*00005a00*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00005a04*/ B           VGS_UsrAddOnlineTask_x59e4
    VGS_UsrAddOnlineTask_x5a08:
    /*00005a08*/ BL          0x0000000000000504 
    /*00005a0c*/ CMP         R0, #0 
    /*00005a10*/ BEQ         VGS_UsrAddOnlineTask_x59c0
    VGS_UsrAddOnlineTask_x5a14:
    /*00005a14*/ MOVW        R0, #32774                  @ 0x8006 
    /*00005a18*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00005a1c*/ ADD         SP, SP, #344                @ 0x158 
    /*00005a20*/ POP         {R4, R5, R6, PC} 
    VGS_UsrAddOnlineTask_x5a24:
    /*00005a24*/ BL          0x0000000000000504 
    /*00005a28*/ CMP         R0, #0 
    /*00005a2c*/ BNE         VGS_UsrAddOnlineTask_x5a14
    /*00005a30*/ B           VGS_UsrAddOnlineTask_x59c8
FUNC_END VGS_UsrAddOnlineTask


FUNC_BEGIN VGS_UsrAddDrawlineTask
    /*00005a34*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00005a38*/ SUBS        R8, R0, #0 
    /*00005a3c*/ SUB         SP, SP, #60                 @ 0x3c 
    /*00005a40*/ MOV         R9, R1 
    /*00005a44*/ MOV         R4, R2 
    /*00005a48*/ MOV         R7, R3 
    /*00005a4c*/ BLT         VGS_UsrAddDrawlineTask_x5b94
    /*00005a50*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00005a54*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00005a58*/ LDR         R3, [R3] 
    /*00005a5c*/ CMP         R3, R8 
    /*00005a60*/ BLS         VGS_UsrAddDrawlineTask_x5b94
    VGS_UsrAddDrawlineTask_x5a64:
    /*00005a64*/ CMP         R9, #0 
    /*00005a68*/ BEQ         VGS_UsrAddDrawlineTask_x5bd8
    VGS_UsrAddDrawlineTask_x5a6c:
    /*00005a6c*/ CMP         R4, #0 
    /*00005a70*/ BEQ         VGS_UsrAddDrawlineTask_x5bf0
    VGS_UsrAddDrawlineTask_x5a74:
    /*00005a74*/ CMP         R7, #0 
    /*00005a78*/ MOVEQ       R5, R7 
    /*00005a7c*/ BEQ         VGS_UsrAddDrawlineTask_x5b88
    /*00005a80*/ MOV         R6, #0 
    /*00005a84*/ B           VGS_UsrAddDrawlineTask_x5ac8
    VGS_UsrAddDrawlineTask_x5a88:
    /*00005a88*/ BL          0x0000000000005A88          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*00005a8c*/ MOV         R2, #744                    @ 0x2e8 
    /*00005a90*/ MOV         R1, R9 
    /*00005a94*/ SUBS        SL, R0, #0 
    /*00005a98*/ BEQ         VGS_UsrAddDrawlineTask_x5bb0
    /*00005a9c*/ BL          0x0000000000005A9C          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00005aa0*/ ADD         R2, SP, #4 
    /*00005aa4*/ MOV         R1, SL 
    /*00005aa8*/ MOV         R0, R8 
    /*00005aac*/ BL          0x0000000000005AAC          @ VGS_AddCoverTaskEx [R_ARM_CALL: .text+0x3880] 
    /*00005ab0*/ SUBS        R5, R0, #0 
    /*00005ab4*/ BNE         VGS_UsrAddDrawlineTask_x5bc4
    /*00005ab8*/ ADD         R6, R6, #1 
    /*00005abc*/ ADD         R4, R4, #24 
    /*00005ac0*/ CMP         R7, R6 
    /*00005ac4*/ BEQ         VGS_UsrAddDrawlineTask_x5b88
    VGS_UsrAddDrawlineTask_x5ac8:
    /*00005ac8*/ MOV         R0, R4 
    /*00005acc*/ BL          0x0000000000005ACC          @ VGS_DRV_CheckDrawLine [R_ARM_CALL: .text+0xf2e4] 
    /*00005ad0*/ MOV         R2, #52                     @ 0x34 
    /*00005ad4*/ SUBS        R5, R0, #0 
    /*00005ad8*/ ADD         R0, SP, #4 
    /*00005adc*/ MOV         R1, R5 
    /*00005ae0*/ BNE         VGS_UsrAddDrawlineTask_x5b88
    /*00005ae4*/ BL          0x0000000000005AE4          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00005ae8*/ LDR         R3, [R4, #16] 
    /*00005aec*/ LDR         R2, [R4] 
    /*00005af0*/ MOV         LR, #1 
    /*00005af4*/ LDR         R1, [R4, #8] 
    /*00005af8*/ LDR         IP, [R4, #4] 
    /*00005afc*/ LDR         R0, [R4, #12] 
    /*00005b00*/ CMP         R2, R1 
    /*00005b04*/ ADD         FP, IP, R3 
    /*00005b08*/ STR         R3, [SP, #16] 
    /*00005b0c*/ LDR         SL, [R4, #20] 
    /*00005b10*/ STR         R5, [SP, #12] 
    /*00005b14*/ ADD         R5, R0, R3 
    /*00005b18*/ ADDEQ       R3, R2, R3 
    /*00005b1c*/ STREQ       R3, [SP, #36]               @ 0x24 
    /*00005b20*/ STREQ       R3, [SP, #44]               @ 0x2c 
    /*00005b24*/ SUB         R3, R7, #1 
    /*00005b28*/ STREQ       IP, [SP, #40]               @ 0x28 
    /*00005b2c*/ STREQ       R0, [SP, #48]               @ 0x30 
    /*00005b30*/ STRNE       R2, [SP, #36]               @ 0x24 
    /*00005b34*/ STRNE       FP, [SP, #40]               @ 0x28 
    /*00005b38*/ STRNE       R1, [SP, #44]               @ 0x2c 
    /*00005b3c*/ STRNE       R5, [SP, #48]               @ 0x30 
    /*00005b40*/ CMP         R3, R6 
    /*00005b44*/ STR         R2, [SP, #20] 
    /*00005b48*/ STR         R1, [SP, #28] 
    /*00005b4c*/ STR         SL, [SP, #52]               @ 0x34 
    /*00005b50*/ STR         IP, [SP, #24] 
    /*00005b54*/ STR         R0, [SP, #32] 
    /*00005b58*/ STR         LR, [SP, #4] 
    /*00005b5c*/ STR         LR, [SP, #8] 
    /*00005b60*/ BNE         VGS_UsrAddDrawlineTask_x5a88
    /*00005b64*/ ADD         R2, SP, #4 
    /*00005b68*/ MOV         R1, R9 
    /*00005b6c*/ MOV         R0, R8 
    /*00005b70*/ ADD         R6, R6, #1 
    /*00005b74*/ BL          0x0000000000005B74          @ VGS_AddCoverTaskEx [R_ARM_CALL: .text+0x3880] 
    /*00005b78*/ CMP         R7, R6 
    /*00005b7c*/ ADD         R4, R4, #24 
    /*00005b80*/ MOV         R5, R0 
    /*00005b84*/ BNE         VGS_UsrAddDrawlineTask_x5ac8
    VGS_UsrAddDrawlineTask_x5b88:
    /*00005b88*/ MOV         R0, R5 
    /*00005b8c*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00005b90*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddDrawlineTask_x5b94:
    /*00005b94*/ MOV         R0, R8 
    /*00005b98*/ BL          0x0000000000000854 
    /*00005b9c*/ CMP         R0, #0 
    /*00005ba0*/ BEQ         VGS_UsrAddDrawlineTask_x5a64
    /*00005ba4*/ MOVW        R5, #32771                  @ 0x8003 
    /*00005ba8*/ MOVT        R5, #41005                  @ 0xa02d 
    /*00005bac*/ B           VGS_UsrAddDrawlineTask_x5b88
    VGS_UsrAddDrawlineTask_x5bb0:
    /*00005bb0*/ MOVW        R5, #32782                  @ 0x800e 
    /*00005bb4*/ MOVT        R5, #41005                  @ 0xa02d 
    /*00005bb8*/ MOV         R0, R5 
    /*00005bbc*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00005bc0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddDrawlineTask_x5bc4:
    /*00005bc4*/ MOV         R0, SL 
    /*00005bc8*/ BL          0x0000000000005BC8          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00005bcc*/ MOV         R0, R5 
    /*00005bd0*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00005bd4*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddDrawlineTask_x5bd8:
    /*00005bd8*/ BL          0x0000000000000504 
    /*00005bdc*/ CMP         R0, #0 
    /*00005be0*/ BEQ         VGS_UsrAddDrawlineTask_x5a6c
    VGS_UsrAddDrawlineTask_x5be4:
    /*00005be4*/ MOVW        R5, #32774                  @ 0x8006 
    /*00005be8*/ MOVT        R5, #41005                  @ 0xa02d 
    /*00005bec*/ B           VGS_UsrAddDrawlineTask_x5b88
    VGS_UsrAddDrawlineTask_x5bf0:
    /*00005bf0*/ BL          0x0000000000000504 
    /*00005bf4*/ CMP         R0, #0 
    /*00005bf8*/ BNE         VGS_UsrAddDrawlineTask_x5be4
    /*00005bfc*/ B           VGS_UsrAddDrawlineTask_x5a74
FUNC_END VGS_UsrAddDrawlineTask


FUNC_BEGIN VGS_UsrAddCoverTask
    /*00005c00*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00005c04*/ SUBS        R7, R0, #0 
    /*00005c08*/ SUB         SP, SP, #68                 @ 0x44 
    /*00005c0c*/ MOV         R8, R1 
    /*00005c10*/ MOV         R4, R2 
    /*00005c14*/ MOV         R6, R3 
    /*00005c18*/ BLT         VGS_UsrAddCoverTask_x5d30
    /*00005c1c*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00005c20*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00005c24*/ LDR         R3, [R3] 
    /*00005c28*/ CMP         R3, R7 
    /*00005c2c*/ BLS         VGS_UsrAddCoverTask_x5d30
    VGS_UsrAddCoverTask_x5c30:
    /*00005c30*/ CMP         R8, #0 
    /*00005c34*/ BEQ         VGS_UsrAddCoverTask_x5db8
    VGS_UsrAddCoverTask_x5c38:
    /*00005c38*/ CMP         R4, #0 
    /*00005c3c*/ BEQ         VGS_UsrAddCoverTask_x5dd0
    VGS_UsrAddCoverTask_x5c40:
    /*00005c40*/ CMP         R6, #0 
    /*00005c44*/ MOVEQ       SL, R6 
    /*00005c48*/ BEQ         VGS_UsrAddCoverTask_x5d24
    /*00005c4c*/ ADD         R4, R4, #4 
    /*00005c50*/ MOV         R5, #0 
    /*00005c54*/ MOV         R9, #1 
    /*00005c58*/ B           VGS_UsrAddCoverTask_x5c9c
    VGS_UsrAddCoverTask_x5c5c:
    /*00005c5c*/ BL          0x0000000000005C5C          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*00005c60*/ MOV         R2, #744                    @ 0x2e8 
    /*00005c64*/ MOV         R1, R8 
    /*00005c68*/ SUBS        FP, R0, #0 
    /*00005c6c*/ BEQ         VGS_UsrAddCoverTask_x5d90
    /*00005c70*/ BL          0x0000000000005C70          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00005c74*/ ADD         R2, SP, #12 
    /*00005c78*/ MOV         R1, FP 
    /*00005c7c*/ MOV         R0, R7 
    /*00005c80*/ BL          0x0000000000005C80          @ VGS_AddCoverTaskEx [R_ARM_CALL: .text+0x3880] 
    /*00005c84*/ SUBS        SL, R0, #0 
    /*00005c88*/ BNE         VGS_UsrAddCoverTask_x5da4
    /*00005c8c*/ ADD         R5, R5, #1 
    /*00005c90*/ ADD         R4, R4, #48                 @ 0x30 
    /*00005c94*/ CMP         R5, R6 
    /*00005c98*/ BEQ         VGS_UsrAddCoverTask_x5d24
    VGS_UsrAddCoverTask_x5c9c:
    /*00005c9c*/ MOV         R1, #0 
    /*00005ca0*/ MOV         R2, #52                     @ 0x34 
    /*00005ca4*/ ADD         R0, SP, #12 
    /*00005ca8*/ BL          0x0000000000005CA8          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00005cac*/ MOV         R0, R4 
    /*00005cb0*/ LDR         R2, [R0, #-4]! 
    /*00005cb4*/ LDR         R3, [R4, #40]               @ 0x28 
    /*00005cb8*/ STR         R9, [SP, #12] 
    /*00005cbc*/ STR         R2, [SP, #16] 
    /*00005cc0*/ STR         R3, [SP, #60]               @ 0x3c 
    /*00005cc4*/ BL          0x0000000000005CC4          @ VGS_DRV_CheckUsrCover [R_ARM_CALL: .text+0xf5e8] 
    /*00005cc8*/ MOV         R2, #16 
    /*00005ccc*/ MOV         R1, R4 
    /*00005cd0*/ SUBS        SL, R0, #0 
    /*00005cd4*/ ADD         R0, SP, #20 
    /*00005cd8*/ BNE         VGS_UsrAddCoverTask_x5d24
    /*00005cdc*/ LDR         R3, [SP, #16] 
    /*00005ce0*/ CMP         R3, #1 
    /*00005ce4*/ BEQ         VGS_UsrAddCoverTask_x5d4c
    /*00005ce8*/ CMP         R3, #0 
    /*00005cec*/ BNE         VGS_UsrAddCoverTask_x5d58
    /*00005cf0*/ BL          0x0000000000005CF0          @ osal_memcpy [R_ARM_CALL: +0x0] 
    VGS_UsrAddCoverTask_x5cf4:
    /*00005cf4*/ SUB         R3, R6, #1 
    /*00005cf8*/ CMP         R3, R5 
    /*00005cfc*/ BNE         VGS_UsrAddCoverTask_x5c5c
    /*00005d00*/ ADD         R2, SP, #12 
    /*00005d04*/ MOV         R1, R8 
    /*00005d08*/ MOV         R0, R7 
    /*00005d0c*/ ADD         R5, R5, #1 
    /*00005d10*/ BL          0x0000000000005D10          @ VGS_AddCoverTaskEx [R_ARM_CALL: .text+0x3880] 
    /*00005d14*/ CMP         R5, R6 
    /*00005d18*/ ADD         R4, R4, #48                 @ 0x30 
    /*00005d1c*/ MOV         SL, R0 
    /*00005d20*/ BNE         VGS_UsrAddCoverTask_x5c9c
    VGS_UsrAddCoverTask_x5d24:
    /*00005d24*/ MOV         R0, SL 
    /*00005d28*/ ADD         SP, SP, #68                 @ 0x44 
    /*00005d2c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddCoverTask_x5d30:
    /*00005d30*/ MOV         R0, R7 
    /*00005d34*/ BL          0x0000000000000854 
    /*00005d38*/ CMP         R0, #0 
    /*00005d3c*/ BEQ         VGS_UsrAddCoverTask_x5c30
    /*00005d40*/ MOVW        SL, #32771                  @ 0x8003 
    /*00005d44*/ MOVT        SL, #41005                  @ 0xa02d 
    /*00005d48*/ B           VGS_UsrAddCoverTask_x5d24
    VGS_UsrAddCoverTask_x5d4c:
    /*00005d4c*/ MOV         R2, #40                     @ 0x28 
    /*00005d50*/ BL          0x0000000000005D50          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00005d54*/ B           VGS_UsrAddCoverTask_x5cf4
    VGS_UsrAddCoverTask_x5d58:
    /*00005d58*/ STR         R3, [SP, #4] 
    /*00005d5c*/ MOV         R1, #45                     @ 0x2d 
    /*00005d60*/ MOVW        R3, #3658                   @ 0xe4a 
    /*00005d64*/ MOVW        R2, #0                      @ .LC96 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1480] 
    /*00005d68*/ STR         R3, [SP] 
    /*00005d6c*/ MOVT        R2, #0                      @ .LC96 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1480] 
    /*00005d70*/ LDR         R3, [PC, #104]              @ 0x0000000000005de0 
    /*00005d74*/ MOV         R0, #3 
    /*00005d78*/ BL          0x0000000000005D78          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00005d7c*/ MOVW        SL, #32771                  @ 0x8003 
    /*00005d80*/ MOVT        SL, #41005                  @ 0xa02d 
    /*00005d84*/ MOV         R0, SL 
    /*00005d88*/ ADD         SP, SP, #68                 @ 0x44 
    /*00005d8c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddCoverTask_x5d90:
    /*00005d90*/ MOVW        SL, #32782                  @ 0x800e 
    /*00005d94*/ MOVT        SL, #41005                  @ 0xa02d 
    /*00005d98*/ MOV         R0, SL 
    /*00005d9c*/ ADD         SP, SP, #68                 @ 0x44 
    /*00005da0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddCoverTask_x5da4:
    /*00005da4*/ MOV         R0, FP 
    /*00005da8*/ BL          0x0000000000005DA8          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00005dac*/ MOV         R0, SL 
    /*00005db0*/ ADD         SP, SP, #68                 @ 0x44 
    /*00005db4*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddCoverTask_x5db8:
    /*00005db8*/ BL          0x0000000000000504 
    /*00005dbc*/ CMP         R0, #0 
    /*00005dc0*/ BEQ         VGS_UsrAddCoverTask_x5c38
    VGS_UsrAddCoverTask_x5dc4:
    /*00005dc4*/ MOVW        SL, #32774                  @ 0x8006 
    /*00005dc8*/ MOVT        SL, #41005                  @ 0xa02d 
    /*00005dcc*/ B           VGS_UsrAddCoverTask_x5d24
    VGS_UsrAddCoverTask_x5dd0:
    /*00005dd0*/ BL          0x0000000000000504 
    /*00005dd4*/ CMP         R0, #0 
    /*00005dd8*/ BNE         VGS_UsrAddCoverTask_x5dc4
    /*00005ddc*/ B           VGS_UsrAddCoverTask_x5c40
    /*00005de0*/ STRDEQ      R0, [R0], -R8 
FUNC_END VGS_UsrAddCoverTask


FUNC_BEGIN VGS_UsrAddOsdTask
    /*00005de4*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00005de8*/ SUBS        SL, R0, #0 
    /*00005dec*/ SUB         SP, SP, #84                 @ 0x54 
    /*00005df0*/ MOV         FP, R1 
    /*00005df4*/ MOV         R4, R2 
    /*00005df8*/ MOV         R9, R3 
    /*00005dfc*/ BLT         VGS_UsrAddOsdTask_x5f3c
    /*00005e00*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00005e04*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00005e08*/ LDR         R3, [R3] 
    /*00005e0c*/ CMP         R3, SL 
    /*00005e10*/ BLS         VGS_UsrAddOsdTask_x5f3c
    VGS_UsrAddOsdTask_x5e14:
    /*00005e14*/ CMP         FP, #0 
    /*00005e18*/ BEQ         VGS_UsrAddOsdTask_x5f80
    VGS_UsrAddOsdTask_x5e1c:
    /*00005e1c*/ CMP         R4, #0 
    /*00005e20*/ BEQ         VGS_UsrAddOsdTask_x5f98
    VGS_UsrAddOsdTask_x5e24:
    /*00005e24*/ CMP         R9, #0 
    /*00005e28*/ MOVEQ       R6, R9 
    /*00005e2c*/ BEQ         VGS_UsrAddOsdTask_x5f30
    /*00005e30*/ MOV         R5, #0 
    /*00005e34*/ B           VGS_UsrAddOsdTask_x5e78
    VGS_UsrAddOsdTask_x5e38:
    /*00005e38*/ BL          0x0000000000005E38          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*00005e3c*/ MOV         R2, #744                    @ 0x2e8 
    /*00005e40*/ MOV         R1, FP 
    /*00005e44*/ SUBS        R7, R0, #0 
    /*00005e48*/ BEQ         VGS_UsrAddOsdTask_x5f58
    /*00005e4c*/ BL          0x0000000000005E4C          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00005e50*/ MOV         R2, SP 
    /*00005e54*/ MOV         R1, R7 
    /*00005e58*/ MOV         R0, SL 
    /*00005e5c*/ BL          0x0000000000005E5C          @ VGS_AddOSDTaskEx [R_ARM_CALL: .text+0x2bdc] 
    /*00005e60*/ SUBS        R6, R0, #0 
    /*00005e64*/ BNE         VGS_UsrAddOsdTask_x5f6c
    /*00005e68*/ ADD         R5, R5, #1 
    /*00005e6c*/ ADD         R4, R4, #72                 @ 0x48 
    /*00005e70*/ CMP         R9, R5 
    /*00005e74*/ BEQ         VGS_UsrAddOsdTask_x5f30
    VGS_UsrAddOsdTask_x5e78:
    /*00005e78*/ MOV         R0, R4 
    /*00005e7c*/ MOV         R8, #1 
    /*00005e80*/ BL          0x0000000000005E80          @ VGS_DRV_CheckUsrOsd [R_ARM_CALL: .text+0xf414] 
    /*00005e84*/ MOV         R2, #80                     @ 0x50 
    /*00005e88*/ SUBS        R6, R0, #0 
    /*00005e8c*/ MOV         R0, SP 
    /*00005e90*/ MOV         R1, R6 
    /*00005e94*/ BNE         VGS_UsrAddOsdTask_x5f30
    /*00005e98*/ BL          0x0000000000005E98          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00005e9c*/ MOV         R2, #16 
    /*00005ea0*/ MOV         R1, R4 
    /*00005ea4*/ ADD         R0, SP, #32 
    /*00005ea8*/ MVN         R3, #0 
    /*00005eac*/ STR         R8, [SP] 
    /*00005eb0*/ STRB        R3, [SP, #4] 
    /*00005eb4*/ BL          0x0000000000005EB4          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00005eb8*/ LDR         R3, [R4, #20] 
    /*00005ebc*/ ADD         R1, R4, #48                 @ 0x30 
    /*00005ec0*/ LDR         IP, [R4, #32] 
    /*00005ec4*/ MOV         R2, #20 
    /*00005ec8*/ CMP         R3, #8 
    /*00005ecc*/ LDRD        R6, [R4, #24] 
    /*00005ed0*/ STR         R3, [SP, #16] 
    /*00005ed4*/ ADD         R0, SP, #52                 @ 0x34 
    /*00005ed8*/ LDREQ       R3, [R4, #40]               @ 0x28 
    /*00005edc*/ STR         IP, [SP, #20] 
    /*00005ee0*/ LDREQ       IP, [R4, #36]               @ 0x24 
    /*00005ee4*/ STRBEQ      R3, [SP, #29] 
    /*00005ee8*/ LDR         R3, [R4, #44]               @ 0x2c 
    /*00005eec*/ STREQ       R8, [SP, #24] 
    /*00005ef0*/ STRBEQ      IP, [SP, #28] 
    /*00005ef4*/ STR         R3, [SP, #48]               @ 0x30 
    /*00005ef8*/ STRD        R6, [SP, #8] 
    /*00005efc*/ BL          0x0000000000005EFC          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00005f00*/ SUB         R3, R9, #1 
    /*00005f04*/ CMP         R3, R5 
    /*00005f08*/ BNE         VGS_UsrAddOsdTask_x5e38
    /*00005f0c*/ MOV         R2, SP 
    /*00005f10*/ MOV         R1, FP 
    /*00005f14*/ MOV         R0, SL 
    /*00005f18*/ ADD         R5, R5, #1 
    /*00005f1c*/ BL          0x0000000000005F1C          @ VGS_AddOSDTaskEx [R_ARM_CALL: .text+0x2bdc] 
    /*00005f20*/ CMP         R9, R5 
    /*00005f24*/ ADD         R4, R4, #72                 @ 0x48 
    /*00005f28*/ MOV         R6, R0 
    /*00005f2c*/ BNE         VGS_UsrAddOsdTask_x5e78
    VGS_UsrAddOsdTask_x5f30:
    /*00005f30*/ MOV         R0, R6 
    /*00005f34*/ ADD         SP, SP, #84                 @ 0x54 
    /*00005f38*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddOsdTask_x5f3c:
    /*00005f3c*/ MOV         R0, SL 
    /*00005f40*/ BL          0x0000000000000854 
    /*00005f44*/ CMP         R0, #0 
    /*00005f48*/ BEQ         VGS_UsrAddOsdTask_x5e14
    /*00005f4c*/ MOVW        R6, #32771                  @ 0x8003 
    /*00005f50*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00005f54*/ B           VGS_UsrAddOsdTask_x5f30
    VGS_UsrAddOsdTask_x5f58:
    /*00005f58*/ MOVW        R6, #32782                  @ 0x800e 
    /*00005f5c*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00005f60*/ MOV         R0, R6 
    /*00005f64*/ ADD         SP, SP, #84                 @ 0x54 
    /*00005f68*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddOsdTask_x5f6c:
    /*00005f6c*/ MOV         R0, R7 
    /*00005f70*/ BL          0x0000000000005F70          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00005f74*/ MOV         R0, R6 
    /*00005f78*/ ADD         SP, SP, #84                 @ 0x54 
    /*00005f7c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_UsrAddOsdTask_x5f80:
    /*00005f80*/ BL          0x0000000000000504 
    /*00005f84*/ CMP         R0, #0 
    /*00005f88*/ BEQ         VGS_UsrAddOsdTask_x5e1c
    VGS_UsrAddOsdTask_x5f8c:
    /*00005f8c*/ MOVW        R6, #32774                  @ 0x8006 
    /*00005f90*/ MOVT        R6, #41005                  @ 0xa02d 
    /*00005f94*/ B           VGS_UsrAddOsdTask_x5f30
    VGS_UsrAddOsdTask_x5f98:
    /*00005f98*/ BL          0x0000000000000504 
    /*00005f9c*/ CMP         R0, #0 
    /*00005fa0*/ BNE         VGS_UsrAddOsdTask_x5f8c
    /*00005fa4*/ B           VGS_UsrAddOsdTask_x5e24
FUNC_END VGS_UsrAddOsdTask


FUNC_BEGIN VGS_UsrCancelJob
    /*00005fa8*/ PUSH        {R4, LR} 
    /*00005fac*/ SUBS        R4, R0, #0 
    /*00005fb0*/ SUB         SP, SP, #8 
    /*00005fb4*/ BLT         VGS_UsrCancelJob_x6008
    /*00005fb8*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00005fbc*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00005fc0*/ LDR         R3, [R3] 
    /*00005fc4*/ CMP         R3, R4 
    /*00005fc8*/ BLS         VGS_UsrCancelJob_x6008
    VGS_UsrCancelJob_x5fcc:
    /*00005fcc*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00005fd0*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00005fd4*/ LDR         R3, [R3, #8] 
    /*00005fd8*/ LDR         R3, [R3, #4] 
    /*00005fdc*/ LDR         R3, [R3, R4, LSL #2] 
    /*00005fe0*/ LDR         R2, [R3, #20] 
    /*00005fe4*/ CMP         R2, #0 
    /*00005fe8*/ BEQ         VGS_UsrCancelJob_x5ff8
    /*00005fec*/ LDR         R3, [R3, #32] 
    /*00005ff0*/ CMP         R3, #30 
    /*00005ff4*/ BNE         VGS_UsrCancelJob_x6028
    VGS_UsrCancelJob_x5ff8:
    /*00005ff8*/ MOV         R0, R4 
    /*00005ffc*/ ADD         SP, SP, #8 
    /*00006000*/ POP         {R4, LR} 
    VGS_UsrCancelJob_x6004:
    /*00006004*/ B           VGS_UsrCancelJob_x6004      @ VGS_CancelJob [R_ARM_JUMP24: .text+0x1eac] 
    VGS_UsrCancelJob_x6008:
    /*00006008*/ MOV         R0, R4 
    /*0000600c*/ BL          0x0000000000000854 
    /*00006010*/ CMP         R0, #0 
    /*00006014*/ BEQ         VGS_UsrCancelJob_x5fcc
    /*00006018*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000601c*/ MOVT        R0, #41005                  @ 0xa02d 
    VGS_UsrCancelJob_x6020:
    /*00006020*/ ADD         SP, SP, #8 
    /*00006024*/ POP         {R4, PC} 
    VGS_UsrCancelJob_x6028:
    /*00006028*/ MOVW        R3, #4008                   @ 0xfa8 
    /*0000602c*/ MOVW        R2, #0                      @ .LC97 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x14b4] 
    /*00006030*/ STR         R3, [SP] 
    /*00006034*/ MOVT        R2, #0                      @ .LC97 [R_ARM_MOVT_ABS: .rodata.str1.4+0x14b4] 
    /*00006038*/ LDR         R3, [PC, #20]               @ 0x0000000000006054 
    /*0000603c*/ MOV         R1, #45                     @ 0x2d 
    /*00006040*/ MOV         R0, #3 
    /*00006044*/ BL          0x0000000000006044          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00006048*/ MOVW        R0, #32777                  @ 0x8009 
    /*0000604c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*00006050*/ B           VGS_UsrCancelJob_x6020
    /*00006054*/ ANDEQ       R0, R0, IP, LSL #6 
FUNC_END VGS_UsrCancelJob


FUNC_BEGIN VgsIoctl.constprop.13
    /*00006058*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*0000605c*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006060*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00006064*/ SUB         SP, SP, #340                @ 0x154 
    /*00006068*/ LDR         R6, [R3] 
    /*0000606c*/ CMP         R6, #1 
    /*00006070*/ BNE         VgsIoctl.constprop.13_x615c
    /*00006074*/ MOV         R4, R0 
    /*00006078*/ ADD         R0, R3, #12 
    /*0000607c*/ MOV         R5, R1 
    /*00006080*/ BL          0x0000000000006080          @ osal_atomic_inc_return [R_ARM_CALL: +0x0] 
    /*00006084*/ MOVW        R3, #18950                  @ 0x4a06 
    /*00006088*/ MOVT        R3, #17112                  @ 0x42d8 
    /*0000608c*/ CMP         R4, R3 
    /*00006090*/ BEQ         VgsIoctl.constprop.13_x6328
    /*00006094*/ BHI         VgsIoctl.constprop.13_x60ec
    /*00006098*/ MOVW        R3, #18947                  @ 0x4a03 
    /*0000609c*/ MOVT        R3, #17112                  @ 0x42d8 
    /*000060a0*/ CMP         R4, R3 
    /*000060a4*/ BEQ         VgsIoctl.constprop.13_x62d0
    /*000060a8*/ BHI         VgsIoctl.constprop.13_x6170
    /*000060ac*/ MOVW        R3, #18945                  @ 0x4a01 
    /*000060b0*/ MOVT        R3, #16388                  @ 0x4004 
    /*000060b4*/ CMP         R4, R3 
    /*000060b8*/ BEQ         VgsIoctl.constprop.13_x62c0
    /*000060bc*/ MOVW        R3, #18946                  @ 0x4a02 
    /*000060c0*/ MOVT        R3, #16388                  @ 0x4004 
    /*000060c4*/ CMP         R4, R3 
    /*000060c8*/ BNE         VgsIoctl.constprop.13_x62b8
    /*000060cc*/ LDR         R0, [R5] 
    /*000060d0*/ BL          0x00000000000060D0          @ VGS_UsrEndJob [R_ARM_CALL: .text+0x56e0] 
    /*000060d4*/ MOV         R4, R0 
    VgsIoctl.constprop.13_x60d8:
    /*000060d8*/ LDR         R0, [PC, #1576]             @ 0x0000000000006708 
    /*000060dc*/ BL          0x00000000000060DC          @ osal_atomic_dec_return [R_ARM_CALL: +0x0] 
    /*000060e0*/ MOV         R0, R4 
    /*000060e4*/ ADD         SP, SP, #340                @ 0x154 
    /*000060e8*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VgsIoctl.constprop.13_x60ec:
    /*000060ec*/ MOVW        R3, #18953                  @ 0x4a09 
    /*000060f0*/ MOVT        R3, #17112                  @ 0x42d8 
    /*000060f4*/ CMP         R4, R3 
    /*000060f8*/ BEQ         VgsIoctl.constprop.13_x63b4
    /*000060fc*/ BLS         VgsIoctl.constprop.13_x61f8
    /*00006100*/ MOVW        R3, #18954                  @ 0x4a0a 
    /*00006104*/ MOVT        R3, #17112                  @ 0x42d8 
    /*00006108*/ CMP         R4, R3 
    /*0000610c*/ BEQ         VgsIoctl.constprop.13_x629c
    /*00006110*/ MOV         R3, #18944                  @ 0x4a00 
    /*00006114*/ MOVT        R3, #49156                  @ 0xc004 
    /*00006118*/ CMP         R4, R3 
    /*0000611c*/ BNE         VgsIoctl.constprop.13_x62b8
    /*00006120*/ ADD         R4, SP, #16 
    /*00006124*/ MOV         R2, #64                     @ 0x40 
    /*00006128*/ MOV         R1, #0 
    /*0000612c*/ MOV         R0, R4 
    /*00006130*/ BL          0x0000000000006130          @ memset [R_ARM_CALL: +0x0] 
    /*00006134*/ MOV         R3, #0 
    /*00006138*/ STR         R4, [SP, #4] 
    /*0000613c*/ MOV         R0, R5 
    /*00006140*/ STR         R3, [SP] 
    /*00006144*/ MOV         R1, R3 
    /*00006148*/ MOV         R2, #30 
    /*0000614c*/ STR         R6, [SP, #68]               @ 0x44 
    /*00006150*/ BL          0x0000000000006150          @ VGS_BeginJob [R_ARM_CALL: .text+0x540] 
    /*00006154*/ MOV         R4, R0 
    /*00006158*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x615c:
    /*0000615c*/ MOVW        R4, #32784                  @ 0x8010 
    /*00006160*/ MOVT        R4, #41005                  @ 0xa02d 
    /*00006164*/ MOV         R0, R4 
    /*00006168*/ ADD         SP, SP, #340                @ 0x154 
    /*0000616c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VgsIoctl.constprop.13_x6170:
    /*00006170*/ MOVW        R3, #18948                  @ 0x4a04 
    /*00006174*/ MOVT        R3, #17112                  @ 0x42d8 
    /*00006178*/ CMP         R4, R3 
    /*0000617c*/ BEQ         VgsIoctl.constprop.13_x653c
    /*00006180*/ MOVW        R3, #18949                  @ 0x4a05 
    /*00006184*/ MOVT        R3, #17112                  @ 0x42d8 
    /*00006188*/ CMP         R4, R3 
    /*0000618c*/ BNE         VgsIoctl.constprop.13_x62b8
    /*00006190*/ ADD         R6, SP, #16 
    /*00006194*/ MOV         R2, #48                     @ 0x30 
    /*00006198*/ MOV         R1, #0 
    /*0000619c*/ MOV         R0, R6 
    /*000061a0*/ BL          0x00000000000061A0          @ memset [R_ARM_CALL: +0x0] 
    /*000061a4*/ BL          0x00000000000061A4          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*000061a8*/ SUBS        R7, R0, #0 
    /*000061ac*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*000061b0*/ ADD         R1, R5, #8 
    /*000061b4*/ BL          0x0000000000000DB4 
    /*000061b8*/ SUBS        R4, R0, #0 
    /*000061bc*/ BNE         VgsIoctl.constprop.13_x658c
    /*000061c0*/ MOV         R2, #48                     @ 0x30 
    /*000061c4*/ LDR         R1, [R5, #724]              @ 0x2d4 
    /*000061c8*/ MOV         R0, R6 
    /*000061cc*/ BL          0x0000000000000460 
    /*000061d0*/ SUBS        R4, R0, #0 
    /*000061d4*/ BNE         VgsIoctl.constprop.13_x658c
    /*000061d8*/ MOV         R2, R6 
    /*000061dc*/ LDR         R0, [R5] 
    /*000061e0*/ MOV         R3, #1 
    /*000061e4*/ MOV         R1, R7 
    /*000061e8*/ BL          0x00000000000061E8          @ VGS_UsrAddCoverTask [R_ARM_CALL: .text+0x5c00] 
    /*000061ec*/ SUBS        R4, R0, #0 
    /*000061f0*/ BEQ         VgsIoctl.constprop.13_x60d8
    /*000061f4*/ B           VgsIoctl.constprop.13_x658c
    VgsIoctl.constprop.13_x61f8:
    /*000061f8*/ MOVW        R3, #18951                  @ 0x4a07 
    /*000061fc*/ MOVT        R3, #17112                  @ 0x42d8 
    /*00006200*/ CMP         R4, R3 
    /*00006204*/ BEQ         VgsIoctl.constprop.13_x64b0
    /*00006208*/ MOVW        R3, #18952                  @ 0x4a08 
    /*0000620c*/ MOVT        R3, #17112                  @ 0x42d8 
    /*00006210*/ CMP         R4, R3 
    /*00006214*/ BNE         VgsIoctl.constprop.13_x62b8
    /*00006218*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*0000621c*/ SUB         R2, R3, #1 
    /*00006220*/ CMP         R2, #99                     @ 0x63 
    /*00006224*/ BHI         VgsIoctl.constprop.13_x6608
    /*00006228*/ BL          0x0000000000006228          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*0000622c*/ SUBS        R6, R0, #0 
    /*00006230*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*00006234*/ ADD         R1, R5, #8 
    /*00006238*/ BL          0x0000000000000DB4 
    /*0000623c*/ SUBS        R4, R0, #0 
    /*00006240*/ BNE         VgsIoctl.constprop.13_x631c
    /*00006244*/ LDR         R0, [R5, #720]              @ 0x2d0 
    /*00006248*/ MOV         R4, #48                     @ 0x30 
    /*0000624c*/ MUL         R0, R4, R0 
    /*00006250*/ BL          0x0000000000006250          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*00006254*/ SUBS        R7, R0, #0 
    /*00006258*/ BEQ         VgsIoctl.constprop.13_x669c
    /*0000625c*/ LDR         R2, [R5, #720]              @ 0x2d0 
    /*00006260*/ LDR         R1, [R5, #724]              @ 0x2d4 
    /*00006264*/ MUL         R2, R4, R2 
    /*00006268*/ BL          0x0000000000000460 
    /*0000626c*/ SUBS        R4, R0, #0 
    /*00006270*/ BNE         VgsIoctl.constprop.13_x6530
    /*00006274*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*00006278*/ MOV         R2, R7 
    /*0000627c*/ LDR         R0, [R5] 
    /*00006280*/ MOV         R1, R6 
    /*00006284*/ BL          0x0000000000006284          @ VGS_UsrAddCoverTask [R_ARM_CALL: .text+0x5c00] 
    /*00006288*/ SUBS        R4, R0, #0 
    /*0000628c*/ BNE         VgsIoctl.constprop.13_x6530
    VgsIoctl.constprop.13_x6290:
    /*00006290*/ MOV         R0, R7 
    /*00006294*/ BL          0x0000000000006294          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*00006298*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x629c:
    /*0000629c*/ LDR         R7, [R5, #720]              @ 0x2d0 
    /*000062a0*/ BL          0x00000000000062A0          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*000062a4*/ SUBS        R6, R0, #0 
    /*000062a8*/ BNE         VgsIoctl.constprop.13_x6598
    VgsIoctl.constprop.13_x62ac:
    /*000062ac*/ MOVW        R4, #32782                  @ 0x800e 
    /*000062b0*/ MOVT        R4, #41005                  @ 0xa02d 
    /*000062b4*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x62b8:
    /*000062b8*/ MVN         R4, #0 
    /*000062bc*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x62c0:
    /*000062c0*/ LDR         R0, [R5] 
    /*000062c4*/ BL          0x00000000000062C4          @ VGS_UsrCancelJob [R_ARM_CALL: .text+0x5fa8] 
    /*000062c8*/ MOV         R4, R0 
    /*000062cc*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x62d0:
    /*000062d0*/ MOV         R2, #320                    @ 0x140 
    /*000062d4*/ MOV         R1, #0 
    /*000062d8*/ ADD         R0, SP, #16 
    /*000062dc*/ BL          0x00000000000062DC          @ memset [R_ARM_CALL: +0x0] 
    /*000062e0*/ BL          0x00000000000062E0          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*000062e4*/ SUBS        R6, R0, #0 
    /*000062e8*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*000062ec*/ ADD         R1, R5, #8 
    /*000062f0*/ BL          0x0000000000000DB4 
    /*000062f4*/ SUBS        R4, R0, #0 
    /*000062f8*/ BNE         VgsIoctl.constprop.13_x631c
    /*000062fc*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*00006300*/ ADD         R2, SP, #16 
    /*00006304*/ LDR         R0, [R5] 
    /*00006308*/ MOV         R1, R6 
    /*0000630c*/ STR         R3, [SP, #196]              @ 0xc4 
    /*00006310*/ BL          0x0000000000006310          @ VGS_UsrAddOnlineTask [R_ARM_CALL: .text+0x5978] 
    /*00006314*/ SUBS        R4, R0, #0 
    /*00006318*/ BEQ         VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x631c:
    /*0000631c*/ MOV         R0, R6 
    /*00006320*/ BL          0x0000000000006320          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00006324*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x6328:
    /*00006328*/ ADD         R6, SP, #16 
    /*0000632c*/ MOV         R2, #72                     @ 0x48 
    /*00006330*/ MOV         R1, #0 
    /*00006334*/ MOV         R0, R6 
    /*00006338*/ BL          0x0000000000006338          @ memset [R_ARM_CALL: +0x0] 
    /*0000633c*/ BL          0x000000000000633C          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*00006340*/ SUBS        R7, R0, #0 
    /*00006344*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*00006348*/ ADD         R1, R5, #8 
    /*0000634c*/ BL          0x0000000000000DB4 
    /*00006350*/ SUBS        R4, R0, #0 
    /*00006354*/ BNE         VgsIoctl.constprop.13_x658c
    /*00006358*/ MOV         R2, #72                     @ 0x48 
    /*0000635c*/ LDR         R1, [R5, #724]              @ 0x2d4 
    /*00006360*/ MOV         R0, R6 
    /*00006364*/ BL          0x0000000000000460 
    /*00006368*/ SUBS        R4, R0, #0 
    /*0000636c*/ BNE         VgsIoctl.constprop.13_x658c
    /*00006370*/ LDR         R8, [SP, #48]               @ 0x30 
    /*00006374*/ LDR         R3, [SP, #28] 
    /*00006378*/ LDR         R4, [R6, #24] 
    /*0000637c*/ UMULL       R8, R9, R8, R3 
    /*00006380*/ MOV         R0, R4 
    /*00006384*/ MOV         R1, R8 
    /*00006388*/ BL          0x0000000000006388          @ hil_is_phys_in_mmz [R_ARM_CALL: +0x0] 
    /*0000638c*/ CMP         R0, #0 
    /*00006390*/ BNE         VgsIoctl.constprop.13_x665c
    VgsIoctl.constprop.13_x6394:
    /*00006394*/ MOV         R2, R6 
    /*00006398*/ LDR         R0, [R5] 
    /*0000639c*/ MOV         R3, #1 
    /*000063a0*/ MOV         R1, R7 
    /*000063a4*/ BL          0x00000000000063A4          @ VGS_UsrAddOsdTask [R_ARM_CALL: .text+0x5de4] 
    /*000063a8*/ SUBS        R4, R0, #0 
    /*000063ac*/ BNE         VgsIoctl.constprop.13_x658c
    /*000063b0*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x63b4:
    /*000063b4*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*000063b8*/ SUB         R2, R3, #1 
    /*000063bc*/ CMP         R2, #99                     @ 0x63 
    /*000063c0*/ BHI         VgsIoctl.constprop.13_x65c0
    /*000063c4*/ BL          0x00000000000063C4          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*000063c8*/ SUBS        R9, R0, #0 
    /*000063cc*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*000063d0*/ ADD         R1, R5, #8 
    /*000063d4*/ BL          0x0000000000000DB4 
    /*000063d8*/ SUBS        R4, R0, #0 
    /*000063dc*/ BNE         VgsIoctl.constprop.13_x64a4
    /*000063e0*/ LDR         R0, [R5, #720]              @ 0x2d0 
    /*000063e4*/ MOV         R4, #72                     @ 0x48 
    /*000063e8*/ MUL         R0, R4, R0 
    /*000063ec*/ BL          0x00000000000063EC          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*000063f0*/ SUBS        SL, R0, #0 
    /*000063f4*/ BEQ         VgsIoctl.constprop.13_x66dc
    /*000063f8*/ LDR         R2, [R5, #720]              @ 0x2d0 
    /*000063fc*/ LDR         R1, [R5, #724]              @ 0x2d4 
    /*00006400*/ MUL         R2, R4, R2 
    /*00006404*/ BL          0x0000000000000460 
    /*00006408*/ SUBS        R4, R0, #0 
    /*0000640c*/ BNE         VgsIoctl.constprop.13_x649c
    /*00006410*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*00006414*/ CMP         R3, #0 
    /*00006418*/ BEQ         VgsIoctl.constprop.13_x6638
    /*0000641c*/ MOV         R4, SL 
    /*00006420*/ MOV         R8, #0 
    /*00006424*/ B           VgsIoctl.constprop.13_x6434
    VgsIoctl.constprop.13_x6428:
    /*00006428*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*0000642c*/ CMP         R8, R3 
    /*00006430*/ BCS         VgsIoctl.constprop.13_x6638
    VgsIoctl.constprop.13_x6434:
    /*00006434*/ LDR         R6, [R4, #32] 
    /*00006438*/ ADD         R8, R8, #1 
    /*0000643c*/ LDR         R3, [R4, #12] 
    /*00006440*/ ADD         R4, R4, #72                 @ 0x48 
    /*00006444*/ LDR         FP, [R4, #-48]              @ 0xffffffd0 
    /*00006448*/ UMULL       R6, R7, R6, R3 
    /*0000644c*/ MOV         R0, FP 
    /*00006450*/ MOV         R1, R6 
    /*00006454*/ BL          0x0000000000006454          @ hil_is_phys_in_mmz [R_ARM_CALL: +0x0] 
    /*00006458*/ CMP         R0, #0 
    /*0000645c*/ BEQ         VgsIoctl.constprop.13_x6428
    /*00006460*/ MOV         R1, R6 
    /*00006464*/ MOV         R0, FP 
    /*00006468*/ BL          0x0000000000006468          @ hil_map_mmz_check_phys [R_ARM_CALL: +0x0] 
    /*0000646c*/ CMP         R0, #0 
    /*00006470*/ BEQ         VgsIoctl.constprop.13_x6428
    /*00006474*/ MOVW        R3, #5661                   @ 0x161d 
    /*00006478*/ MOVW        R2, #0                      @ .LC103 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x160c] 
    /*0000647c*/ STR         R3, [SP] 
    /*00006480*/ MOVT        R2, #0                      @ .LC103 [R_ARM_MOVT_ABS: .rodata.str1.4+0x160c] 
    /*00006484*/ LDR         R3, [PC, #640]              @ 0x000000000000670c 
    /*00006488*/ MOV         R1, #45                     @ 0x2d 
    /*0000648c*/ MOV         R0, #3 
    /*00006490*/ MOVW        R4, #32771                  @ 0x8003 
    /*00006494*/ BL          0x0000000000006494          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00006498*/ MOVT        R4, #41005                  @ 0xa02d 
    VgsIoctl.constprop.13_x649c:
    /*0000649c*/ MOV         R0, SL 
    /*000064a0*/ BL          0x00000000000064A0          @ osal_vfree [R_ARM_CALL: +0x0] 
    VgsIoctl.constprop.13_x64a4:
    /*000064a4*/ MOV         R0, R9 
    /*000064a8*/ BL          0x00000000000064A8          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*000064ac*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x64b0:
    /*000064b0*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*000064b4*/ SUB         R2, R3, #1 
    /*000064b8*/ CMP         R2, #99                     @ 0x63 
    /*000064bc*/ BHI         VgsIoctl.constprop.13_x65f8
    /*000064c0*/ BL          0x00000000000064C0          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*000064c4*/ SUBS        R6, R0, #0 
    /*000064c8*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*000064cc*/ ADD         R1, R5, #8 
    /*000064d0*/ BL          0x0000000000000DB4 
    /*000064d4*/ SUBS        R4, R0, #0 
    /*000064d8*/ BNE         VgsIoctl.constprop.13_x631c
    /*000064dc*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*000064e0*/ MOV         R0, #24 
    /*000064e4*/ MUL         R0, R0, R3 
    /*000064e8*/ BL          0x00000000000064E8          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*000064ec*/ SUBS        R7, R0, #0 
    /*000064f0*/ BEQ         VgsIoctl.constprop.13_x66c8
    /*000064f4*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*000064f8*/ MOV         R2, #24 
    /*000064fc*/ LDR         R1, [R5, #724]              @ 0x2d4 
    /*00006500*/ MOV         R0, R7 
    /*00006504*/ MUL         R2, R2, R3 
    /*00006508*/ BL          0x0000000000000460 
    /*0000650c*/ SUBS        R4, R0, #0 
    /*00006510*/ BNE         VgsIoctl.constprop.13_x6530
    /*00006514*/ LDR         R3, [R5, #720]              @ 0x2d0 
    /*00006518*/ MOV         R2, R7 
    /*0000651c*/ LDR         R0, [R5] 
    /*00006520*/ MOV         R1, R6 
    /*00006524*/ BL          0x0000000000006524          @ VGS_UsrAddDrawlineTask [R_ARM_CALL: .text+0x5a34] 
    /*00006528*/ SUBS        R4, R0, #0 
    /*0000652c*/ BEQ         VgsIoctl.constprop.13_x6290
    VgsIoctl.constprop.13_x6530:
    /*00006530*/ MOV         R0, R7 
    /*00006534*/ BL          0x0000000000006534          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*00006538*/ B           VgsIoctl.constprop.13_x631c
    VgsIoctl.constprop.13_x653c:
    /*0000653c*/ MOV         R3, #0 
    /*00006540*/ STR         R3, [SP, #16] 
    /*00006544*/ STR         R3, [SP, #20] 
    /*00006548*/ STR         R3, [SP, #24] 
    /*0000654c*/ STR         R3, [SP, #28] 
    /*00006550*/ STR         R3, [SP, #32] 
    /*00006554*/ STR         R3, [SP, #36]               @ 0x24 
    /*00006558*/ BL          0x0000000000006558          @ VGS_GetFreeTask [R_ARM_CALL: .text+0x140] 
    /*0000655c*/ SUBS        R7, R0, #0 
    /*00006560*/ BEQ         VgsIoctl.constprop.13_x62ac
    /*00006564*/ ADD         R1, R5, #8 
    /*00006568*/ BL          0x0000000000000DB4 
    /*0000656c*/ SUBS        R4, R0, #0 
    /*00006570*/ BNE         VgsIoctl.constprop.13_x658c
    /*00006574*/ MOV         R2, #24 
    /*00006578*/ LDR         R1, [R5, #724]              @ 0x2d4 
    /*0000657c*/ ADD         R0, SP, #16 
    /*00006580*/ BL          0x0000000000000460 
    /*00006584*/ SUBS        R4, R0, #0 
    /*00006588*/ BEQ         VgsIoctl.constprop.13_x6618
    VgsIoctl.constprop.13_x658c:
    /*0000658c*/ MOV         R0, R7 
    /*00006590*/ BL          0x0000000000006590          @ VGS_PutFreeTask [R_ARM_CALL: .text+0xa8] 
    /*00006594*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x6598:
    /*00006598*/ ADD         R1, R5, #8 
    /*0000659c*/ BL          0x0000000000000DB4 
    /*000065a0*/ SUBS        R4, R0, #0 
    /*000065a4*/ BNE         VgsIoctl.constprop.13_x631c
    /*000065a8*/ MOV         R2, R7 
    /*000065ac*/ MOV         R1, R6 
    /*000065b0*/ LDR         R0, [R5] 
    /*000065b4*/ BL          0x00000000000065B4          @ VGS_AddRotationTask [R_ARM_CALL: .text+0x3824] 
    /*000065b8*/ MOV         R4, R0 
    /*000065bc*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x65c0:
    /*000065c0*/ STR         R3, [SP, #4] 
    /*000065c4*/ MOV         R2, #100                    @ 0x64 
    /*000065c8*/ MOVW        R3, #5620                   @ 0x15f4 
    VgsIoctl.constprop.13_x65cc:
    /*000065cc*/ STR         R2, [SP, #8] 
    /*000065d0*/ MOV         R1, #45                     @ 0x2d 
    /*000065d4*/ STR         R3, [SP] 
    /*000065d8*/ MOVW        R2, #0                      @ .LC98 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x14f4] 
    /*000065dc*/ LDR         R3, [PC, #296]              @ 0x000000000000670c 
    /*000065e0*/ MOVT        R2, #0                      @ .LC98 [R_ARM_MOVT_ABS: .rodata.str1.4+0x14f4] 
    /*000065e4*/ MOV         R0, #3 
    /*000065e8*/ MOVW        R4, #32771                  @ 0x8003 
    /*000065ec*/ BL          0x00000000000065EC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000065f0*/ MOVT        R4, #41005                  @ 0xa02d 
    /*000065f4*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x65f8:
    /*000065f8*/ STR         R3, [SP, #4] 
    /*000065fc*/ MOV         R2, #100                    @ 0x64 
    /*00006600*/ MOVW        R3, #5495                   @ 0x1577 
    /*00006604*/ B           VgsIoctl.constprop.13_x65cc
    VgsIoctl.constprop.13_x6608:
    /*00006608*/ STR         R3, [SP, #4] 
    /*0000660c*/ MOV         R2, #100                    @ 0x64 
    /*00006610*/ MOVW        R3, #5556                   @ 0x15b4 
    /*00006614*/ B           VgsIoctl.constprop.13_x65cc
    VgsIoctl.constprop.13_x6618:
    /*00006618*/ MOV         R3, R6 
    /*0000661c*/ ADD         R2, SP, #16 
    /*00006620*/ LDR         R0, [R5] 
    /*00006624*/ MOV         R1, R7 
    /*00006628*/ BL          0x0000000000006628          @ VGS_UsrAddDrawlineTask [R_ARM_CALL: .text+0x5a34] 
    /*0000662c*/ SUBS        R4, R0, #0 
    /*00006630*/ BEQ         VgsIoctl.constprop.13_x60d8
    /*00006634*/ B           VgsIoctl.constprop.13_x658c
    VgsIoctl.constprop.13_x6638:
    /*00006638*/ LDR         R0, [R5] 
    /*0000663c*/ MOV         R2, SL 
    /*00006640*/ MOV         R1, R9 
    /*00006644*/ BL          0x0000000000006644          @ VGS_UsrAddOsdTask [R_ARM_CALL: .text+0x5de4] 
    /*00006648*/ SUBS        R4, R0, #0 
    /*0000664c*/ BNE         VgsIoctl.constprop.13_x649c
    /*00006650*/ MOV         R0, SL 
    /*00006654*/ BL          0x0000000000006654          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*00006658*/ B           VgsIoctl.constprop.13_x60d8
    VgsIoctl.constprop.13_x665c:
    /*0000665c*/ MOV         R1, R8 
    /*00006660*/ MOV         R0, R4 
    /*00006664*/ BL          0x0000000000006664          @ hil_map_mmz_check_phys [R_ARM_CALL: +0x0] 
    /*00006668*/ CMP         R0, #0 
    /*0000666c*/ BEQ         VgsIoctl.constprop.13_x6394
    /*00006670*/ MOVW        R3, #5467                   @ 0x155b 
    /*00006674*/ MOVW        R2, #0                      @ .LC102 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x15d4] 
    /*00006678*/ STR         R3, [SP] 
    /*0000667c*/ MOVT        R2, #0                      @ .LC102 [R_ARM_MOVT_ABS: .rodata.str1.4+0x15d4] 
    /*00006680*/ LDR         R3, [PC, #132]              @ 0x000000000000670c 
    /*00006684*/ MOV         R1, #45                     @ 0x2d 
    /*00006688*/ MOV         R0, #3 
    /*0000668c*/ MOVW        R4, #32771                  @ 0x8003 
    /*00006690*/ BL          0x0000000000006690          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00006694*/ MOVT        R4, #41005                  @ 0xa02d 
    /*00006698*/ B           VgsIoctl.constprop.13_x658c
    VgsIoctl.constprop.13_x669c:
    /*0000669c*/ MOVW        R2, #0                      @ .LC100 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1570] 
    /*000066a0*/ MOVT        R2, #0                      @ .LC100 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1570] 
    /*000066a4*/ MOVW        R3, #5578                   @ 0x15ca 
    /*000066a8*/ STR         R3, [SP] 
    VgsIoctl.constprop.13_x66ac:
    /*000066ac*/ LDR         R3, [PC, #88]               @ 0x000000000000670c 
    /*000066b0*/ MOV         R1, #45                     @ 0x2d 
    /*000066b4*/ MOV         R0, #3 
    /*000066b8*/ MOVW        R4, #32771                  @ 0x8003 
    /*000066bc*/ BL          0x00000000000066BC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000066c0*/ MOVT        R4, #41005                  @ 0xa02d 
    /*000066c4*/ B           VgsIoctl.constprop.13_x631c
    VgsIoctl.constprop.13_x66c8:
    /*000066c8*/ MOVW        R3, #5517                   @ 0x158d 
    /*000066cc*/ MOVW        R2, #0                      @ .LC99 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x153c] 
    /*000066d0*/ STR         R3, [SP] 
    /*000066d4*/ MOVT        R2, #0                      @ .LC99 [R_ARM_MOVT_ABS: .rodata.str1.4+0x153c] 
    /*000066d8*/ B           VgsIoctl.constprop.13_x66ac
    VgsIoctl.constprop.13_x66dc:
    /*000066dc*/ MOVW        R3, #5642                   @ 0x160a 
    /*000066e0*/ MOVW        R2, #0                      @ .LC101 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x15a4] 
    /*000066e4*/ STR         R3, [SP] 
    /*000066e8*/ MOVT        R2, #0                      @ .LC101 [R_ARM_MOVT_ABS: .rodata.str1.4+0x15a4] 
    /*000066ec*/ LDR         R3, [PC, #24]               @ 0x000000000000670c 
    /*000066f0*/ MOV         R1, #45                     @ 0x2d 
    /*000066f4*/ MOV         R0, #3 
    /*000066f8*/ MOVW        R4, #32771                  @ 0x8003 
    /*000066fc*/ BL          0x00000000000066FC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00006700*/ MOVT        R4, #41005                  @ 0xa02d 
    /*00006704*/ B           VgsIoctl.constprop.13_x64a4
    /*00006708*/ ANDEQ       R0, R0, IP 
    /*0000670c*/ ANDEQ       R0, R0, R0, LSR #6 
FUNC_END VgsIoctl.constprop.13


FUNC_BEGIN VGS_Ioctl
    /*00006710*/ B           0x0000000000006058 
FUNC_END VGS_Ioctl


FUNC_BEGIN VGS_CancelAllBusyJob
    /*00006714*/ LDR         R2, [PC, #1028]             @ 0x0000000000006b20 
    /*00006718*/ MOVW        R0, #0                      @ .LC104 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x164c] 
    /*0000671c*/ LDR         R3, [PC, #1024]             @ 0x0000000000006b24 
    /*00006720*/ MOVT        R0, #0                      @ .LC104 [R_ARM_MOVT_ABS: .rodata.str1.4+0x164c] 
    /*00006724*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00006728*/ SUB         SP, SP, #68                 @ 0x44 
    /*0000672c*/ MOV         R1, R3 
    /*00006730*/ SUB         FP, R2, #68                 @ 0x44 
    /*00006734*/ STR         R3, [SP, #52]               @ 0x34 
    /*00006738*/ MOV         R3, #0 
    /*0000673c*/ STR         R2, [SP, #32] 
    /*00006740*/ STR         R2, [SP, #28] 
    /*00006744*/ MOV         R2, #3 
    /*00006748*/ STR         R0, [SP, #24] 
    /*0000674c*/ STR         R3, [SP, #40]               @ 0x28 
    /*00006750*/ STR         R1, [SP, #48]               @ 0x30 
    /*00006754*/ STR         R2, [SP, #20] 
    /*00006758*/ STR         R3, [SP, #60]               @ 0x3c 
    VGS_CancelAllBusyJob_x675c:
    /*0000675c*/ LDR         R2, [SP, #28] 
    /*00006760*/ LDR         R3, [R2, #-52]              @ 0xffffffcc 
    /*00006764*/ LDR         R2, [R2] 
    /*00006768*/ CMP         R3, #0 
    /*0000676c*/ BEQ         VGS_CancelAllBusyJob_x68f8
    /*00006770*/ MOVW        SL, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00006774*/ MOVT        SL, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006778*/ MOV         R1, #0 
    /*0000677c*/ STR         R1, [SP, #36]               @ 0x24 
    /*00006780*/ STR         R1, [SP, #16] 
    /*00006784*/ LSL         R1, R2, #3 
    /*00006788*/ STR         R1, [SP, #44]               @ 0x2c 
    VGS_CancelAllBusyJob_x678c:
    /*0000678c*/ CMP         R2, #0 
    /*00006790*/ BEQ         VGS_CancelAllBusyJob_x68d4
    /*00006794*/ LDR         R8, [SP, #36]               @ 0x24 
    /*00006798*/ MOV         R9, #0 
    /*0000679c*/ LDR         R3, [SP, #40]               @ 0x28 
    /*000067a0*/ ADD         R3, R3, #20 
    /*000067a4*/ STR         R3, [SP, #12] 
    VGS_CancelAllBusyJob_x67a8:
    /*000067a8*/ LDR         R1, [SP, #12] 
    /*000067ac*/ LDR         R3, [SL, #8] 
    /*000067b0*/ LDR         R3, [R3, R1, LSL #2] 
    /*000067b4*/ ADD         R1, R3, R8 
    /*000067b8*/ LDR         R4, [R3, R8] 
    /*000067bc*/ CMP         R1, R4 
    /*000067c0*/ LDR         R5, [R4] 
    /*000067c4*/ ADDNE       R6, SP, #60                 @ 0x3c 
    /*000067c8*/ BEQ         VGS_CancelAllBusyJob_x68bc
    VGS_CancelAllBusyJob_x67cc:
    /*000067cc*/ MOV         R1, R6 
    /*000067d0*/ MOV         R0, FP 
    /*000067d4*/ BL          0x00000000000067D4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000067d8*/ MOV         R2, R9 
    /*000067dc*/ LDR         R3, [SL, #8] 
    /*000067e0*/ LDR         R1, [SP, #16] 
    /*000067e4*/ LDR         R0, [SP, #20] 
    /*000067e8*/ STR         R4, [SP] 
    /*000067ec*/ BL          0x00000000000067EC          @ VGS_GetJobFromProcList [R_ARM_CALL: .text+0x86d0] 
    /*000067f0*/ MOV         R3, #6 
    /*000067f4*/ MOV         R1, R6 
    /*000067f8*/ STR         R3, [R4, #20] 
    /*000067fc*/ MOV         R0, FP 
    /*00006800*/ BL          0x0000000000006800          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006804*/ CMP         R4, #0 
    /*00006808*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*0000680c*/ LDR         R3, [SP, #24] 
    /*00006810*/ MOVW        R2, #4190                   @ 0x105e 
    /*00006814*/ LDR         R1, [PC, #780]              @ 0x0000000000006b28 
    /*00006818*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*0000681c*/ BEQ         VGS_CancelAllBusyJob_x6830
    /*00006820*/ LDR         IP, [R4, #20] 
    /*00006824*/ SUB         IP, IP, #5 
    /*00006828*/ CMP         IP, #1 
    /*0000682c*/ BLS         VGS_CancelAllBusyJob_x6834
    VGS_CancelAllBusyJob_x6830:
    /*00006830*/ BL          0x0000000000006830          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_CancelAllBusyJob_x6834:
    /*00006834*/ MOV         R1, #3 
    /*00006838*/ MOV         R0, R4 
    /*0000683c*/ BL          0x0000000000001590 
    /*00006840*/ LDR         R7, [R4, #104]              @ 0x68 
    /*00006844*/ ADD         R3, R4, #48                 @ 0x30 
    /*00006848*/ MOV         R2, #3 
    /*0000684c*/ CMP         R7, #0 
    /*00006850*/ BEQ         VGS_CancelAllBusyJob_x6864
    /*00006854*/ ADD         R0, R4, #32 
    /*00006858*/ STR         R2, [R4, #96]               @ 0x60 
    /*0000685c*/ LDM         R0, {R0, R1, R2} 
    /*00006860*/ BLX         R7 
    VGS_CancelAllBusyJob_x6864:
    /*00006864*/ MOV         R1, R6 
    /*00006868*/ MOV         R0, FP 
    /*0000686c*/ BL          0x000000000000686C          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006870*/ MOV         R1, R4 
    /*00006874*/ LDR         R0, [SL, #8] 
    /*00006878*/ BL          0x0000000000006878          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*0000687c*/ ADD         R0, R4, #116                @ 0x74 
    /*00006880*/ BL          0x0000000000006880          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00006884*/ MOV         R1, R6 
    /*00006888*/ MOV         R0, FP 
    /*0000688c*/ MOV         R4, R5 
    /*00006890*/ BL          0x0000000000006890          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006894*/ LDR         R3, [SL, #8] 
    /*00006898*/ LDR         R1, [SP, #12] 
    /*0000689c*/ MOV         R2, R5 
    /*000068a0*/ LDR         R5, [R5] 
    /*000068a4*/ LDR         R3, [R3, R1, LSL #2] 
    /*000068a8*/ ADD         R3, R3, R8 
    /*000068ac*/ CMP         R2, R3 
    /*000068b0*/ BNE         VGS_CancelAllBusyJob_x67cc
    /*000068b4*/ LDR         R3, [SP, #28] 
    /*000068b8*/ LDR         R2, [R3] 
    VGS_CancelAllBusyJob_x68bc:
    /*000068bc*/ ADD         R9, R9, #1 
    /*000068c0*/ ADD         R8, R8, #8 
    /*000068c4*/ CMP         R2, R9 
    /*000068c8*/ BHI         VGS_CancelAllBusyJob_x67a8
    /*000068cc*/ LDR         R3, [SP, #28] 
    /*000068d0*/ LDR         R3, [R3, #-52]              @ 0xffffffcc 
    VGS_CancelAllBusyJob_x68d4:
    /*000068d4*/ LDR         R1, [SP, #16] 
    /*000068d8*/ LDR         R0, [SP, #36]               @ 0x24 
    /*000068dc*/ ADD         R1, R1, #1 
    /*000068e0*/ LDR         IP, [SP, #44]               @ 0x2c 
    /*000068e4*/ CMP         R3, R1 
    /*000068e8*/ STR         R1, [SP, #16] 
    /*000068ec*/ ADD         R0, R0, IP 
    /*000068f0*/ STR         R0, [SP, #36]               @ 0x24 
    /*000068f4*/ BHI         VGS_CancelAllBusyJob_x678c
    VGS_CancelAllBusyJob_x68f8:
    /*000068f8*/ LDR         R3, [SP, #40]               @ 0x28 
    /*000068fc*/ LDR         R2, [SP, #28] 
    /*00006900*/ ADD         R3, R3, #1 
    /*00006904*/ STR         R3, [SP, #40]               @ 0x28 
    /*00006908*/ CMP         R3, #13 
    /*0000690c*/ ADD         R2, R2, #4 
    /*00006910*/ STR         R2, [SP, #28] 
    /*00006914*/ BEQ         VGS_CancelAllBusyJob_x692c
    /*00006918*/ LDR         R3, [SP, #48]               @ 0x30 
    /*0000691c*/ LDR         R2, [R3, #4]! 
    /*00006920*/ STR         R2, [SP, #20] 
    /*00006924*/ STR         R3, [SP, #48]               @ 0x30 
    /*00006928*/ B           VGS_CancelAllBusyJob_x675c
    VGS_CancelAllBusyJob_x692c:
    /*0000692c*/ LDR         FP, [PC, #504]              @ 0x0000000000006b2c 
    /*00006930*/ MOVW        R3, #0                      @ .LC105 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x16c0] 
    /*00006934*/ MOVT        R3, #0                      @ .LC105 [R_ARM_MOVT_ABS: .rodata.str1.4+0x16c0] 
    /*00006938*/ STR         R3, [SP, #24] 
    /*0000693c*/ MOV         R3, #3 
    /*00006940*/ STR         R3, [SP, #20] 
    /*00006944*/ MOV         R3, #0 
    /*00006948*/ STR         R3, [SP, #36]               @ 0x24 
    VGS_CancelAllBusyJob_x694c:
    /*0000694c*/ LDR         R2, [SP, #32] 
    /*00006950*/ LDR         R3, [R2, #-52]              @ 0xffffffcc 
    /*00006954*/ LDR         R2, [R2] 
    /*00006958*/ CMP         R3, #0 
    /*0000695c*/ BEQ         VGS_CancelAllBusyJob_x6ae4
    /*00006960*/ MOVW        SL, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00006964*/ MOVT        SL, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006968*/ MOV         R1, #0 
    /*0000696c*/ STR         R1, [SP, #28] 
    /*00006970*/ STR         R1, [SP, #16] 
    /*00006974*/ LSL         R1, R2, #3 
    /*00006978*/ STR         R1, [SP, #40]               @ 0x28 
    VGS_CancelAllBusyJob_x697c:
    /*0000697c*/ CMP         R2, #0 
    /*00006980*/ BEQ         VGS_CancelAllBusyJob_x6ac0
    /*00006984*/ LDR         R8, [SP, #28] 
    /*00006988*/ MOV         R9, #0 
    /*0000698c*/ LDR         R3, [SP, #36]               @ 0x24 
    /*00006990*/ ADD         R3, R3, #6 
    /*00006994*/ STR         R3, [SP, #12] 
    VGS_CancelAllBusyJob_x6998:
    /*00006998*/ LDR         R1, [SP, #12] 
    /*0000699c*/ LDR         R3, [SL, #8] 
    /*000069a0*/ ADD         R3, R3, R1, LSL #2 
    /*000069a4*/ LDR         R3, [R3, #4] 
    /*000069a8*/ ADD         R1, R3, R8 
    /*000069ac*/ LDR         R4, [R3, R8] 
    /*000069b0*/ CMP         R1, R4 
    /*000069b4*/ LDR         R5, [R4] 
    /*000069b8*/ ADDNE       R6, SP, #60                 @ 0x3c 
    /*000069bc*/ BEQ         VGS_CancelAllBusyJob_x6aa8
    VGS_CancelAllBusyJob_x69c0:
    /*000069c0*/ MOV         R1, R6 
    /*000069c4*/ MOV         R0, FP 
    /*000069c8*/ BL          0x00000000000069C8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*000069cc*/ LDR         R3, [SL, #8] 
    /*000069d0*/ MOV         R2, R9 
    /*000069d4*/ LDR         R1, [SP, #16] 
    /*000069d8*/ LDR         R0, [SP, #20] 
    /*000069dc*/ STR         R4, [SP] 
    /*000069e0*/ BL          0x00000000000069E0          @ VGS_GetJobFromBusyList [R_ARM_CALL: .text+0x8534] 
    /*000069e4*/ MOV         R1, R6 
    /*000069e8*/ MOV         R0, FP 
    /*000069ec*/ BL          0x00000000000069EC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*000069f0*/ CMP         R4, #0 
    /*000069f4*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*000069f8*/ LDR         R3, [SP, #24] 
    /*000069fc*/ MOV         R2, #4224                   @ 0x1080 
    /*00006a00*/ LDR         R1, [PC, #288]              @ 0x0000000000006b28 
    /*00006a04*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00006a08*/ BEQ         VGS_CancelAllBusyJob_x6a18
    /*00006a0c*/ LDR         IP, [R4, #20] 
    /*00006a10*/ CMP         IP, #2 
    /*00006a14*/ BEQ         VGS_CancelAllBusyJob_x6a1c
    VGS_CancelAllBusyJob_x6a18:
    /*00006a18*/ BL          0x0000000000006A18          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_CancelAllBusyJob_x6a1c:
    /*00006a1c*/ MOV         R1, #3 
    /*00006a20*/ MOV         R0, R4 
    /*00006a24*/ BL          0x0000000000001590 
    /*00006a28*/ LDR         R7, [R4, #104]              @ 0x68 
    /*00006a2c*/ ADD         R3, R4, #48                 @ 0x30 
    /*00006a30*/ MOV         R2, #3 
    /*00006a34*/ CMP         R7, #0 
    /*00006a38*/ BEQ         VGS_CancelAllBusyJob_x6a4c
    /*00006a3c*/ ADD         R0, R4, #32 
    /*00006a40*/ STR         R2, [R4, #96]               @ 0x60 
    /*00006a44*/ LDM         R0, {R0, R1, R2} 
    /*00006a48*/ BLX         R7 
    VGS_CancelAllBusyJob_x6a4c:
    /*00006a4c*/ MOV         R1, R6 
    /*00006a50*/ MOV         R0, FP 
    /*00006a54*/ BL          0x0000000000006A54          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006a58*/ MOV         R1, R4 
    /*00006a5c*/ LDR         R0, [SL, #8] 
    /*00006a60*/ BL          0x0000000000006A60          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*00006a64*/ ADD         R0, R4, #116                @ 0x74 
    /*00006a68*/ BL          0x0000000000006A68          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00006a6c*/ MOV         R1, R6 
    /*00006a70*/ MOV         R0, FP 
    /*00006a74*/ MOV         R4, R5 
    /*00006a78*/ BL          0x0000000000006A78          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006a7c*/ LDR         R1, [SP, #12] 
    /*00006a80*/ LDR         R3, [SL, #8] 
    /*00006a84*/ MOV         R2, R5 
    /*00006a88*/ LDR         R5, [R5] 
    /*00006a8c*/ ADD         R3, R3, R1, LSL #2 
    /*00006a90*/ LDR         R3, [R3, #4] 
    /*00006a94*/ ADD         R3, R3, R8 
    /*00006a98*/ CMP         R2, R3 
    /*00006a9c*/ BNE         VGS_CancelAllBusyJob_x69c0
    /*00006aa0*/ LDR         R3, [SP, #32] 
    /*00006aa4*/ LDR         R2, [R3] 
    VGS_CancelAllBusyJob_x6aa8:
    /*00006aa8*/ ADD         R9, R9, #1 
    /*00006aac*/ ADD         R8, R8, #8 
    /*00006ab0*/ CMP         R2, R9 
    /*00006ab4*/ BHI         VGS_CancelAllBusyJob_x6998
    /*00006ab8*/ LDR         R3, [SP, #32] 
    /*00006abc*/ LDR         R3, [R3, #-52]              @ 0xffffffcc 
    VGS_CancelAllBusyJob_x6ac0:
    /*00006ac0*/ LDR         R1, [SP, #16] 
    /*00006ac4*/ LDR         R0, [SP, #28] 
    /*00006ac8*/ ADD         R1, R1, #1 
    /*00006acc*/ LDR         IP, [SP, #40]               @ 0x28 
    /*00006ad0*/ CMP         R3, R1 
    /*00006ad4*/ STR         R1, [SP, #16] 
    /*00006ad8*/ ADD         R0, R0, IP 
    /*00006adc*/ STR         R0, [SP, #28] 
    /*00006ae0*/ BHI         VGS_CancelAllBusyJob_x697c
    VGS_CancelAllBusyJob_x6ae4:
    /*00006ae4*/ LDR         R3, [SP, #36]               @ 0x24 
    /*00006ae8*/ LDR         R2, [SP, #32] 
    /*00006aec*/ ADD         R3, R3, #1 
    /*00006af0*/ STR         R3, [SP, #36]               @ 0x24 
    /*00006af4*/ CMP         R3, #13 
    /*00006af8*/ ADD         R2, R2, #4 
    /*00006afc*/ STR         R2, [SP, #32] 
    /*00006b00*/ BEQ         VGS_CancelAllBusyJob_x6b18
    /*00006b04*/ LDR         R3, [SP, #52]               @ 0x34 
    /*00006b08*/ LDR         R2, [R3, #4]! 
    /*00006b0c*/ STR         R2, [SP, #20] 
    /*00006b10*/ STR         R3, [SP, #52]               @ 0x34 
    /*00006b14*/ B           VGS_CancelAllBusyJob_x694c
    VGS_CancelAllBusyJob_x6b18:
    /*00006b18*/ ADD         SP, SP, #68                 @ 0x44 
    /*00006b1c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*00006b20*/ ANDEQ       R0, R0, R8, ASR #32 
    /*00006b24*/ STRHEQ      R0, [R0], -IP 
    /*00006b28*/ ANDEQ       R0, R0, IP, LSR #6 
    /*00006b2c*/ ANDEQ       R0, R0, R4 
FUNC_END VGS_CancelAllBusyJob


FUNC_BEGIN VGS_CancelAllCreatedJob
    /*00006b30*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00006b34*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00006b38*/ SUB         SP, SP, #8 
    /*00006b3c*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006b40*/ MOV         R3, #0 
    /*00006b44*/ STR         R3, [SP, #4] 
    /*00006b48*/ LDR         R3, [R5, #8] 
    /*00006b4c*/ LDR         R4, [R3, #20]! 
    /*00006b50*/ CMP         R4, R3 
    /*00006b54*/ LDR         R6, [R4] 
    /*00006b58*/ BEQ         VGS_CancelAllCreatedJob_x6c54
    /*00006b5c*/ LDR         R9, [PC, #248]              @ 0x0000000000006c5c 
    /*00006b60*/ MOVW        R8, #0                      @ .LC106 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1704] 
    /*00006b64*/ ADD         R7, R5, #4 
    /*00006b68*/ MOVT        R8, #0                      @ .LC106 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1704] 
    VGS_CancelAllCreatedJob_x6b6c:
    /*00006b6c*/ ADD         R1, SP, #4 
    /*00006b70*/ MOV         R0, R7 
    /*00006b74*/ BL          0x0000000000006B74          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006b78*/ MOV         R1, R4 
    /*00006b7c*/ LDR         R0, [R5, #8] 
    /*00006b80*/ BL          0x0000000000006B80          @ VGS_GetJobFromCreatedList [R_ARM_CALL: .text+0x8330] 
    /*00006b84*/ ADD         R1, SP, #4 
    /*00006b88*/ MOV         R0, R7 
    /*00006b8c*/ BL          0x0000000000006B8C          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006b90*/ CMP         R4, #0 
    /*00006b94*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00006b98*/ MOV         R3, R8 
    /*00006b9c*/ MOVW        R2, #4272                   @ 0x10b0 
    /*00006ba0*/ MOV         R1, R9 
    /*00006ba4*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00006ba8*/ BEQ         VGS_CancelAllCreatedJob_x6bb8
    /*00006bac*/ LDR         IP, [R4, #20] 
    /*00006bb0*/ CMP         IP, #1 
    /*00006bb4*/ BEQ         VGS_CancelAllCreatedJob_x6bbc
    VGS_CancelAllCreatedJob_x6bb8:
    /*00006bb8*/ BL          0x0000000000006BB8          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_CancelAllCreatedJob_x6bbc:
    /*00006bbc*/ LDR         R3, [R5, #1032]             @ 0x408 
    /*00006bc0*/ MOV         R0, R4 
    /*00006bc4*/ ADD         R3, R3, #1 
    /*00006bc8*/ STR         R3, [R5, #1032]             @ 0x408 
    /*00006bcc*/ BL          0x0000000000006BCC          @ VGS_QueryTaskNumInJob [R_ARM_CALL: .text+0x7e0c] 
    /*00006bd0*/ LDR         R3, [R5, #1044]             @ 0x414 
    /*00006bd4*/ MOV         R1, #3 
    /*00006bd8*/ ADD         R3, R3, R0 
    /*00006bdc*/ MOV         R0, R4 
    /*00006be0*/ STR         R3, [R5, #1044]             @ 0x414 
    /*00006be4*/ BL          0x0000000000001590 
    /*00006be8*/ LDR         SL, [R4, #104]              @ 0x68 
    /*00006bec*/ ADD         R3, R4, #48                 @ 0x30 
    /*00006bf0*/ MOV         R2, #3 
    /*00006bf4*/ CMP         SL, #0 
    /*00006bf8*/ BEQ         VGS_CancelAllCreatedJob_x6c0c
    /*00006bfc*/ ADD         R0, R4, #32 
    /*00006c00*/ STR         R2, [R4, #96]               @ 0x60 
    /*00006c04*/ LDM         R0, {R0, R1, R2} 
    /*00006c08*/ BLX         SL 
    VGS_CancelAllCreatedJob_x6c0c:
    /*00006c0c*/ ADD         R1, SP, #4 
    /*00006c10*/ MOV         R0, R7 
    /*00006c14*/ BL          0x0000000000006C14          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006c18*/ MOV         R1, R4 
    /*00006c1c*/ LDR         R0, [R5, #8] 
    /*00006c20*/ BL          0x0000000000006C20          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*00006c24*/ ADD         R0, R4, #116                @ 0x74 
    /*00006c28*/ BL          0x0000000000006C28          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00006c2c*/ ADD         R1, SP, #4 
    /*00006c30*/ MOV         R0, R7 
    /*00006c34*/ MOV         R4, R6 
    /*00006c38*/ BL          0x0000000000006C38          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006c3c*/ LDR         R3, [R5, #8] 
    /*00006c40*/ MOV         R2, R6 
    /*00006c44*/ LDR         R6, [R6] 
    /*00006c48*/ ADD         R3, R3, #20 
    /*00006c4c*/ CMP         R2, R3 
    /*00006c50*/ BNE         VGS_CancelAllCreatedJob_x6b6c
    VGS_CancelAllCreatedJob_x6c54:
    /*00006c54*/ ADD         SP, SP, #8 
    /*00006c58*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    /*00006c5c*/ ANDEQ       R0, R0, R4, ASR #6 
FUNC_END VGS_CancelAllCreatedJob


FUNC_BEGIN VGS_Exit
    /*00006c60*/ PUSH        {R4, LR} 
    /*00006c64*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00006c68*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006c6c*/ SUB         SP, SP, #8 
    /*00006c70*/ LDR         R3, [R4] 
    /*00006c74*/ CMP         R3, #0 
    /*00006c78*/ BEQ         VGS_Exit_x6ce4
    /*00006c7c*/ BL          0x0000000000006C7C          @ VGS_DrvCommExit [R_ARM_CALL: .text+0xa80c] 
    /*00006c80*/ BL          0x0000000000006C80          @ VGS_CancelAllBusyJob [R_ARM_CALL: .text+0x6714] 
    /*00006c84*/ BL          0x0000000000006C84          @ VGS_CancelAllCreatedJob [R_ARM_CALL: .text+0x6b30] 
    /*00006c88*/ BL          0x0000000000006C88          @ VGS_DrvCommClose [R_ARM_CALL: .text+0xa190] 
    /*00006c8c*/ LDR         R0, [R4, #8] 
    /*00006c90*/ ADD         R1, R0, #304                @ 0x130 
    /*00006c94*/ BL          0x0000000000006C94          @ VGS_DeInitBuf [R_ARM_CALL: .text+0x7cfc] 
    /*00006c98*/ LDR         R0, [R4, #8] 
    /*00006c9c*/ BL          0x0000000000006C9C          @ osal_kfree [R_ARM_CALL: +0x0] 
    /*00006ca0*/ MOV         R0, R4 
    /*00006ca4*/ MOV         R3, #0 
    /*00006ca8*/ STR         R3, [R0], #184              @ 0xb8 
    /*00006cac*/ STR         R3, [R4, #8] 
    /*00006cb0*/ BL          0x0000000000006CB0          @ osal_sema_destory [R_ARM_CALL: +0x0] 
    /*00006cb4*/ ADD         R0, R4, #180                @ 0xb4 
    /*00006cb8*/ BL          0x0000000000006CB8          @ osal_spin_lock_destory [R_ARM_CALL: +0x0] 
    /*00006cbc*/ ADD         R0, R4, #4 
    /*00006cc0*/ BL          0x0000000000006CC0          @ osal_spin_lock_destory [R_ARM_CALL: +0x0] 
    /*00006cc4*/ MOVW        R3, #5110                   @ 0x13f6 
    /*00006cc8*/ MOVW        R2, #0                      @ .LC107 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1748] 
    /*00006ccc*/ STR         R3, [SP] 
    /*00006cd0*/ MOVT        R2, #0                      @ .LC107 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1748] 
    /*00006cd4*/ LDR         R3, [PC, #16]               @ 0x0000000000006cec 
    /*00006cd8*/ MOV         R1, #45                     @ 0x2d 
    /*00006cdc*/ MOV         R0, #6 
    /*00006ce0*/ BL          0x0000000000006CE0          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_Exit_x6ce4:
    /*00006ce4*/ ADD         SP, SP, #8 
    /*00006ce8*/ POP         {R4, PC} 
    /*00006cec*/ ANDEQ       R0, R0, IP, ASR R3 
FUNC_END VGS_Exit


FUNC_BEGIN VGS_JobCallBack
    /*00006cf0*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00006cf4*/ SUB         SP, SP, #20 
    /*00006cf8*/ LDR         R3, [R0, #20] 
    /*00006cfc*/ MOV         R5, #0 
    /*00006d00*/ STR         R5, [SP, #8] 
    /*00006d04*/ SUB         R2, R3, #6 
    /*00006d08*/ CMP         R2, #1 
    /*00006d0c*/ BLS         VGS_JobCallBack_x6d40
    /*00006d10*/ CMP         R3, #5 
    /*00006d14*/ BEQ         VGS_JobCallBack_x6f10
    /*00006d18*/ MOVW        R3, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x888] 
    /*00006d1c*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00006d20*/ MOVT        R3, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x888] 
    /*00006d24*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00006d28*/ MOVW        R2, #4384                   @ 0x1120 
    /*00006d2c*/ LDR         R1, [PC, #484]              @ 0x0000000000006f18 
    /*00006d30*/ BL          0x0000000000006D30          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00006d34*/ MOV         R0, R5 
    VGS_JobCallBack_x6d38:
    /*00006d38*/ ADD         SP, SP, #20 
    /*00006d3c*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_JobCallBack_x6d40:
    /*00006d40*/ CMP         R3, #6 
    /*00006d44*/ MOVW        R5, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00006d48*/ MOVT        R5, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006d4c*/ MOV         R4, R0 
    /*00006d50*/ MOVNE       R8, #2 
    /*00006d54*/ MOVEQ       R8, #1 
    /*00006d58*/ MOV         R1, R8 
    /*00006d5c*/ LDR         R6, [R5, #8] 
    /*00006d60*/ BL          0x0000000000001590 
    /*00006d64*/ LDR         R7, [R4, #104]              @ 0x68 
    /*00006d68*/ CMP         R7, #0 
    /*00006d6c*/ BEQ         VGS_JobCallBack_x6d84
    /*00006d70*/ ADD         R0, R4, #32 
    /*00006d74*/ STR         R8, [R4, #96]               @ 0x60 
    /*00006d78*/ ADD         R3, R4, #48                 @ 0x30 
    /*00006d7c*/ LDM         R0, {R0, R1, R2} 
    /*00006d80*/ BLX         R7 
    VGS_JobCallBack_x6d84:
    /*00006d84*/ LDR         R1, [R4, #32] 
    /*00006d88*/ ADD         R8, SP, #16 
    /*00006d8c*/ LDR         R2, [R4, #20] 
    /*00006d90*/ ADD         R0, R4, #172                @ 0xac 
    /*00006d94*/ LDR         R3, [R4, #120]              @ 0x78 
    /*00006d98*/ MOV         R9, #0 
    /*00006d9c*/ STR         R1, [R4, #144]              @ 0x90 
    /*00006da0*/ ADD         R7, R4, #136                @ 0x88 
    /*00006da4*/ STR         R2, [R4, #152]              @ 0x98 
    /*00006da8*/ STR         R3, [R4, #140]              @ 0x8c 
    /*00006dac*/ STR         R9, [R8, #-4]! 
    /*00006db0*/ BL          0x0000000000006DB0          @ osal_gettimeofday [R_ARM_CALL: +0x0] 
    /*00006db4*/ LDR         R1, [R4, #164]              @ 0xa4 
    /*00006db8*/ MOVW        R0, #16960                  @ 0x4240 
    /*00006dbc*/ LDR         R3, [R4, #172]              @ 0xac 
    /*00006dc0*/ MOVT        R0, #15 
    /*00006dc4*/ LDR         R2, [R4, #176]              @ 0xb0 
    /*00006dc8*/ SUB         R3, R3, R1 
    /*00006dcc*/ LDR         R1, [R4, #168]              @ 0xa8 
    /*00006dd0*/ SUB         R2, R2, R1 
    /*00006dd4*/ MOV         R1, R8 
    /*00006dd8*/ MLA         R3, R0, R3, R2 
    /*00006ddc*/ MOV         R2, #1 
    /*00006de0*/ LDR         R0, [PC, #308]              @ 0x0000000000006f1c 
    /*00006de4*/ STR         R2, [R4, #136]              @ 0x88 
    /*00006de8*/ STR         R3, [R4, #196]              @ 0xc4 
    /*00006dec*/ BL          0x0000000000006DEC          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006df0*/ LDR         R3, [R5, #924]              @ 0x39c 
    /*00006df4*/ LDR         R0, [PC, #292]              @ 0x0000000000006f20 
    /*00006df8*/ MOV         R1, R7 
    /*00006dfc*/ CMP         R3, #7 
    /*00006e00*/ STRHI       R9, [R5, #924]              @ 0x39c 
    /*00006e04*/ MOVLS       R2, #92                     @ 0x5c 
    /*00006e08*/ MLALS       R0, R2, R3, R0 
    /*00006e0c*/ MOV         R2, #92                     @ 0x5c 
    /*00006e10*/ BL          0x0000000000006E10          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00006e14*/ LDR         R3, [R5, #924]              @ 0x39c 
    /*00006e18*/ MOV         R1, R8 
    /*00006e1c*/ LDR         R0, [PC, #248]              @ 0x0000000000006f1c 
    /*00006e20*/ ADD         R3, R3, #1 
    /*00006e24*/ STR         R3, [R5, #924]              @ 0x39c 
    /*00006e28*/ BL          0x0000000000006E28          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006e2c*/ LDR         R3, [R5, #1020]             @ 0x3fc 
    /*00006e30*/ MOVW        R0, #19923                  @ 0x4dd3 
    /*00006e34*/ MOVT        R0, #4194                   @ 0x1062 
    /*00006e38*/ ADD         R3, R3, #1 
    /*00006e3c*/ MOV         IP, #500                    @ 0x1f4 
    /*00006e40*/ STR         R3, [R5, #1020]             @ 0x3fc 
    /*00006e44*/ UMULL       R0, R1, R3, R0 
    /*00006e48*/ LSR         R2, R1, #5 
    /*00006e4c*/ MLS         R3, IP, R2, R3 
    /*00006e50*/ CMP         R3, #0 
    /*00006e54*/ BEQ         VGS_JobCallBack_x6e68
    /*00006e58*/ LDR         R2, [R5, #988]              @ 0x3dc 
    /*00006e5c*/ LDR         R3, [R4, #196]              @ 0xc4 
    /*00006e60*/ CMP         R2, R3 
    /*00006e64*/ BCS         VGS_JobCallBack_x6e78
    VGS_JobCallBack_x6e68:
    /*00006e68*/ MOV         R1, R7 
    /*00006e6c*/ MOV         R2, #92                     @ 0x5c 
    /*00006e70*/ LDR         R0, [PC, #172]              @ 0x0000000000006f24 
    /*00006e74*/ BL          0x0000000000006E74          @ osal_memcpy [R_ARM_CALL: +0x0] 
    VGS_JobCallBack_x6e78:
    /*00006e78*/ MOV         R5, #0 
    /*00006e7c*/ LDR         R0, [PC, #152]              @ 0x0000000000006f1c 
    /*00006e80*/ ADD         R1, SP, #8 
    /*00006e84*/ STRB        R5, [R4, #212]              @ 0xd4 
    /*00006e88*/ STRB        R5, [R4, #213]              @ 0xd5 
    /*00006e8c*/ STRB        R5, [R4, #214]              @ 0xd6 
    /*00006e90*/ STRB        R5, [R4, #215]              @ 0xd7 
    /*00006e94*/ STRB        R5, [R4, #216]              @ 0xd8 
    /*00006e98*/ STRB        R5, [R4, #217]              @ 0xd9 
    /*00006e9c*/ STRB        R5, [R4, #218]              @ 0xda 
    /*00006ea0*/ STRB        R5, [R4, #219]              @ 0xdb 
    /*00006ea4*/ STRB        R5, [R4, #220]              @ 0xdc 
    /*00006ea8*/ STRB        R5, [R4, #221]              @ 0xdd 
    /*00006eac*/ STRB        R5, [R4, #222]              @ 0xde 
    /*00006eb0*/ STRB        R5, [R4, #223]              @ 0xdf 
    /*00006eb4*/ BL          0x0000000000006EB4          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006eb8*/ LDR         R2, [R4, #40]               @ 0x28 
    /*00006ebc*/ LDR         R1, [R4, #36]               @ 0x24 
    /*00006ec0*/ MOV         R3, R6 
    /*00006ec4*/ LDR         R0, [R4, #32] 
    /*00006ec8*/ STR         R4, [SP] 
    /*00006ecc*/ BL          0x0000000000006ECC          @ VGS_GetJobFromProcList [R_ARM_CALL: .text+0x86d0] 
    /*00006ed0*/ LDR         R3, [R4, #128]              @ 0x80 
    /*00006ed4*/ CMP         R3, R5 
    /*00006ed8*/ BNE         VGS_JobCallBack_x6f00
    /*00006edc*/ MOV         R1, R4 
    /*00006ee0*/ MOV         R0, R6 
    /*00006ee4*/ BL          0x0000000000006EE4          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    VGS_JobCallBack_x6ee8:
    /*00006ee8*/ ADD         R1, SP, #8 
    /*00006eec*/ LDR         R0, [PC, #40]               @ 0x0000000000006f1c 
    /*00006ef0*/ BL          0x0000000000006EF0          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006ef4*/ MOV         R0, #0 
    /*00006ef8*/ ADD         SP, SP, #20 
    /*00006efc*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_JobCallBack_x6f00:
    /*00006f00*/ STR         R5, [R4, #132]              @ 0x84 
    /*00006f04*/ ADD         R0, R4, #116                @ 0x74 
    /*00006f08*/ BL          0x0000000000006F08          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00006f0c*/ B           VGS_JobCallBack_x6ee8
    VGS_JobCallBack_x6f10:
    /*00006f10*/ MVN         R0, #0 
    /*00006f14*/ B           VGS_JobCallBack_x6d38
    /*00006f18*/ ANDEQ       R0, R0, R8, ROR #6 
    /*00006f1c*/ ANDEQ       R0, R0, R4 
    /*00006f20*/ STRHEQ      R0, [R0], -IP 
    /*00006f24*/ ANDEQ       R0, R0, R0, LSR #7 
FUNC_END VGS_JobCallBack


FUNC_BEGIN VGS_IntCallBack
    /*00006f28*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00006f2c*/ CMP         R0, #0 
    /*00006f30*/ SUB         SP, SP, #28 
    /*00006f34*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00006f38*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00006f3c*/ MOV         R3, #0 
    /*00006f40*/ STR         R3, [SP, #20] 
    /*00006f44*/ LDR         R8, [R4, #8] 
    /*00006f48*/ BLT         VGS_IntCallBack_x70c0
    /*00006f4c*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00006f50*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00006f54*/ LDR         R3, [R3] 
    /*00006f58*/ CMP         R0, R3 
    /*00006f5c*/ BCS         VGS_IntCallBack_x70c0
    /*00006f60*/ LDR         R3, [R8, #4] 
    /*00006f64*/ MOV         R6, R1 
    /*00006f68*/ LDR         R5, [R3, R0, LSL #2] 
    /*00006f6c*/ LDR         R3, [R5, #20] 
    /*00006f70*/ CMP         R3, #5 
    /*00006f74*/ BEQ         VGS_IntCallBack_x6fa8
    /*00006f78*/ MOVW        R2, #4430                   @ 0x114e 
    /*00006f7c*/ LDR         R1, [PC, #360]              @ 0x00000000000070ec 
    /*00006f80*/ MOVW        R0, #0                      @ .LC109 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x17b0] 
    /*00006f84*/ MOVT        R0, #0                      @ .LC109 [R_ARM_MOVT_ABS: .rodata.str1.4+0x17b0] 
    /*00006f88*/ BL          0x0000000000006F88          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00006f8c*/ MOVW        R3, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x888] 
    /*00006f90*/ MOVW        R0, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x338] 
    /*00006f94*/ MOVT        R3, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x888] 
    /*00006f98*/ MOVT        R0, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x338] 
    /*00006f9c*/ MOVW        R2, #4431                   @ 0x114f 
    /*00006fa0*/ LDR         R1, [PC, #324]              @ 0x00000000000070ec 
    /*00006fa4*/ BL          0x0000000000006FA4          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_IntCallBack_x6fa8:
    /*00006fa8*/ LDR         R0, [PC, #320]              @ 0x00000000000070f0 
    /*00006fac*/ ADD         R1, SP, #20 
    /*00006fb0*/ LDR         R9, [R5, #32] 
    /*00006fb4*/ LDR         SL, [R5, #36]               @ 0x24 
    /*00006fb8*/ LDR         FP, [R5, #40]               @ 0x28 
    /*00006fbc*/ BL          0x0000000000006FBC          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*00006fc0*/ ADD         R1, SP, #20 
    /*00006fc4*/ STR         R6, [R5, #20] 
    /*00006fc8*/ LDR         R0, [PC, #288]              @ 0x00000000000070f0 
    /*00006fcc*/ BL          0x0000000000006FCC          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*00006fd0*/ LDR         R3, [R4, #1024]             @ 0x400 
    /*00006fd4*/ MOV         R0, R5 
    /*00006fd8*/ ADD         R3, R3, #1 
    /*00006fdc*/ STR         R3, [R4, #1024]             @ 0x400 
    /*00006fe0*/ BL          0x0000000000006FE0          @ VGS_QueryTaskNumInJob [R_ARM_CALL: .text+0x7e0c] 
    /*00006fe4*/ SUB         R2, R9, #3 
    /*00006fe8*/ LDR         R3, [R4, #1036]             @ 0x40c 
    /*00006fec*/ CMP         R2, #42                     @ 0x2a 
    /*00006ff0*/ LDR         R1, [R4, #8] 
    /*00006ff4*/ ADD         R0, R3, R0 
    /*00006ff8*/ MOVWLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*00006ffc*/ MOVTLS      R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*00007000*/ MOVHI       R3, #13 
    /*00007004*/ ADDLS       R3, R3, R2 
    /*00007008*/ STR         R0, [R4, #1036]             @ 0x40c 
    /*0000700c*/ LDRBLS      R3, [R3, #84]               @ 0x54 
    /*00007010*/ ADD         R2, R3, #20 
    /*00007014*/ ADD         R0, R4, R3, LSL #2 
    /*00007018*/ LDR         R6, [R1, R2, LSL #2] 
    /*0000701c*/ LDR         R3, [R0, #72]               @ 0x48 
    /*00007020*/ MLA         R3, R3, SL, FP 
    /*00007024*/ LDR         R4, [R6, R3, LSL #3] 
    /*00007028*/ ADD         R6, R6, R3, LSL #3 
    /*0000702c*/ CMP         R6, R4 
    /*00007030*/ LDR         R5, [R4] 
    /*00007034*/ BEQ         VGS_IntCallBack_x70b8
    /*00007038*/ MOVW        R7, #0                      @ .LC110 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x17c4] 
    /*0000703c*/ MOVT        R7, #0                      @ .LC110 [R_ARM_MOVT_ABS: .rodata.str1.4+0x17c4] 
    VGS_IntCallBack_x7040:
    /*00007040*/ MOV         R3, R8 
    /*00007044*/ MOV         R2, FP 
    /*00007048*/ MOV         R1, SL 
    /*0000704c*/ MOV         R0, R9 
    /*00007050*/ BL          0x0000000000007050          @ VGS_QueryProcJobNum [R_ARM_CALL: .text+0x8824] 
    /*00007054*/ STR         R4, [SP, #12] 
    /*00007058*/ LDR         IP, [R4, #120]              @ 0x78 
    /*0000705c*/ MOVW        R2, #4455                   @ 0x1167 
    /*00007060*/ LDR         R3, [PC, #132]              @ 0x00000000000070ec 
    /*00007064*/ MOV         R1, #45                     @ 0x2d 
    /*00007068*/ STR         R2, [SP] 
    /*0000706c*/ MOV         R2, R7 
    /*00007070*/ STMIB       SP, {R0, IP} 
    /*00007074*/ MOV         R0, #7 
    /*00007078*/ BL          0x0000000000007078          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000707c*/ MOV         R0, R4 
    /*00007080*/ BL          0x0000000000007080          @ VGS_JobCallBack [R_ARM_CALL: .text+0x6cf0] 
    /*00007084*/ MOV         R4, R5 
    /*00007088*/ CMP         R0, #0 
    /*0000708c*/ BNE         VGS_IntCallBack_x70b8
    /*00007090*/ CMP         R5, R6 
    /*00007094*/ LDRNE       R5, [R5] 
    /*00007098*/ BNE         VGS_IntCallBack_x7040
    /*0000709c*/ LDR         R3, [R5] 
    /*000070a0*/ CMP         R3, R5 
    /*000070a4*/ MOV         R4, R3 
    /*000070a8*/ BEQ         VGS_IntCallBack_x70b8
    /*000070ac*/ CMP         R5, R3 
    /*000070b0*/ LDR         R5, [R3] 
    /*000070b4*/ BNE         VGS_IntCallBack_x7040
    VGS_IntCallBack_x70b8:
    /*000070b8*/ ADD         SP, SP, #28 
    /*000070bc*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_IntCallBack_x70c0:
    /*000070c0*/ STR         R0, [SP, #4] 
    /*000070c4*/ MOVW        R3, #4421                   @ 0x1145 
    /*000070c8*/ MOV         R1, #45                     @ 0x2d 
    /*000070cc*/ STR         R3, [SP] 
    /*000070d0*/ MOVW        R2, #0                      @ .LC108 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1780] 
    /*000070d4*/ LDR         R3, [PC, #16]               @ 0x00000000000070ec 
    /*000070d8*/ MOVT        R2, #0                      @ .LC108 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1780] 
    /*000070dc*/ MOV         R0, #3 
    /*000070e0*/ BL          0x00000000000070E0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000070e4*/ ADD         SP, SP, #28 
    /*000070e8*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*000070ec*/ ANDEQ       R0, R0, R8, ROR R3 
    /*000070f0*/ ANDEQ       R0, R0, R4 
FUNC_END VGS_IntCallBack


FUNC_BEGIN VGS_ProcInfo_ModParam
    /*000070f4*/ PUSH        {R4, LR} 
    /*000070f8*/ SUB         SP, SP, #8 
    /*000070fc*/ MOV         R4, R0 
    /*00007100*/ MOVW        R1, #0                      @ .LC111 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1808] 
    /*00007104*/ MOVT        R1, #0                      @ .LC111 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1808] 
    /*00007108*/ BL          0x0000000000007108          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*0000710c*/ MOV         R0, R4 
    /*00007110*/ MOVW        R2, #0                      @ .LC115 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1884] 
    /*00007114*/ MOVW        R3, #0                      @ .LC116 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1894] 
    /*00007118*/ MOVT        R2, #0                      @ .LC115 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1884] 
    /*0000711c*/ MOVT        R3, #0                      @ .LC116 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1894] 
    /*00007120*/ STR         R2, [SP, #4] 
    /*00007124*/ MOVW        R1, #0                      @ .LC114 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1870] 
    /*00007128*/ STR         R3, [SP] 
    /*0000712c*/ MOVT        R1, #0                      @ .LC114 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1870] 
    /*00007130*/ MOVW        R3, #0                      @ .LC112 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1854] 
    /*00007134*/ MOVW        R2, #0                      @ .LC113 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1864] 
    /*00007138*/ MOVT        R3, #0                      @ .LC112 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1854] 
    /*0000713c*/ MOVT        R2, #0                      @ .LC113 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1864] 
    /*00007140*/ BL          0x0000000000007140          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007144*/ MOVW        IP, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00007148*/ MOVW        LR, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*0000714c*/ MOVT        IP, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00007150*/ MOVT        LR, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00007154*/ MOV         R0, R4 
    /*00007158*/ LDR         R3, [IP, #4] 
    /*0000715c*/ MOVW        R1, #0                      @ .LC117 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18a4] 
    /*00007160*/ LDR         R2, [IP] 
    /*00007164*/ MOVT        R1, #0                      @ .LC117 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18a4] 
    /*00007168*/ LDR         R4, [IP, #12] 
    /*0000716c*/ LDR         IP, [LR, #1392]             @ 0x570 
    /*00007170*/ STM         SP, {R4, IP} 
    /*00007174*/ BL          0x0000000000007174          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007178*/ ADD         SP, SP, #8 
    /*0000717c*/ POP         {R4, PC} 
FUNC_END VGS_ProcInfo_ModParam


FUNC_BEGIN VGS_ProcInfo_JobAttrInfo1
    /*00007180*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00007184*/ MOVW        R3, #0                      @ .LC118 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18b8] 
    /*00007188*/ LDR         R5, [PC, #260]              @ 0x0000000000007294 
    /*0000718c*/ MOVW        R6, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*00007190*/ SUB         SP, SP, #44                 @ 0x2c 
    /*00007194*/ MOVT        R3, #0                      @ .LC118 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18b8] 
    /*00007198*/ ADD         R8, R5, #32 
    /*0000719c*/ MOVT        R6, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*000071a0*/ MOV         R7, R0 
    /*000071a4*/ MOV         R4, R1 
    /*000071a8*/ MOV         R9, R2 
    /*000071ac*/ B           VGS_ProcInfo_JobAttrInfo1_x71b4
    VGS_ProcInfo_JobAttrInfo1_x71b0:
    /*000071b0*/ LDR         R3, [R5, #4]! 
    VGS_ProcInfo_JobAttrInfo1_x71b4:
    /*000071b4*/ MOV         R2, R3 
    /*000071b8*/ MOV         R1, R6 
    /*000071bc*/ MOV         R0, R7 
    /*000071c0*/ BL          0x00000000000071C0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000071c4*/ CMP         R5, R8 
    /*000071c8*/ BNE         VGS_ProcInfo_JobAttrInfo1_x71b0
    /*000071cc*/ CMP         R9, #0 
    /*000071d0*/ LDR         R8, [PC, #192]              @ 0x0000000000007298 
    /*000071d4*/ MOVW        FP, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*000071d8*/ MOV         R5, #0 
    /*000071dc*/ MOVNE       R6, #1 
    /*000071e0*/ MOVEQ       R6, #8 
    /*000071e4*/ SUB         SL, R8, #740                @ 0x2e4 
    /*000071e8*/ MOVT        FP, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*000071ec*/ B           VGS_ProcInfo_JobAttrInfo1_x7208
    VGS_ProcInfo_JobAttrInfo1_x71f0:
    /*000071f0*/ CMP         R4, #0 
    /*000071f4*/ ADD         R5, R5, #1 
    /*000071f8*/ SUB         R4, R4, #1 
    /*000071fc*/ SUBEQ       R4, R6, #1 
    /*00007200*/ CMP         R6, R5 
    /*00007204*/ BEQ         VGS_ProcInfo_JobAttrInfo1_x728c
    VGS_ProcInfo_JobAttrInfo1_x7208:
    /*00007208*/ CMP         R9, #0 
    /*0000720c*/ MOV         R2, #92                     @ 0x5c 
    /*00007210*/ MOV         R3, R8 
    /*00007214*/ MLAEQ       R3, R2, R4, SL 
    /*00007218*/ LDR         R2, [R3] 
    /*0000721c*/ CMP         R2, #0 
    /*00007220*/ BEQ         VGS_ProcInfo_JobAttrInfo1_x71f0
    /*00007224*/ LDR         R0, [R3, #8] 
    /*00007228*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000722c*/ BL          0x000000000000722C          @ CMPI_GetModuleName [R_ARM_CALL: +0x0] 
    /*00007230*/ LDR         R3, [SP, #36]               @ 0x24 
    /*00007234*/ MOVW        R1, #0                      @ .LC120 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c8] 
    /*00007238*/ MOVT        R1, #0                      @ .LC120 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c8] 
    /*0000723c*/ LDR         IP, [R3, #16] 
    /*00007240*/ LDR         LR, [R3, #64]               @ 0x40 
    /*00007244*/ LDR         R2, [R3, #60]               @ 0x3c 
    /*00007248*/ ADD         IP, FP, IP, LSL #2 
    /*0000724c*/ STR         LR, [SP, #24] 
    /*00007250*/ LDR         IP, [IP, #940]              @ 0x3ac 
    /*00007254*/ LDR         LR, [R3, #24] 
    /*00007258*/ STR         R2, [SP, #20] 
    /*0000725c*/ LDR         R2, [R3, #20] 
    /*00007260*/ STR         IP, [SP, #8] 
    /*00007264*/ LDR         IP, [R3, #12] 
    /*00007268*/ LDR         R3, [R3, #4] 
    /*0000726c*/ STR         R2, [SP, #12] 
    /*00007270*/ MOV         R2, R5 
    /*00007274*/ STR         LR, [SP, #16] 
    /*00007278*/ STM         SP, {R3, IP} 
    /*0000727c*/ MOV         R3, R0 
    /*00007280*/ MOV         R0, R7 
    /*00007284*/ BL          0x0000000000007284          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007288*/ B           VGS_ProcInfo_JobAttrInfo1_x71f0
    VGS_ProcInfo_JobAttrInfo1_x728c:
    /*0000728c*/ ADD         SP, SP, #44                 @ 0x2c 
    /*00007290*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*00007294*/ ANDEQ       R0, R0, R8, LSL #7 
    /*00007298*/ ANDEQ       R0, R0, R0, LSR #7 
FUNC_END VGS_ProcInfo_JobAttrInfo1


FUNC_BEGIN VGS_ProcInfo_JobAttrInfo2
    /*0000729c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*000072a0*/ MOVW        R3, #0                      @ .LC118 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18b8] 
    /*000072a4*/ LDR         R5, [PC, #304]              @ 0x00000000000073dc 
    /*000072a8*/ MOVT        R3, #0                      @ .LC118 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18b8] 
    /*000072ac*/ MOVW        R7, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*000072b0*/ MOV         R9, R2 
    /*000072b4*/ SUB         SP, SP, #60                 @ 0x3c 
    /*000072b8*/ ADD         R8, R5, #52                 @ 0x34 
    /*000072bc*/ MOVT        R7, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*000072c0*/ MOV         R6, R0 
    /*000072c4*/ MOV         R4, R1 
    /*000072c8*/ MOV         R2, R3 
    /*000072cc*/ B           VGS_ProcInfo_JobAttrInfo2_x72d4
    VGS_ProcInfo_JobAttrInfo2_x72d0:
    /*000072d0*/ LDR         R2, [R5], #4 
    VGS_ProcInfo_JobAttrInfo2_x72d4:
    /*000072d4*/ MOV         R1, R7 
    /*000072d8*/ MOV         R0, R6 
    /*000072dc*/ BL          0x00000000000072DC          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000072e0*/ CMP         R5, R8 
    /*000072e4*/ BNE         VGS_ProcInfo_JobAttrInfo2_x72d0
    /*000072e8*/ CMP         R9, #0 
    /*000072ec*/ MOVW        SL, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .rodata+0x0] 
    /*000072f0*/ LDR         R8, [PC, #232]              @ 0x00000000000073e0 
    /*000072f4*/ MOVT        SL, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .rodata+0x0] 
    /*000072f8*/ MOVNE       R7, #1 
    /*000072fc*/ MOVEQ       R7, #8 
    /*00007300*/ MOV         R5, #0 
    /*00007304*/ B           VGS_ProcInfo_JobAttrInfo2_x7320
    VGS_ProcInfo_JobAttrInfo2_x7308:
    /*00007308*/ CMP         R4, #0 
    /*0000730c*/ ADD         R5, R5, #1 
    /*00007310*/ SUB         R4, R4, #1 
    /*00007314*/ SUBEQ       R4, R7, #1 
    /*00007318*/ CMP         R7, R5 
    /*0000731c*/ BEQ         VGS_ProcInfo_JobAttrInfo2_x73d4
    VGS_ProcInfo_JobAttrInfo2_x7320:
    /*00007320*/ CMP         R9, #0 
    /*00007324*/ MOV         R3, #92                     @ 0x5c 
    /*00007328*/ MOV         IP, R8 
    /*0000732c*/ LDREQ       R2, [PC, #176]              @ 0x00000000000073e4 
    /*00007330*/ MLAEQ       IP, R3, R4, R2 
    /*00007334*/ LDR         R3, [IP] 
    /*00007338*/ CMP         R3, #0 
    /*0000733c*/ BEQ         VGS_ProcInfo_JobAttrInfo2_x7308
    /*00007340*/ LDR         R2, [IP, #72]               @ 0x48 
    /*00007344*/ MOVW        R1, #0                      @ .LC121 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18ec] 
    /*00007348*/ LDRB        LR, [IP, #76]               @ 0x4c 
    /*0000734c*/ MOVT        R1, #0                      @ .LC121 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18ec] 
    /*00007350*/ LDR         R3, [IP, #68]               @ 0x44 
    /*00007354*/ ADD         R2, SL, R2, LSL #2 
    /*00007358*/ STR         LR, [SP, #4] 
    /*0000735c*/ LDR         R0, [R2, #1036]             @ 0x40c 
    /*00007360*/ ADD         R3, SL, R3, LSL #2 
    /*00007364*/ LDRB        LR, [IP, #87]               @ 0x57 
    /*00007368*/ MOV         R2, R5 
    /*0000736c*/ LDR         R3, [R3, #1036]             @ 0x40c 
    /*00007370*/ STR         R0, [SP] 
    /*00007374*/ MOV         R0, R6 
    /*00007378*/ LDRB        FP, [IP, #86]               @ 0x56 
    /*0000737c*/ STR         LR, [SP, #48]               @ 0x30 
    /*00007380*/ LDRB        LR, [IP, #85]               @ 0x55 
    /*00007384*/ STR         FP, [SP, #44]               @ 0x2c 
    /*00007388*/ LDRB        FP, [IP, #84]               @ 0x54 
    /*0000738c*/ STR         LR, [SP, #40]               @ 0x28 
    /*00007390*/ LDRB        LR, [IP, #83]               @ 0x53 
    /*00007394*/ STR         FP, [SP, #36]               @ 0x24 
    /*00007398*/ LDRB        FP, [IP, #82]               @ 0x52 
    /*0000739c*/ STR         LR, [SP, #32] 
    /*000073a0*/ LDRB        LR, [IP, #81]               @ 0x51 
    /*000073a4*/ STR         FP, [SP, #28] 
    /*000073a8*/ LDRB        FP, [IP, #80]               @ 0x50 
    /*000073ac*/ STR         LR, [SP, #24] 
    /*000073b0*/ LDRB        LR, [IP, #79]               @ 0x4f 
    /*000073b4*/ STR         FP, [SP, #20] 
    /*000073b8*/ LDRB        FP, [IP, #78]               @ 0x4e 
    /*000073bc*/ LDRB        IP, [IP, #77]               @ 0x4d 
    /*000073c0*/ STR         LR, [SP, #16] 
    /*000073c4*/ STR         FP, [SP, #12] 
    /*000073c8*/ STR         IP, [SP, #8] 
    /*000073cc*/ BL          0x00000000000073CC          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000073d0*/ B           VGS_ProcInfo_JobAttrInfo2_x7308
    VGS_ProcInfo_JobAttrInfo2_x73d4:
    /*000073d4*/ ADD         SP, SP, #60                 @ 0x3c 
    /*000073d8*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*000073dc*/ LDRDEQ      R0, [R0], -R8 
    /*000073e0*/ ANDEQ       R0, R0, R0, LSR #7 
    /*000073e4*/ STRHEQ      R0, [R0], -IP 
FUNC_END VGS_ProcInfo_JobAttrInfo2


FUNC_BEGIN VGS_ProcInfo_JobAttr
    /*000073e8*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000073ec*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000073f0*/ PUSH        {R4, R5, R6, LR} 
    /*000073f4*/ MOVW        R1, #0                      @ .LC122 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1920] 
    /*000073f8*/ LDR         R5, [R3, #924]              @ 0x39c 
    /*000073fc*/ MOV         R4, R0 
    /*00007400*/ MOVT        R1, #0                      @ .LC122 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1920] 
    /*00007404*/ CMP         R5, #0 
    /*00007408*/ SUBNE       R5, R5, #1 
    /*0000740c*/ MOVEQ       R5, #7 
    /*00007410*/ BL          0x0000000000007410          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007414*/ MOV         R2, #0 
    /*00007418*/ MOV         R1, R5 
    /*0000741c*/ MOV         R0, R4 
    /*00007420*/ BL          0x0000000000007420          @ VGS_ProcInfo_JobAttrInfo1 [R_ARM_CALL: .text+0x7180] 
    /*00007424*/ MOV         R0, R4 
    /*00007428*/ MOVW        R1, #0                      @ .LC123 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x196c] 
    /*0000742c*/ MOVT        R1, #0                      @ .LC123 [R_ARM_MOVT_ABS: .rodata.str1.4+0x196c] 
    /*00007430*/ BL          0x0000000000007430          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007434*/ MOV         R1, R5 
    /*00007438*/ MOV         R2, #0 
    /*0000743c*/ MOV         R0, R4 
    /*00007440*/ BL          0x0000000000007440          @ VGS_ProcInfo_JobAttrInfo2 [R_ARM_CALL: .text+0x729c] 
    /*00007444*/ MOV         R0, R4 
    /*00007448*/ MOVW        R1, #0                      @ .LC124 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x19bc] 
    /*0000744c*/ MOVT        R1, #0                      @ .LC124 [R_ARM_MOVT_ABS: .rodata.str1.4+0x19bc] 
    /*00007450*/ BL          0x0000000000007450          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007454*/ MOV         R2, #1 
    /*00007458*/ MOV         R0, R4 
    /*0000745c*/ MOV         R1, #0 
    /*00007460*/ BL          0x0000000000007460          @ VGS_ProcInfo_JobAttrInfo1 [R_ARM_CALL: .text+0x7180] 
    /*00007464*/ MOV         R0, R4 
    /*00007468*/ MOVW        R1, #0                      @ .LC125 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1a0c] 
    /*0000746c*/ MOVT        R1, #0                      @ .LC125 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1a0c] 
    /*00007470*/ BL          0x0000000000007470          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007474*/ MOV         R0, R4 
    /*00007478*/ MOV         R2, #1 
    /*0000747c*/ MOV         R1, #0 
    /*00007480*/ POP         {R4, R5, R6, LR} 
    VGS_ProcInfo_JobAttr_x7484:
    /*00007484*/ B           VGS_ProcInfo_JobAttr_x7484  @ VGS_ProcInfo_JobAttrInfo2 [R_ARM_JUMP24: .text+0x729c] 
FUNC_END VGS_ProcInfo_JobAttr


FUNC_BEGIN VGS_ProcInfo_JobStatus
    /*00007488*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*0000748c*/ MOVW        R1, #0                      @ .LC127 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1a68] 
    /*00007490*/ SUB         SP, SP, #20 
    /*00007494*/ MOV         R5, R0 
    /*00007498*/ MOVT        R1, #0                      @ .LC127 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1a68] 
    /*0000749c*/ LDR         R4, [PC, #260]              @ 0x00000000000075a8 
    /*000074a0*/ BL          0x00000000000074A0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000074a4*/ MOV         R0, R5 
    /*000074a8*/ MOVW        R2, #0                      @ .LC128 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ab4] 
    /*000074ac*/ MOVW        R1, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*000074b0*/ MOVT        R2, #0                      @ .LC128 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ab4] 
    /*000074b4*/ MOVT        R1, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*000074b8*/ BL          0x00000000000074B8          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000074bc*/ MOV         R0, R5 
    /*000074c0*/ MOVW        R2, #0                      @ .LC129 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ac0] 
    /*000074c4*/ MOVW        R1, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*000074c8*/ MOVT        R2, #0                      @ .LC129 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ac0] 
    /*000074cc*/ MOVT        R1, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*000074d0*/ BL          0x00000000000074D0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000074d4*/ MOV         R0, R5 
    /*000074d8*/ MOVW        R2, #0                      @ .LC130 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1acc] 
    /*000074dc*/ MOVW        R1, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*000074e0*/ MOVT        R2, #0                      @ .LC130 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1acc] 
    /*000074e4*/ MOVT        R1, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*000074e8*/ BL          0x00000000000074E8          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000074ec*/ MOVW        R6, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*000074f0*/ MOVW        R2, #0                      @ .LC126 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1a5c] 
    /*000074f4*/ ADD         R7, R4, #16 
    /*000074f8*/ MOVT        R2, #0                      @ .LC126 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1a5c] 
    /*000074fc*/ MOVT        R6, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*00007500*/ B           VGS_ProcInfo_JobStatus_x7508
    VGS_ProcInfo_JobStatus_x7504:
    /*00007504*/ LDR         R2, [R4], #4 
    VGS_ProcInfo_JobStatus_x7508:
    /*00007508*/ MOV         R1, R6 
    /*0000750c*/ MOV         R0, R5 
    /*00007510*/ BL          0x0000000000007510          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007514*/ CMP         R4, R7 
    /*00007518*/ BNE         VGS_ProcInfo_JobStatus_x7504
    /*0000751c*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00007520*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00007524*/ MOV         R0, R5 
    /*00007528*/ MOVW        R1, #0                      @ .LC131 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ad8] 
    /*0000752c*/ LDR         IP, [R4, #1032]             @ 0x408 
    /*00007530*/ MOVT        R1, #0                      @ .LC131 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ad8] 
    /*00007534*/ LDR         R2, [R4, #1024]             @ 0x400 
    /*00007538*/ LDR         R3, [R4, #1028]             @ 0x404 
    /*0000753c*/ STR         IP, [SP] 
    /*00007540*/ BL          0x0000000000007540          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007544*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00007548*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*0000754c*/ LDR         R0, [R4, #8] 
    /*00007550*/ LDR         R8, [R3] 
    /*00007554*/ BL          0x0000000000007554          @ VGS_QueryFreeJobNum [R_ARM_CALL: .text+0x7ee4] 
    /*00007558*/ MOV         R6, R0 
    /*0000755c*/ LDR         R0, [R4, #8] 
    /*00007560*/ BL          0x0000000000007560          @ VGS_QueryCreatedJobNum [R_ARM_CALL: .text+0x8328] 
    /*00007564*/ MOV         R9, R0 
    /*00007568*/ LDR         R0, [R4, #8] 
    /*0000756c*/ BL          0x000000000000756C          @ VGS_QueryBusyTotalJobNum [R_ARM_CALL: .text+0x86c8] 
    /*00007570*/ MOV         R7, R0 
    /*00007574*/ LDR         R0, [R4, #8] 
    /*00007578*/ BL          0x0000000000007578          @ VGS_QueryProcTotalJobNum [R_ARM_CALL: .text+0x8864] 
    /*0000757c*/ STR         R9, [SP] 
    /*00007580*/ MOV         R2, R8 
    /*00007584*/ STR         R7, [SP, #4] 
    /*00007588*/ MOV         R3, R6 
    /*0000758c*/ MOVW        R1, #0                      @ .LC132 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ae8] 
    /*00007590*/ MOVT        R1, #0                      @ .LC132 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ae8] 
    /*00007594*/ STR         R0, [SP, #8] 
    /*00007598*/ MOV         R0, R5 
    /*0000759c*/ BL          0x000000000000759C          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000075a0*/ ADD         SP, SP, #20 
    /*000075a4*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    /*000075a8*/ ANDEQ       R0, R0, R0, LSR #8 
FUNC_END VGS_ProcInfo_JobStatus


FUNC_BEGIN VGS_ProcInfo_TaskStatus
    /*000075ac*/ PUSH        {R4, R5, R6, LR} 
    /*000075b0*/ MOVW        R5, #0                      @ .LC119 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x18c4] 
    /*000075b4*/ MOVT        R5, #0                      @ .LC119 [R_ARM_MOVT_ABS: .rodata.str1.4+0x18c4] 
    /*000075b8*/ SUB         SP, SP, #8 
    /*000075bc*/ MOV         R4, R0 
    /*000075c0*/ MOVW        R1, #0                      @ .LC133 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1b00] 
    /*000075c4*/ MOVT        R1, #0                      @ .LC133 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1b00] 
    /*000075c8*/ MOVW        R6, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*000075cc*/ BL          0x00000000000075CC          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000075d0*/ MOV         R1, R5 
    /*000075d4*/ MOV         R0, R4 
    /*000075d8*/ MOVW        R2, #0                      @ .LC128 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ab4] 
    /*000075dc*/ MOVT        R2, #0                      @ .LC128 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ab4] 
    /*000075e0*/ MOVT        R6, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*000075e4*/ BL          0x00000000000075E4          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000075e8*/ MOV         R1, R5 
    /*000075ec*/ MOV         R0, R4 
    /*000075f0*/ MOVW        R2, #0                      @ .LC129 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ac0] 
    /*000075f4*/ MOVT        R2, #0                      @ .LC129 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ac0] 
    /*000075f8*/ BL          0x00000000000075F8          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000075fc*/ MOV         R1, R5 
    /*00007600*/ MOV         R0, R4 
    /*00007604*/ MOVW        R2, #0                      @ .LC130 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1acc] 
    /*00007608*/ MOVT        R2, #0                      @ .LC130 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1acc] 
    /*0000760c*/ BL          0x000000000000760C          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007610*/ MOV         R1, R5 
    /*00007614*/ MOV         R0, R4 
    /*00007618*/ MOVW        R2, #0                      @ .LC134 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1b4c] 
    /*0000761c*/ MOVT        R2, #0                      @ .LC134 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1b4c] 
    /*00007620*/ BL          0x0000000000007620          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007624*/ MOV         R1, R5 
    /*00007628*/ MOV         R0, R4 
    /*0000762c*/ MOVW        R2, #0                      @ .LC135 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1b58] 
    /*00007630*/ MOVT        R2, #0                      @ .LC135 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1b58] 
    /*00007634*/ BL          0x0000000000007634          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007638*/ MOV         R1, R5 
    /*0000763c*/ MOV         R0, R4 
    /*00007640*/ MOVW        R2, #0                      @ .LC136 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1b64] 
    /*00007644*/ MOVT        R2, #0                      @ .LC136 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1b64] 
    /*00007648*/ BL          0x0000000000007648          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*0000764c*/ LDR         R0, [R6, #8] 
    /*00007650*/ ADD         R0, R0, #304                @ 0x130 
    /*00007654*/ BL          0x0000000000007654          @ VGS_QueryFreeTaskNum [R_ARM_CALL: .text+0x7d58] 
    /*00007658*/ LDR         IP, [R6, #1044]             @ 0x414 
    /*0000765c*/ LDR         R3, [R6, #1040]             @ 0x410 
    /*00007660*/ MOVW        R1, #0                      @ .LC131 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ad8] 
    /*00007664*/ LDR         R2, [R6, #1036]             @ 0x40c 
    /*00007668*/ MOVT        R1, #0                      @ .LC131 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ad8] 
    /*0000766c*/ STR         IP, [SP] 
    /*00007670*/ MOV         R5, R0 
    /*00007674*/ MOV         R0, R4 
    /*00007678*/ BL          0x0000000000007678          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*0000767c*/ MOVW        R2, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00007680*/ MOVT        R2, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00007684*/ MOV         R3, R5 
    /*00007688*/ MOV         R0, R4 
    /*0000768c*/ MOVW        R1, #0                      @ .LC137 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1b70] 
    /*00007690*/ LDR         R2, [R2, #4] 
    /*00007694*/ MOVT        R1, #0                      @ .LC137 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1b70] 
    /*00007698*/ SUB         R5, R2, R5 
    /*0000769c*/ STR         R5, [SP] 
    /*000076a0*/ BL          0x00000000000076A0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000076a4*/ ADD         SP, SP, #8 
    /*000076a8*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_ProcInfo_TaskStatus


FUNC_BEGIN VGS_ProcInfo_NodeStatus
    /*000076ac*/ PUSH        {R4, LR} 
    /*000076b0*/ SUB         SP, SP, #16 
    /*000076b4*/ MOV         R4, R0 
    /*000076b8*/ MOVW        R1, #0                      @ .LC138 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1b80] 
    /*000076bc*/ MOVT        R1, #0                      @ .LC138 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1b80] 
    /*000076c0*/ BL          0x00000000000076C0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000076c4*/ MOV         R0, R4 
    /*000076c8*/ MOVW        R2, #0                      @ .LC142 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1bfc] 
    /*000076cc*/ MOVW        R3, #0                      @ .LC143 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1c04] 
    /*000076d0*/ MOVT        R2, #0                      @ .LC142 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1bfc] 
    /*000076d4*/ MOVT        R3, #0                      @ .LC143 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1c04] 
    /*000076d8*/ STR         R2, [SP, #12] 
    /*000076dc*/ MOVW        R1, #0                      @ .LC141 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1be0] 
    /*000076e0*/ STR         R3, [SP, #8] 
    /*000076e4*/ MOVT        R1, #0                      @ .LC141 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1be0] 
    /*000076e8*/ MOVW        R2, #0                      @ .LC144 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1c10] 
    /*000076ec*/ MOVW        R3, #0                      @ .LC145 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1c1c] 
    /*000076f0*/ MOVT        R2, #0                      @ .LC144 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1c10] 
    /*000076f4*/ MOVT        R3, #0                      @ .LC145 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1c1c] 
    /*000076f8*/ STR         R2, [SP, #4] 
    /*000076fc*/ MOVW        R2, #0                      @ .LC140 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1bd4] 
    /*00007700*/ STR         R3, [SP] 
    /*00007704*/ MOVT        R2, #0                      @ .LC140 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1bd4] 
    /*00007708*/ MOVW        R3, #0                      @ .LC139 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1bcc] 
    /*0000770c*/ MOVT        R3, #0                      @ .LC139 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1bcc] 
    /*00007710*/ BL          0x0000000000007710          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007714*/ BL          0x0000000000007714          @ VGS_DrvCommGetProc [R_ARM_CALL: .text+0x9538] 
    /*00007718*/ MOVW        R2, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*0000771c*/ MOVT        R2, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00007720*/ MOVW        R1, #0                      @ .LC146 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1c24] 
    /*00007724*/ MOVT        R1, #0                      @ .LC146 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1c24] 
    /*00007728*/ LDR         LR, [R0, #16] 
    /*0000772c*/ MOV         IP, R0 
    /*00007730*/ LDR         R3, [R0] 
    /*00007734*/ MOV         R0, R4 
    /*00007738*/ STR         LR, [SP, #12] 
    /*0000773c*/ LDR         LR, [IP, #12] 
    /*00007740*/ LDR         R2, [R2, #12] 
    /*00007744*/ STR         LR, [SP, #8] 
    /*00007748*/ SUB         R3, R2, R3 
    /*0000774c*/ LDR         LR, [IP, #8] 
    /*00007750*/ STR         LR, [SP, #4] 
    /*00007754*/ LDR         IP, [IP, #4] 
    /*00007758*/ STR         IP, [SP] 
    /*0000775c*/ BL          0x000000000000775C          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*00007760*/ ADD         SP, SP, #16 
    /*00007764*/ POP         {R4, PC} 
FUNC_END VGS_ProcInfo_NodeStatus


FUNC_BEGIN VGS_ProcShow
    /*00007768*/ PUSH        {R4, LR} 
    /*0000776c*/ MOVW        R1, #0                      @ .LC147 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1c40] 
    /*00007770*/ MOV         R4, R0 
    /*00007774*/ MOVT        R1, #0                      @ .LC147 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1c40] 
    /*00007778*/ BL          0x0000000000007778          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*0000777c*/ MOV         R0, R4 
    /*00007780*/ BL          0x0000000000007780          @ VGS_ProcInfo_ModParam [R_ARM_CALL: .text+0x70f4] 
    /*00007784*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00007788*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*0000778c*/ MOV         R0, R4 
    /*00007790*/ LDR         R3, [R3] 
    /*00007794*/ CMP         R3, #1 
    /*00007798*/ BEQ         VGS_ProcShow_x77b0
    /*0000779c*/ MOVW        R1, #0                      @ .LC148 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ca0] 
    /*000077a0*/ MOVT        R1, #0                      @ .LC148 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ca0] 
    /*000077a4*/ BL          0x00000000000077A4          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000077a8*/ MOV         R0, #0 
    /*000077ac*/ POP         {R4, PC} 
    VGS_ProcShow_x77b0:
    /*000077b0*/ BL          0x00000000000077B0          @ VGS_ProcInfo_JobAttr [R_ARM_CALL: .text+0x73e8] 
    /*000077b4*/ MOV         R0, R4 
    /*000077b8*/ MOVW        R1, #0                      @ .LC149 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ca4] 
    /*000077bc*/ MOVT        R1, #0                      @ .LC149 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ca4] 
    /*000077c0*/ BL          0x00000000000077C0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000077c4*/ MOV         R0, R4 
    /*000077c8*/ BL          0x00000000000077C8          @ VGS_ProcInfo_JobStatus [R_ARM_CALL: .text+0x7488] 
    /*000077cc*/ MOV         R0, R4 
    /*000077d0*/ MOVW        R1, #0                      @ .LC149 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ca4] 
    /*000077d4*/ MOVT        R1, #0                      @ .LC149 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ca4] 
    /*000077d8*/ BL          0x00000000000077D8          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000077dc*/ MOV         R0, R4 
    /*000077e0*/ BL          0x00000000000077E0          @ VGS_ProcInfo_TaskStatus [R_ARM_CALL: .text+0x75ac] 
    /*000077e4*/ MOV         R0, R4 
    /*000077e8*/ MOVW        R1, #0                      @ .LC149 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ca4] 
    /*000077ec*/ MOVT        R1, #0                      @ .LC149 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ca4] 
    /*000077f0*/ BL          0x00000000000077F0          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*000077f4*/ MOV         R0, R4 
    /*000077f8*/ BL          0x00000000000077F8          @ VGS_ProcInfo_NodeStatus [R_ARM_CALL: .text+0x76ac] 
    /*000077fc*/ MOV         R0, R4 
    /*00007800*/ MOVW        R1, #0                      @ .LC149 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ca4] 
    /*00007804*/ MOVT        R1, #0                      @ .LC149 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ca4] 
    /*00007808*/ BL          0x0000000000007808          @ osal_seq_printf [R_ARM_CALL: +0x0] 
    /*0000780c*/ MOV         R0, #0 
    /*00007810*/ POP         {R4, PC} 
FUNC_END VGS_ProcShow


FUNC_BEGIN VGS_CheckModuleParam
    /*00007814*/ PUSH        {R4, LR} 
    /*00007818*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*0000781c*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x0] 
    /*00007820*/ LDR         R1, [R4] 
    /*00007824*/ CMP         R1, #400                    @ 0x190 
    /*00007828*/ BHI         VGS_CheckModuleParam_x79b4
    /*0000782c*/ CMP         R1, #19 
    /*00007830*/ BLS         VGS_CheckModuleParam_x7964
    VGS_CheckModuleParam_x7834:
    /*00007834*/ LDR         R1, [R4, #4] 
    /*00007838*/ CMP         R1, #800                    @ 0x320 
    /*0000783c*/ BHI         VGS_CheckModuleParam_x798c
    VGS_CheckModuleParam_x7840:
    /*00007840*/ CMP         R1, #19 
    /*00007844*/ BLS         VGS_CheckModuleParam_x791c
    VGS_CheckModuleParam_x7848:
    /*00007848*/ LDR         R1, [R4, #12] 
    /*0000784c*/ CMP         R1, #800                    @ 0x320 
    /*00007850*/ BHI         VGS_CheckModuleParam_x7944
    VGS_CheckModuleParam_x7854:
    /*00007854*/ CMP         R1, #19 
    /*00007858*/ BLS         VGS_CheckModuleParam_x78d4
    VGS_CheckModuleParam_x785c:
    /*0000785c*/ LDR         R1, [R4, #8] 
    /*00007860*/ CMP         R1, #100                    @ 0x64 
    /*00007864*/ BHI         VGS_CheckModuleParam_x78fc
    VGS_CheckModuleParam_x7868:
    /*00007868*/ CMP         R1, #0 
    /*0000786c*/ BEQ         VGS_CheckModuleParam_x78b4
    VGS_CheckModuleParam_x7870:
    /*00007870*/ MOVW        R3, #0                      @ vgs_en [R_ARM_MOVW_ABS_NC: .data+0x124] 
    /*00007874*/ MOVT        R3, #0                      @ vgs_en [R_ARM_MOVT_ABS: .data+0x124] 
    /*00007878*/ LDR         R1, [R3] 
    /*0000787c*/ CMP         R1, #1 
    /*00007880*/ BNE         VGS_CheckModuleParam_x79d4
    /*00007884*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00007888*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*0000788c*/ LDR         R1, [R4, #1392]             @ 0x570 
    /*00007890*/ CMP         R1, #1 
    /*00007894*/ BLS         VGS_CheckModuleParam_x79ac
    /*00007898*/ MOVW        R0, #0                      @ .LC159 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1f4c] 
    /*0000789c*/ MOVT        R0, #0                      @ .LC159 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1f4c] 
    /*000078a0*/ BL          0x00000000000078A0          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000078a4*/ MOV         R3, #0 
    /*000078a8*/ MOV         R0, R3 
    /*000078ac*/ STR         R3, [R4, #1392]             @ 0x570 
    /*000078b0*/ POP         {R4, PC} 
    VGS_CheckModuleParam_x78b4:
    /*000078b4*/ MOV         R3, #1 
    /*000078b8*/ MOVW        R0, #0                      @ .LC157 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ec4] 
    /*000078bc*/ MOV         R2, R3 
    /*000078c0*/ MOVT        R0, #0                      @ .LC157 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ec4] 
    /*000078c4*/ BL          0x00000000000078C4          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000078c8*/ MOV         R3, #1 
    /*000078cc*/ STR         R3, [R4, #8] 
    /*000078d0*/ B           VGS_CheckModuleParam_x7870
    VGS_CheckModuleParam_x78d4:
    /*000078d4*/ MOV         R3, #20 
    /*000078d8*/ MOVW        R0, #0                      @ .LC155 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1e24] 
    /*000078dc*/ MOV         R2, R3 
    /*000078e0*/ MOVT        R0, #0                      @ .LC155 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1e24] 
    /*000078e4*/ BL          0x00000000000078E4          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000078e8*/ LDR         R1, [R4, #8] 
    /*000078ec*/ MOV         R3, #20 
    /*000078f0*/ STR         R3, [R4, #12] 
    /*000078f4*/ CMP         R1, #100                    @ 0x64 
    /*000078f8*/ BLS         VGS_CheckModuleParam_x7868
    VGS_CheckModuleParam_x78fc:
    /*000078fc*/ MOV         R3, #100                    @ 0x64 
    /*00007900*/ MOVW        R0, #0                      @ .LC156 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1e70] 
    /*00007904*/ MOV         R2, R3 
    /*00007908*/ MOVT        R0, #0                      @ .LC156 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1e70] 
    /*0000790c*/ BL          0x000000000000790C          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007910*/ MOV         R3, #100                    @ 0x64 
    /*00007914*/ STR         R3, [R4, #8] 
    /*00007918*/ B           VGS_CheckModuleParam_x7870
    VGS_CheckModuleParam_x791c:
    /*0000791c*/ MOV         R3, #20 
    /*00007920*/ MOVW        R0, #0                      @ .LC153 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1d8c] 
    /*00007924*/ MOV         R2, R3 
    /*00007928*/ MOVT        R0, #0                      @ .LC153 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1d8c] 
    /*0000792c*/ BL          0x000000000000792C          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007930*/ LDR         R1, [R4, #12] 
    /*00007934*/ MOV         R3, #20 
    /*00007938*/ STR         R3, [R4, #4] 
    /*0000793c*/ CMP         R1, #800                    @ 0x320 
    /*00007940*/ BLS         VGS_CheckModuleParam_x7854
    VGS_CheckModuleParam_x7944:
    /*00007944*/ MOV         R3, #800                    @ 0x320 
    /*00007948*/ MOVW        R0, #0                      @ .LC154 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1dd8] 
    /*0000794c*/ MOV         R2, R3 
    /*00007950*/ MOVT        R0, #0                      @ .LC154 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1dd8] 
    /*00007954*/ BL          0x0000000000007954          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007958*/ MOV         R3, #800                    @ 0x320 
    /*0000795c*/ STR         R3, [R4, #12] 
    /*00007960*/ B           VGS_CheckModuleParam_x785c
    VGS_CheckModuleParam_x7964:
    /*00007964*/ MOV         R3, #20 
    /*00007968*/ MOVW        R0, #0                      @ .LC151 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1cf4] 
    /*0000796c*/ MOV         R2, R3 
    /*00007970*/ MOVT        R0, #0                      @ .LC151 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1cf4] 
    /*00007974*/ BL          0x0000000000007974          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007978*/ LDR         R1, [R4, #4] 
    /*0000797c*/ MOV         R3, #20 
    /*00007980*/ STR         R3, [R4] 
    /*00007984*/ CMP         R1, #800                    @ 0x320 
    /*00007988*/ BLS         VGS_CheckModuleParam_x7840
    VGS_CheckModuleParam_x798c:
    /*0000798c*/ MOV         R3, #800                    @ 0x320 
    /*00007990*/ MOVW        R0, #0                      @ .LC152 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1d40] 
    /*00007994*/ MOV         R2, R3 
    /*00007998*/ MOVT        R0, #0                      @ .LC152 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1d40] 
    /*0000799c*/ BL          0x000000000000799C          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000079a0*/ MOV         R3, #800                    @ 0x320 
    /*000079a4*/ STR         R3, [R4, #4] 
    /*000079a8*/ B           VGS_CheckModuleParam_x7848
    VGS_CheckModuleParam_x79ac:
    /*000079ac*/ MOV         R0, #0 
    /*000079b0*/ POP         {R4, PC} 
    VGS_CheckModuleParam_x79b4:
    /*000079b4*/ MOV         R3, #400                    @ 0x190 
    /*000079b8*/ MOVW        R0, #0                      @ .LC150 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1ca8] 
    /*000079bc*/ MOV         R2, R3 
    /*000079c0*/ MOVT        R0, #0                      @ .LC150 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1ca8] 
    /*000079c4*/ BL          0x00000000000079C4          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000079c8*/ MOV         R3, #400                    @ 0x190 
    /*000079cc*/ STR         R3, [R4] 
    /*000079d0*/ B           VGS_CheckModuleParam_x7834
    VGS_CheckModuleParam_x79d4:
    /*000079d4*/ MOVW        R0, #0                      @ .LC158 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1f18] 
    /*000079d8*/ MOVT        R0, #0                      @ .LC158 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1f18] 
    /*000079dc*/ BL          0x00000000000079DC          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000079e0*/ MVN         R0, #0 
    /*000079e4*/ POP         {R4, PC} 
FUNC_END VGS_CheckModuleParam


FUNC_BEGIN VGS_GetOsdMmzSize
    /*000079e8*/ LDR         R2, [R0, #32] 
    /*000079ec*/ LDR         R0, [R0, #12] 
    /*000079f0*/ UMULL       R0, R1, R2, R0 
    /*000079f4*/ BX          LR 
FUNC_END VGS_GetOsdMmzSize


FUNC_BEGIN VGS_ModInit
    /*000079f8*/ PUSH        {R4, R5, R6, LR} 
    /*000079fc*/ MOVW        R0, #0                      @ .LC160 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1f98] 
    /*00007a00*/ MOVT        R0, #0                      @ .LC160 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1f98] 
    /*00007a04*/ LDR         R5, [PC, #304]              @ 0x0000000000007b3c 
    /*00007a08*/ BL          0x0000000000007A08          @ osal_createdev [R_ARM_CALL: +0x0] 
    /*00007a0c*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00007a10*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00007a14*/ MOV         R2, #19 
    /*00007a18*/ ADD         R3, R5, #32 
    /*00007a1c*/ STR         R5, [R0, #56]               @ 0x38 
    /*00007a20*/ STR         R2, [R0, #52]               @ 0x34 
    /*00007a24*/ STR         R3, [R0, #60]               @ 0x3c 
    /*00007a28*/ STR         R0, [R4, #1396]             @ 0x574 
    /*00007a2c*/ BL          0x0000000000007A2C          @ VGS_CheckModuleParam [R_ARM_CALL: .text+0x7814] 
    /*00007a30*/ CMN         R0, #1 
    /*00007a34*/ BEQ         VGS_ModInit_x7b04
    /*00007a38*/ LDR         R0, [R4, #1396]             @ 0x574 
    /*00007a3c*/ BL          0x0000000000007A3C          @ osal_registerdevice [R_ARM_CALL: +0x0] 
    /*00007a40*/ CMP         R0, #0 
    /*00007a44*/ BLT         VGS_ModInit_x7b14
    /*00007a48*/ ADD         R0, R5, #112                @ 0x70 
    /*00007a4c*/ BL          0x0000000000007A4C          @ CMPI_RegisterModule [R_ARM_CALL: +0x0] 
    /*00007a50*/ SUBS        R5, R0, #0 
    /*00007a54*/ BNE         VGS_ModInit_x7ac4
    /*00007a58*/ MOVW        R0, #0                      @ .LC160 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1f98] 
    /*00007a5c*/ MOV         R1, R5 
    /*00007a60*/ MOVT        R0, #0                      @ .LC160 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1f98] 
    /*00007a64*/ BL          0x0000000000007A64          @ osal_create_proc_entry [R_ARM_CALL: +0x0] 
    /*00007a68*/ SUBS        R2, R0, #0 
    /*00007a6c*/ BEQ         VGS_ModInit_x7b24
    /*00007a70*/ MOVW        R3, #0                      @ VGS_ProcShow [R_ARM_MOVW_ABS_NC: .text+0x7768] 
    /*00007a74*/ ADD         R0, R4, #12 
    /*00007a78*/ MOVT        R3, #0                      @ VGS_ProcShow [R_ARM_MOVT_ABS: .text+0x7768] 
    /*00007a7c*/ STR         R3, [R2, #60]               @ 0x3c 
    /*00007a80*/ BL          0x0000000000007A80          @ osal_atomic_init [R_ARM_CALL: +0x0] 
    /*00007a84*/ MOV         R1, R5 
    /*00007a88*/ ADD         R0, R4, #12 
    /*00007a8c*/ BL          0x0000000000007A8C          @ osal_atomic_set [R_ARM_CALL: +0x0] 
    /*00007a90*/ ADD         R0, R4, #16 
    /*00007a94*/ BL          0x0000000000007A94          @ osal_atomic_init [R_ARM_CALL: +0x0] 
    /*00007a98*/ MOV         R1, R5 
    /*00007a9c*/ ADD         R0, R4, #16 
    /*00007aa0*/ BL          0x0000000000007AA0          @ osal_atomic_set [R_ARM_CALL: +0x0] 
    /*00007aa4*/ BL          0x0000000000007AA4          @ VGS_DRV_PwrOn [R_ARM_CALL: .text+0xd80c] 
    /*00007aa8*/ MOVW        R1, #0                      @ .LC165 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2004] 
    /*00007aac*/ MOVW        R0, #0                      @ .LC166 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2010] 
    /*00007ab0*/ MOVT        R1, #0                      @ .LC165 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2004] 
    /*00007ab4*/ MOVT        R0, #0                      @ .LC166 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2010] 
    /*00007ab8*/ BL          0x0000000000007AB8          @ osal_printk [R_ARM_CALL: +0x0] 
    VGS_ModInit_x7abc:
    /*00007abc*/ MOV         R0, R5 
    /*00007ac0*/ POP         {R4, R5, R6, PC} 
    VGS_ModInit_x7ac4:
    /*00007ac4*/ MOVW        R0, #0                      @ .LC163 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1fd4] 
    /*00007ac8*/ MOVT        R0, #0                      @ .LC163 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1fd4] 
    /*00007acc*/ BL          0x0000000000007ACC          @ osal_printk [R_ARM_CALL: +0x0] 
    VGS_ModInit_x7ad0:
    /*00007ad0*/ LDR         R0, [R4, #1396]             @ 0x574 
    /*00007ad4*/ BL          0x0000000000007AD4          @ osal_deregisterdevice [R_ARM_CALL: +0x0] 
    VGS_ModInit_x7ad8:
    /*00007ad8*/ LDR         R0, [R4, #1396]             @ 0x574 
    /*00007adc*/ MVN         R5, #0 
    /*00007ae0*/ BL          0x0000000000007AE0          @ osal_destroydev [R_ARM_CALL: +0x0] 
    /*00007ae4*/ MOVW        R1, #0                      @ .LC165 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2004] 
    /*00007ae8*/ MOVW        R0, #0                      @ .LC167 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x202c] 
    /*00007aec*/ MOVT        R1, #0                      @ .LC165 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2004] 
    /*00007af0*/ MOVT        R0, #0                      @ .LC167 [R_ARM_MOVT_ABS: .rodata.str1.4+0x202c] 
    /*00007af4*/ MOV         R3, #0 
    /*00007af8*/ STR         R3, [R4, #1396]             @ 0x574 
    /*00007afc*/ BL          0x0000000000007AFC          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007b00*/ B           VGS_ModInit_x7abc
    VGS_ModInit_x7b04:
    /*00007b04*/ MOVW        R0, #0                      @ .LC161 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1f9c] 
    /*00007b08*/ MOVT        R0, #0                      @ .LC161 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1f9c] 
    /*00007b0c*/ BL          0x0000000000007B0C          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007b10*/ B           VGS_ModInit_x7ad8
    VGS_ModInit_x7b14:
    /*00007b14*/ MOVW        R0, #0                      @ .LC162 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1fbc] 
    /*00007b18*/ MOVT        R0, #0                      @ .LC162 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1fbc] 
    /*00007b1c*/ BL          0x0000000000007B1C          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007b20*/ B           VGS_ModInit_x7ad8
    VGS_ModInit_x7b24:
    /*00007b24*/ MOVW        R0, #0                      @ .LC164 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1fec] 
    /*00007b28*/ MOVT        R0, #0                      @ .LC164 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1fec] 
    /*00007b2c*/ BL          0x0000000000007B2C          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00007b30*/ MOV         R0, #45                     @ 0x2d 
    /*00007b34*/ BL          0x0000000000007B34          @ CMPI_UnRegisterModule [R_ARM_CALL: +0x0] 
    /*00007b38*/ B           VGS_ModInit_x7ad0
    /*00007b3c*/ ANDEQ       R0, R0, R8, LSR #32 
FUNC_END VGS_ModInit


FUNC_BEGIN VGS_ModExit
    /*00007b40*/ PUSH        {R4, LR} 
    /*00007b44*/ MOVW        R4, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .bss+0x0] 
    /*00007b48*/ MOVT        R4, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .bss+0x0] 
    /*00007b4c*/ LDR         R3, [R4, #1396]             @ 0x574 
    /*00007b50*/ CMP         R3, #0 
    /*00007b54*/ POPEQ       {R4, PC} 
    /*00007b58*/ MOV         R1, #0 
    /*00007b5c*/ MOVW        R0, #0                      @ .LC160 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x1f98] 
    /*00007b60*/ MOVT        R0, #0                      @ .LC160 [R_ARM_MOVT_ABS: .rodata.str1.4+0x1f98] 
    /*00007b64*/ BL          0x0000000000007B64          @ osal_remove_proc_entry [R_ARM_CALL: +0x0] 
    /*00007b68*/ MOV         R0, #45                     @ 0x2d 
    /*00007b6c*/ BL          0x0000000000007B6C          @ CMPI_UnRegisterModule [R_ARM_CALL: +0x0] 
    /*00007b70*/ LDR         R0, [R4, #1396]             @ 0x574 
    /*00007b74*/ BL          0x0000000000007B74          @ osal_deregisterdevice [R_ARM_CALL: +0x0] 
    /*00007b78*/ ADD         R0, R4, #12 
    /*00007b7c*/ BL          0x0000000000007B7C          @ osal_atomic_destory [R_ARM_CALL: +0x0] 
    /*00007b80*/ ADD         R0, R4, #16 
    /*00007b84*/ BL          0x0000000000007B84          @ osal_atomic_destory [R_ARM_CALL: +0x0] 
    /*00007b88*/ LDR         R0, [R4, #1396]             @ 0x574 
    /*00007b8c*/ BL          0x0000000000007B8C          @ osal_destroydev [R_ARM_CALL: +0x0] 
    /*00007b90*/ MOV         R3, #0 
    /*00007b94*/ MOVW        R1, #0                      @ .LC165 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2004] 
    /*00007b98*/ MOVW        R0, #0                      @ .LC168 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2048] 
    /*00007b9c*/ STR         R3, [R4, #1396]             @ 0x574 
    /*00007ba0*/ MOVT        R1, #0                      @ .LC165 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2004] 
    /*00007ba4*/ MOVT        R0, #0                      @ .LC168 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2048] 
    /*00007ba8*/ POP         {R4, LR} 
    VGS_ModExit_x7bac:
    /*00007bac*/ B           VGS_ModExit_x7bac           @ osal_printk [R_ARM_JUMP24: +0x0] 
FUNC_END VGS_ModExit


FUNC_BEGIN VGS_DeInitQueueBuf
    /*00007bb0*/ LDR         R3, [R0, #8] 
    /*00007bb4*/ CMP         R3, #0 
    /*00007bb8*/ BXEQ        LR 
    /*00007bbc*/ PUSH        {R4, R5, LR} 
    /*00007bc0*/ SUB         SP, SP, #12 
    /*00007bc4*/ MOV         R4, R0 
    /*00007bc8*/ MOV         R1, #45                     @ 0x2d 
    /*00007bcc*/ STR         R3, [SP, #4] 
    /*00007bd0*/ MOV         R2, #120                    @ 0x78 
    /*00007bd4*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .rodata+0x430] 
    /*00007bd8*/ STR         R2, [SP] 
    /*00007bdc*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .rodata+0x430] 
    /*00007be0*/ MOVW        R2, #0                      @ .LC0 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2264] 
    /*00007be4*/ MOV         R0, #7 
    /*00007be8*/ MOVT        R2, #0                      @ .LC0 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2264] 
    /*00007bec*/ BL          0x0000000000007BEC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00007bf0*/ MOV         R5, #0 
    /*00007bf4*/ LDR         R0, [R4, #8] 
    /*00007bf8*/ BL          0x0000000000007BF8          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*00007bfc*/ MOV         R1, R5 
    /*00007c00*/ STR         R5, [R4, #8] 
    /*00007c04*/ MOV         R2, #52                     @ 0x34 
    /*00007c08*/ ADD         R0, R4, #28 
    /*00007c0c*/ BL          0x0000000000007C0C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00007c10*/ MOV         R1, R5 
    /*00007c14*/ MOV         R2, #52                     @ 0x34 
    /*00007c18*/ ADD         R0, R4, #80                 @ 0x50 
    /*00007c1c*/ BL          0x0000000000007C1C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00007c20*/ MOV         R1, R5 
    /*00007c24*/ MOV         R2, #52                     @ 0x34 
    /*00007c28*/ ADD         R0, R4, #244                @ 0xf4 
    /*00007c2c*/ BL          0x0000000000007C2C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00007c30*/ MOV         R1, R5 
    /*00007c34*/ MOV         R2, #52                     @ 0x34 
    /*00007c38*/ ADD         R0, R4, #140                @ 0x8c 
    /*00007c3c*/ BL          0x0000000000007C3C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00007c40*/ MOV         R1, R5 
    /*00007c44*/ ADD         R0, R4, #192                @ 0xc0 
    /*00007c48*/ MOV         R2, #52                     @ 0x34 
    /*00007c4c*/ ADD         SP, SP, #12 
    /*00007c50*/ POP         {R4, R5, LR} 
    VGS_DeInitQueueBuf_x7c54:
    /*00007c54*/ B           VGS_DeInitQueueBuf_x7c54    @ osal_memset [R_ARM_JUMP24: +0x0] 
FUNC_END VGS_DeInitQueueBuf


FUNC_BEGIN VGS_DeInitJobBuf
    /*00007c58*/ PUSH        {R4, R5, R6, R7, LR} 
    /*00007c5c*/ MOVW        R7, #0                      @ max_vgs_job [R_ARM_MOVW_ABS_NC: .data+0x0] 
    /*00007c60*/ MOVT        R7, #0                      @ max_vgs_job [R_ARM_MOVT_ABS: .data+0x0] 
    /*00007c64*/ SUB         SP, SP, #12 
    /*00007c68*/ MOV         R6, R0 
    /*00007c6c*/ LDR         R3, [R7] 
    /*00007c70*/ CMP         R3, #0 
    /*00007c74*/ MOVNE       R4, #0 
    /*00007c78*/ MOVNE       R5, R4 
    /*00007c7c*/ BEQ         VGS_DeInitJobBuf_x7ca4
    VGS_DeInitJobBuf_x7c80:
    /*00007c80*/ LDR         R0, [R6] 
    /*00007c84*/ ADD         R5, R5, #1 
    /*00007c88*/ ADD         R0, R0, R4 
    /*00007c8c*/ ADD         R4, R4, #232                @ 0xe8 
    /*00007c90*/ ADD         R0, R0, #116                @ 0x74 
    /*00007c94*/ BL          0x0000000000007C94          @ osal_wait_destory [R_ARM_CALL: +0x0] 
    /*00007c98*/ LDR         R3, [R7] 
    /*00007c9c*/ CMP         R3, R5 
    /*00007ca0*/ BHI         VGS_DeInitJobBuf_x7c80
    VGS_DeInitJobBuf_x7ca4:
    /*00007ca4*/ MOV         R0, R6 
    /*00007ca8*/ BL          0x0000000000007BB0 
    /*00007cac*/ LDR         R3, [R6] 
    /*00007cb0*/ CMP         R3, #0 
    /*00007cb4*/ BEQ         VGS_DeInitJobBuf_x7cf0
    /*00007cb8*/ STR         R3, [SP, #4] 
    /*00007cbc*/ MOV         R1, #45                     @ 0x2d 
    /*00007cc0*/ MOVW        R3, #259                    @ 0x103 
    /*00007cc4*/ MOVW        R2, #0                      @ .LC1 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2298] 
    /*00007cc8*/ STR         R3, [SP] 
    /*00007ccc*/ MOVT        R2, #0                      @ .LC1 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2298] 
    /*00007cd0*/ LDR         R3, [PC, #32]               @ 0x0000000000007cf8 
    /*00007cd4*/ MOV         R0, #7 
    /*00007cd8*/ BL          0x0000000000007CD8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00007cdc*/ LDR         R0, [R6] 
    /*00007ce0*/ BL          0x0000000000007CE0          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*00007ce4*/ MOV         R3, #0 
    /*00007ce8*/ STR         R3, [R6] 
    /*00007cec*/ STR         R3, [R6, #4] 
    VGS_DeInitJobBuf_x7cf0:
    /*00007cf0*/ ADD         SP, SP, #12 
    /*00007cf4*/ POP         {R4, R5, R6, R7, PC} 
    /*00007cf8*/ ANDEQ       R0, R0, R4, ASR #8 
FUNC_END VGS_DeInitJobBuf


FUNC_BEGIN VGS_DeInitBuf
    /*00007cfc*/ PUSH        {R4, LR} 
    /*00007d00*/ MOV         R4, R1 
    /*00007d04*/ SUB         SP, SP, #8 
    /*00007d08*/ BL          0x0000000000007C58 
    /*00007d0c*/ LDR         R3, [R4] 
    /*00007d10*/ CMP         R3, #0 
    /*00007d14*/ BEQ         VGS_DeInitBuf_x7d4c
    /*00007d18*/ STR         R3, [SP, #4] 
    /*00007d1c*/ MOV         R1, #45                     @ 0x2d 
    /*00007d20*/ MOV         R3, #150                    @ 0x96 
    /*00007d24*/ MOVW        R2, #0                      @ .LC2 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x22cc] 
    /*00007d28*/ STR         R3, [SP] 
    /*00007d2c*/ MOVT        R2, #0                      @ .LC2 [R_ARM_MOVT_ABS: .rodata.str1.4+0x22cc] 
    /*00007d30*/ LDR         R3, [PC, #28]               @ 0x0000000000007d54 
    /*00007d34*/ MOV         R0, #7 
    /*00007d38*/ BL          0x0000000000007D38          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00007d3c*/ LDR         R0, [R4] 
    /*00007d40*/ BL          0x0000000000007D40          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*00007d44*/ MOV         R3, #0 
    /*00007d48*/ STR         R3, [R4] 
    VGS_DeInitBuf_x7d4c:
    /*00007d4c*/ ADD         SP, SP, #8 
    /*00007d50*/ POP         {R4, PC} 
    /*00007d54*/ ANDEQ       R0, R0, R8, ASR R4 
FUNC_END VGS_DeInitBuf


FUNC_BEGIN VGS_QueryFreeTaskNum
    /*00007d58*/ LDR         R0, [R0, #12] 
    /*00007d5c*/ BX          LR 
FUNC_END VGS_QueryFreeTaskNum


FUNC_BEGIN VGS_GetTaskFromFreeList
    /*00007d60*/ MOV         R2, R0 
    /*00007d64*/ PUSH        {R4, LR} 
    /*00007d68*/ SUB         SP, SP, #8 
    /*00007d6c*/ LDR         R3, [R2, #4]! 
    /*00007d70*/ CMP         R3, R2 
    /*00007d74*/ BEQ         VGS_GetTaskFromFreeList_x7dbc
    /*00007d78*/ LDR         LR, [R3, #4] 
    /*00007d7c*/ MOV         R1, R0 
    /*00007d80*/ LDR         R4, [R3] 
    /*00007d84*/ MOV         IP, #256                    @ 0x100 
    /*00007d88*/ MOV         R2, #512                    @ 0x200 
    /*00007d8c*/ MOVT        IP, #16 
    /*00007d90*/ MOVT        R2, #32 
    /*00007d94*/ MOV         R0, R3 
    /*00007d98*/ STR         LR, [R4, #4] 
    /*00007d9c*/ STR         R4, [LR] 
    /*00007da0*/ STR         IP, [R3] 
    /*00007da4*/ STR         R2, [R3, #4] 
    /*00007da8*/ LDR         R3, [R1, #12] 
    /*00007dac*/ SUB         R3, R3, #1 
    /*00007db0*/ STR         R3, [R1, #12] 
    VGS_GetTaskFromFreeList_x7db4:
    /*00007db4*/ ADD         SP, SP, #8 
    /*00007db8*/ POP         {R4, PC} 
    VGS_GetTaskFromFreeList_x7dbc:
    /*00007dbc*/ MOVW        R3, #374                    @ 0x176 
    /*00007dc0*/ MOVW        R2, #0                      @ .LC3 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2304] 
    /*00007dc4*/ STR         R3, [SP] 
    /*00007dc8*/ MOVT        R2, #0                      @ .LC3 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2304] 
    /*00007dcc*/ LDR         R3, [PC, #16]               @ 0x0000000000007de4 
    /*00007dd0*/ MOV         R1, #45                     @ 0x2d 
    /*00007dd4*/ MOV         R0, #4 
    /*00007dd8*/ BL          0x0000000000007DD8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00007ddc*/ MOV         R0, #0 
    /*00007de0*/ B           VGS_GetTaskFromFreeList_x7db4
    /*00007de4*/ ANDEQ       R0, R0, IP, ROR #8 
FUNC_END VGS_GetTaskFromFreeList


FUNC_BEGIN VGS_PutTaskToFreeList
    /*00007de8*/ LDR         R3, [R0, #8] 
    /*00007dec*/ ADD         R2, R0, #4 
    /*00007df0*/ STR         R1, [R0, #8] 
    /*00007df4*/ STM         R1, {R2, R3} 
    /*00007df8*/ STR         R1, [R3] 
    /*00007dfc*/ LDR         R3, [R0, #12] 
    /*00007e00*/ ADD         R3, R3, #1 
    /*00007e04*/ STR         R3, [R0, #12] 
    /*00007e08*/ BX          LR 
FUNC_END VGS_PutTaskToFreeList


FUNC_BEGIN VGS_QueryTaskNumInJob
    /*00007e0c*/ LDR         R0, [R0, #24] 
    /*00007e10*/ BX          LR 
FUNC_END VGS_QueryTaskNumInJob


FUNC_BEGIN VGS_GetTaskFromJob
    /*00007e14*/ MOV         R2, R0 
    /*00007e18*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00007e1c*/ SUB         SP, SP, #12 
    /*00007e20*/ LDR         R3, [R2, #12]! 
    /*00007e24*/ CMP         R3, R2 
    /*00007e28*/ BEQ         VGS_GetTaskFromJob_x7e7c
    /*00007e2c*/ LDR         IP, [R3, #4] 
    /*00007e30*/ MOV         R1, #256                    @ 0x100 
    /*00007e34*/ LDR         LR, [R3] 
    /*00007e38*/ MOVT        R1, #16 
    /*00007e3c*/ MOV         R2, #512                    @ 0x200 
    /*00007e40*/ MOVT        R2, #32 
    /*00007e44*/ STR         IP, [LR, #4] 
    /*00007e48*/ STR         LR, [IP] 
    /*00007e4c*/ STM         R3, {R1, R2} 
    /*00007e50*/ LDR         R2, [R0, #24] 
    /*00007e54*/ SUB         R2, R2, #1 
    /*00007e58*/ STR         R2, [R0, #24] 
    /*00007e5c*/ LDR         R2, [R3, #1764]             @ 0x6e4 
    /*00007e60*/ CMP         R2, #3 
    /*00007e64*/ LDREQ       R2, [R0, #28] 
    /*00007e68*/ SUBEQ       R2, R2, #1 
    /*00007e6c*/ STREQ       R2, [R0, #28] 
    VGS_GetTaskFromJob_x7e70:
    /*00007e70*/ MOV         R0, R3 
    /*00007e74*/ ADD         SP, SP, #12 
    /*00007e78*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_GetTaskFromJob_x7e7c:
    /*00007e7c*/ STR         R0, [SP, #4] 
    /*00007e80*/ MOVW        R3, #410                    @ 0x19a 
    /*00007e84*/ MOVW        R2, #0                      @ .LC4 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2334] 
    /*00007e88*/ STR         R3, [SP] 
    /*00007e8c*/ MOVT        R2, #0                      @ .LC4 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2334] 
    /*00007e90*/ LDR         R3, [PC, #16]               @ 0x0000000000007ea8 
    /*00007e94*/ MOV         R1, #45                     @ 0x2d 
    /*00007e98*/ MOV         R0, #3 
    /*00007e9c*/ BL          0x0000000000007E9C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00007ea0*/ MOV         R3, #0 
    /*00007ea4*/ B           VGS_GetTaskFromJob_x7e70
    /*00007ea8*/ ANDEQ       R0, R0, R4, LSL #9 
FUNC_END VGS_GetTaskFromJob


FUNC_BEGIN VGS_PutTaskToJob
    /*00007eac*/ LDR         R3, [R1, #16] 
    /*00007eb0*/ ADD         R2, R1, #12 
    /*00007eb4*/ STR         R0, [R1, #16] 
    /*00007eb8*/ STM         R0, {R2, R3} 
    /*00007ebc*/ STR         R0, [R3] 
    /*00007ec0*/ LDR         R3, [R1, #24] 
    /*00007ec4*/ ADD         R3, R3, #1 
    /*00007ec8*/ STR         R3, [R1, #24] 
    /*00007ecc*/ LDR         R3, [R0, #1764]             @ 0x6e4 
    /*00007ed0*/ CMP         R3, #3 
    /*00007ed4*/ LDREQ       R3, [R1, #28] 
    /*00007ed8*/ ADDEQ       R3, R3, #1 
    /*00007edc*/ STREQ       R3, [R1, #28] 
    /*00007ee0*/ BX          LR 
FUNC_END VGS_PutTaskToJob


FUNC_BEGIN VGS_QueryFreeJobNum
    /*00007ee4*/ LDR         R0, [R0, #132]              @ 0x84 
    /*00007ee8*/ BX          LR 
FUNC_END VGS_QueryFreeJobNum


FUNC_BEGIN VGS_GetJobFromFreeList
    /*00007eec*/ MOV         R2, R0 
    /*00007ef0*/ LDR         R3, [R2, #12]! 
    /*00007ef4*/ CMP         R3, R2 
    /*00007ef8*/ BEQ         VGS_GetJobFromFreeList_x7f40
    /*00007efc*/ PUSH        {R4, LR} 
    /*00007f00*/ MOV         R1, R0 
    /*00007f04*/ LDR         LR, [R3, #4] 
    /*00007f08*/ MOV         R0, R3 
    /*00007f0c*/ LDR         R4, [R3] 
    /*00007f10*/ MOV         IP, #256                    @ 0x100 
    /*00007f14*/ MOV         R2, #512                    @ 0x200 
    /*00007f18*/ MOVT        IP, #16 
    /*00007f1c*/ MOVT        R2, #32 
    /*00007f20*/ STR         LR, [R4, #4] 
    /*00007f24*/ STR         R4, [LR] 
    /*00007f28*/ STR         IP, [R3] 
    /*00007f2c*/ STR         R2, [R3, #4] 
    /*00007f30*/ LDR         R3, [R1, #132]              @ 0x84 
    /*00007f34*/ SUB         R3, R3, #1 
    /*00007f38*/ STR         R3, [R1, #132]              @ 0x84 
    /*00007f3c*/ POP         {R4, PC} 
    VGS_GetJobFromFreeList_x7f40:
    /*00007f40*/ MOV         R0, #0 
    /*00007f44*/ BX          LR 
FUNC_END VGS_GetJobFromFreeList


FUNC_BEGIN VGS_PutJobToFreeList
    /*00007f48*/ PUSH        {R4, R5, R6, LR} 
    /*00007f4c*/ MOV         R4, R1 
    /*00007f50*/ LDR         R3, [R0, #16] 
    /*00007f54*/ MOV         R5, #0 
    /*00007f58*/ MOV         R6, R0 
    /*00007f5c*/ ADD         R2, R0, #12 
    /*00007f60*/ STR         R1, [R6, #16] 
    /*00007f64*/ MOV         R0, #60                     @ 0x3c 
    /*00007f68*/ STM         R1, {R2, R3} 
    /*00007f6c*/ MOV         R2, #4 
    /*00007f70*/ STR         R1, [R3] 
    /*00007f74*/ MOV         R1, R5 
    /*00007f78*/ STR         R0, [R4, #32] 
    /*00007f7c*/ ADD         R0, R4, #48                 @ 0x30 
    /*00007f80*/ STR         R2, [R4, #96]               @ 0x60 
    /*00007f84*/ MOV         R2, #48                     @ 0x30 
    /*00007f88*/ STR         R5, [R4, #24] 
    /*00007f8c*/ STR         R5, [R4, #28] 
    /*00007f90*/ STR         R5, [R4, #44]               @ 0x2c 
    /*00007f94*/ STR         R5, [R4, #20] 
    /*00007f98*/ BL          0x0000000000007F98          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00007f9c*/ STR         R5, [R4, #104]              @ 0x68 
    /*00007fa0*/ STR         R5, [R4, #124]              @ 0x7c 
    /*00007fa4*/ STR         R5, [R4, #128]              @ 0x80 
    /*00007fa8*/ STR         R5, [R4, #132]              @ 0x84 
    /*00007fac*/ LDR         R3, [R6, #132]              @ 0x84 
    /*00007fb0*/ ADD         R3, R3, #1 
    /*00007fb4*/ STR         R3, [R6, #132]              @ 0x84 
    /*00007fb8*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_PutJobToFreeList


FUNC_BEGIN VGS_InitBuf
    /*00007fbc*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00007fc0*/ MOV         R4, R0 
    /*00007fc4*/ SUB         SP, SP, #28 
    /*00007fc8*/ MOVW        FP, #0                      @ g_stVgsCallerCtx [R_ARM_MOVW_ABS_NC: .bss+0x14] 
    /*00007fcc*/ MOV         R5, R1 
    /*00007fd0*/ MOVT        FP, #0                      @ g_stVgsCallerCtx [R_ARM_MOVT_ABS: .bss+0x14] 
    /*00007fd4*/ MOV         R1, #0 
    /*00007fd8*/ MOV         R6, R2 
    /*00007fdc*/ MOV         R2, #304                    @ 0x130 
    /*00007fe0*/ MOV         R7, R3 
    /*00007fe4*/ BL          0x0000000000007FE4          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00007fe8*/ ADD         R2, R4, #12 
    /*00007fec*/ ADD         R3, R4, #20 
    /*00007ff0*/ STR         R2, [R4, #12] 
    /*00007ff4*/ STR         R2, [R4, #16] 
    /*00007ff8*/ MOV         R9, #22 
    /*00007ffc*/ STR         R3, [R4, #20] 
    /*00008000*/ STR         R3, [R4, #24] 
    /*00008004*/ LDR         R8, [FP, #156]              @ 0x9c 
    /*00008008*/ MUL         R9, R9, R8 
    /*0000800c*/ MOV         R0, R9 
    /*00008010*/ BL          0x0000000000008010          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*00008014*/ CMP         R0, #0 
    /*00008018*/ STR         R0, [R4, #8] 
    /*0000801c*/ BEQ         VGS_InitBuf_x82c0
    /*00008020*/ MOV         R2, R9 
    /*00008024*/ MOV         R1, #0 
    /*00008028*/ BL          0x0000000000008028          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000802c*/ LDR         R1, [R4, #8] 
    /*00008030*/ LSL         R3, R8, #3 
    /*00008034*/ ADD         R2, R4, #28 
    /*00008038*/ ADD         IP, R1, R3 
    /*0000803c*/ STR         R2, [SP, #20] 
    /*00008040*/ ADD         R3, IP, R3 
    /*00008044*/ MOV         R0, R2 
    /*00008048*/ ADD         R2, R3, R8, LSL #2 
    /*0000804c*/ ADD         SL, FP, #100                @ 0x64 
    /*00008050*/ MOV         R9, R1 
    /*00008054*/ MOV         LR, R3 
    /*00008058*/ STR         R1, [R4, #28] 
    /*0000805c*/ ADD         FP, FP, #148                @ 0x94 
    /*00008060*/ STR         R3, [R4, #244]              @ 0xf4 
    /*00008064*/ MOV         R1, R2 
    /*00008068*/ MOV         R3, R0 
    /*0000806c*/ STR         IP, [R4, #80]               @ 0x50 
    /*00008070*/ ADD         R0, R2, R8 
    /*00008074*/ STR         R2, [R4, #140]              @ 0x8c 
    /*00008078*/ STR         R0, [R4, #192]              @ 0xc0 
    /*0000807c*/ B           VGS_InitBuf_x8094
    VGS_InitBuf_x8080:
    /*00008080*/ ADD         R3, R3, #4 
    /*00008084*/ LDR         IP, [R3, #52]               @ 0x34 
    /*00008088*/ LDR         LR, [R3, #216]              @ 0xd8 
    /*0000808c*/ LDR         R1, [R3, #112]              @ 0x70 
    /*00008090*/ LDR         R0, [R3, #164]              @ 0xa4 
    VGS_InitBuf_x8094:
    /*00008094*/ LDR         R2, [SL, #4]! 
    /*00008098*/ CMP         SL, FP 
    /*0000809c*/ ADD         R8, R1, R2 
    /*000080a0*/ LSL         R1, R2, #3 
    /*000080a4*/ ADD         LR, LR, R2, LSL #2 
    /*000080a8*/ ADD         R9, R9, R1 
    /*000080ac*/ ADD         R2, R0, R2 
    /*000080b0*/ ADD         R1, IP, R1 
    /*000080b4*/ STR         R8, [R3, #116]              @ 0x74 
    /*000080b8*/ STR         LR, [R3, #220]              @ 0xdc 
    /*000080bc*/ STR         R9, [R3, #4] 
    /*000080c0*/ STR         R1, [R3, #56]               @ 0x38 
    /*000080c4*/ STR         R2, [R3, #168]              @ 0xa8 
    /*000080c8*/ BNE         VGS_InitBuf_x8080
    /*000080cc*/ LDR         IP, [PC, #580]              @ 0x0000000000008318 
    /*000080d0*/ LDR         R0, [SP, #20] 
    /*000080d4*/ ADD         SL, IP, #52                 @ 0x34 
    VGS_InitBuf_x80d8:
    /*000080d8*/ LDR         R3, [IP, #-52]              @ 0xffffffcc 
    /*000080dc*/ LDR         R2, [IP] 
    /*000080e0*/ CMP         R3, #0 
    /*000080e4*/ BEQ         VGS_InitBuf_x814c
    /*000080e8*/ MOV         R8, #0 
    /*000080ec*/ LSL         R9, R2, #3 
    /*000080f0*/ MOV         LR, R8 
    VGS_InitBuf_x80f4:
    /*000080f4*/ CMP         R2, #0 
    /*000080f8*/ MOVNE       R3, R8 
    /*000080fc*/ MOVNE       R1, #0 
    /*00008100*/ BEQ         VGS_InitBuf_x813c
    VGS_InitBuf_x8104:
    /*00008104*/ LDR         FP, [R0] 
    /*00008108*/ ADD         R1, R1, #1 
    /*0000810c*/ ADD         R2, FP, R3 
    /*00008110*/ STR         R2, [FP, R3] 
    /*00008114*/ STR         R2, [R2, #4] 
    /*00008118*/ LDR         FP, [R0, #52]               @ 0x34 
    /*0000811c*/ ADD         R2, FP, R3 
    /*00008120*/ STR         R2, [FP, R3] 
    /*00008124*/ ADD         R3, R3, #8 
    /*00008128*/ STR         R2, [R2, #4] 
    /*0000812c*/ LDR         R2, [IP] 
    /*00008130*/ CMP         R1, R2 
    /*00008134*/ BCC         VGS_InitBuf_x8104
    /*00008138*/ LDR         R3, [IP, #-52]              @ 0xffffffcc 
    VGS_InitBuf_x813c:
    /*0000813c*/ ADD         LR, LR, #1 
    /*00008140*/ ADD         R8, R8, R9 
    /*00008144*/ CMP         LR, R3 
    /*00008148*/ BCC         VGS_InitBuf_x80f4
    VGS_InitBuf_x814c:
    /*0000814c*/ ADD         IP, IP, #4 
    /*00008150*/ ADD         R0, R0, #4 
    /*00008154*/ CMP         SL, IP 
    /*00008158*/ BNE         VGS_InitBuf_x80d8
    /*0000815c*/ MOV         R9, #236                    @ 0xec 
    /*00008160*/ MUL         R9, R9, R6 
    /*00008164*/ MOV         R0, R9 
    /*00008168*/ BL          0x0000000000008168          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*0000816c*/ SUBS        R8, R0, #0 
    /*00008170*/ BEQ         VGS_InitBuf_x82f4
    /*00008174*/ MOV         SL, #232                    @ 0xe8 
    /*00008178*/ CMP         R6, #0 
    /*0000817c*/ MLA         R3, SL, R6, R8 
    /*00008180*/ STR         R8, [R4] 
    /*00008184*/ STR         R3, [R4, #4] 
    /*00008188*/ BEQ         VGS_InitBuf_x81ec
    /*0000818c*/ MOV         R9, #0 
    /*00008190*/ MOV         FP, R9 
    /*00008194*/ B           VGS_InitBuf_x819c
    VGS_InitBuf_x8198:
    /*00008198*/ LDR         R8, [R4] 
    VGS_InitBuf_x819c:
    /*0000819c*/ MLA         R8, SL, R9, R8 
    /*000081a0*/ ADD         R0, R8, #116                @ 0x74 
    /*000081a4*/ BL          0x00000000000081A4          @ osal_wait_init [R_ARM_CALL: +0x0] 
    /*000081a8*/ LDR         R2, [R4, #4] 
    /*000081ac*/ ADD         R3, R8, #12 
    /*000081b0*/ MOV         R1, R8 
    /*000081b4*/ MOV         R0, R4 
    /*000081b8*/ STR         R8, [R2, R9, LSL #2] 
    /*000081bc*/ STR         R9, [R8, #120]              @ 0x78 
    /*000081c0*/ ADD         R9, R9, #1 
    /*000081c4*/ STR         FP, [R8, #20] 
    /*000081c8*/ STR         FP, [R8, #128]              @ 0x80 
    /*000081cc*/ STR         FP, [R8, #132]              @ 0x84 
    /*000081d0*/ STR         FP, [R8, #124]              @ 0x7c 
    /*000081d4*/ STR         FP, [R8, #112]              @ 0x70 
    /*000081d8*/ STR         R3, [R8, #12] 
    /*000081dc*/ STR         R3, [R8, #16] 
    /*000081e0*/ BL          0x00000000000081E0          @ VGS_PutJobToFreeList [R_ARM_CALL: .text+0x7f48] 
    /*000081e4*/ CMP         R6, R9 
    /*000081e8*/ BNE         VGS_InitBuf_x8198
    VGS_InitBuf_x81ec:
    /*000081ec*/ MOV         R2, #16 
    /*000081f0*/ MOV         R1, #0 
    /*000081f4*/ MOV         R0, R5 
    /*000081f8*/ MOV         R8, #2096                   @ 0x830 
    /*000081fc*/ BL          0x00000000000081FC          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00008200*/ ADD         R6, R5, #4 
    /*00008204*/ MUL         R0, R8, R7 
    /*00008208*/ STR         R6, [R5, #4] 
    /*0000820c*/ STR         R6, [R5, #8] 
    /*00008210*/ BL          0x0000000000008210          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*00008214*/ SUBS        R2, R0, #0 
    /*00008218*/ BEQ         VGS_InitBuf_x8280
    /*0000821c*/ CMP         R7, #0 
    /*00008220*/ STR         R2, [R5] 
    /*00008224*/ BEQ         VGS_InitBuf_x8274
    /*00008228*/ MOV         R3, #0 
    /*0000822c*/ MVN         LR, #0 
    /*00008230*/ MOV         R0, R3 
    /*00008234*/ B           VGS_InitBuf_x823c
    VGS_InitBuf_x8238:
    /*00008238*/ LDR         R2, [R5] 
    VGS_InitBuf_x823c:
    /*0000823c*/ ADD         R1, R2, R3 
    /*00008240*/ ADD         R0, R0, #1 
    /*00008244*/ CMP         R7, R0 
    /*00008248*/ STR         LR, [R1, #1760]             @ 0x6e0 
    /*0000824c*/ LDR         IP, [R5, #8] 
    /*00008250*/ STR         R1, [R5, #8] 
    /*00008254*/ STR         R6, [R2, R3] 
    /*00008258*/ ADD         R3, R3, #2096               @ 0x830 
    /*0000825c*/ STR         IP, [R1, #4] 
    /*00008260*/ STR         R1, [IP] 
    /*00008264*/ LDR         R2, [R5, #12] 
    /*00008268*/ ADD         R2, R2, #1 
    /*0000826c*/ STR         R2, [R5, #12] 
    /*00008270*/ BNE         VGS_InitBuf_x8238
    VGS_InitBuf_x8274:
    /*00008274*/ MOV         R0, #0 
    /*00008278*/ ADD         SP, SP, #28 
    /*0000827c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_InitBuf_x8280:
    /*00008280*/ MOV         R1, #45                     @ 0x2d 
    /*00008284*/ STR         R8, [SP, #8] 
    /*00008288*/ MOVW        R3, #295                    @ 0x127 
    /*0000828c*/ STR         R7, [SP, #4] 
    /*00008290*/ STR         R3, [SP] 
    /*00008294*/ MOVW        R2, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23a0] 
    /*00008298*/ LDR         R3, [PC, #124]              @ 0x000000000000831c 
    /*0000829c*/ MOVT        R2, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23a0] 
    /*000082a0*/ MOV         R0, #1 
    /*000082a4*/ BL          0x00000000000082A4          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000082a8*/ MOV         R0, R4 
    /*000082ac*/ BL          0x0000000000007C58 
    /*000082b0*/ MOVW        R0, #32781                  @ 0x800d 
    /*000082b4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000082b8*/ ADD         SP, SP, #28 
    /*000082bc*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_InitBuf_x82c0:
    /*000082c0*/ MOV         R3, #62                     @ 0x3e 
    /*000082c4*/ STR         R3, [SP] 
    /*000082c8*/ LDR         R3, [PC, #80]               @ 0x0000000000008320 
    /*000082cc*/ MOVW        R2, #0                      @ .LC5 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x236c] 
    /*000082d0*/ MOVT        R2, #0                      @ .LC5 [R_ARM_MOVT_ABS: .rodata.str1.4+0x236c] 
    /*000082d4*/ STR         R9, [SP, #4] 
    VGS_InitBuf_x82d8:
    /*000082d8*/ MOV         R1, #45                     @ 0x2d 
    /*000082dc*/ MOV         R0, #1 
    /*000082e0*/ BL          0x00000000000082E0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000082e4*/ MOVW        R0, #32781                  @ 0x800d 
    /*000082e8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*000082ec*/ ADD         SP, SP, #28 
    /*000082f0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_InitBuf_x82f4:
    /*000082f4*/ MOV         R0, R4 
    /*000082f8*/ BL          0x0000000000007BB0 
    /*000082fc*/ MOV         R3, #196                    @ 0xc4 
    /*00008300*/ MOVW        R2, #0                      @ .LC5 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x236c] 
    /*00008304*/ STR         R3, [SP] 
    /*00008308*/ STR         R9, [SP, #4] 
    /*0000830c*/ MOVT        R2, #0                      @ .LC5 [R_ARM_MOVT_ABS: .rodata.str1.4+0x236c] 
    /*00008310*/ LDR         R3, [PC, #12]               @ 0x0000000000008324 
    /*00008314*/ B           VGS_InitBuf_x82d8
    /*00008318*/ ANDEQ       R0, R0, R4, LSR R0          @ g_stVgsCallerCtx [R_ARM_ABS32: .bss+0x14] 
    /*0000831c*/ @           <UNDEFINED> instruction: 0x000004bc 
    /*00008320*/ MULEQ       R0, R8, R4 
    /*00008324*/ ANDEQ       R0, R0, IP, LSR #9 
FUNC_END VGS_InitBuf


FUNC_BEGIN VGS_QueryCreatedJobNum
    /*00008328*/ LDR         R0, [R0, #136]              @ 0x88 
    /*0000832c*/ BX          LR 
FUNC_END VGS_QueryCreatedJobNum


FUNC_BEGIN VGS_GetJobFromCreatedList
    /*00008330*/ PUSH        {R4, R5, R6, LR} 
    /*00008334*/ ADD         R3, R0, #20 
    /*00008338*/ LDR         R2, [R0, #20] 
    /*0000833c*/ MOV         R4, R0 
    /*00008340*/ MOV         R5, R1 
    /*00008344*/ CMP         R2, R3 
    /*00008348*/ BEQ         VGS_GetJobFromCreatedList_x8380
    VGS_GetJobFromCreatedList_x834c:
    /*0000834c*/ LDR         R1, [R5, #4] 
    /*00008350*/ MOV         R2, #256                    @ 0x100 
    /*00008354*/ LDR         R0, [R5] 
    /*00008358*/ MOVT        R2, #16 
    /*0000835c*/ MOV         R3, #512                    @ 0x200 
    /*00008360*/ MOVT        R3, #32 
    /*00008364*/ STR         R1, [R0, #4] 
    /*00008368*/ STR         R0, [R1] 
    /*0000836c*/ STM         R5, {R2, R3} 
    /*00008370*/ LDR         R3, [R4, #136]              @ 0x88 
    /*00008374*/ SUB         R3, R3, #1 
    /*00008378*/ STR         R3, [R4, #136]              @ 0x88 
    /*0000837c*/ POP         {R4, R5, R6, PC} 
    VGS_GetJobFromCreatedList_x8380:
    /*00008380*/ MOVW        R3, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23e0] 
    /*00008384*/ MOVW        R0, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23e8] 
    /*00008388*/ MOVT        R3, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23e0] 
    /*0000838c*/ MOVT        R0, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23e8] 
    /*00008390*/ MOV         R2, #500                    @ 0x1f4 
    /*00008394*/ LDR         R1, [PC, #4]                @ 0x00000000000083a0 
    /*00008398*/ BL          0x0000000000008398          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000839c*/ B           VGS_GetJobFromCreatedList_x834c
    /*000083a0*/ ANDEQ       R0, R0, IP, ASR #9 
FUNC_END VGS_GetJobFromCreatedList


FUNC_BEGIN VGS_PutJobToCreatedList
    /*000083a4*/ LDR         R3, [R0, #24] 
    /*000083a8*/ ADD         R2, R0, #20 
    /*000083ac*/ STR         R1, [R0, #24] 
    /*000083b0*/ STM         R1, {R2, R3} 
    /*000083b4*/ STR         R1, [R3] 
    /*000083b8*/ LDR         R3, [R0, #136]              @ 0x88 
    /*000083bc*/ ADD         R3, R3, #1 
    /*000083c0*/ STR         R3, [R0, #136]              @ 0x88 
    /*000083c4*/ BX          LR 
FUNC_END VGS_PutJobToCreatedList


FUNC_BEGIN VGS_GetFirstJobFromBusyList
    /*000083c8*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*000083cc*/ SUB         SP, SP, #16 
    /*000083d0*/ MOV         R8, R1 
    /*000083d4*/ MOV         R7, R2 
    /*000083d8*/ MOV         R6, R3 
    /*000083dc*/ MOV         SL, R0 
    /*000083e0*/ BL          0x00000000000083E0          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*000083e4*/ STR         R7, [SP] 
    /*000083e8*/ MOV         R3, R8 
    /*000083ec*/ MOV         R1, #8 
    /*000083f0*/ ADD         R9, R6, R0, LSL #2 
    /*000083f4*/ MOV         R2, R0 
    /*000083f8*/ MOV         R5, R0 
    /*000083fc*/ LDR         R0, [R9, #28] 
    /*00008400*/ BL          0x0000000000008400          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008404*/ LDR         R4, [R0] 
    /*00008408*/ CMP         R0, R4 
    /*0000840c*/ BEQ         VGS_GetFirstJobFromBusyList_x8474
    /*00008410*/ LDR         R1, [R4, #4] 
    /*00008414*/ MOV         R3, R8 
    /*00008418*/ LDR         LR, [R4] 
    /*0000841c*/ MOV         IP, #256                    @ 0x100 
    /*00008420*/ MOV         R0, #512                    @ 0x200 
    /*00008424*/ MOVT        IP, #16 
    /*00008428*/ MOVT        R0, #32 
    /*0000842c*/ MOV         R2, R5 
    /*00008430*/ STR         R1, [LR, #4] 
    /*00008434*/ STR         LR, [R1] 
    /*00008438*/ MOV         R1, #1 
    /*0000843c*/ STR         IP, [R4] 
    /*00008440*/ STR         R0, [R4, #4] 
    /*00008444*/ LDR         R0, [R9, #140]              @ 0x8c 
    /*00008448*/ STR         R7, [SP] 
    /*0000844c*/ BL          0x000000000000844C          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008450*/ LDRB        R3, [R0] 
    /*00008454*/ SUB         R3, R3, #1 
    /*00008458*/ STRB        R3, [R0] 
    /*0000845c*/ LDR         R3, [R6, #296]              @ 0x128 
    /*00008460*/ SUB         R3, R3, #1 
    /*00008464*/ STR         R3, [R6, #296]              @ 0x128 
    VGS_GetFirstJobFromBusyList_x8468:
    /*00008468*/ MOV         R0, R4 
    /*0000846c*/ ADD         SP, SP, #16 
    /*00008470*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_GetFirstJobFromBusyList_x8474:
    /*00008474*/ MOVW        R3, #529                    @ 0x211 
    /*00008478*/ STR         R7, [SP, #12] 
    /*0000847c*/ STR         R3, [SP] 
    /*00008480*/ MOVW        R2, #0                      @ .LC9 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2428] 
    /*00008484*/ STR         R8, [SP, #8] 
    /*00008488*/ MOVT        R2, #0                      @ .LC9 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2428] 
    /*0000848c*/ STR         SL, [SP, #4] 
    /*00008490*/ MOV         R1, #45                     @ 0x2d 
    /*00008494*/ LDR         R3, [PC, #12]               @ 0x00000000000084a8 
    /*00008498*/ MOV         R0, #4 
    /*0000849c*/ BL          0x000000000000849C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*000084a0*/ MOV         R4, #0 
    /*000084a4*/ B           VGS_GetFirstJobFromBusyList_x8468
    /*000084a8*/ ANDEQ       R0, R0, R8, ROR #9 
FUNC_END VGS_GetFirstJobFromBusyList


FUNC_BEGIN VGS_QueryFirstJobFromBusyList
    /*000084ac*/ PUSH        {R4, R5, R6, R7, LR} 
    /*000084b0*/ SUB         SP, SP, #20 
    /*000084b4*/ MOV         R5, R1 
    /*000084b8*/ MOV         R6, R2 
    /*000084bc*/ MOV         R4, R3 
    /*000084c0*/ MOV         R7, R0 
    /*000084c4*/ BL          0x00000000000084C4          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*000084c8*/ STR         R6, [SP] 
    /*000084cc*/ MOV         R3, R5 
    /*000084d0*/ MOV         R1, #8 
    /*000084d4*/ ADD         R4, R4, R0, LSL #2 
    /*000084d8*/ MOV         R2, R0 
    /*000084dc*/ LDR         R0, [R4, #28] 
    /*000084e0*/ BL          0x00000000000084E0          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*000084e4*/ LDR         R3, [R0] 
    /*000084e8*/ CMP         R0, R3 
    /*000084ec*/ MOVNE       R0, R3 
    /*000084f0*/ BEQ         VGS_QueryFirstJobFromBusyList_x84fc
    VGS_QueryFirstJobFromBusyList_x84f4:
    /*000084f4*/ ADD         SP, SP, #20 
    /*000084f8*/ POP         {R4, R5, R6, R7, PC} 
    VGS_QueryFirstJobFromBusyList_x84fc:
    /*000084fc*/ MOV         R3, #560                    @ 0x230 
    /*00008500*/ STR         R6, [SP, #12] 
    /*00008504*/ STR         R3, [SP] 
    /*00008508*/ MOVW        R2, #0                      @ .LC9 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2428] 
    /*0000850c*/ STR         R5, [SP, #8] 
    /*00008510*/ MOVT        R2, #0                      @ .LC9 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2428] 
    /*00008514*/ STR         R7, [SP, #4] 
    /*00008518*/ MOV         R1, #45                     @ 0x2d 
    /*0000851c*/ LDR         R3, [PC, #12]               @ 0x0000000000008530 
    /*00008520*/ MOV         R0, #4 
    /*00008524*/ BL          0x0000000000008524          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00008528*/ MOV         R0, #0 
    /*0000852c*/ B           VGS_QueryFirstJobFromBusyList_x84f4
    /*00008530*/ ANDEQ       R0, R0, R4, LSL #10 
FUNC_END VGS_QueryFirstJobFromBusyList


FUNC_BEGIN VGS_GetJobFromBusyList
    /*00008534*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*00008538*/ SUB         SP, SP, #12 
    /*0000853c*/ MOV         R8, R1 
    /*00008540*/ MOV         R7, R2 
    /*00008544*/ MOV         R5, R3 
    /*00008548*/ LDR         R4, [SP, #40]               @ 0x28 
    /*0000854c*/ BL          0x000000000000854C          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*00008550*/ STR         R7, [SP] 
    /*00008554*/ MOV         R3, R8 
    /*00008558*/ MOV         R1, #8 
    /*0000855c*/ ADD         R9, R5, R0, LSL #2 
    /*00008560*/ MOV         R2, R0 
    /*00008564*/ MOV         R6, R0 
    /*00008568*/ LDR         R0, [R9, #28] 
    /*0000856c*/ BL          0x000000000000856C          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008570*/ LDR         R3, [R0] 
    /*00008574*/ CMP         R3, R0 
    /*00008578*/ BEQ         VGS_GetJobFromBusyList_x85d8
    VGS_GetJobFromBusyList_x857c:
    /*0000857c*/ LDR         R0, [R9, #140]              @ 0x8c 
    /*00008580*/ MOV         R3, R8 
    /*00008584*/ MOV         R2, R6 
    /*00008588*/ STR         R7, [SP] 
    /*0000858c*/ MOV         R1, #1 
    /*00008590*/ BL          0x0000000000008590          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008594*/ LDR         R1, [R4, #4] 
    /*00008598*/ LDR         IP, [R4] 
    /*0000859c*/ MOV         R2, #256                    @ 0x100 
    /*000085a0*/ MOV         R3, #512                    @ 0x200 
    /*000085a4*/ MOVT        R2, #16 
    /*000085a8*/ MOVT        R3, #32 
    /*000085ac*/ STR         R1, [IP, #4] 
    /*000085b0*/ STR         IP, [R1] 
    /*000085b4*/ STM         R4, {R2, R3} 
    /*000085b8*/ LDRB        R3, [R0] 
    /*000085bc*/ SUB         R3, R3, #1 
    /*000085c0*/ STRB        R3, [R0] 
    /*000085c4*/ LDR         R3, [R5, #296]              @ 0x128 
    /*000085c8*/ SUB         R3, R3, #1 
    /*000085cc*/ STR         R3, [R5, #296]              @ 0x128 
    /*000085d0*/ ADD         SP, SP, #12 
    /*000085d4*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_GetJobFromBusyList_x85d8:
    /*000085d8*/ MOVW        R3, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23e0] 
    /*000085dc*/ MOVW        R0, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23e8] 
    /*000085e0*/ MOVT        R3, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23e0] 
    /*000085e4*/ MOVT        R0, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23e8] 
    /*000085e8*/ MOV         R2, #584                    @ 0x248 
    /*000085ec*/ LDR         R1, [PC, #4]                @ 0x00000000000085f8 
    /*000085f0*/ BL          0x00000000000085F0          @ osal_panic [R_ARM_CALL: +0x0] 
    /*000085f4*/ B           VGS_GetJobFromBusyList_x857c
    /*000085f8*/ ANDEQ       R0, R0, R4, LSR #10 
FUNC_END VGS_GetJobFromBusyList


FUNC_BEGIN VGS_PutJobToBusyList
    /*000085fc*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*00008600*/ SUB         SP, SP, #8 
    /*00008604*/ MOV         R5, R3 
    /*00008608*/ MOV         R9, R1 
    /*0000860c*/ LDR         R4, [SP, #40]               @ 0x28 
    /*00008610*/ MOV         R8, R2 
    /*00008614*/ BL          0x0000000000008614          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*00008618*/ STR         R8, [SP] 
    /*0000861c*/ MOV         R3, R9 
    /*00008620*/ MOV         R1, #8 
    /*00008624*/ ADD         SL, R5, R0, LSL #2 
    /*00008628*/ MOV         R7, R0 
    /*0000862c*/ MOV         R2, R0 
    /*00008630*/ LDR         R0, [SL, #28] 
    /*00008634*/ BL          0x0000000000008634          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008638*/ MOV         R3, R9 
    /*0000863c*/ MOV         R2, R7 
    /*00008640*/ MOV         R1, #1 
    /*00008644*/ MOV         R6, R0 
    /*00008648*/ LDR         R0, [SL, #140]              @ 0x8c 
    /*0000864c*/ STR         R8, [SP] 
    /*00008650*/ BL          0x0000000000008650          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008654*/ LDR         R3, [R6, #4] 
    /*00008658*/ STR         R4, [R6, #4] 
    /*0000865c*/ STR         R6, [R4] 
    /*00008660*/ STR         R3, [R4, #4] 
    /*00008664*/ STR         R4, [R3] 
    /*00008668*/ LDRB        R3, [R0] 
    /*0000866c*/ ADD         R3, R3, #1 
    /*00008670*/ STRB        R3, [R0] 
    /*00008674*/ LDR         R3, [R5, #296]              @ 0x128 
    /*00008678*/ ADD         R3, R3, #1 
    /*0000867c*/ STR         R3, [R5, #296]              @ 0x128 
    /*00008680*/ ADD         SP, SP, #8 
    /*00008684*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
FUNC_END VGS_PutJobToBusyList


FUNC_BEGIN VGS_QueryBusyJobNum
    /*00008688*/ PUSH        {R4, R5, R6, LR} 
    /*0000868c*/ SUB         SP, SP, #8 
    /*00008690*/ MOV         R5, R1 
    /*00008694*/ MOV         R6, R2 
    /*00008698*/ MOV         R4, R3 
    /*0000869c*/ BL          0x000000000000869C          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*000086a0*/ STR         R6, [SP] 
    /*000086a4*/ MOV         R3, R5 
    /*000086a8*/ MOV         R1, #1 
    /*000086ac*/ ADD         R4, R4, R0, LSL #2 
    /*000086b0*/ MOV         R2, R0 
    /*000086b4*/ LDR         R0, [R4, #140]              @ 0x8c 
    /*000086b8*/ BL          0x00000000000086B8          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*000086bc*/ LDRB        R0, [R0] 
    /*000086c0*/ ADD         SP, SP, #8 
    /*000086c4*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_QueryBusyJobNum


FUNC_BEGIN VGS_QueryBusyTotalJobNum
    /*000086c8*/ LDR         R0, [R0, #296]              @ 0x128 
    /*000086cc*/ BX          LR 
FUNC_END VGS_QueryBusyTotalJobNum


FUNC_BEGIN VGS_GetJobFromProcList
    /*000086d0*/ PUSH        {R4, R5, R6, R7, R8, R9, LR} 
    /*000086d4*/ SUB         SP, SP, #12 
    /*000086d8*/ MOV         R8, R1 
    /*000086dc*/ MOV         R7, R2 
    /*000086e0*/ MOV         R5, R3 
    /*000086e4*/ LDR         R4, [SP, #40]               @ 0x28 
    /*000086e8*/ BL          0x00000000000086E8          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*000086ec*/ STR         R7, [SP] 
    /*000086f0*/ MOV         R3, R8 
    /*000086f4*/ MOV         R1, #8 
    /*000086f8*/ ADD         R9, R5, R0, LSL #2 
    /*000086fc*/ MOV         R2, R0 
    /*00008700*/ MOV         R6, R0 
    /*00008704*/ LDR         R0, [R9, #80]               @ 0x50 
    /*00008708*/ BL          0x0000000000008708          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*0000870c*/ LDR         R3, [R0] 
    /*00008710*/ CMP         R3, R0 
    /*00008714*/ BEQ         VGS_GetJobFromProcList_x8774
    VGS_GetJobFromProcList_x8718:
    /*00008718*/ LDR         R0, [R9, #192]              @ 0xc0 
    /*0000871c*/ MOV         R3, R8 
    /*00008720*/ MOV         R2, R6 
    /*00008724*/ STR         R7, [SP] 
    /*00008728*/ MOV         R1, #1 
    /*0000872c*/ BL          0x000000000000872C          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008730*/ LDR         R1, [R4, #4] 
    /*00008734*/ LDR         IP, [R4] 
    /*00008738*/ MOV         R2, #256                    @ 0x100 
    /*0000873c*/ MOV         R3, #512                    @ 0x200 
    /*00008740*/ MOVT        R2, #16 
    /*00008744*/ MOVT        R3, #32 
    /*00008748*/ STR         R1, [IP, #4] 
    /*0000874c*/ STR         IP, [R1] 
    /*00008750*/ STM         R4, {R2, R3} 
    /*00008754*/ LDRB        R3, [R0] 
    /*00008758*/ SUB         R3, R3, #1 
    /*0000875c*/ STRB        R3, [R0] 
    /*00008760*/ LDR         R3, [R5, #300]              @ 0x12c 
    /*00008764*/ SUB         R3, R3, #1 
    /*00008768*/ STR         R3, [R5, #300]              @ 0x12c 
    /*0000876c*/ ADD         SP, SP, #12 
    /*00008770*/ POP         {R4, R5, R6, R7, R8, R9, PC} 
    VGS_GetJobFromProcList_x8774:
    /*00008774*/ MOVW        R3, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23e0] 
    /*00008778*/ MOVW        R0, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x23e8] 
    /*0000877c*/ MOVT        R3, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23e0] 
    /*00008780*/ MOVT        R0, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x23e8] 
    /*00008784*/ MOVW        R2, #647                    @ 0x287 
    /*00008788*/ LDR         R1, [PC, #4]                @ 0x0000000000008794 
    /*0000878c*/ BL          0x000000000000878C          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00008790*/ B           VGS_GetJobFromProcList_x8718
    /*00008794*/ ANDEQ       R0, R0, IP, LSR R5 
FUNC_END VGS_GetJobFromProcList


FUNC_BEGIN VGS_PutJobToProcList
    /*00008798*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000879c*/ SUB         SP, SP, #8 
    /*000087a0*/ MOV         R5, R3 
    /*000087a4*/ MOV         R9, R1 
    /*000087a8*/ LDR         R4, [SP, #40]               @ 0x28 
    /*000087ac*/ MOV         R8, R2 
    /*000087b0*/ BL          0x00000000000087B0          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*000087b4*/ STR         R8, [SP] 
    /*000087b8*/ MOV         R3, R9 
    /*000087bc*/ MOV         R1, #8 
    /*000087c0*/ ADD         SL, R5, R0, LSL #2 
    /*000087c4*/ MOV         R7, R0 
    /*000087c8*/ MOV         R2, R0 
    /*000087cc*/ LDR         R0, [SL, #80]               @ 0x50 
    /*000087d0*/ BL          0x00000000000087D0          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*000087d4*/ MOV         R3, R9 
    /*000087d8*/ MOV         R2, R7 
    /*000087dc*/ MOV         R1, #1 
    /*000087e0*/ MOV         R6, R0 
    /*000087e4*/ LDR         R0, [SL, #192]              @ 0xc0 
    /*000087e8*/ STR         R8, [SP] 
    /*000087ec*/ BL          0x00000000000087EC          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*000087f0*/ LDR         R3, [R6, #4] 
    /*000087f4*/ STR         R4, [R6, #4] 
    /*000087f8*/ STR         R6, [R4] 
    /*000087fc*/ STR         R3, [R4, #4] 
    /*00008800*/ STR         R4, [R3] 
    /*00008804*/ LDRB        R3, [R0] 
    /*00008808*/ ADD         R3, R3, #1 
    /*0000880c*/ STRB        R3, [R0] 
    /*00008810*/ LDR         R3, [R5, #300]              @ 0x12c 
    /*00008814*/ ADD         R3, R3, #1 
    /*00008818*/ STR         R3, [R5, #300]              @ 0x12c 
    /*0000881c*/ ADD         SP, SP, #8 
    /*00008820*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
FUNC_END VGS_PutJobToProcList


FUNC_BEGIN VGS_QueryProcJobNum
    /*00008824*/ PUSH        {R4, R5, R6, LR} 
    /*00008828*/ SUB         SP, SP, #8 
    /*0000882c*/ MOV         R5, R1 
    /*00008830*/ MOV         R6, R2 
    /*00008834*/ MOV         R4, R3 
    /*00008838*/ BL          0x0000000000008838          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*0000883c*/ STR         R6, [SP] 
    /*00008840*/ MOV         R3, R5 
    /*00008844*/ MOV         R1, #1 
    /*00008848*/ MOV         R2, R0 
    /*0000884c*/ ADD         R0, R0, #48                 @ 0x30 
    /*00008850*/ LDR         R0, [R4, R0, LSL #2] 
    /*00008854*/ BL          0x0000000000008854          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008858*/ LDRB        R0, [R0] 
    /*0000885c*/ ADD         SP, SP, #8 
    /*00008860*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_QueryProcJobNum


FUNC_BEGIN VGS_QueryProcTotalJobNum
    /*00008864*/ LDR         R0, [R0, #300]              @ 0x12c 
    /*00008868*/ BX          LR 
FUNC_END VGS_QueryProcTotalJobNum


FUNC_BEGIN VGS_DrvCommWorking
    /*0000886c*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00008870*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00008874*/ LDR         R3, [R3] 
    /*00008878*/ LDR         R0, [R3, #168]              @ 0xa8 
    /*0000887c*/ CLZ         R0, R0 
    /*00008880*/ LSR         R0, R0, #5 
    /*00008884*/ BX          LR 
FUNC_END VGS_DrvCommWorking


FUNC_BEGIN VGS_DrvCommCalcNodeNum.part.0
    /*00008888*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000888c*/ MOV         R7, R0 
    /*00008890*/ LDR         R5, [R7, #12]! 
    /*00008894*/ CMP         R5, R7 
    /*00008898*/ LDR         R4, [R5] 
    /*0000889c*/ BEQ         VGS_DrvCommCalcNodeNum.part.0_x891c
    /*000088a0*/ MOVW        R9, #34953                  @ 0x8889 
    /*000088a4*/ MOV         R6, #0 
    /*000088a8*/ MOVT        R9, #34952                  @ 0x8888 
    /*000088ac*/ MOVW        R8, #3839                   @ 0xeff 
    /*000088b0*/ B           VGS_DrvCommCalcNodeNum.part.0_x88c8
    VGS_DrvCommCalcNodeNum.part.0_x88b4:
    /*000088b4*/ CMP         R4, R7 
    /*000088b8*/ MOV         R5, R4 
    /*000088bc*/ ADD         R6, R6, #1 
    /*000088c0*/ LDR         R4, [R4] 
    /*000088c4*/ BEQ         VGS_DrvCommCalcNodeNum.part.0_x8914
    VGS_DrvCommCalcNodeNum.part.0_x88c8:
    /*000088c8*/ LDR         R3, [R5, #496]              @ 0x1f0 
    /*000088cc*/ CMP         R3, #0 
    /*000088d0*/ BNE         VGS_DrvCommCalcNodeNum.part.0_x88b4
    /*000088d4*/ ADD         R0, R5, #24 
    /*000088d8*/ BL          0x00000000000088D8          @ VGS_DRV_IsNeedSplit [R_ARM_CALL: .text+0xe538] 
    /*000088dc*/ CMP         R0, #0 
    /*000088e0*/ BEQ         VGS_DrvCommCalcNodeNum.part.0_x88b4
    /*000088e4*/ LDR         R3, [R5, #120]              @ 0x78 
    /*000088e8*/ CMP         R3, #0 
    /*000088ec*/ LDREQ       R3, [R5, #24] 
    /*000088f0*/ LDRNE       R2, [R5, #136]              @ 0x88 
    /*000088f4*/ MOV         R5, R4 
    /*000088f8*/ LDREQ       R2, [R3] 
    /*000088fc*/ CMP         R4, R7 
    /*00008900*/ LDR         R4, [R4] 
    /*00008904*/ ADD         R2, R2, R8 
    /*00008908*/ UMULL       R2, R3, R2, R9 
    /*0000890c*/ ADD         R6, R6, R3, LSR #11 
    /*00008910*/ BNE         VGS_DrvCommCalcNodeNum.part.0_x88c8
    VGS_DrvCommCalcNodeNum.part.0_x8914:
    /*00008914*/ MOV         R0, R6 
    /*00008918*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DrvCommCalcNodeNum.part.0_x891c:
    /*0000891c*/ MOV         R6, #0 
    /*00008920*/ B           VGS_DrvCommCalcNodeNum.part.0_x8914
FUNC_END VGS_DrvCommCalcNodeNum.part.0


FUNC_BEGIN VGS_DrvCommSetCancelFlags
    /*00008924*/ PUSH        {R4, R5, R6, LR} 
    /*00008928*/ SUB         SP, SP, #8 
    /*0000892c*/ MOV         R6, R1 
    /*00008930*/ MOV         R5, R2 
    /*00008934*/ MOV         R4, R3 
    /*00008938*/ BL          0x0000000000008938          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*0000893c*/ MOVW        IP, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00008940*/ MOVT        IP, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00008944*/ MOV         R3, R6 
    /*00008948*/ MOV         R1, #4 
    /*0000894c*/ LDR         IP, [IP] 
    /*00008950*/ MOV         R2, R0 
    /*00008954*/ ADD         R0, IP, R0, LSL #2 
    /*00008958*/ LDR         R0, [R0, #188]              @ 0xbc 
    /*0000895c*/ STR         R5, [SP] 
    /*00008960*/ BL          0x0000000000008960          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*00008964*/ STR         R4, [R0] 
    /*00008968*/ MOV         R0, #0 
    /*0000896c*/ ADD         SP, SP, #8 
    /*00008970*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_DrvCommSetCancelFlags


FUNC_BEGIN VGS_DrvCommReleaseAllNodeFromTask
    /*00008974*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00008978*/ MOV         R6, R0 
    /*0000897c*/ LDR         R5, [R6, #8]! 
    /*00008980*/ CMP         R5, R6 
    /*00008984*/ LDR         R4, [R5] 
    /*00008988*/ POPEQ       {R4, R5, R6, R7, R8, PC} 
    /*0000898c*/ MOVW        R8, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00008990*/ MOVT        R8, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00008994*/ MOV         R7, R0 
    VGS_DrvCommReleaseAllNodeFromTask_x8998:
    /*00008998*/ MOV         R1, R5 
    /*0000899c*/ MOV         R0, R7 
    /*000089a0*/ BL          0x00000000000089A0          @ VGS_DrvGetNodeFromTask [R_ARM_CALL: .text+0xae90] 
    /*000089a4*/ LDR         R0, [R8] 
    /*000089a8*/ MOV         R1, R5 
    /*000089ac*/ MOV         R5, R4 
    /*000089b0*/ ADD         R0, R0, #96                 @ 0x60 
    /*000089b4*/ BL          0x00000000000089B4          @ VGS_DrvPutNodeToFreeList [R_ARM_CALL: .text+0xadf0] 
    /*000089b8*/ CMP         R4, R6 
    /*000089bc*/ LDR         R4, [R4] 
    /*000089c0*/ BNE         VGS_DrvCommReleaseAllNodeFromTask_x8998
    /*000089c4*/ POP         {R4, R5, R6, R7, R8, PC} 
FUNC_END VGS_DrvCommReleaseAllNodeFromTask


FUNC_BEGIN VGS_DrvCommReleaseAllTaskFromJob
    /*000089c8*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*000089cc*/ MOV         R6, R0 
    /*000089d0*/ LDR         R5, [R6, #12]! 
    /*000089d4*/ CMP         R5, R6 
    /*000089d8*/ LDR         R4, [R5] 
    /*000089dc*/ POPEQ       {R4, R5, R6, R7, R8, R9, SL, PC} 
    /*000089e0*/ MOVW        R9, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*000089e4*/ MOV         R8, R1 
    /*000089e8*/ MOV         R7, R0 
    /*000089ec*/ MOVT        R9, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*000089f0*/ B           VGS_DrvCommReleaseAllTaskFromJob_x8a20
    VGS_DrvCommReleaseAllTaskFromJob_x89f4:
    /*000089f4*/ MOV         R1, R5 
    /*000089f8*/ MOV         R0, R7 
    /*000089fc*/ BL          0x00000000000089FC          @ VGS_DrvGetTaskFromJob [R_ARM_CALL: .text+0xaf7c] 
    /*00008a00*/ LDR         R0, [R9] 
    /*00008a04*/ MOV         R1, R5 
    /*00008a08*/ MOV         R5, R4 
    /*00008a0c*/ ADD         R0, R0, #80                 @ 0x50 
    /*00008a10*/ BL          0x0000000000008A10          @ VGS_DrvPutTaskToFreeList [R_ARM_CALL: .text+0xaf58] 
    /*00008a14*/ CMP         R4, R6 
    /*00008a18*/ LDR         R4, [R4] 
    /*00008a1c*/ BEQ         VGS_DrvCommReleaseAllTaskFromJob_x8a34
    VGS_DrvCommReleaseAllTaskFromJob_x8a20:
    /*00008a20*/ CMP         R8, #0 
    /*00008a24*/ BEQ         VGS_DrvCommReleaseAllTaskFromJob_x89f4
    /*00008a28*/ MOV         R0, R5 
    /*00008a2c*/ BL          0x0000000000008A2C          @ VGS_DrvCommReleaseAllNodeFromTask [R_ARM_CALL: .text+0x8974] 
    /*00008a30*/ B           VGS_DrvCommReleaseAllTaskFromJob_x89f4
    VGS_DrvCommReleaseAllTaskFromJob_x8a34:
    /*00008a34*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
FUNC_END VGS_DrvCommReleaseAllTaskFromJob


FUNC_BEGIN VGS_DrvCommReleaseAllJobFromWaitList
    /*00008a38*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00008a3c*/ MOVW        R6, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00008a40*/ MOVT        R6, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00008a44*/ MOV         R7, R0 
    /*00008a48*/ LDR         R0, [R6] 
    /*00008a4c*/ MOV         R3, R0 
    /*00008a50*/ LDR         R5, [R3, #16]! 
    /*00008a54*/ CMP         R5, R3 
    /*00008a58*/ LDR         R4, [R5] 
    /*00008a5c*/ BNE         VGS_DrvCommReleaseAllJobFromWaitList_x8a8c
    /*00008a60*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommReleaseAllJobFromWaitList_x8a64:
    /*00008a64*/ MOV         R1, R5 
    /*00008a68*/ LDR         R0, [R6] 
    /*00008a6c*/ BL          0x0000000000008A6C          @ VGS_DrvPutJobToFreeList [R_ARM_CALL: .text+0xb098] 
    /*00008a70*/ LDR         R0, [R6] 
    /*00008a74*/ MOV         R2, R4 
    /*00008a78*/ MOV         R5, R4 
    /*00008a7c*/ ADD         R3, R0, #16 
    /*00008a80*/ LDR         R4, [R4] 
    /*00008a84*/ CMP         R2, R3 
    /*00008a88*/ BEQ         VGS_DrvCommReleaseAllJobFromWaitList_x8aac
    VGS_DrvCommReleaseAllJobFromWaitList_x8a8c:
    /*00008a8c*/ MOV         R1, R5 
    /*00008a90*/ BL          0x0000000000008A90          @ VGS_DrvGetJobFromWaitList [R_ARM_CALL: .text+0xb0e8] 
    /*00008a94*/ CMP         R7, #0 
    /*00008a98*/ BEQ         VGS_DrvCommReleaseAllJobFromWaitList_x8a64
    /*00008a9c*/ MOV         R1, R7 
    /*00008aa0*/ MOV         R0, R5 
    /*00008aa4*/ BL          0x0000000000008AA4          @ VGS_DrvCommReleaseAllTaskFromJob [R_ARM_CALL: .text+0x89c8] 
    /*00008aa8*/ B           VGS_DrvCommReleaseAllJobFromWaitList_x8a64
    VGS_DrvCommReleaseAllJobFromWaitList_x8aac:
    /*00008aac*/ POP         {R4, R5, R6, R7, R8, PC} 
FUNC_END VGS_DrvCommReleaseAllJobFromWaitList


FUNC_BEGIN VGS_DrvCommCancelJob
    /*00008ab0*/ PUSH        {R4, R5, LR} 
    /*00008ab4*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00008ab8*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00008abc*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .rodata+0x554] 
    /*00008ac0*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .rodata+0x554] 
    /*00008ac4*/ MOV         IP, R0 
    /*00008ac8*/ LDR         LR, [R4] 
    /*00008acc*/ SUB         SP, SP, #36                 @ 0x24 
    /*00008ad0*/ LDM         R3, {R0, R1, R2} 
    /*00008ad4*/ LDR         R3, [LR, #4] 
    /*00008ad8*/ LDR         R5, [R3, IP, LSL #2] 
    /*00008adc*/ ADD         R3, SP, #32 
    /*00008ae0*/ STMDB       R3, {R0, R1, R2} 
    /*00008ae4*/ LDR         R1, [R5, #20] 
    /*00008ae8*/ CMP         R1, #8 
    /*00008aec*/ LDRLS       PC, [PC, R1, LSL #2] 
    /*00008af0*/ B           VGS_DrvCommCancelJob_x8be0
    /*00008af4*/ @           <UNDEFINED> instruction: 0x00008bb0 
    /*00008af8*/ ANDEQ       R8, R0, R0, ROR #23 
    /*00008afc*/ ANDEQ       R8, R0, R0, ROR #23 
    /*00008b00*/ ANDEQ       R8, R0, R8, LSL FP 
    /*00008b04*/ ANDEQ       R8, R0, IP, ASR FP 
    /*00008b08*/ ANDEQ       R8, R0, R0, LSR #23 
    /*00008b0c*/ ANDEQ       R8, R0, R0, ROR #23 
    /*00008b10*/ ANDEQ       R8, R0, R0, ROR #23 
    /*00008b14*/ ANDEQ       R8, R0, R8, LSR #23 
    /*00008b18*/ MOV         R3, #2 
    VGS_DrvCommCancelJob_x8b1c:
    /*00008b1c*/ ADD         R2, SP, #32 
    /*00008b20*/ STR         IP, [SP, #4] 
    /*00008b24*/ ADD         R3, R2, R3, LSL #2 
    /*00008b28*/ MOV         R1, #237                    @ 0xed 
    /*00008b2c*/ MOVW        R2, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x24a4] 
    /*00008b30*/ MOV         R0, #3 
    /*00008b34*/ LDR         IP, [R3, #-12] 
    /*00008b38*/ MOVT        R2, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x24a4] 
    /*00008b3c*/ STR         R1, [SP] 
    /*00008b40*/ MOV         R1, #45                     @ 0x2d 
    /*00008b44*/ LDR         R3, [PC, #172]              @ 0x0000000000008bf8 
    /*00008b48*/ STR         IP, [SP, #8] 
    /*00008b4c*/ BL          0x0000000000008B4C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00008b50*/ MVN         R0, #0 
    /*00008b54*/ ADD         SP, SP, #36                 @ 0x24 
    /*00008b58*/ POP         {R4, R5, PC} 
    /*00008b5c*/ MOV         R0, R5 
    /*00008b60*/ MOV         R1, #1 
    /*00008b64*/ BL          0x0000000000008B64          @ VGS_DrvCommReleaseAllTaskFromJob [R_ARM_CALL: .text+0x89c8] 
    /*00008b68*/ MOV         R1, R5 
    /*00008b6c*/ LDR         R0, [R4] 
    /*00008b70*/ BL          0x0000000000008B70          @ VGS_DrvGetJobFromWaitList [R_ARM_CALL: .text+0xb0e8] 
    /*00008b74*/ LDR         R3, [R5, #52]               @ 0x34 
    /*00008b78*/ LDR         R0, [R4] 
    /*00008b7c*/ MOV         R1, R5 
    /*00008b80*/ CMP         R3, #0 
    /*00008b84*/ LDREQ       R3, [R4, #4] 
    /*00008b88*/ SUBEQ       R3, R3, #1 
    /*00008b8c*/ STREQ       R3, [R4, #4] 
    /*00008b90*/ BL          0x0000000000008B90          @ VGS_DrvPutJobToFreeList [R_ARM_CALL: .text+0xb098] 
    /*00008b94*/ MOV         R0, #0 
    /*00008b98*/ ADD         SP, SP, #36                 @ 0x24 
    /*00008b9c*/ POP         {R4, R5, PC} 
    /*00008ba0*/ MOV         R3, #0 
    /*00008ba4*/ B           VGS_DrvCommCancelJob_x8b1c
    /*00008ba8*/ MOV         R3, #1 
    /*00008bac*/ B           VGS_DrvCommCancelJob_x8b1c
    /*00008bb0*/ STR         IP, [SP, #4] 
    /*00008bb4*/ MOV         R3, #218                    @ 0xda 
    /*00008bb8*/ MOV         R1, #45                     @ 0x2d 
    /*00008bbc*/ STR         R3, [SP] 
    /*00008bc0*/ MOVW        R2, #0                      @ .LC5 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2464] 
    /*00008bc4*/ LDR         R3, [PC, #44]               @ 0x0000000000008bf8 
    /*00008bc8*/ MOVT        R2, #0                      @ .LC5 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2464] 
    /*00008bcc*/ MOV         R0, #6 
    /*00008bd0*/ BL          0x0000000000008BD0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00008bd4*/ MOV         R0, #0 
    /*00008bd8*/ ADD         SP, SP, #36                 @ 0x24 
    /*00008bdc*/ POP         {R4, R5, PC} 
    VGS_DrvCommCancelJob_x8be0:
    /*00008be0*/ MOVW        R0, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2494] 
    /*00008be4*/ MOVT        R0, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2494] 
    /*00008be8*/ BL          0x0000000000008BE8          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00008bec*/ MVN         R0, #0 
    /*00008bf0*/ ADD         SP, SP, #36                 @ 0x24 
    /*00008bf4*/ POP         {R4, R5, PC} 
    /*00008bf8*/ ANDEQ       R0, R0, R0, ROR #10 
FUNC_END VGS_DrvCommCancelJob


FUNC_BEGIN VGS_DrvCommCalcNodeNum
    /*00008bfc*/ LDR         R3, [R0, #20] 
    /*00008c00*/ CMP         R3, #3 
    /*00008c04*/ BEQ         VGS_DrvCommCalcNodeNum_x8c10
    /*00008c08*/ MOV         R0, #0 
    /*00008c0c*/ BX          LR 
    VGS_DrvCommCalcNodeNum_x8c10:
    /*00008c10*/ B           0x0000000000008888 
FUNC_END VGS_DrvCommCalcNodeNum


FUNC_BEGIN VGS_DrvCommGetHalImgInfo
    /*00008c14*/ LDR         R3, [R0, #1764]             @ 0x6e4 
    /*00008c18*/ CMP         R3, #7 
    /*00008c1c*/ MOVEQ       R3, #1 
    /*00008c20*/ MOVNE       R3, #0 
    /*00008c24*/ STR         R3, [R1, #464]              @ 0x1d0 
    /*00008c28*/ BEQ         VGS_DrvCommGetHalImgInfo_x8c90
    /*00008c2c*/ ADD         R2, R0, #8 
    /*00008c30*/ ADD         R3, R0, #344                @ 0x158 
    /*00008c34*/ STR         R2, [R1] 
    /*00008c38*/ STR         R3, [R1, #16] 
    /*00008c3c*/ LDRD        R2, [R0, #128]              @ 0x80 
    /*00008c40*/ STRD        R2, [R1, #24] 
    /*00008c44*/ LDRD        R2, [R0, #136]              @ 0x88 
    /*00008c48*/ STRD        R2, [R1, #32] 
    /*00008c4c*/ LDRD        R2, [R0, #80]               @ 0x50 
    /*00008c50*/ STRD        R2, [R1, #40]               @ 0x28 
    /*00008c54*/ LDRD        R2, [R0, #88]               @ 0x58 
    /*00008c58*/ STRD        R2, [R1, #48]               @ 0x30 
    /*00008c5c*/ LDR         R3, [R0, #8] 
    /*00008c60*/ STR         R3, [R1, #56]               @ 0x38 
    /*00008c64*/ LDR         R3, [R0, #12] 
    /*00008c68*/ STR         R3, [R1, #60]               @ 0x3c 
    /*00008c6c*/ LDR         R3, [R0, #8] 
    /*00008c70*/ STR         R3, [R1, #80]               @ 0x50 
    /*00008c74*/ LDR         R3, [R0, #12] 
    /*00008c78*/ STR         R3, [R1, #84]               @ 0x54 
    /*00008c7c*/ LDR         R3, [R0, #344]              @ 0x158 
    /*00008c80*/ STR         R3, [R1, #88]               @ 0x58 
    /*00008c84*/ LDR         R3, [R0, #348]              @ 0x15c 
    /*00008c88*/ STR         R3, [R1, #92]               @ 0x5c 
    /*00008c8c*/ BX          LR 
    VGS_DrvCommGetHalImgInfo_x8c90:
    /*00008c90*/ ADD         R3, R0, #1344               @ 0x540 
    /*00008c94*/ ADD         R2, R0, #8 
    /*00008c98*/ ADD         R3, R3, #8 
    /*00008c9c*/ STR         R2, [R1] 
    /*00008ca0*/ STR         R3, [R1, #16] 
    /*00008ca4*/ LDRD        R2, [R0, #128]              @ 0x80 
    /*00008ca8*/ STRD        R2, [R1, #24] 
    /*00008cac*/ LDRD        R2, [R0, #136]              @ 0x88 
    /*00008cb0*/ STRD        R2, [R1, #32] 
    /*00008cb4*/ LDRD        R2, [R0, #80]               @ 0x50 
    /*00008cb8*/ STRD        R2, [R1, #40]               @ 0x28 
    /*00008cbc*/ LDRD        R2, [R0, #88]               @ 0x58 
    /*00008cc0*/ STRD        R2, [R1, #48]               @ 0x30 
    /*00008cc4*/ LDR         R3, [R0, #8] 
    /*00008cc8*/ STR         R3, [R1, #56]               @ 0x38 
    /*00008ccc*/ LDR         R3, [R0, #12] 
    /*00008cd0*/ STR         R3, [R1, #60]               @ 0x3c 
    /*00008cd4*/ LDR         R3, [R0, #1352]             @ 0x548 
    /*00008cd8*/ STR         R3, [R1, #80]               @ 0x50 
    /*00008cdc*/ LDR         R3, [R0, #1356]             @ 0x54c 
    /*00008ce0*/ STR         R3, [R1, #84]               @ 0x54 
    /*00008ce4*/ LDR         R3, [R0, #1352]             @ 0x548 
    /*00008ce8*/ STR         R3, [R1, #88]               @ 0x58 
    /*00008cec*/ LDR         R3, [R0, #1356]             @ 0x54c 
    /*00008cf0*/ STR         R3, [R1, #92]               @ 0x5c 
    /*00008cf4*/ BX          LR 
FUNC_END VGS_DrvCommGetHalImgInfo


FUNC_BEGIN VGS_DrvCommGetOnlineCoverInfo
    /*00008cf8*/ LDR         R3, [R0, #1800]             @ 0x708 
    /*00008cfc*/ CMP         R3, #0 
    /*00008d00*/ STR         R3, [R1, #128]              @ 0x80 
    /*00008d04*/ BXEQ        LR 
    /*00008d08*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00008d0c*/ MOV         R4, R1 
    /*00008d10*/ LDR         R1, [R0, #1848]             @ 0x738 
    /*00008d14*/ MOV         IP, R0 
    /*00008d18*/ MVN         LR, #43                     @ 0x2b 
    /*00008d1c*/ MVN         R3, #108                    @ 0x6c 
    /*00008d20*/ UBFX        R2, R1, #8, #8 
    /*00008d24*/ UBFX        R0, R1, #16, #8 
    /*00008d28*/ UXTB        R1, R1 
    /*00008d2c*/ MOV         R7, #130                    @ 0x82 
    /*00008d30*/ MUL         R3, R3, R2 
    /*00008d34*/ MOV         R5, #150                    @ 0x96 
    /*00008d38*/ MUL         LR, LR, R0 
    /*00008d3c*/ MVN         R6, #85                     @ 0x55 
    /*00008d40*/ MLA         LR, R7, R1, LR 
    /*00008d44*/ MUL         R5, R5, R2 
    /*00008d48*/ MLA         R7, R7, R0, R3 
    /*00008d4c*/ MOV         R3, #76                     @ 0x4c 
    /*00008d50*/ MLA         R0, R3, R0, R5 
    /*00008d54*/ MVN         R3, #20 
    /*00008d58*/ MLA         R2, R6, R2, LR 
    /*00008d5c*/ MOV         LR, #29 
    /*00008d60*/ MLA         R3, R3, R1, R7 
    /*00008d64*/ MLA         R1, LR, R1, R0 
    /*00008d68*/ ASR         R2, R2, #8 
    /*00008d6c*/ ADD         R2, R2, #128                @ 0x80 
    /*00008d70*/ ASR         R3, R3, #8 
    /*00008d74*/ USAT        R2, #8, R2 
    /*00008d78*/ ADD         R3, R3, #128                @ 0x80 
    /*00008d7c*/ ASR         R1, R1, #8 
    /*00008d80*/ USAT        R3, #8, R3 
    /*00008d84*/ ORR         R3, R3, R1, LSL #16 
    /*00008d88*/ ORR         R3, R3, R2, LSL #8 
    /*00008d8c*/ STR         R3, [R4, #136]              @ 0x88 
    /*00008d90*/ LDR         R3, [IP, #1804]             @ 0x70c 
    /*00008d94*/ CMP         R3, #0 
    /*00008d98*/ BNE         VGS_DrvCommGetOnlineCoverInfo_x8e90
    /*00008d9c*/ STR         R3, [R4, #132]              @ 0x84 
    /*00008da0*/ MOV         R2, #1 
    /*00008da4*/ STR         R3, [R4, #144]              @ 0x90 
    /*00008da8*/ STR         R2, [R4, #140]              @ 0x8c 
    /*00008dac*/ LDR         R0, [IP, #1808]             @ 0x710 
    /*00008db0*/ STR         R0, [R4, #148]              @ 0x94 
    /*00008db4*/ LDR         R3, [IP, #1812]             @ 0x714 
    /*00008db8*/ STR         R3, [R4, #152]              @ 0x98 
    /*00008dbc*/ LDR         R1, [IP, #1816]             @ 0x718 
    /*00008dc0*/ LDR         R3, [IP, #1808]             @ 0x710 
    /*00008dc4*/ SUB         R1, R1, #1 
    /*00008dc8*/ ADD         R1, R1, R3 
    /*00008dcc*/ STR         R1, [R4, #156]              @ 0x9c 
    /*00008dd0*/ LDR         R3, [IP, #1812]             @ 0x714 
    /*00008dd4*/ STR         R3, [R4, #160]              @ 0xa0 
    /*00008dd8*/ LDR         R2, [IP, #1808]             @ 0x710 
    /*00008ddc*/ STR         R2, [R4, #164]              @ 0xa4 
    /*00008de0*/ LDR         R3, [IP, #1820]             @ 0x71c 
    /*00008de4*/ LDR         LR, [IP, #1812]             @ 0x714 
    /*00008de8*/ SUB         R3, R3, #1 
    /*00008dec*/ ADD         R3, R3, LR 
    /*00008df0*/ STR         R3, [R4, #168]              @ 0xa8 
    /*00008df4*/ LDR         R3, [IP, #1816]             @ 0x718 
    /*00008df8*/ LDR         LR, [IP, #1808]             @ 0x710 
    /*00008dfc*/ SUB         R3, R3, #1 
    /*00008e00*/ ADD         R3, R3, LR 
    /*00008e04*/ STR         R3, [R4, #172]              @ 0xac 
    /*00008e08*/ LDR         LR, [IP, #1820]             @ 0x71c 
    /*00008e0c*/ LDR         R5, [IP, #1812]             @ 0x714 
    /*00008e10*/ SUB         IP, LR, #1 
    /*00008e14*/ ADD         IP, IP, R5 
    /*00008e18*/ STR         IP, [R4, #176]              @ 0xb0 
    VGS_DrvCommGetOnlineCoverInfo_x8e1c:
    /*00008e1c*/ BL          0x0000000000008E1C          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00008e20*/ LDR         R3, [R4, #176]              @ 0xb0 
    /*00008e24*/ LDR         R2, [R4, #168]              @ 0xa8 
    /*00008e28*/ LDR         R1, [R4, #160]              @ 0xa0 
    /*00008e2c*/ MOV         R5, R0 
    /*00008e30*/ LDR         R0, [R4, #152]              @ 0x98 
    /*00008e34*/ BL          0x0000000000008E34          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00008e38*/ TST         R5, #1 
    /*00008e3c*/ BNE         VGS_DrvCommGetOnlineCoverInfo_x8e64
    /*00008e40*/ ADD         R1, R4, #32 
    /*00008e44*/ SUB         IP, R5, #1 
    /*00008e48*/ MOV         R3, R4 
    VGS_DrvCommGetOnlineCoverInfo_x8e4c:
    /*00008e4c*/ LDR         R2, [R3, #148]              @ 0x94 
    /*00008e50*/ ADD         R3, R3, #8 
    /*00008e54*/ CMP         R5, R2 
    /*00008e58*/ STREQ       IP, [R3, #140]              @ 0x8c 
    /*00008e5c*/ CMP         R1, R3 
    /*00008e60*/ BNE         VGS_DrvCommGetOnlineCoverInfo_x8e4c
    VGS_DrvCommGetOnlineCoverInfo_x8e64:
    /*00008e64*/ TST         R0, #1 
    /*00008e68*/ POPNE       {R4, R5, R6, R7, R8, PC} 
    /*00008e6c*/ SUB         R1, R0, #1 
    /*00008e70*/ ADD         R2, R4, #32 
    VGS_DrvCommGetOnlineCoverInfo_x8e74:
    /*00008e74*/ LDR         R3, [R4, #152]              @ 0x98 
    /*00008e78*/ ADD         R4, R4, #8 
    /*00008e7c*/ CMP         R0, R3 
    /*00008e80*/ STREQ       R1, [R4, #144]              @ 0x90 
    /*00008e84*/ CMP         R2, R4 
    /*00008e88*/ BNE         VGS_DrvCommGetOnlineCoverInfo_x8e74
    /*00008e8c*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommGetOnlineCoverInfo_x8e90:
    /*00008e90*/ MOV         R3, #1 
    /*00008e94*/ ADD         R1, IP, #1808               @ 0x710 
    /*00008e98*/ MOV         R2, #40                     @ 0x28 
    /*00008e9c*/ STR         R3, [R4, #132]              @ 0x84 
    /*00008ea0*/ ADD         R0, R4, #140                @ 0x8c 
    /*00008ea4*/ BL          0x0000000000008EA4          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00008ea8*/ LDR         R0, [R4, #148]              @ 0x94 
    /*00008eac*/ LDR         R1, [R4, #156]              @ 0x9c 
    /*00008eb0*/ LDR         R2, [R4, #164]              @ 0xa4 
    /*00008eb4*/ LDR         R3, [R4, #172]              @ 0xac 
    /*00008eb8*/ B           VGS_DrvCommGetOnlineCoverInfo_x8e1c
FUNC_END VGS_DrvCommGetOnlineCoverInfo


FUNC_BEGIN VGS_DrvCommGetOnlineOSDInfo
    /*00008ebc*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00008ec0*/ MOV         R4, R1 
    /*00008ec4*/ LDR         LR, [R1, #16] 
    /*00008ec8*/ MOV         R5, R0 
    /*00008ecc*/ LDR         IP, [R0, #1856]             @ 0x740 
    /*00008ed0*/ MOV         R3, R0 
    /*00008ed4*/ ADD         R1, R0, #1888               @ 0x760 
    /*00008ed8*/ MOV         R2, #16 
    /*00008edc*/ LDR         R8, [LR, #24] 
    /*00008ee0*/ ADD         R0, R4, #224                @ 0xe0 
    /*00008ee4*/ STR         IP, [R4, #192]              @ 0xc0 
    /*00008ee8*/ LDRB        IP, [R5, #1860]             @ 0x744 
    /*00008eec*/ SUB         R8, R8, #2 
    /*00008ef0*/ STRB        IP, [R4, #196]              @ 0xc4 
    /*00008ef4*/ LDR         IP, [R5, #1880]             @ 0x758 
    /*00008ef8*/ STR         IP, [R4, #216]              @ 0xd8 
    /*00008efc*/ LDR         IP, [R3, #1872]!            @ 0x750 
    /*00008f00*/ STR         IP, [R4, #208]              @ 0xd0 
    /*00008f04*/ LDRD        R6, [R3, #-8] 
    /*00008f08*/ STRD        R6, [R4, #200]              @ 0xc8 
    /*00008f0c*/ LDR         R3, [R5, #1876]             @ 0x754 
    /*00008f10*/ STR         R3, [R4, #212]              @ 0xd4 
    /*00008f14*/ LDRB        R3, [R5, #1884]             @ 0x75c 
    /*00008f18*/ STRB        R3, [R4, #220]              @ 0xdc 
    /*00008f1c*/ LDRB        R3, [R5, #1885]             @ 0x75d 
    /*00008f20*/ STRB        R3, [R4, #221]              @ 0xdd 
    /*00008f24*/ BL          0x0000000000008F24          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*00008f28*/ LDR         R3, [R5, #1904]             @ 0x770 
    /*00008f2c*/ CMP         R3, #0 
    /*00008f30*/ STR         R3, [R4, #432]              @ 0x1b0 
    /*00008f34*/ LDRNE       R3, [R5, #1924]             @ 0x784 
    /*00008f38*/ STRNE       R3, [R4, #260]              @ 0x104 
    /*00008f3c*/ CMP         R8, #1 
    /*00008f40*/ POPHI       {R4, R5, R6, R7, R8, PC} 
    /*00008f44*/ MOV         R1, R4 
    /*00008f48*/ ADD         R0, R4, #192                @ 0xc0 
    /*00008f4c*/ POP         {R4, R5, R6, R7, R8, LR} 
    VGS_DrvCommGetOnlineOSDInfo_x8f50:
    /*00008f50*/ B           VGS_DrvCommGetOnlineOSDInfo_x8f50@ VGS_DRV_ConvertGhdrInfo [R_ARM_JUMP24: .text+0xd94c] 
FUNC_END VGS_DrvCommGetOnlineOSDInfo


FUNC_BEGIN VGS_DrvCommGetFPDInfo
    /*00008f54*/ LDRD        R2, [R0, #208]              @ 0xd0 
    /*00008f58*/ ADD         IP, R1, #364                @ 0x16c 
    /*00008f5c*/ PUSH        {R4, R5, R6, R7, LR} 
    /*00008f60*/ ADD         R4, R1, #352                @ 0x160 
    /*00008f64*/ ADD         R7, R1, #360                @ 0x168 
    /*00008f68*/ MOVW        LR, #362                    @ 0x16a 
    /*00008f6c*/ STRD        R2, [R4, #-8] 
    /*00008f70*/ ADD         R6, R1, #368                @ 0x170 
    /*00008f74*/ LDR         R3, [R0, #216]              @ 0xd8 
    /*00008f78*/ ADD         R2, R1, #372                @ 0x174 
    /*00008f7c*/ ADD         R5, R0, #248                @ 0xf8 
    /*00008f80*/ ADD         R4, R1, #372                @ 0x174 
    /*00008f84*/ ADD         R2, R2, #2 
    /*00008f88*/ STR         R3, [R1, #352]              @ 0x160 
    /*00008f8c*/ LDR         R3, [R0, #220]              @ 0xdc 
    /*00008f90*/ STR         R3, [R1, #356]              @ 0x164 
    /*00008f94*/ LDRH        R3, [R0, #224]              @ 0xe0 
    /*00008f98*/ STRH        R3, [R7] 
    /*00008f9c*/ ADD         R3, R0, #238                @ 0xee 
    /*00008fa0*/ LDRH        R7, [R0, #226]              @ 0xe2 
    /*00008fa4*/ STRH        R7, [R1, LR] 
    /*00008fa8*/ ADD         LR, R1, #384                @ 0x180 
    /*00008fac*/ LDRH        R7, [R0, #228]              @ 0xe4 
    /*00008fb0*/ STRH        R7, [IP] 
    /*00008fb4*/ MOV         IP, R5 
    /*00008fb8*/ LDRB        R7, [R0, #230]              @ 0xe6 
    /*00008fbc*/ STRB        R7, [R1, #366]              @ 0x16e 
    /*00008fc0*/ LDRH        R7, [R0, #232]              @ 0xe8 
    /*00008fc4*/ STRH        R7, [R6] 
    /*00008fc8*/ LDRH        R6, [R0, #236]              @ 0xec 
    /*00008fcc*/ STRH        R6, [R4] 
    VGS_DrvCommGetFPDInfo_x8fd0:
    /*00008fd0*/ LDRH        R4, [R3], #2 
    /*00008fd4*/ CMP         R3, R5 
    /*00008fd8*/ STRH        R4, [R2], #2 
    /*00008fdc*/ LDRH        R4, [IP], #2 
    /*00008fe0*/ STRH        R4, [LR], #2 
    /*00008fe4*/ BNE         VGS_DrvCommGetFPDInfo_x8fd0
    /*00008fe8*/ ADD         R3, R0, #256                @ 0x100 
    /*00008fec*/ ADD         R2, R1, #392                @ 0x188 
    /*00008ff0*/ ADD         LR, R0, #288                @ 0x120 
    VGS_DrvCommGetFPDInfo_x8ff4:
    /*00008ff4*/ LDRH        IP, [R3, #2]! 
    /*00008ff8*/ CMP         R3, LR 
    /*00008ffc*/ STRH        IP, [R2, #2]! 
    /*00009000*/ BNE         VGS_DrvCommGetFPDInfo_x8ff4
    /*00009004*/ MOVW        R2, #290                    @ 0x122 
    /*00009008*/ MOVW        R3, #426                    @ 0x1aa 
    /*0000900c*/ LDRH        R2, [R0, R2] 
    /*00009010*/ STRH        R2, [R1, R3] 
    /*00009014*/ LDR         R3, [R0, #292]              @ 0x124 
    /*00009018*/ STR         R3, [R1, #428]              @ 0x1ac 
    /*0000901c*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END VGS_DrvCommGetFPDInfo


FUNC_BEGIN VGS_DrvCommConvertTaskInfo
    /*00009020*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00009024*/ ADD         R5, R1, #24 
    /*00009028*/ MOV         R4, R0 
    /*0000902c*/ SUB         SP, SP, #8 
    /*00009030*/ MOV         R6, R1 
    /*00009034*/ MOV         R2, #488                    @ 0x1e8 
    /*00009038*/ MOV         R1, #0 
    /*0000903c*/ MOV         R0, R5 
    /*00009040*/ BL          0x0000000000009040          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00009044*/ LDR         R3, [R4, #1764]             @ 0x6e4 
    /*00009048*/ MOV         R1, R5 
    /*0000904c*/ CMP         R3, #8 
    /*00009050*/ BEQ         VGS_DrvCommConvertTaskInfo_x9238
    /*00009054*/ MOV         R0, R4 
    /*00009058*/ BL          0x0000000000009058          @ VGS_DrvCommGetHalImgInfo [R_ARM_CALL: .text+0x8c14] 
    /*0000905c*/ MOV         R0, R5 
    /*00009060*/ BL          0x0000000000009060          @ VGS_DRV_SetHdrBufAddr [R_ARM_CALL: .text+0xf9e4] 
    /*00009064*/ MOV         R0, R5 
    /*00009068*/ BL          0x0000000000009068          @ VGS_DRV_GenTileInfo [R_ARM_CALL: .text+0xda18] 
    /*0000906c*/ LDR         R2, [R6, #40]               @ 0x28 
    /*00009070*/ LDR         R3, [R6, #24] 
    /*00009074*/ LDR         R8, [R2, #24] 
    /*00009078*/ LDR         R3, [R3, #24] 
    /*0000907c*/ SUBS        R2, R3, R8 
    /*00009080*/ MOVNE       R2, #1 
    /*00009084*/ CMP         R3, #2 
    /*00009088*/ MOVNE       R2, #0 
    /*0000908c*/ CMP         R2, #0 
    /*00009090*/ MOVEQ       R7, R2 
    /*00009094*/ BNE         VGS_DrvCommConvertTaskInfo_x9180
    VGS_DrvCommConvertTaskInfo_x9098:
    /*00009098*/ LDR         R3, [R4, #1764]             @ 0x6e4 
    /*0000909c*/ CMP         R3, #6 
    /*000090a0*/ LDRLS       PC, [PC, R3, LSL #2] 
    /*000090a4*/ B           VGS_DrvCommConvertTaskInfo_x924c
    /*000090a8*/ ANDEQ       R9, R0, R4, ASR #1 
    /*000090ac*/ ANDEQ       R9, R0, R0, ASR #3 
    /*000090b0*/ ANDEQ       R9, R0, R8, ROR #3 
    /*000090b4*/ ANDEQ       R9, R0, R4, ROR R1 
    /*000090b8*/ ANDEQ       R9, R0, R0, LSL #4 
    /*000090bc*/ ANDEQ       R9, R0, R4, ROR R1 
    /*000090c0*/ MULEQ       R0, R0, R1 
    /*000090c4*/ LDR         R3, [R4, #1796]             @ 0x704 
    /*000090c8*/ MOV         R2, #0 
    /*000090cc*/ STR         R2, [R6, #148]              @ 0x94 
    /*000090d0*/ CMP         R3, R2 
    /*000090d4*/ STR         R3, [R6, #144]              @ 0x90 
    /*000090d8*/ BNE         VGS_DrvCommConvertTaskInfo_x92b8
    VGS_DrvCommConvertTaskInfo_x90dc:
    /*000090dc*/ LDR         R3, [R4, #1852]             @ 0x73c 
    /*000090e0*/ MOV         R2, #0 
    /*000090e4*/ STR         R2, [R6, #208]              @ 0xd0 
    /*000090e8*/ CMP         R3, R2 
    /*000090ec*/ STR         R3, [R6, #204]              @ 0xcc 
    /*000090f0*/ BNE         VGS_DrvCommConvertTaskInfo_x92a8
    VGS_DrvCommConvertTaskInfo_x90f4:
    /*000090f4*/ LDR         R3, [R4, #1776]             @ 0x6f0 
    /*000090f8*/ CMP         R3, #0 
    /*000090fc*/ STR         R3, [R6, #120]              @ 0x78 
    /*00009100*/ BNE         VGS_DrvCommConvertTaskInfo_x9290
    VGS_DrvCommConvertTaskInfo_x9104:
    /*00009104*/ LDR         R3, [R4, #1960]             @ 0x7a8 
    /*00009108*/ CMP         R3, #0 
    /*0000910c*/ STR         R3, [R6, #332]              @ 0x14c 
    /*00009110*/ BNE         VGS_DrvCommConvertTaskInfo_x927c
    VGS_DrvCommConvertTaskInfo_x9114:
    /*00009114*/ LDR         R3, [R4, #1952]             @ 0x7a0 
    /*00009118*/ ADD         R7, R4, #1776               @ 0x6f0 
    /*0000911c*/ MOV         R1, R5 
    /*00009120*/ MOV         R0, R7 
    /*00009124*/ STR         R3, [R6, #328]              @ 0x148 
    /*00009128*/ LDR         R3, [R4, #1944]             @ 0x798 
    /*0000912c*/ STR         R3, [R6, #336]              @ 0x150 
    /*00009130*/ LDR         R3, [R4, #1948]             @ 0x79c 
    /*00009134*/ STR         R3, [R6, #340]              @ 0x154 
    /*00009138*/ BL          0x0000000000009138          @ VGS_DRV_ConvertLBAInfo [R_ARM_CALL: .text+0xe420] 
    /*0000913c*/ LDR         R3, [R4, #1956]             @ 0x7a4 
    /*00009140*/ MOV         R0, R5 
    /*00009144*/ STR         R3, [R6, #344]              @ 0x158 
    /*00009148*/ BL          0x0000000000009148          @ VGS_DRV_SetPreScaleCfg [R_ARM_CALL: .text+0xf8e0] 
    /*0000914c*/ LDR         R3, [R4, #1980]             @ 0x7bc 
    /*00009150*/ CMP         R3, #0 
    /*00009154*/ STR         R3, [R6, #360]              @ 0x168 
    /*00009158*/ BEQ         VGS_DrvCommConvertTaskInfo_x9168
    /*0000915c*/ MOV         R1, R5 
    /*00009160*/ MOV         R0, R7 
    /*00009164*/ BL          0x0000000000009164          @ VGS_DrvCommGetFPDInfo [R_ARM_CALL: .text+0x8f54] 
    VGS_DrvCommConvertTaskInfo_x9168:
    /*00009168*/ MOV         R1, R5 
    /*0000916c*/ MOV         R0, R7 
    /*00009170*/ BL          0x0000000000009170          @ VGS_DRV_ConvertMirrorAndFlip [R_ARM_CALL: .text+0xe428] 
    VGS_DrvCommConvertTaskInfo_x9174:
    /*00009174*/ MOV         R0, #0 
    /*00009178*/ ADD         SP, SP, #8 
    /*0000917c*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommConvertTaskInfo_x9180:
    /*00009180*/ MOV         R0, R5 
    /*00009184*/ MOV         R7, #1 
    /*00009188*/ BL          0x0000000000009188          @ VGS_DRV_ConvertVdHdrInfo [R_ARM_CALL: .text+0xd954] 
    /*0000918c*/ B           VGS_DrvCommConvertTaskInfo_x9098
    /*00009190*/ MOV         R0, R4 
    /*00009194*/ MOV         R3, #1 
    /*00009198*/ STR         R3, [R6, #464]              @ 0x1d0 
    /*0000919c*/ ADD         R1, R6, #472                @ 0x1d8 
    /*000091a0*/ LDR         R3, [R0, #1776]!            @ 0x6f0 
    /*000091a4*/ CLZ         R3, R3 
    /*000091a8*/ LSR         R3, R3, #5 
    /*000091ac*/ STR         R3, [R6, #468]              @ 0x1d4 
    /*000091b0*/ BL          0x00000000000091B0          @ VGS_DRV_ConvertRotationInfo [R_ARM_CALL: .text+0xe3a4] 
    /*000091b4*/ MOV         R0, #0 
    /*000091b8*/ ADD         SP, SP, #8 
    /*000091bc*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*000091c0*/ ADD         R0, R4, #1776               @ 0x6f0 
    /*000091c4*/ MOV         R1, R5 
    /*000091c8*/ SUB         R8, R8, #2 
    /*000091cc*/ BL          0x00000000000091CC          @ VGS_DRV_ConvertOsdInfo [R_ARM_CALL: .text+0xde60] 
    /*000091d0*/ CMP         R8, #1 
    /*000091d4*/ BHI         VGS_DrvCommConvertTaskInfo_x9174
    /*000091d8*/ MOV         R1, R5 
    /*000091dc*/ ADD         R0, R6, #216                @ 0xd8 
    /*000091e0*/ BL          0x00000000000091E0          @ VGS_DRV_ConvertGhdrInfo [R_ARM_CALL: .text+0xd94c] 
    /*000091e4*/ B           VGS_DrvCommConvertTaskInfo_x9174
    /*000091e8*/ MOV         R1, R5 
    /*000091ec*/ ADD         R0, R4, #1776               @ 0x6f0 
    /*000091f0*/ BL          0x00000000000091F0          @ VGS_DRV_ConvertCoverInfo [R_ARM_CALL: .text+0xda20] 
    /*000091f4*/ MOV         R0, #0 
    /*000091f8*/ ADD         SP, SP, #8 
    /*000091fc*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*00009200*/ ADD         R3, R4, #1808               @ 0x710 
    /*00009204*/ MOV         R2, #1 
    /*00009208*/ STR         R2, [R6, #288]              @ 0x120 
    /*0000920c*/ ADD         IP, R6, #320                @ 0x140 
    /*00009210*/ LDRD        R2, [R3, #-8] 
    /*00009214*/ MOV         R1, R5 
    /*00009218*/ ADD         R0, R4, #1776               @ 0x6f0 
    /*0000921c*/ STRD        R2, [IP, #-8] 
    /*00009220*/ LDR         R3, [R4, #1792]             @ 0x700 
    /*00009224*/ STR         R3, [R6, #320]              @ 0x140 
    /*00009228*/ BL          0x0000000000009228          @ VGS_DRV_ConvertLumaStatInfo [R_ARM_CALL: .text+0xe07c] 
    /*0000922c*/ MOV         R0, #0 
    /*00009230*/ ADD         SP, SP, #8 
    /*00009234*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommConvertTaskInfo_x9238:
    /*00009238*/ ADD         R0, R4, #1776               @ 0x6f0 
    /*0000923c*/ BL          0x000000000000923C          @ VGS_DRV_ConvertGMEInfo [R_ARM_CALL: .text+0xe430] 
    /*00009240*/ MOV         R0, #0 
    /*00009244*/ ADD         SP, SP, #8 
    /*00009248*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommConvertTaskInfo_x924c:
    /*0000924c*/ STR         R3, [SP, #4] 
    /*00009250*/ MOV         R1, #45                     @ 0x2d 
    /*00009254*/ MOVW        R3, #641                    @ 0x281 
    /*00009258*/ MOVW        R2, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x24e4] 
    /*0000925c*/ STR         R3, [SP] 
    /*00009260*/ MOVT        R2, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x24e4] 
    /*00009264*/ LDR         R3, [PC, #92]               @ 0x00000000000092c8 
    /*00009268*/ MOV         R0, #3 
    /*0000926c*/ BL          0x000000000000926C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00009270*/ MOV         R0, #0 
    /*00009274*/ ADD         SP, SP, #8 
    /*00009278*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommConvertTaskInfo_x927c:
    /*0000927c*/ ADD         R0, R4, #1952               @ 0x7a0 
    /*00009280*/ MOV         R1, R5 
    /*00009284*/ ADD         R0, R0, #12 
    /*00009288*/ BL          0x0000000000009288          @ VGS_DRV_ConvertGdcInfo [R_ARM_CALL: .text+0xe2b8] 
    /*0000928c*/ B           VGS_DrvCommConvertTaskInfo_x9114
    VGS_DrvCommConvertTaskInfo_x9290:
    /*00009290*/ ADD         R0, R4, #1776               @ 0x6f0 
    /*00009294*/ MOV         R2, R7 
    /*00009298*/ MOV         R1, R5 
    /*0000929c*/ ADD         R0, R0, #4 
    /*000092a0*/ BL          0x00000000000092A0          @ VGS_DRV_ConvertCropInfo [R_ARM_CALL: .text+0xd95c] 
    /*000092a4*/ B           VGS_DrvCommConvertTaskInfo_x9104
    VGS_DrvCommConvertTaskInfo_x92a8:
    /*000092a8*/ MOV         R1, R5 
    /*000092ac*/ MOV         R0, R4 
    /*000092b0*/ BL          0x00000000000092B0          @ VGS_DrvCommGetOnlineOSDInfo [R_ARM_CALL: .text+0x8ebc] 
    /*000092b4*/ B           VGS_DrvCommConvertTaskInfo_x90f4
    VGS_DrvCommConvertTaskInfo_x92b8:
    /*000092b8*/ MOV         R1, R5 
    /*000092bc*/ MOV         R0, R4 
    /*000092c0*/ BL          0x00000000000092C0          @ VGS_DrvCommGetOnlineCoverInfo [R_ARM_CALL: .text+0x8cf8] 
    /*000092c4*/ B           VGS_DrvCommConvertTaskInfo_x90dc
    /*000092c8*/ ANDEQ       R0, R0, R8, ROR R5 
FUNC_END VGS_DrvCommConvertTaskInfo


FUNC_BEGIN VGS_DrvCommCalcWeight
    /*000092cc*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*000092d0*/ LDR         R3, [R0, #1764]             @ 0x6e4 
    /*000092d4*/ CMP         R3, #8 
    /*000092d8*/ LDRLS       PC, [PC, R3, LSL #2] 
    /*000092dc*/ B           VGS_DrvCommCalcWeight_x9368
    /*000092e0*/ ANDEQ       R9, R0, R8, LSL R3 
    /*000092e4*/ ANDEQ       R9, R0, R4, LSR R3 
    /*000092e8*/ ANDEQ       R9, R0, R8, ASR #6 
    /*000092ec*/ ANDEQ       R9, R0, R8, ROR #6 
    /*000092f0*/ ANDEQ       R9, R0, R0, ROR R3 
    /*000092f4*/ ANDEQ       R9, R0, R0, LSL #7 
    /*000092f8*/ ANDEQ       R9, R0, R4, LSL #6 
    /*000092fc*/ ANDEQ       R9, R0, R8, ROR #6 
    /*00009300*/ ANDEQ       R9, R0, R4, ASR #7 
    /*00009304*/ LDR         R3, [R0, #8] 
    /*00009308*/ LDR         R0, [R0, #12] 
    /*0000930c*/ MUL         R0, R0, R3 
    /*00009310*/ LSL         R0, R0, #1 
    /*00009314*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*00009318*/ LDR         IP, [R0, #344]              @ 0x158 
    /*0000931c*/ LDR         R2, [R0, #348]              @ 0x15c 
    /*00009320*/ LDR         R3, [R0, #8] 
    /*00009324*/ LDR         R1, [R0, #12] 
    /*00009328*/ MUL         R0, R2, IP 
    /*0000932c*/ MLA         R0, R1, R3, R0 
    /*00009330*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*00009334*/ LDR         R3, [R0, #1816]             @ 0x718 
    /*00009338*/ LDR         R0, [R0, #1820]             @ 0x71c 
    /*0000933c*/ MUL         R0, R0, R3 
    /*00009340*/ LSL         R0, R0, #1 
    /*00009344*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*00009348*/ LDR         R3, [R0, #1780]             @ 0x6f4 
    /*0000934c*/ CMP         R3, #0 
    /*00009350*/ BNE         VGS_DrvCommCalcWeight_x93cc
    /*00009354*/ LDR         R3, [R0, #1792]             @ 0x700 
    /*00009358*/ LDR         R0, [R0, #1796]             @ 0x704 
    /*0000935c*/ MUL         R0, R0, R3 
    /*00009360*/ LSL         R0, R0, #1 
    /*00009364*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommCalcWeight_x9368:
    /*00009368*/ MOV         R0, #0 
    /*0000936c*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*00009370*/ LDR         R3, [R0, #1784]             @ 0x6f8 
    /*00009374*/ LDR         R0, [R0, #1788]             @ 0x6fc 
    /*00009378*/ MUL         R0, R0, R3 
    /*0000937c*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*00009380*/ LDR         IP, [R0, #1800]             @ 0x708 
    /*00009384*/ LDR         R2, [R0, #1804]             @ 0x70c 
    /*00009388*/ LDR         R3, [R0, #1788]             @ 0x6fc 
    /*0000938c*/ LDR         LR, [R0, #1784]             @ 0x6f8 
    /*00009390*/ LDR         R1, [R0, #20] 
    /*00009394*/ MUL         R2, R2, IP 
    /*00009398*/ CMP         R1, #11 
    /*0000939c*/ LDR         IP, [R0, #356]              @ 0x164 
    /*000093a0*/ MUL         R0, R3, LR 
    /*000093a4*/ MOVNE       R1, #2 
    /*000093a8*/ MOVEQ       R1, #4 
    /*000093ac*/ CMP         IP, #11 
    /*000093b0*/ MOVNE       R3, #2 
    /*000093b4*/ MOVEQ       R3, #4 
    /*000093b8*/ MUL         R3, R3, R2 
    /*000093bc*/ MLA         R0, R1, R0, R3 
    /*000093c0*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*000093c4*/ MOV         R0, #921600                 @ 0xe1000 
    /*000093c8*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommCalcWeight_x93cc:
    /*000093cc*/ MOV         R5, R0 
    /*000093d0*/ LDR         R3, [R0, #1816]             @ 0x718 
    /*000093d4*/ LDR         R2, [R0, #1808]             @ 0x710 
    /*000093d8*/ LDR         R1, [R0, #1800]             @ 0x708 
    /*000093dc*/ LDR         R0, [R0, #1792]             @ 0x700 
    /*000093e0*/ BL          0x00000000000093E0          @ VGS_GetMinCoordinate [R_ARM_CALL: .text+0xb80c] 
    /*000093e4*/ LDR         R3, [R5, #1820]             @ 0x71c 
    /*000093e8*/ LDR         R2, [R5, #1812]             @ 0x714 
    /*000093ec*/ LDR         R1, [R5, #1804]             @ 0x70c 
    /*000093f0*/ MOV         R7, R0 
    /*000093f4*/ LDR         R0, [R5, #1796]             @ 0x704 
    /*000093f8*/ BL          0x00000000000093F8          @ VGS_GetMinCoordinate [R_ARM_CALL: .text+0xb80c] 
    /*000093fc*/ LDR         R3, [R5, #1816]             @ 0x718 
    /*00009400*/ LDR         R2, [R5, #1808]             @ 0x710 
    /*00009404*/ LDR         R1, [R5, #1800]             @ 0x708 
    /*00009408*/ MOV         R4, R0 
    /*0000940c*/ LDR         R0, [R5, #1792]             @ 0x700 
    /*00009410*/ BL          0x0000000000009410          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*00009414*/ LDR         R3, [R5, #1820]             @ 0x71c 
    /*00009418*/ LDR         R2, [R5, #1812]             @ 0x714 
    /*0000941c*/ LDR         R1, [R5, #1804]             @ 0x70c 
    /*00009420*/ MOV         R6, R0 
    /*00009424*/ LDR         R0, [R5, #1796]             @ 0x704 
    /*00009428*/ BL          0x0000000000009428          @ VGS_GetMaxCoordinate [R_ARM_CALL: .text+0xb828] 
    /*0000942c*/ SUB         R6, R6, R7 
    /*00009430*/ SUB         R0, R0, R4 
    /*00009434*/ MUL         R0, R0, R6 
    /*00009438*/ LSL         R0, R0, #1 
    /*0000943c*/ POP         {R4, R5, R6, R7, R8, PC} 
FUNC_END VGS_DrvCommCalcWeight


FUNC_BEGIN VGS_DrvCommPrepareHWInfo
    /*00009440*/ PUSH        {R3, R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00009444*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00009448*/ LDR         R2, [R0, #20] 
    /*0000944c*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00009450*/ MOV         R4, R0 
    /*00009454*/ MOV         R5, R1 
    /*00009458*/ LDR         R9, [R3] 
    /*0000945c*/ CMP         R2, #2 
    /*00009460*/ ADD         R9, R9, #80                 @ 0x50 
    /*00009464*/ BEQ         VGS_DrvCommPrepareHWInfo_x9484
    /*00009468*/ MOVW        R3, #0                      @ .LC9 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2514] 
    /*0000946c*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*00009470*/ MOVT        R3, #0                      @ .LC9 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2514] 
    /*00009474*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*00009478*/ MOVW        R2, #791                    @ 0x317 
    /*0000947c*/ LDR         R1, [PC, #176]              @ 0x0000000000009534 
    /*00009480*/ BL          0x0000000000009480          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_DrvCommPrepareHWInfo_x9484:
    /*00009484*/ MOV         R3, #0 
    /*00009488*/ STR         R3, [R5, #48]               @ 0x30 
    /*0000948c*/ LDR         R3, [R4, #32] 
    /*00009490*/ MOV         R8, R4 
    /*00009494*/ STR         R3, [R5, #28] 
    /*00009498*/ LDR         R3, [R4, #36]               @ 0x24 
    /*0000949c*/ STR         R3, [R5, #32] 
    /*000094a0*/ LDR         R3, [R4, #40]               @ 0x28 
    /*000094a4*/ STR         R3, [R5, #36]               @ 0x24 
    /*000094a8*/ LDR         R6, [R8, #12]! 
    /*000094ac*/ CMP         R6, R8 
    /*000094b0*/ LDR         R4, [R6] 
    /*000094b4*/ BEQ         VGS_DrvCommPrepareHWInfo_x9514
    /*000094b8*/ MOVW        FP, #0                      @ .LC11 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x257c] 
    /*000094bc*/ MOVW        SL, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*000094c0*/ MOVT        FP, #0                      @ .LC11 [R_ARM_MOVT_ABS: .rodata.str1.4+0x257c] 
    /*000094c4*/ MOVT        SL, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    VGS_DrvCommPrepareHWInfo_x94c8:
    /*000094c8*/ MOV         R0, R9 
    /*000094cc*/ BL          0x00000000000094CC          @ VGS_DrvGetTaskFromFreeList [R_ARM_CALL: .text+0xaefc] 
    /*000094d0*/ SUBS        R7, R0, #0 
    /*000094d4*/ BEQ         VGS_DrvCommPrepareHWInfo_x951c
    VGS_DrvCommPrepareHWInfo_x94d8:
    /*000094d8*/ MOV         R1, R7 
    /*000094dc*/ MOV         R0, R6 
    /*000094e0*/ BL          0x00000000000094E0          @ VGS_DrvCommConvertTaskInfo [R_ARM_CALL: .text+0x9020] 
    /*000094e4*/ MOV         R0, R6 
    /*000094e8*/ BL          0x00000000000094E8          @ VGS_DrvCommCalcWeight [R_ARM_CALL: .text+0x92cc] 
    /*000094ec*/ LDR         R3, [R5, #48]               @ 0x30 
    /*000094f0*/ MOV         R1, R5 
    /*000094f4*/ MOV         R6, R4 
    /*000094f8*/ ADD         R3, R3, R0 
    /*000094fc*/ MOV         R0, R7 
    /*00009500*/ STR         R3, [R5, #48]               @ 0x30 
    /*00009504*/ BL          0x0000000000009504          @ VGS_DrvPutTaskToJob [R_ARM_CALL: .text+0xaff8] 
    /*00009508*/ CMP         R4, R8 
    /*0000950c*/ LDR         R4, [R4] 
    /*00009510*/ BNE         VGS_DrvCommPrepareHWInfo_x94c8
    VGS_DrvCommPrepareHWInfo_x9514:
    /*00009514*/ MOV         R0, #0 
    /*00009518*/ POP         {R3, R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommPrepareHWInfo_x951c:
    /*0000951c*/ MOV         R3, FP 
    /*00009520*/ MOVW        R2, #803                    @ 0x323 
    /*00009524*/ LDR         R1, [PC, #8]                @ 0x0000000000009534 
    /*00009528*/ MOV         R0, SL 
    /*0000952c*/ BL          0x000000000000952C          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00009530*/ B           VGS_DrvCommPrepareHWInfo_x94d8
    /*00009534*/ MULEQ       R0, R4, R5 
FUNC_END VGS_DrvCommPrepareHWInfo


FUNC_BEGIN VGS_DrvCommGetProc
    /*00009538*/ PUSH        {R4, LR} 
    /*0000953c*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00009540*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00009544*/ LDR         R0, [R4] 
    /*00009548*/ ADD         R0, R0, #96                 @ 0x60 
    /*0000954c*/ BL          0x000000000000954C          @ VGS_DrvQueryFreeNodeNum [R_ARM_CALL: .text+0xae14] 
    /*00009550*/ STR         R0, [R4, #8]! 
    /*00009554*/ MOV         R0, R4 
    /*00009558*/ POP         {R4, PC} 
FUNC_END VGS_DrvCommGetProc


FUNC_BEGIN VGS_DrvCommPrepareNodes
    /*0000955c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00009560*/ SUB         SP, SP, #156                @ 0x9c 
    /*00009564*/ ADD         R6, SP, #56                 @ 0x38 
    /*00009568*/ MOV         R4, R0 
    /*0000956c*/ MOV         R2, #96                     @ 0x60 
    /*00009570*/ MOV         R1, #0 
    /*00009574*/ MOV         R0, R6 
    /*00009578*/ BL          0x0000000000009578          @ memset [R_ARM_CALL: +0x0] 
    /*0000957c*/ LDR         R3, [R4, #20] 
    /*00009580*/ SUB         R3, R3, #3 
    /*00009584*/ CMP         R3, #1 
    /*00009588*/ BLS         VGS_DrvCommPrepareNodes_x95a8
    /*0000958c*/ MOVW        R3, #0                      @ .LC12 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2580] 
    /*00009590*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*00009594*/ MOVT        R3, #0                      @ .LC12 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2580] 
    /*00009598*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*0000959c*/ MOVW        R2, #853                    @ 0x355 
    /*000095a0*/ LDR         R1, [PC, #640]              @ 0x0000000000009828 
    /*000095a4*/ BL          0x00000000000095A4          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_DrvCommPrepareNodes_x95a8:
    /*000095a8*/ MOV         R3, R4 
    /*000095ac*/ LDR         R4, [R3, #12]! 
    /*000095b0*/ CMP         R4, R3 
    /*000095b4*/ STR         R3, [SP, #40]               @ 0x28 
    /*000095b8*/ LDR         R3, [R4] 
    /*000095bc*/ BEQ         VGS_DrvCommPrepareNodes_x96c8
    /*000095c0*/ MOVW        R7, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*000095c4*/ MOVT        R7, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*000095c8*/ MOV         FP, R3 
    /*000095cc*/ MOVW        R2, #0                      @ .LC13 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x25e4] 
    /*000095d0*/ MOVT        R2, #0                      @ .LC13 [R_ARM_MOVT_ABS: .rodata.str1.4+0x25e4] 
    /*000095d4*/ STR         R2, [SP, #44]               @ 0x2c 
    VGS_DrvCommPrepareNodes_x95d8:
    /*000095d8*/ LDR         R3, [R4, #496]              @ 0x1f0 
    /*000095dc*/ CMP         R3, #1 
    /*000095e0*/ BEQ         VGS_DrvCommPrepareNodes_x9708
    /*000095e4*/ ADD         R9, R4, #24 
    /*000095e8*/ MOV         R0, R9 
    /*000095ec*/ BL          0x00000000000095EC          @ VGS_DRV_IsNeedScale [R_ARM_CALL: .text+0xe7a8] 
    /*000095f0*/ CMP         R0, #1 
    /*000095f4*/ STR         R0, [R4, #356]              @ 0x164 
    /*000095f8*/ BEQ         VGS_DrvCommPrepareNodes_x973c
    /*000095fc*/ LDR         R0, [R4, #104]              @ 0x68 
    /*00009600*/ LDR         R1, [R4, #112]              @ 0x70 
    /*00009604*/ LSR         R0, R0, #1 
    /*00009608*/ LSR         R1, R1, #1 
    /*0000960c*/ LSL         R0, R0, #20 
    /*00009610*/ BL          0x0000000000009610          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*00009614*/ STR         R0, [SP, #120]              @ 0x78 
    /*00009618*/ STR         R0, [SP, #136]              @ 0x88 
    VGS_DrvCommPrepareNodes_x961c:
    /*0000961c*/ MOV         R0, R9 
    /*00009620*/ BL          0x0000000000009620          @ VGS_DRV_IsNeedSplit [R_ARM_CALL: .text+0xe538] 
    /*00009624*/ CMP         R0, #0 
    /*00009628*/ BEQ         VGS_DrvCommPrepareNodes_x96ec
    /*0000962c*/ MOV         R1, R6 
    /*00009630*/ MOV         R0, R9 
    /*00009634*/ BL          0x0000000000009634          @ VGS_DRV_CalcSplitNodeNum [R_ARM_CALL: .text+0xf930] 
    /*00009638*/ SUB         R3, R0, #1 
    /*0000963c*/ STR         R0, [R4, #16] 
    /*00009640*/ CMP         R3, #5 
    /*00009644*/ BHI         VGS_DrvCommPrepareNodes_x97fc
    VGS_DrvCommPrepareNodes_x9648:
    /*00009648*/ MOV         R8, #0 
    /*0000964c*/ MOVW        SL, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*00009650*/ STR         FP, [SP, #32] 
    /*00009654*/ MOVT        SL, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*00009658*/ STR         SL, [SP, #36]               @ 0x24 
    VGS_DrvCommPrepareNodes_x965c:
    /*0000965c*/ LDR         R0, [R7] 
    /*00009660*/ ADD         R0, R0, #96                 @ 0x60 
    /*00009664*/ BL          0x0000000000009664          @ VGS_DrvGetNodeFromFreeList [R_ARM_CALL: .text+0xae1c] 
    /*00009668*/ SUBS        R5, R0, #0 
    /*0000966c*/ BEQ         VGS_DrvCommPrepareNodes_x96d4
    VGS_DrvCommPrepareNodes_x9670:
    /*00009670*/ LDR         R0, [R5, #16] 
    /*00009674*/ MOV         R2, R6 
    /*00009678*/ STR         R8, [SP, #12] 
    /*0000967c*/ MOV         R1, R9 
    /*00009680*/ LDR         R3, [R5, #20] 
    /*00009684*/ ADD         R8, R8, #1 
    /*00009688*/ STR         R3, [SP, #8] 
    /*0000968c*/ LDRD        SL, [R5, #8] 
    /*00009690*/ STRD        SL, [SP] 
    /*00009694*/ BL          0x0000000000009694          @ VGS_DRV_SetReg [R_ARM_CALL: .text+0xd5b0] 
    /*00009698*/ MOV         R1, R4 
    /*0000969c*/ MOV         R0, R5 
    /*000096a0*/ BL          0x00000000000096A0          @ VGS_DrvPutNodeToTask [R_ARM_CALL: .text+0xae78] 
    /*000096a4*/ LDR         R3, [R4, #16] 
    /*000096a8*/ CMP         R3, R8 
    /*000096ac*/ BHI         VGS_DrvCommPrepareNodes_x965c
    /*000096b0*/ LDR         FP, [SP, #32] 
    VGS_DrvCommPrepareNodes_x96b4:
    /*000096b4*/ LDR         R2, [SP, #40]               @ 0x28 
    /*000096b8*/ MOV         R4, FP 
    /*000096bc*/ CMP         FP, R2 
    /*000096c0*/ LDR         FP, [FP] 
    /*000096c4*/ BNE         VGS_DrvCommPrepareNodes_x95d8
    VGS_DrvCommPrepareNodes_x96c8:
    /*000096c8*/ MOV         R0, #0 
    /*000096cc*/ ADD         SP, SP, #156                @ 0x9c 
    /*000096d0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommPrepareNodes_x96d4:
    /*000096d4*/ LDR         R3, [SP, #44]               @ 0x2c 
    /*000096d8*/ MOVW        R2, #921                    @ 0x399 
    /*000096dc*/ LDR         R1, [PC, #324]              @ 0x0000000000009828 
    /*000096e0*/ LDR         R0, [SP, #36]               @ 0x24 
    /*000096e4*/ BL          0x00000000000096E4          @ osal_panic [R_ARM_CALL: +0x0] 
    /*000096e8*/ B           VGS_DrvCommPrepareNodes_x9670
    VGS_DrvCommPrepareNodes_x96ec:
    /*000096ec*/ MOV         R0, #1 
    /*000096f0*/ STR         R0, [R4, #16] 
    /*000096f4*/ BL          0x00000000000096F4          @ VGS_DRV_SetSplitNodeNum [R_ARM_CALL: .text+0xf9c0] 
    /*000096f8*/ LDR         R3, [R4, #16] 
    /*000096fc*/ CMP         R3, #0 
    /*00009700*/ BNE         VGS_DrvCommPrepareNodes_x9648
    /*00009704*/ B           VGS_DrvCommPrepareNodes_x96b4
    VGS_DrvCommPrepareNodes_x9708:
    /*00009708*/ LDR         R0, [R7] 
    /*0000970c*/ ADD         R0, R0, #96                 @ 0x60 
    /*00009710*/ BL          0x0000000000009710          @ VGS_DrvGetNodeFromFreeList [R_ARM_CALL: .text+0xae1c] 
    /*00009714*/ SUBS        R5, R0, #0 
    /*00009718*/ BEQ         VGS_DrvCommPrepareNodes_x97e0
    VGS_DrvCommPrepareNodes_x971c:
    /*0000971c*/ ADD         R1, R4, #24 
    /*00009720*/ LDR         R0, [R5, #16] 
    /*00009724*/ LDRD        R2, [R5, #8] 
    /*00009728*/ BL          0x0000000000009728          @ VGS_DRV_SetReg_GME [R_ARM_CALL: .text+0xba84] 
    /*0000972c*/ MOV         R1, R4 
    /*00009730*/ MOV         R0, R5 
    /*00009734*/ BL          0x0000000000009734          @ VGS_DrvPutNodeToTask [R_ARM_CALL: .text+0xae78] 
    /*00009738*/ B           VGS_DrvCommPrepareNodes_x96b4
    VGS_DrvCommPrepareNodes_x973c:
    /*0000973c*/ LDR         R3, [R4, #24] 
    /*00009740*/ LDR         R0, [R3, #12] 
    /*00009744*/ BL          0x0000000000009744          @ VGS_DRV_IsPixFmtSp420 [R_ARM_CALL: .text+0xb7c4] 
    /*00009748*/ LDR         R3, [R4, #40]               @ 0x28 
    /*0000974c*/ MOV         R8, R0 
    /*00009750*/ LDR         R0, [R3, #12] 
    /*00009754*/ BL          0x0000000000009754          @ VGS_DRV_IsPixFmtSp420 [R_ARM_CALL: .text+0xb7c4] 
    /*00009758*/ SUB         R3, R8, #1 
    /*0000975c*/ LDR         R1, [R4, #108]              @ 0x6c 
    /*00009760*/ CLZ         R3, R3 
    /*00009764*/ LDR         R2, [R4, #104]              @ 0x68 
    /*00009768*/ LSR         R3, R3, #5 
    /*0000976c*/ LDR         R5, [R4, #116]              @ 0x74 
    /*00009770*/ LSR         R3, R1, R3 
    /*00009774*/ STR         R3, [SP, #36]               @ 0x24 
    /*00009778*/ LDR         R3, [R4, #328]              @ 0x148 
    /*0000977c*/ LDR         R8, [R4, #112]              @ 0x70 
    /*00009780*/ STR         R2, [SP, #52]               @ 0x34 
    /*00009784*/ STR         R1, [SP, #48]               @ 0x30 
    /*00009788*/ STR         R3, [SP, #32] 
    /*0000978c*/ SUB         SL, R0, #1 
    /*00009790*/ MOV         R0, R9 
    /*00009794*/ BL          0x0000000000009794          @ VGS_DRV_IsOSDMode [R_ARM_CALL: .text+0xf8d8] 
    /*00009798*/ LDR         R2, [SP, #32] 
    /*0000979c*/ LDR         IP, [R4, #344]              @ 0x158 
    /*000097a0*/ CLZ         SL, SL 
    /*000097a4*/ LDR         R3, [SP, #36]               @ 0x24 
    /*000097a8*/ STR         R2, [SP, #20] 
    /*000097ac*/ LSR         SL, SL, #5 
    /*000097b0*/ LDR         R2, [SP, #52]               @ 0x34 
    /*000097b4*/ LSR         SL, R5, SL 
    /*000097b8*/ LDR         R1, [SP, #48]               @ 0x30 
    /*000097bc*/ STR         SL, [SP, #12] 
    /*000097c0*/ STR         IP, [SP, #28] 
    /*000097c4*/ STMIB       SP, {R5, R8} 
    /*000097c8*/ STR         R8, [SP] 
    /*000097cc*/ STR         R6, [SP, #16] 
    /*000097d0*/ STR         R0, [SP, #24] 
    /*000097d4*/ MOV         R0, R2 
    /*000097d8*/ BL          0x00000000000097D8          @ VGS_DRV_GenSclCfg [R_ARM_CALL: .text+0xb844] 
    /*000097dc*/ B           VGS_DrvCommPrepareNodes_x961c
    VGS_DrvCommPrepareNodes_x97e0:
    /*000097e0*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*000097e4*/ LDR         R3, [SP, #44]               @ 0x2c 
    /*000097e8*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*000097ec*/ MOV         R2, #860                    @ 0x35c 
    /*000097f0*/ LDR         R1, [PC, #48]               @ 0x0000000000009828 
    /*000097f4*/ BL          0x00000000000097F4          @ osal_panic [R_ARM_CALL: +0x0] 
    /*000097f8*/ B           VGS_DrvCommPrepareNodes_x971c
    VGS_DrvCommPrepareNodes_x97fc:
    /*000097fc*/ MOVW        R3, #906                    @ 0x38a 
    /*00009800*/ MOV         R1, #45                     @ 0x2d 
    /*00009804*/ STR         R3, [SP] 
    /*00009808*/ MOVW        R2, #0                      @ .LC14 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x25f8] 
    /*0000980c*/ LDR         R3, [PC, #20]               @ 0x0000000000009828 
    /*00009810*/ MOVT        R2, #0                      @ .LC14 [R_ARM_MOVT_ABS: .rodata.str1.4+0x25f8] 
    /*00009814*/ MOV         R0, #3 
    /*00009818*/ BL          0x0000000000009818          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000981c*/ MVN         R0, #0 
    /*00009820*/ ADD         SP, SP, #156                @ 0x9c 
    /*00009824*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*00009828*/ @           <UNDEFINED> instruction: 0x000005b0 
FUNC_END VGS_DrvCommPrepareNodes


FUNC_BEGIN VGS_DrvCommStartWaitlist
    /*0000982c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00009830*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00009834*/ SUB         SP, SP, #60                 @ 0x3c 
    /*00009838*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000983c*/ ADD         R2, R0, #36                 @ 0x24 
    /*00009840*/ STR         R3, [SP, #20] 
    /*00009844*/ MOV         R4, R3 
    /*00009848*/ LDR         R3, [R3] 
    /*0000984c*/ STR         R0, [SP, #44]               @ 0x2c 
    /*00009850*/ MOV         R0, R3 
    /*00009854*/ LDR         R3, [R3, R2, LSL #2] 
    /*00009858*/ STR         R3, [SP, #48]               @ 0x30 
    /*0000985c*/ BL          0x000000000000985C          @ VGS_DrvQueryWaitJobNum [R_ARM_CALL: .text+0xb0e0] 
    /*00009860*/ CMP         R0, #0 
    /*00009864*/ BEQ         VGS_DrvCommStartWaitlist_x9b28
    /*00009868*/ LDR         R0, [R4] 
    /*0000986c*/ MOV         R2, R0 
    /*00009870*/ LDR         R3, [R2, #16]! 
    /*00009874*/ CMP         R3, R2 
    /*00009878*/ LDR         R2, [R3] 
    /*0000987c*/ BEQ         VGS_DrvCommStartWaitlist_x9ae8
    /*00009880*/ MOV         R5, #0 
    /*00009884*/ MOV         FP, R3 
    /*00009888*/ MOV         R9, R5 
    /*0000988c*/ MOV         R4, R5 
    /*00009890*/ MOVW        R1, #4095                   @ 0xfff 
    /*00009894*/ MOVW        R0, #0                      @ .LC16 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x266c] 
    /*00009898*/ MOVT        R1, #14 
    /*0000989c*/ MOVT        R0, #0                      @ .LC16 [R_ARM_MOVT_ABS: .rodata.str1.4+0x266c] 
    /*000098a0*/ STR         R1, [SP, #52]               @ 0x34 
    /*000098a4*/ MOVW        R1, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*000098a8*/ STR         R0, [SP, #24] 
    /*000098ac*/ MOVT        R1, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*000098b0*/ STR         R2, [SP, #36]               @ 0x24 
    /*000098b4*/ STR         R1, [SP, #28] 
    /*000098b8*/ STR         R5, [SP, #32] 
    VGS_DrvCommStartWaitlist_x98bc:
    /*000098bc*/ LDR         R0, [FP, #28] 
    /*000098c0*/ BL          0x00000000000098C0          @ VGS_HiModId2InnerModId [R_ARM_CALL: .text+0x8f8] 
    /*000098c4*/ LDR         R6, [SP, #20] 
    /*000098c8*/ LDR         R3, [FP, #32] 
    /*000098cc*/ MOV         R1, #4 
    /*000098d0*/ LDR         IP, [R6] 
    /*000098d4*/ MOV         R2, R0 
    /*000098d8*/ ADD         R0, IP, R0, LSL #2 
    /*000098dc*/ LDR         IP, [FP, #36]               @ 0x24 
    /*000098e0*/ LDR         R0, [R0, #188]              @ 0xbc 
    /*000098e4*/ STR         IP, [SP] 
    /*000098e8*/ BL          0x00000000000098E8          @ VGS_GetPointerByOffset [R_ARM_CALL: .text+0x934] 
    /*000098ec*/ LDR         R3, [R0] 
    /*000098f0*/ CMP         R3, #1 
    /*000098f4*/ BEQ         VGS_DrvCommStartWaitlist_x9a40
    /*000098f8*/ LDR         R3, [SP, #32] 
    /*000098fc*/ LDR         R2, [SP, #52]               @ 0x34 
    /*00009900*/ CMP         R3, R2 
    /*00009904*/ BGT         VGS_DrvCommStartWaitlist_x9a68
    /*00009908*/ LDR         R3, [FP, #52]               @ 0x34 
    /*0000990c*/ CMP         R3, #0 
    /*00009910*/ BNE         VGS_DrvCommStartWaitlist_x994c
    /*00009914*/ LDR         R0, [R6] 
    /*00009918*/ ADD         R0, R0, #96                 @ 0x60 
    /*0000991c*/ BL          0x000000000000991C          @ VGS_DrvQueryFreeNodeNum [R_ARM_CALL: .text+0xae14] 
    /*00009920*/ LDR         R3, [FP, #44]               @ 0x2c 
    /*00009924*/ CMP         R0, R3 
    /*00009928*/ BCC         VGS_DrvCommStartWaitlist_x9b58
    /*0000992c*/ MOV         R0, FP 
    /*00009930*/ BL          0x0000000000009930          @ VGS_DrvCommPrepareNodes [R_ARM_CALL: .text+0x955c] 
    /*00009934*/ LDR         R1, [SP, #20] 
    /*00009938*/ MOV         R2, #1 
    /*0000993c*/ STR         R2, [FP, #52]               @ 0x34 
    /*00009940*/ LDR         R3, [R1, #4] 
    /*00009944*/ SUB         R3, R3, #1 
    /*00009948*/ STR         R3, [R1, #4] 
    VGS_DrvCommStartWaitlist_x994c:
    /*0000994c*/ LDR         R7, [SP, #20] 
    /*00009950*/ MOV         R3, #5 
    /*00009954*/ MOV         R1, FP 
    /*00009958*/ STR         R3, [FP, #20] 
    /*0000995c*/ LDR         R0, [R7] 
    /*00009960*/ BL          0x0000000000009960          @ VGS_DrvGetJobFromWaitList [R_ARM_CALL: .text+0xb0e8] 
    /*00009964*/ LDR         R3, [SP, #48]               @ 0x30 
    /*00009968*/ LDR         R2, [SP, #44]               @ 0x2c 
    /*0000996c*/ MOV         R1, FP 
    /*00009970*/ LDR         R0, [R7] 
    /*00009974*/ BL          0x0000000000009974          @ VGS_DrvPutJobToBusyList [R_ARM_CALL: .text+0xb35c] 
    /*00009978*/ MOV         R3, FP 
    /*0000997c*/ LDR         R8, [R3, #12]! 
    /*00009980*/ LDR         R1, [SP, #32] 
    /*00009984*/ MOV         R2, R3 
    /*00009988*/ LDR         R3, [FP, #48]               @ 0x30 
    /*0000998c*/ CMP         R2, R8 
    /*00009990*/ LDR         SL, [R8] 
    /*00009994*/ ADD         R3, R1, R3 
    /*00009998*/ STR         R3, [SP, #32] 
    /*0000999c*/ BEQ         VGS_DrvCommStartWaitlist_x9a30
    /*000099a0*/ STR         FP, [SP, #40]               @ 0x28 
    /*000099a4*/ MOV         FP, R2 
    VGS_DrvCommStartWaitlist_x99a8:
    /*000099a8*/ LDR         R3, [R8, #8]! 
    /*000099ac*/ CMP         R8, R3 
    /*000099b0*/ LDR         R6, [R3] 
    /*000099b4*/ BEQ         VGS_DrvCommStartWaitlist_x9a1c
    /*000099b8*/ MOV         R7, R4 
    /*000099bc*/ MOV         R4, R3 
    /*000099c0*/ B           VGS_DrvCommStartWaitlist_x99c8
    VGS_DrvCommStartWaitlist_x99c4:
    /*000099c4*/ MOV         R4, R3 
    VGS_DrvCommStartWaitlist_x99c8:
    /*000099c8*/ MOV         R1, R5 
    /*000099cc*/ LDR         R0, [R4, #16] 
    /*000099d0*/ STR         R5, [R4, #20] 
    /*000099d4*/ BL          0x00000000000099D4          @ VGS_HAL_SetNodeID [R_ARM_CALL: .text+0xffec] 
    /*000099d8*/ MOV         R1, #142                    @ 0x8e 
    /*000099dc*/ LDR         R0, [R4, #16] 
    /*000099e0*/ BL          0x00000000000099E0          @ VGS_HAL_SetMask [R_ARM_CALL: .text+0xfff4] 
    /*000099e4*/ CMP         R5, #0 
    /*000099e8*/ MOVEQ       R9, R4 
    /*000099ec*/ BEQ         VGS_DrvCommStartWaitlist_x9a04
    /*000099f0*/ CMP         R7, #0 
    /*000099f4*/ BEQ         VGS_DrvCommStartWaitlist_x9b10
    VGS_DrvCommStartWaitlist_x99f8:
    /*000099f8*/ LDR         R0, [R7, #16] 
    /*000099fc*/ LDRD        R2, [R4, #8] 
    /*00009a00*/ BL          0x0000000000009A00          @ VGS_HAL_SetNext [R_ARM_CALL: .text+0xfffc] 
    VGS_DrvCommStartWaitlist_x9a04:
    /*00009a04*/ CMP         R8, R6 
    /*00009a08*/ MOV         R3, R6 
    /*00009a0c*/ ADD         R5, R5, #1 
    /*00009a10*/ LDR         R6, [R6] 
    /*00009a14*/ MOV         R7, R4 
    /*00009a18*/ BNE         VGS_DrvCommStartWaitlist_x99c4
    VGS_DrvCommStartWaitlist_x9a1c:
    /*00009a1c*/ CMP         FP, SL 
    /*00009a20*/ MOV         R8, SL 
    /*00009a24*/ LDR         SL, [SL] 
    /*00009a28*/ BNE         VGS_DrvCommStartWaitlist_x99a8
    /*00009a2c*/ LDR         FP, [SP, #40]               @ 0x28 
    VGS_DrvCommStartWaitlist_x9a30:
    /*00009a30*/ LDR         R0, [FP, #40]               @ 0x28 
    /*00009a34*/ BL          0x0000000000009A34          @ VGS_DrvCallBack [R_ARM_CALL: .text+0x2974] 
    /*00009a38*/ LDR         R0, [FP, #40]               @ 0x28 
    /*00009a3c*/ BL          0x0000000000009A3C          @ VGS_GetHwStartTime [R_ARM_CALL: .text+0x28d8] 
    VGS_DrvCommStartWaitlist_x9a40:
    /*00009a40*/ LDR         R3, [SP, #20] 
    /*00009a44*/ LDR         R1, [SP, #36]               @ 0x24 
    /*00009a48*/ LDR         R3, [R3] 
    /*00009a4c*/ MOV         R2, R1 
    /*00009a50*/ MOV         FP, R1 
    /*00009a54*/ ADD         R3, R3, #16 
    /*00009a58*/ LDR         R1, [R1] 
    /*00009a5c*/ CMP         R2, R3 
    /*00009a60*/ STR         R1, [SP, #36]               @ 0x24 
    /*00009a64*/ BNE         VGS_DrvCommStartWaitlist_x98bc
    VGS_DrvCommStartWaitlist_x9a68:
    /*00009a68*/ CMP         R9, #0 
    /*00009a6c*/ LDREQ       R3, [SP, #20] 
    /*00009a70*/ LDREQ       R0, [R3] 
    /*00009a74*/ BEQ         VGS_DrvCommStartWaitlist_x9ae8
    /*00009a78*/ CMP         R4, #0 
    /*00009a7c*/ BEQ         VGS_DrvCommStartWaitlist_x9b9c
    VGS_DrvCommStartWaitlist_x9a80:
    /*00009a80*/ LDR         R0, [R4, #16] 
    /*00009a84*/ MOV         R2, #0 
    /*00009a88*/ MOV         R3, #0 
    /*00009a8c*/ BL          0x0000000000009A8C          @ VGS_HAL_SetNext [R_ARM_CALL: .text+0xfffc] 
    /*00009a90*/ LDR         R7, [SP, #20] 
    /*00009a94*/ LDR         R6, [SP, #44]               @ 0x2c 
    /*00009a98*/ LDR         R2, [R4, #20] 
    /*00009a9c*/ LDR         R3, [R7] 
    /*00009aa0*/ MOV         R0, R6 
    /*00009aa4*/ ADD         R3, R3, R6, LSL #2 
    /*00009aa8*/ STR         R2, [R3, #156]              @ 0x9c 
    /*00009aac*/ BL          0x0000000000009AAC          @ VGS_DRV_ClkEnable [R_ARM_CALL: .text+0xd814] 
    /*00009ab0*/ LDRD        R4, [R9, #8] 
    /*00009ab4*/ LDR         R3, [R7] 
    /*00009ab8*/ ADD         R1, R6, #66                 @ 0x42 
    /*00009abc*/ MOV         R2, #0 
    /*00009ac0*/ MOV         R0, R6 
    /*00009ac4*/ ADD         R3, R3, R1, LSL #2 
    /*00009ac8*/ STM         SP, {R2, R3} 
    /*00009acc*/ MOV         R2, R4 
    /*00009ad0*/ MOV         R3, R5 
    /*00009ad4*/ BL          0x0000000000009AD4          @ VGS_HAL_Start [R_ARM_CALL: .text+0x10094] 
    /*00009ad8*/ LDR         R0, [R7] 
    /*00009adc*/ ADD         R3, R6, #42                 @ 0x2a 
    /*00009ae0*/ MOV         R2, #1 
    /*00009ae4*/ STR         R2, [R0, R3, LSL #2] 
    VGS_DrvCommStartWaitlist_x9ae8:
    /*00009ae8*/ ADD         R0, R0, #96                 @ 0x60 
    /*00009aec*/ BL          0x0000000000009AEC          @ VGS_DrvQueryFreeNodeNum [R_ARM_CALL: .text+0xae14] 
    /*00009af0*/ LDR         R2, [SP, #20] 
    /*00009af4*/ LDR         R3, [R2, #12] 
    /*00009af8*/ CMP         R0, R3 
    /*00009afc*/ MOVCC       R3, R2 
    /*00009b00*/ STRCC       R0, [R3, #12] 
    VGS_DrvCommStartWaitlist_x9b04:
    /*00009b04*/ MOV         R0, #0 
    /*00009b08*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00009b0c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommStartWaitlist_x9b10:
    /*00009b10*/ LDR         R3, [SP, #24] 
    /*00009b14*/ MOVW        R2, #963                    @ 0x3c3 
    /*00009b18*/ LDR         R1, [PC, #156]              @ 0x0000000000009bbc 
    /*00009b1c*/ LDR         R0, [SP, #28] 
    /*00009b20*/ BL          0x0000000000009B20          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00009b24*/ B           VGS_DrvCommStartWaitlist_x99f8
    VGS_DrvCommStartWaitlist_x9b28:
    /*00009b28*/ LDR         R3, [SP, #20] 
    /*00009b2c*/ LDR         R2, [SP, #48]               @ 0x30 
    /*00009b30*/ LDR         R1, [SP, #44]               @ 0x2c 
    /*00009b34*/ LDR         R0, [R3] 
    /*00009b38*/ BL          0x0000000000009B38          @ VGS_DrvQueryBusyJobNum [R_ARM_CALL: .text+0xb3b0] 
    /*00009b3c*/ CMP         R0, #0 
    /*00009b40*/ BNE         VGS_DrvCommStartWaitlist_x9b04
    /*00009b44*/ LDR         R0, [SP, #44]               @ 0x2c 
    /*00009b48*/ BL          0x0000000000009B48          @ VGS_DRV_ClkDisable [R_ARM_CALL: .text+0xd898] 
    /*00009b4c*/ MOV         R0, #0 
    /*00009b50*/ ADD         SP, SP, #60                 @ 0x3c 
    /*00009b54*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommStartWaitlist_x9b58:
    /*00009b58*/ LDR         R1, [FP, #28] 
    /*00009b5c*/ MOVW        R0, #1026                   @ 0x402 
    /*00009b60*/ LDR         LR, [SP, #20] 
    /*00009b64*/ MOVW        R2, #0                      @ .LC15 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2624] 
    /*00009b68*/ MOVT        R2, #0                      @ .LC15 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2624] 
    /*00009b6c*/ LDR         R3, [LR, #24] 
    /*00009b70*/ STR         R1, [SP, #8] 
    /*00009b74*/ MOV         R1, #45                     @ 0x2d 
    /*00009b78*/ LDR         IP, [FP, #40]               @ 0x28 
    /*00009b7c*/ ADD         R3, R3, #1 
    /*00009b80*/ STR         R0, [SP] 
    /*00009b84*/ MOV         R0, #3 
    /*00009b88*/ STR         R3, [LR, #24] 
    /*00009b8c*/ STR         IP, [SP, #4] 
    /*00009b90*/ LDR         R3, [PC, #40]               @ 0x0000000000009bc0 
    /*00009b94*/ BL          0x0000000000009B94          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00009b98*/ B           VGS_DrvCommStartWaitlist_x9a68
    VGS_DrvCommStartWaitlist_x9b9c:
    /*00009b9c*/ MOVW        R3, #0                      @ .LC17 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2684] 
    /*00009ba0*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*00009ba4*/ MOVT        R3, #0                      @ .LC17 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2684] 
    /*00009ba8*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*00009bac*/ MOVW        R2, #1069                   @ 0x42d 
    /*00009bb0*/ LDR         R1, [PC, #8]                @ 0x0000000000009bc0 
    /*00009bb4*/ BL          0x0000000000009BB4          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00009bb8*/ B           VGS_DrvCommStartWaitlist_x9a80
    /*00009bbc*/ ANDEQ       R0, R0, R4, ROR #11 
    /*00009bc0*/ ANDEQ       R0, R0, R8, ASR #11 
FUNC_END VGS_DrvCommStartWaitlist


FUNC_BEGIN VGS_DrvCommSubmitJob
    /*00009bc4*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*00009bc8*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00009bcc*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00009bd0*/ SUB         SP, SP, #24 
    /*00009bd4*/ LDR         R6, [R4] 
    /*00009bd8*/ LDR         R3, [R6, #176]              @ 0xb0 
    /*00009bdc*/ CMP         R3, #1 
    /*00009be0*/ BEQ         VGS_DrvCommSubmitJob_x9eb4
    /*00009be4*/ MOV         R2, #1 
    /*00009be8*/ LDR         R3, [R6, #4] 
    /*00009bec*/ STR         R2, [R6, #172]              @ 0xac 
    /*00009bf0*/ MOV         R7, R0 
    /*00009bf4*/ LDR         R2, [R0, #120]              @ 0x78 
    /*00009bf8*/ LDR         R5, [R3, R2, LSL #2] 
    /*00009bfc*/ LDR         R3, [R5, #20] 
    /*00009c00*/ CMP         R3, #0 
    /*00009c04*/ BNE         VGS_DrvCommSubmitJob_x9cc0
    VGS_DrvCommSubmitJob_x9c08:
    /*00009c08*/ MOV         R0, R6 
    /*00009c0c*/ MOV         R1, R5 
    /*00009c10*/ BL          0x0000000000009C10          @ VGS_DrvGetJobFromFreeList [R_ARM_CALL: .text+0xb024] 
    /*00009c14*/ MOV         R3, #3 
    /*00009c18*/ MOV         R1, R5 
    /*00009c1c*/ STR         R3, [R5, #20] 
    /*00009c20*/ MOV         R0, R7 
    /*00009c24*/ BL          0x0000000000009C24          @ VGS_DrvCommPrepareHWInfo [R_ARM_CALL: .text+0x9440] 
    /*00009c28*/ LDR         R3, [R5, #20] 
    /*00009c2c*/ CMP         R3, #3 
    /*00009c30*/ BEQ         VGS_DrvCommSubmitJob_x9ce0
    /*00009c34*/ LDR         R2, [R4] 
    /*00009c38*/ MOV         R3, #0 
    /*00009c3c*/ MOV         R0, R3 
    /*00009c40*/ STR         R3, [R5, #44]               @ 0x2c 
    /*00009c44*/ LDR         R3, [R2, #136]              @ 0x88 
    VGS_DrvCommSubmitJob_x9c48:
    /*00009c48*/ LDR         LR, [R7, #120]              @ 0x78 
    /*00009c4c*/ MOVW        IP, #1156                   @ 0x484 
    /*00009c50*/ LDR         R6, [R7, #32] 
    /*00009c54*/ MOV         R1, #45                     @ 0x2d 
    /*00009c58*/ STR         R0, [SP, #16] 
    /*00009c5c*/ MOVW        R2, #0                      @ .LC20 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2704] 
    /*00009c60*/ STM         SP, {IP, LR} 
    /*00009c64*/ MOVT        R2, #0                      @ .LC20 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2704] 
    /*00009c68*/ STR         R3, [SP, #12] 
    /*00009c6c*/ MOV         R0, #3 
    /*00009c70*/ LDR         R3, [PC, #612]              @ 0x0000000000009edc 
    /*00009c74*/ STR         R6, [SP, #8] 
    /*00009c78*/ BL          0x0000000000009C78          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00009c7c*/ LDR         R3, [R4, #20] 
    /*00009c80*/ MOV         R1, #0 
    /*00009c84*/ MOV         R0, R5 
    /*00009c88*/ ADD         R3, R3, #1 
    /*00009c8c*/ STR         R3, [R4, #20] 
    /*00009c90*/ BL          0x0000000000009C90          @ VGS_DrvCommReleaseAllTaskFromJob [R_ARM_CALL: .text+0x89c8] 
    /*00009c94*/ MOV         R1, R5 
    /*00009c98*/ LDR         R0, [R4] 
    /*00009c9c*/ BL          0x0000000000009C9C          @ VGS_DrvPutJobToFreeList [R_ARM_CALL: .text+0xb098] 
    /*00009ca0*/ LDR         R3, [R4] 
    /*00009ca4*/ MOV         R2, #0 
    /*00009ca8*/ ADD         R0, R3, #164                @ 0xa4 
    /*00009cac*/ STR         R2, [R3, #172]              @ 0xac 
    /*00009cb0*/ BL          0x0000000000009CB0          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00009cb4*/ MVN         R0, #0 
    VGS_DrvCommSubmitJob_x9cb8:
    /*00009cb8*/ ADD         SP, SP, #24 
    /*00009cbc*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommSubmitJob_x9cc0:
    /*00009cc0*/ MOVW        R3, #0                      @ .LC19 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x26d8] 
    /*00009cc4*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*00009cc8*/ MOVT        R3, #0                      @ .LC19 [R_ARM_MOVT_ABS: .rodata.str1.4+0x26d8] 
    /*00009ccc*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*00009cd0*/ MOVW        R2, #1134                   @ 0x46e 
    /*00009cd4*/ LDR         R1, [PC, #512]              @ 0x0000000000009edc 
    /*00009cd8*/ BL          0x0000000000009CD8          @ osal_panic [R_ARM_CALL: +0x0] 
    /*00009cdc*/ B           VGS_DrvCommSubmitJob_x9c08
    VGS_DrvCommSubmitJob_x9ce0:
    /*00009ce0*/ MOV         R0, R5 
    /*00009ce4*/ BL          0x0000000000008888 
    /*00009ce8*/ LDR         R2, [R4] 
    /*00009cec*/ LDR         R3, [R4, #16] 
    /*00009cf0*/ CLZ         R1, R0 
    /*00009cf4*/ CMP         R3, R0 
    /*00009cf8*/ STR         R0, [R5, #44]               @ 0x2c 
    /*00009cfc*/ LDR         R3, [R2, #136]              @ 0x88 
    /*00009d00*/ LSR         R1, R1, #5 
    /*00009d04*/ STRCC       R0, [R4, #16] 
    /*00009d08*/ CMP         R3, R0 
    /*00009d0c*/ ORRCC       R1, R1, #1 
    /*00009d10*/ CMP         R1, #0 
    /*00009d14*/ BNE         VGS_DrvCommSubmitJob_x9c48
    /*00009d18*/ ADD         R0, R2, #96                 @ 0x60 
    /*00009d1c*/ BL          0x0000000000009D1C          @ VGS_DrvQueryFreeNodeNum [R_ARM_CALL: .text+0xae14] 
    /*00009d20*/ LDR         R1, [R5, #44]               @ 0x2c 
    /*00009d24*/ LDR         R3, [R4, #4] 
    /*00009d28*/ CMP         R0, R1 
    /*00009d2c*/ MOV         R8, R0 
    /*00009d30*/ BCC         VGS_DrvCommSubmitJob_x9dd4
    /*00009d34*/ CMP         R3, #0 
    /*00009d38*/ BEQ         VGS_DrvCommSubmitJob_x9e14
    VGS_DrvCommSubmitJob_x9d3c:
    /*00009d3c*/ LDR         R1, [R7, #32] 
    /*00009d40*/ MOV         IP, #1184                   @ 0x4a0 
    /*00009d44*/ LDR         R0, [R7, #120]              @ 0x78 
    /*00009d48*/ MOVW        R2, #0                      @ .LC22 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x27bc] 
    /*00009d4c*/ STR         R3, [SP, #12] 
    /*00009d50*/ MOVT        R2, #0                      @ .LC22 [R_ARM_MOVT_ABS: .rodata.str1.4+0x27bc] 
    /*00009d54*/ STR         R1, [SP, #8] 
    /*00009d58*/ MOV         R1, #45                     @ 0x2d 
    /*00009d5c*/ STR         R0, [SP, #4] 
    /*00009d60*/ MOV         R0, #3 
    /*00009d64*/ STR         IP, [SP] 
    /*00009d68*/ LDR         R3, [PC, #364]              @ 0x0000000000009edc 
    /*00009d6c*/ BL          0x0000000000009D6C          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DrvCommSubmitJob_x9d70:
    /*00009d70*/ LDR         R2, [R4, #4] 
    /*00009d74*/ MOV         R6, #0 
    /*00009d78*/ LDR         R3, [R4, #20] 
    /*00009d7c*/ MOV         R1, R5 
    /*00009d80*/ LDR         R0, [R4] 
    /*00009d84*/ ADD         R2, R2, #1 
    /*00009d88*/ STR         R6, [R5, #52]               @ 0x34 
    /*00009d8c*/ ADD         R3, R3, #1 
    /*00009d90*/ STR         R2, [R4, #4] 
    /*00009d94*/ STR         R3, [R4, #20] 
    /*00009d98*/ BL          0x0000000000009D98          @ VGS_DrvPutJobToWaitList [R_ARM_CALL: .text+0xb15c] 
    /*00009d9c*/ LDR         R3, [R4] 
    /*00009da0*/ MOV         R2, #4 
    /*00009da4*/ STR         R2, [R5, #20] 
    /*00009da8*/ ADD         R0, R3, #164                @ 0xa4 
    /*00009dac*/ STR         R6, [R3, #172]              @ 0xac 
    /*00009db0*/ BL          0x0000000000009DB0          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00009db4*/ LDR         R3, [R4, #12] 
    /*00009db8*/ CMP         R8, R3 
    /*00009dbc*/ STRCC       R8, [R4, #12] 
    /*00009dc0*/ MOVCC       R0, R6 
    /*00009dc4*/ BCC         VGS_DrvCommSubmitJob_x9cb8
    /*00009dc8*/ MOV         R0, R6 
    /*00009dcc*/ ADD         SP, SP, #24 
    /*00009dd0*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommSubmitJob_x9dd4:
    /*00009dd4*/ CMP         R3, #0 
    /*00009dd8*/ BNE         VGS_DrvCommSubmitJob_x9d3c
    /*00009ddc*/ LDR         R0, [R7, #32] 
    /*00009de0*/ MOVW        R3, #1179                   @ 0x49b 
    /*00009de4*/ LDR         IP, [R7, #120]              @ 0x78 
    /*00009de8*/ MOVW        R2, #0                      @ .LC21 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2760] 
    /*00009dec*/ STR         R1, [SP, #16] 
    /*00009df0*/ MOVT        R2, #0                      @ .LC21 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2760] 
    /*00009df4*/ STR         R0, [SP, #8] 
    /*00009df8*/ MOV         R1, #45                     @ 0x2d 
    /*00009dfc*/ STM         SP, {R3, IP} 
    /*00009e00*/ MOV         R0, #3 
    /*00009e04*/ STR         R8, [SP, #12] 
    /*00009e08*/ LDR         R3, [PC, #204]              @ 0x0000000000009edc 
    /*00009e0c*/ BL          0x0000000000009E0C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00009e10*/ B           VGS_DrvCommSubmitJob_x9d70
    VGS_DrvCommSubmitJob_x9e14:
    /*00009e14*/ MOV         R0, R5 
    /*00009e18*/ BL          0x0000000000009E18          @ VGS_DrvCommPrepareNodes [R_ARM_CALL: .text+0x955c] 
    /*00009e1c*/ LDR         R0, [R4] 
    /*00009e20*/ MOV         R3, #1 
    /*00009e24*/ STR         R3, [R5, #52]               @ 0x34 
    /*00009e28*/ ADD         R0, R0, #96                 @ 0x60 
    /*00009e2c*/ BL          0x0000000000009E2C          @ VGS_DrvQueryFreeNodeNum [R_ARM_CALL: .text+0xae14] 
    /*00009e30*/ LDR         R3, [R4, #12] 
    /*00009e34*/ MOV         R1, R5 
    /*00009e38*/ CMP         R0, R3 
    /*00009e3c*/ STRCC       R0, [R4, #12] 
    /*00009e40*/ LDR         R0, [R4] 
    /*00009e44*/ BL          0x0000000000009E44          @ VGS_DrvPutJobToWaitList [R_ARM_CALL: .text+0xb15c] 
    /*00009e48*/ MOVW        R3, #0                      @ vgs_en [R_ARM_MOVW_ABS_NC: .data+0x124] 
    /*00009e4c*/ MOVT        R3, #0                      @ vgs_en [R_ARM_MOVT_ABS: .data+0x124] 
    /*00009e50*/ MOV         R2, #4 
    /*00009e54*/ STR         R2, [R5, #20] 
    /*00009e58*/ LDR         R3, [R3] 
    /*00009e5c*/ CMP         R3, #1 
    /*00009e60*/ BEQ         VGS_DrvCommSubmitJob_x9e84
    VGS_DrvCommSubmitJob_x9e64:
    /*00009e64*/ LDR         R3, [R4] 
    VGS_DrvCommSubmitJob_x9e68:
    /*00009e68*/ MOV         R6, #0 
    /*00009e6c*/ ADD         R0, R3, #164                @ 0xa4 
    /*00009e70*/ STR         R6, [R3, #172]              @ 0xac 
    /*00009e74*/ BL          0x0000000000009E74          @ osal_wakeup [R_ARM_CALL: +0x0] 
    /*00009e78*/ MOV         R0, R6 
    /*00009e7c*/ ADD         SP, SP, #24 
    /*00009e80*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvCommSubmitJob_x9e84:
    /*00009e84*/ LDR         R0, [R4] 
    /*00009e88*/ MOV         R1, #0 
    /*00009e8c*/ LDR         R2, [R0, #144]              @ 0x90 
    /*00009e90*/ BL          0x0000000000009E90          @ VGS_DrvQueryBusyJobNum [R_ARM_CALL: .text+0xb3b0] 
    /*00009e94*/ LDR         R3, [R4] 
    /*00009e98*/ CMP         R0, #0 
    /*00009e9c*/ BNE         VGS_DrvCommSubmitJob_x9e68
    /*00009ea0*/ LDR         R2, [R3, #176]              @ 0xb0 
    /*00009ea4*/ CMP         R2, #0 
    /*00009ea8*/ BNE         VGS_DrvCommSubmitJob_x9e68
    /*00009eac*/ BL          0x0000000000009EAC          @ VGS_DrvCommStartWaitlist [R_ARM_CALL: .text+0x982c] 
    /*00009eb0*/ B           VGS_DrvCommSubmitJob_x9e64
    VGS_DrvCommSubmitJob_x9eb4:
    /*00009eb4*/ MOVW        R3, #1128                   @ 0x468 
    /*00009eb8*/ MOVW        R2, #0                      @ .LC18 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x269c] 
    /*00009ebc*/ STR         R3, [SP] 
    /*00009ec0*/ MOVT        R2, #0                      @ .LC18 [R_ARM_MOVT_ABS: .rodata.str1.4+0x269c] 
    /*00009ec4*/ LDR         R3, [PC, #16]               @ 0x0000000000009edc 
    /*00009ec8*/ MOV         R1, #45                     @ 0x2d 
    /*00009ecc*/ MOV         R0, #3 
    /*00009ed0*/ BL          0x0000000000009ED0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*00009ed4*/ MVN         R0, #0 
    /*00009ed8*/ B           VGS_DrvCommSubmitJob_x9cb8
    /*00009edc*/ ANDEQ       R0, R0, R0, LSL #12 
FUNC_END VGS_DrvCommSubmitJob


FUNC_BEGIN VGS_DrvCommOpen
    /*00009ee0*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*00009ee4*/ MOVW        R9, #0                      @ g_stVgsCallerCtx [R_ARM_MOVW_ABS_NC: .bss+0x14] 
    /*00009ee8*/ MOVT        R9, #0                      @ g_stVgsCallerCtx [R_ARM_MOVT_ABS: .bss+0x14] 
    /*00009eec*/ SUB         SP, SP, #12 
    /*00009ef0*/ MOV         R7, R0 
    /*00009ef4*/ MOV         R6, R1 
    /*00009ef8*/ MOV         R0, #320                    @ 0x140 
    /*00009efc*/ MOV         R1, #0 
    /*00009f00*/ MOV         R5, R2 
    /*00009f04*/ MOV         R8, R3 
    /*00009f08*/ LDR         SL, [R9, #156]              @ 0x9c 
    /*00009f0c*/ BL          0x0000000000009F0C          @ osal_kmalloc [R_ARM_CALL: +0x0] 
    /*00009f10*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*00009f14*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*00009f18*/ CMP         R0, #0 
    /*00009f1c*/ STR         R0, [R4] 
    /*00009f20*/ BEQ         VGS_DrvCommOpen_xa160
    /*00009f24*/ LSL         SL, SL, #2 
    /*00009f28*/ MOV         R2, #320                    @ 0x140 
    /*00009f2c*/ MOV         R1, #0 
    /*00009f30*/ BL          0x0000000000009F30          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00009f34*/ MOV         R0, SL 
    /*00009f38*/ LDR         FP, [R4] 
    /*00009f3c*/ BL          0x0000000000009F3C          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*00009f40*/ LDR         R3, [R4] 
    /*00009f44*/ STR         R0, [FP, #188]              @ 0xbc 
    /*00009f48*/ LDR         R0, [R3, #188]              @ 0xbc 
    /*00009f4c*/ CMP         R0, #0 
    /*00009f50*/ BEQ         VGS_DrvCommOpen_xa13c
    /*00009f54*/ MOV         R1, #0 
    /*00009f58*/ MOV         R2, SL 
    /*00009f5c*/ BL          0x0000000000009F5C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*00009f60*/ LDR         R0, [R4] 
    /*00009f64*/ ADD         R1, R9, #100                @ 0x64 
    /*00009f68*/ ADD         R3, R0, #188                @ 0xbc 
    /*00009f6c*/ ADD         LR, R0, #236                @ 0xec 
    VGS_DrvCommOpen_x9f70:
    /*00009f70*/ LDR         IP, [R1, #4]! 
    /*00009f74*/ LDR         R2, [R3] 
    /*00009f78*/ ADD         R2, R2, IP, LSL #2 
    /*00009f7c*/ STR         R2, [R3, #4]! 
    /*00009f80*/ CMP         R3, LR 
    /*00009f84*/ BNE         VGS_DrvCommOpen_x9f70
    /*00009f88*/ ADD         R2, R0, #96                 @ 0x60 
    /*00009f8c*/ STR         R5, [SP, #4] 
    /*00009f90*/ MOV         R3, R7 
    /*00009f94*/ STR         R6, [SP] 
    /*00009f98*/ ADD         R1, R0, #80                 @ 0x50 
    /*00009f9c*/ BL          0x0000000000009F9C          @ VGS_DrvInitBuf [R_ARM_CALL: .text+0xa998] 
    /*00009fa0*/ SUBS        R2, R0, #0 
    /*00009fa4*/ BNE         VGS_DrvCommOpen_xa114
    /*00009fa8*/ MOVW        R1, #0                      @ vgs_irq [R_ARM_MOVW_ABS_NC: .data+0x120] 
    /*00009fac*/ MOVT        R1, #0                      @ vgs_irq [R_ARM_MOVT_ABS: .data+0x120] 
    /*00009fb0*/ LDR         R3, [R4] 
    /*00009fb4*/ MOVW        R0, #0                      @ VGS_DrvCommIrqProc [R_ARM_MOVW_ABS_NC: .text+0xa5d0] 
    /*00009fb8*/ LDR         R1, [R1] 
    /*00009fbc*/ MOVT        R0, #0                      @ VGS_DrvCommIrqProc [R_ARM_MOVT_ABS: .text+0xa5d0] 
    /*00009fc0*/ STR         R6, [R3, #132]              @ 0x84 
    /*00009fc4*/ STR         R7, [R3, #128]              @ 0x80 
    /*00009fc8*/ STR         R1, [R3, #152]              @ 0x98 
    /*00009fcc*/ STR         R5, [R3, #136]              @ 0x88 
    /*00009fd0*/ STR         R8, [R3, #140]              @ 0x8c 
    /*00009fd4*/ STR         R2, [R3, #148]              @ 0x94 
    /*00009fd8*/ STR         R2, [R3, #172]              @ 0xac 
    /*00009fdc*/ STR         R2, [R3, #176]              @ 0xb0 
    /*00009fe0*/ STR         R2, [R3, #144]              @ 0x90 
    /*00009fe4*/ STR         R2, [R3, #168]              @ 0xa8 
    /*00009fe8*/ BL          0x0000000000009FE8          @ VGS_DRV_RequestIrq [R_ARM_CALL: .text+0xba18] 
    /*00009fec*/ SUBS        R6, R0, #0 
    /*00009ff0*/ BNE         VGS_DrvCommOpen_xa08c
    /*00009ff4*/ MOVW        R5, #0                      @ bVgsHdrSupport [R_ARM_MOVW_ABS_NC: .bss+0x570] 
    /*00009ff8*/ MOVT        R5, #0                      @ bVgsHdrSupport [R_ARM_MOVT_ABS: .bss+0x570] 
    /*00009ffc*/ LDR         R3, [R5] 
    /*0000a000*/ CMP         R3, #1 
    /*0000a004*/ BEQ         VGS_DrvCommOpen_xa060
    VGS_DrvCommOpen_xa008:
    /*0000a008*/ BL          0x000000000000A008          @ VGS_DRV_ProcPerformanceLimit [R_ARM_CALL: .text+0xf9fc] 
    /*0000a00c*/ CMP         R0, #0 
    /*0000a010*/ BNE         VGS_DrvCommOpen_xa100
    /*0000a014*/ BL          0x000000000000A014          @ VGS_HAL_Open [R_ARM_CALL: .text+0xfef4] 
    /*0000a018*/ SUBS        R6, R0, #0 
    /*0000a01c*/ BNE         VGS_DrvCommOpen_xa0dc
    /*0000a020*/ BL          0x000000000000A020          @ VGS_DRV_AbolishReset [R_ARM_CALL: .text+0xd924] 
    /*0000a024*/ LDR         R0, [R4] 
    /*0000a028*/ ADD         R0, R0, #164                @ 0xa4 
    /*0000a02c*/ BL          0x000000000000A02C          @ osal_wait_init [R_ARM_CALL: +0x0] 
    /*0000a030*/ MOV         R2, #20 
    /*0000a034*/ MOV         R1, R6 
    /*0000a038*/ LDR         R0, [PC, #328]              @ 0x000000000000a188 
    /*0000a03c*/ STR         R6, [R4, #4] 
    /*0000a040*/ BL          0x000000000000A040          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000a044*/ MOVW        R3, #0                      @ max_vgs_node [R_ARM_MOVW_ABS_NC: .data+0xc] 
    /*0000a048*/ MOVT        R3, #0                      @ max_vgs_node [R_ARM_MOVT_ABS: .data+0xc] 
    /*0000a04c*/ LDR         R3, [R3] 
    /*0000a050*/ STR         R3, [R4, #12] 
    VGS_DrvCommOpen_xa054:
    /*0000a054*/ MOV         R0, R6 
    /*0000a058*/ ADD         SP, SP, #12 
    /*0000a05c*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommOpen_xa060:
    /*0000a060*/ BL          0x000000000000A060          @ VGS_DRV_MallocHdrBuf [R_ARM_CALL: .text+0xf9d8] 
    /*0000a064*/ CMP         R0, #0 
    /*0000a068*/ BEQ         VGS_DrvCommOpen_xa008
    /*0000a06c*/ MOVW        R3, #1580                   @ 0x62c 
    /*0000a070*/ MOVW        R2, #0                      @ .LC25 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2874] 
    /*0000a074*/ STR         R3, [SP] 
    /*0000a078*/ MOV         R0, R6 
    /*0000a07c*/ MOVT        R2, #0                      @ .LC25 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2874] 
    /*0000a080*/ LDR         R3, [PC, #260]              @ 0x000000000000a18c 
    /*0000a084*/ MOV         R1, #45                     @ 0x2d 
    /*0000a088*/ BL          0x000000000000A088          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DrvCommOpen_xa08c:
    /*0000a08c*/ LDR         R0, [R4] 
    /*0000a090*/ ADD         R2, R0, #96                 @ 0x60 
    /*0000a094*/ ADD         R1, R0, #80                 @ 0x50 
    /*0000a098*/ BL          0x000000000000A098          @ VGS_DrvDeInitBuf [R_ARM_CALL: .text+0xad68] 
    VGS_DrvCommOpen_xa09c:
    /*0000a09c*/ LDR         R3, [R4] 
    /*0000a0a0*/ LDR         R0, [R3, #188]              @ 0xbc 
    /*0000a0a4*/ BL          0x000000000000A0A4          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*0000a0a8*/ LDR         R0, [R4] 
    /*0000a0ac*/ MOV         R2, #52                     @ 0x34 
    /*0000a0b0*/ MOV         R1, #0 
    /*0000a0b4*/ ADD         R0, R0, #188                @ 0xbc 
    /*0000a0b8*/ BL          0x000000000000A0B8          @ osal_memset [R_ARM_CALL: +0x0] 
    VGS_DrvCommOpen_xa0bc:
    /*0000a0bc*/ LDR         R0, [R4] 
    /*0000a0c0*/ MVN         R6, #0 
    /*0000a0c4*/ BL          0x000000000000A0C4          @ osal_kfree [R_ARM_CALL: +0x0] 
    /*0000a0c8*/ MOV         R3, #0 
    /*0000a0cc*/ MOV         R0, R6 
    /*0000a0d0*/ STR         R3, [R4] 
    /*0000a0d4*/ ADD         SP, SP, #12 
    /*0000a0d8*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommOpen_xa0dc:
    /*0000a0dc*/ MOVW        R3, #1603                   @ 0x643 
    /*0000a0e0*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x28a4] 
    /*0000a0e4*/ STR         R3, [SP] 
    /*0000a0e8*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x28a4] 
    /*0000a0ec*/ STR         R6, [SP, #4] 
    /*0000a0f0*/ MOV         R1, #45                     @ 0x2d 
    /*0000a0f4*/ LDR         R3, [PC, #144]              @ 0x000000000000a18c 
    /*0000a0f8*/ MOV         R0, #3 
    /*0000a0fc*/ BL          0x000000000000A0FC          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DrvCommOpen_xa100:
    /*0000a100*/ LDR         R3, [R5] 
    /*0000a104*/ CMP         R3, #1 
    /*0000a108*/ BNE         VGS_DrvCommOpen_xa08c
    /*0000a10c*/ BL          0x000000000000A10C          @ VGS_DRV_FreeHdrBuf [R_ARM_CALL: .text+0xf9e0] 
    /*0000a110*/ B           VGS_DrvCommOpen_xa08c
    VGS_DrvCommOpen_xa114:
    /*0000a114*/ STR         R2, [SP, #4] 
    /*0000a118*/ MOVW        R3, #1547                   @ 0x60b 
    /*0000a11c*/ MOVW        R2, #0                      @ .LC24 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2840] 
    /*0000a120*/ STR         R3, [SP] 
    /*0000a124*/ MOVT        R2, #0                      @ .LC24 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2840] 
    /*0000a128*/ LDR         R3, [PC, #92]               @ 0x000000000000a18c 
    /*0000a12c*/ MOV         R1, #45                     @ 0x2d 
    /*0000a130*/ MOV         R0, #3 
    /*0000a134*/ BL          0x000000000000A134          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a138*/ B           VGS_DrvCommOpen_xa09c
    VGS_DrvCommOpen_xa13c:
    /*0000a13c*/ MOVW        R3, #1529                   @ 0x5f9 
    /*0000a140*/ MOVW        R2, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2814] 
    /*0000a144*/ STR         R3, [SP] 
    /*0000a148*/ MOVT        R2, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2814] 
    /*0000a14c*/ LDR         R3, [PC, #56]               @ 0x000000000000a18c 
    /*0000a150*/ MOV         R1, #45                     @ 0x2d 
    /*0000a154*/ MOV         R0, #3 
    /*0000a158*/ BL          0x000000000000A158          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a15c*/ B           VGS_DrvCommOpen_xa0bc
    VGS_DrvCommOpen_xa160:
    /*0000a160*/ MOVW        R3, #1518                   @ 0x5ee 
    /*0000a164*/ MOVW        R2, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2814] 
    /*0000a168*/ STR         R3, [SP] 
    /*0000a16c*/ MOVT        R2, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2814] 
    /*0000a170*/ LDR         R3, [PC, #20]               @ 0x000000000000a18c 
    /*0000a174*/ MOV         R1, #45                     @ 0x2d 
    /*0000a178*/ MOV         R0, #3 
    /*0000a17c*/ MVN         R6, #0 
    /*0000a180*/ BL          0x000000000000A180          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a184*/ B           VGS_DrvCommOpen_xa054
    /*0000a188*/ ANDEQ       R0, R0, R0, LSL #11 
    /*0000a18c*/ ANDEQ       R0, R0, R8, LSL R6 
FUNC_END VGS_DrvCommOpen


FUNC_BEGIN VGS_DrvCommClose
    /*0000a190*/ MOVW        R3, #0                      @ bVgsHdrSupport [R_ARM_MOVW_ABS_NC: .bss+0x570] 
    /*0000a194*/ MOVT        R3, #0                      @ bVgsHdrSupport [R_ARM_MOVT_ABS: .bss+0x570] 
    /*0000a198*/ PUSH        {R4, LR} 
    /*0000a19c*/ LDR         R3, [R3] 
    /*0000a1a0*/ CMP         R3, #1 
    /*0000a1a4*/ BEQ         VGS_DrvCommClose_xa234
    VGS_DrvCommClose_xa1a8:
    /*0000a1a8*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*0000a1ac*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000a1b0*/ LDR         R0, [R4] 
    /*0000a1b4*/ CMP         R0, #0 
    /*0000a1b8*/ BEQ         VGS_DrvCommClose_xa218
    /*0000a1bc*/ ADD         R0, R0, #164                @ 0xa4 
    /*0000a1c0*/ BL          0x000000000000A1C0          @ osal_wait_destory [R_ARM_CALL: +0x0] 
    /*0000a1c4*/ LDR         R0, [R4] 
    /*0000a1c8*/ ADD         R2, R0, #96                 @ 0x60 
    /*0000a1cc*/ ADD         R1, R0, #80                 @ 0x50 
    /*0000a1d0*/ BL          0x000000000000A1D0          @ VGS_DrvDeInitBuf [R_ARM_CALL: .text+0xad68] 
    /*0000a1d4*/ LDR         R0, [R4] 
    /*0000a1d8*/ LDR         R3, [R0, #188]              @ 0xbc 
    /*0000a1dc*/ CMP         R3, #0 
    /*0000a1e0*/ BEQ         VGS_DrvCommClose_xa20c
    /*0000a1e4*/ MOV         R0, R3 
    /*0000a1e8*/ BL          0x000000000000A1E8          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*0000a1ec*/ LDR         R0, [R4] 
    /*0000a1f0*/ MOV         R2, #52                     @ 0x34 
    /*0000a1f4*/ MOV         R1, #0 
    /*0000a1f8*/ ADD         R0, R0, #188                @ 0xbc 
    /*0000a1fc*/ BL          0x000000000000A1FC          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000a200*/ LDR         R0, [R4] 
    /*0000a204*/ MOV         R3, #0 
    /*0000a208*/ STR         R3, [R0, #188]              @ 0xbc 
    VGS_DrvCommClose_xa20c:
    /*0000a20c*/ BL          0x000000000000A20C          @ osal_kfree [R_ARM_CALL: +0x0] 
    /*0000a210*/ MOV         R3, #0 
    /*0000a214*/ STR         R3, [R4] 
    VGS_DrvCommClose_xa218:
    /*0000a218*/ BL          0x000000000000A218          @ VGS_DRV_Reset [R_ARM_CALL: .text+0xd908] 
    /*0000a21c*/ BL          0x000000000000A21C          @ VGS_HAL_Close [R_ARM_CALL: .text+0xff7c] 
    /*0000a220*/ BL          0x000000000000A220          @ VGS_DRV_FreetIrq [R_ARM_CALL: .text+0xd928] 
    /*0000a224*/ MOV         R3, #0 
    /*0000a228*/ MOV         R0, R3 
    /*0000a22c*/ STR         R3, [R4, #4] 
    /*0000a230*/ POP         {R4, PC} 
    VGS_DrvCommClose_xa234:
    /*0000a234*/ BL          0x000000000000A234          @ VGS_DRV_FreeHdrBuf [R_ARM_CALL: .text+0xf9e0] 
    /*0000a238*/ B           VGS_DrvCommClose_xa1a8
FUNC_END VGS_DrvCommClose


FUNC_BEGIN VGS_DrvCommExitEx
    /*0000a23c*/ PUSH        {R4, LR} 
    /*0000a240*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*0000a244*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000a248*/ LDR         R0, [R4] 
    /*0000a24c*/ BL          0x000000000000A24C          @ VGS_DrvQueryBusyTotalJobNum [R_ARM_CALL: .text+0xb3c0] 
    /*0000a250*/ CMP         R0, #0 
    /*0000a254*/ BNE         VGS_DrvCommExitEx_xa30c
    VGS_DrvCommExitEx_xa258:
    /*0000a258*/ MOV         R0, #1 
    /*0000a25c*/ BL          0x000000000000A25C          @ VGS_DrvCommReleaseAllJobFromWaitList [R_ARM_CALL: .text+0x8a38] 
    /*0000a260*/ LDR         R0, [R4] 
    /*0000a264*/ BL          0x000000000000A264          @ VGS_DrvQueryFreeJobNum [R_ARM_CALL: .text+0xb01c] 
    /*0000a268*/ LDR         R3, [R4] 
    /*0000a26c*/ LDR         R2, [R3, #128]              @ 0x80 
    /*0000a270*/ CMP         R0, R2 
    /*0000a274*/ BEQ         VGS_DrvCommExitEx_xa298
    /*0000a278*/ MOVW        R3, #0                      @ .LC28 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x28e4] 
    /*0000a27c*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*0000a280*/ MOVT        R3, #0                      @ .LC28 [R_ARM_MOVT_ABS: .rodata.str1.4+0x28e4] 
    /*0000a284*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*0000a288*/ MOVW        R2, #1799                   @ 0x707 
    /*0000a28c*/ LDR         R1, [PC, #152]              @ 0x000000000000a32c 
    /*0000a290*/ BL          0x000000000000A290          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000a294*/ LDR         R3, [R4] 
    VGS_DrvCommExitEx_xa298:
    /*0000a298*/ ADD         R0, R3, #80                 @ 0x50 
    /*0000a29c*/ BL          0x000000000000A29C          @ VGS_DrvQueryFreeTaskNum [R_ARM_CALL: .text+0xaef4] 
    /*0000a2a0*/ LDR         R3, [R4] 
    /*0000a2a4*/ LDR         R2, [R3, #132]              @ 0x84 
    /*0000a2a8*/ CMP         R0, R2 
    /*0000a2ac*/ BEQ         VGS_DrvCommExitEx_xa2d0
    /*0000a2b0*/ MOVW        R3, #0                      @ .LC29 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2908] 
    /*0000a2b4*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*0000a2b8*/ MOVT        R3, #0                      @ .LC29 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2908] 
    /*0000a2bc*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*0000a2c0*/ MOVW        R2, #1803                   @ 0x70b 
    /*0000a2c4*/ LDR         R1, [PC, #96]               @ 0x000000000000a32c 
    /*0000a2c8*/ BL          0x000000000000A2C8          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000a2cc*/ LDR         R3, [R4] 
    VGS_DrvCommExitEx_xa2d0:
    /*0000a2d0*/ ADD         R0, R3, #96                 @ 0x60 
    /*0000a2d4*/ BL          0x000000000000A2D4          @ VGS_DrvQueryFreeNodeNum [R_ARM_CALL: .text+0xae14] 
    /*0000a2d8*/ LDR         R3, [R4] 
    /*0000a2dc*/ LDR         R3, [R3, #136]              @ 0x88 
    /*0000a2e0*/ CMP         R0, R3 
    /*0000a2e4*/ BEQ         VGS_DrvCommExitEx_xa304
    /*0000a2e8*/ MOVW        R3, #0                      @ .LC30 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2930] 
    /*0000a2ec*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*0000a2f0*/ MOVT        R3, #0                      @ .LC30 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2930] 
    /*0000a2f4*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*0000a2f8*/ MOVW        R2, #1807                   @ 0x70f 
    /*0000a2fc*/ LDR         R1, [PC, #40]               @ 0x000000000000a32c 
    /*0000a300*/ BL          0x000000000000A300          @ osal_panic [R_ARM_CALL: +0x0] 
    VGS_DrvCommExitEx_xa304:
    /*0000a304*/ MOV         R0, #0 
    /*0000a308*/ POP         {R4, PC} 
    VGS_DrvCommExitEx_xa30c:
    /*0000a30c*/ MOVW        R3, #0                      @ .LC27 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x28d8] 
    /*0000a310*/ MOVW        R0, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x253c] 
    /*0000a314*/ MOVT        R3, #0                      @ .LC27 [R_ARM_MOVT_ABS: .rodata.str1.4+0x28d8] 
    /*0000a318*/ MOVT        R0, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x253c] 
    /*0000a31c*/ MOV         R2, #1792                   @ 0x700 
    /*0000a320*/ LDR         R1, [PC, #4]                @ 0x000000000000a32c 
    /*0000a324*/ BL          0x000000000000A324          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000a328*/ B           VGS_DrvCommExitEx_xa258
    /*0000a32c*/ ANDEQ       R0, R0, R8, LSR #12 
FUNC_END VGS_DrvCommExitEx


FUNC_BEGIN VGS_DrvCommListInt
    /*0000a330*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000a334*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*0000a338*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000a33c*/ SUBS        R3, R1, #0 
    /*0000a340*/ SUB         SP, SP, #28 
    /*0000a344*/ MOV         R8, R0 
    /*0000a348*/ LDR         R2, [R4] 
    /*0000a34c*/ ADD         R1, SP, #20 
    /*0000a350*/ STR         R3, [SP] 
    /*0000a354*/ MOV         R3, #0 
    /*0000a358*/ STR         R3, [SP, #20] 
    /*0000a35c*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a360*/ LDREQ       R3, [R2, #248]              @ 0xf8 
    /*0000a364*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a368*/ LDRNE       R3, [R2, #252]              @ 0xfc 
    /*0000a36c*/ ADDEQ       R3, R3, #1 
    /*0000a370*/ ADDNE       R3, R3, #1 
    /*0000a374*/ STREQ       R3, [R2, #248]              @ 0xf8 
    /*0000a378*/ STRNE       R3, [R2, #252]              @ 0xfc 
    /*0000a37c*/ LSL         R3, R8, #1 
    /*0000a380*/ STR         R3, [SP, #4] 
    /*0000a384*/ MOV         R5, R3 
    /*0000a388*/ BL          0x000000000000A388          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a38c*/ LDR         R3, [R4] 
    /*0000a390*/ ADD         R9, R5, #5 
    /*0000a394*/ ADD         R1, R3, R8, LSL #2 
    /*0000a398*/ LDR         R2, [R1, #144]              @ 0x90 
    /*0000a39c*/ CMP         R2, #0 
    /*0000a3a0*/ MOVEQ       R2, #1 
    /*0000a3a4*/ MOVNE       R2, #0 
    /*0000a3a8*/ MOVNE       FP, #1 
    /*0000a3ac*/ MOVEQ       FP, #0 
    /*0000a3b0*/ MOV         IP, R2 
    /*0000a3b4*/ ADD         R0, FP, R9 
    /*0000a3b8*/ STR         R2, [SP, #8] 
    /*0000a3bc*/ ADD         R2, R5, FP 
    /*0000a3c0*/ ADD         R2, R2, #5 
    /*0000a3c4*/ MOV         LR, R0 
    /*0000a3c8*/ STR         IP, [R1, #144]              @ 0x90 
    /*0000a3cc*/ LSL         R7, LR, #3 
    /*0000a3d0*/ LDR         R5, [R3, R2, LSL #3] 
    /*0000a3d4*/ ADD         R2, R3, R7 
    /*0000a3d8*/ STR         R0, [SP, #12] 
    /*0000a3dc*/ CMP         R5, R2 
    /*0000a3e0*/ LDR         R6, [R5] 
    /*0000a3e4*/ BEQ         VGS_DrvCommListInt_xa458
    VGS_DrvCommListInt_xa3e8:
    /*0000a3e8*/ LDR         R0, [R5, #40]               @ 0x28 
    /*0000a3ec*/ BL          0x000000000000A3EC          @ VGS_GetHwEndTime [R_ARM_CALL: .text+0x288c] 
    /*0000a3f0*/ LDR         SL, [R5, #12]! 
    /*0000a3f4*/ CMP         SL, R5 
    /*0000a3f8*/ LDR         R9, [SL] 
    /*0000a3fc*/ BNE         VGS_DrvCommListInt_xa41c
    /*0000a400*/ B           VGS_DrvCommListInt_xa43c
    VGS_DrvCommListInt_xa404:
    /*0000a404*/ MOV         R0, SL 
    /*0000a408*/ MOV         SL, R9 
    /*0000a40c*/ BL          0x000000000000A40C          @ VGS_DrvCommReleaseAllNodeFromTask [R_ARM_CALL: .text+0x8974] 
    /*0000a410*/ CMP         R9, R5 
    /*0000a414*/ LDR         R9, [R9] 
    /*0000a418*/ BEQ         VGS_DrvCommListInt_xa43c
    VGS_DrvCommListInt_xa41c:
    /*0000a41c*/ LDR         R3, [SL, #288]              @ 0x120 
    /*0000a420*/ CMP         R3, #1 
    /*0000a424*/ BNE         VGS_DrvCommListInt_xa404
    /*0000a428*/ LDR         R3, [SL, #24] 
    /*0000a42c*/ LDR         R1, [SL, #320]              @ 0x140 
    /*0000a430*/ LDR         R0, [R3, #24] 
    /*0000a434*/ BL          0x000000000000A434          @ VGS_DRV_ProcLumaResult [R_ARM_CALL: .text+0xe2b4] 
    /*0000a438*/ B           VGS_DrvCommListInt_xa404
    VGS_DrvCommListInt_xa43c:
    /*0000a43c*/ LDR         R3, [R4] 
    /*0000a440*/ MOV         R1, R6 
    /*0000a444*/ MOV         R5, R6 
    /*0000a448*/ LDR         R6, [R6] 
    /*0000a44c*/ ADD         R2, R3, R7 
    /*0000a450*/ CMP         R1, R2 
    /*0000a454*/ BNE         VGS_DrvCommListInt_xa3e8
    VGS_DrvCommListInt_xa458:
    /*0000a458*/ LDR         R3, [R3, #176]              @ 0xb0 
    /*0000a45c*/ CMP         R3, #1 
    /*0000a460*/ BEQ         VGS_DrvCommListInt_xa46c
    /*0000a464*/ MOV         R0, R8 
    /*0000a468*/ BL          0x000000000000A468          @ VGS_DrvCommStartWaitlist [R_ARM_CALL: .text+0x982c] 
    VGS_DrvCommListInt_xa46c:
    /*0000a46c*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a470*/ ADD         R1, SP, #20 
    /*0000a474*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a478*/ BL          0x000000000000A478          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a47c*/ LDR         R3, [SP, #4] 
    /*0000a480*/ LDR         R0, [R4] 
    /*0000a484*/ ADD         R3, R3, FP 
    /*0000a488*/ ADD         R3, R3, #5 
    /*0000a48c*/ ADD         R7, R0, R7 
    /*0000a490*/ LDR         R5, [R0, R3, LSL #3] 
    /*0000a494*/ CMP         R5, R7 
    /*0000a498*/ LDR         R6, [R5] 
    /*0000a49c*/ BEQ         VGS_DrvCommListInt_xa550
    /*0000a4a0*/ LDR         R3, [SP] 
    /*0000a4a4*/ ADD         SL, R8, #3 
    /*0000a4a8*/ MOVW        R7, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a4ac*/ MOVT        R7, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a4b0*/ CMP         R3, #0 
    /*0000a4b4*/ LDR         R3, [SP, #12] 
    /*0000a4b8*/ LSL         SL, SL, #3 
    /*0000a4bc*/ LSL         R3, R3, #3 
    /*0000a4c0*/ STR         R3, [SP, #4] 
    /*0000a4c4*/ MOVEQ       R3, #6 
    /*0000a4c8*/ MOVNE       R3, #7 
    /*0000a4cc*/ STR         R3, [SP] 
    VGS_DrvCommListInt_xa4d0:
    /*0000a4d0*/ ADD         R1, SP, #20 
    /*0000a4d4*/ MOV         R0, R7 
    /*0000a4d8*/ BL          0x000000000000A4D8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a4dc*/ MOV         R3, FP 
    /*0000a4e0*/ MOV         R2, R8 
    /*0000a4e4*/ MOV         R1, R5 
    /*0000a4e8*/ LDR         R0, [R4] 
    /*0000a4ec*/ BL          0x000000000000A4EC          @ VGS_DrvGetJobFromBusyList [R_ARM_CALL: .text+0xb2c0] 
    /*0000a4f0*/ MOV         R0, R5 
    /*0000a4f4*/ MOV         R1, #0 
    /*0000a4f8*/ BL          0x000000000000A4F8          @ VGS_DrvCommReleaseAllTaskFromJob [R_ARM_CALL: .text+0x89c8] 
    /*0000a4fc*/ LDR         R9, [R5, #40]               @ 0x28 
    /*0000a500*/ LDR         R1, [R4] 
    /*0000a504*/ MOV         R0, R9 
    /*0000a508*/ ADD         R1, R1, SL 
    /*0000a50c*/ BL          0x000000000000A50C          @ VGS_DRV_SetProcOkState [R_ARM_CALL: .text+0xf9f8] 
    /*0000a510*/ MOV         R1, R5 
    /*0000a514*/ LDR         R0, [R4] 
    /*0000a518*/ MOV         R5, R6 
    /*0000a51c*/ BL          0x000000000000A51C          @ VGS_DrvPutJobToFreeList [R_ARM_CALL: .text+0xb098] 
    /*0000a520*/ ADD         R1, SP, #20 
    /*0000a524*/ MOV         R0, R7 
    /*0000a528*/ BL          0x000000000000A528          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a52c*/ MOV         R0, R9 
    /*0000a530*/ LDR         R1, [SP] 
    /*0000a534*/ BL          0x000000000000A534          @ VGS_IntCallBack [R_ARM_CALL: .text+0x6f28] 
    /*0000a538*/ LDR         R0, [R4] 
    /*0000a53c*/ LDR         R3, [SP, #4] 
    /*0000a540*/ LDR         R6, [R6] 
    /*0000a544*/ ADD         R3, R0, R3 
    /*0000a548*/ CMP         R5, R3 
    /*0000a54c*/ BNE         VGS_DrvCommListInt_xa4d0
    VGS_DrvCommListInt_xa550:
    /*0000a550*/ LDR         R3, [R0, #176]              @ 0xb0 
    /*0000a554*/ CMP         R3, #1 
    /*0000a558*/ BEQ         VGS_DrvCommListInt_xa5b4
    VGS_DrvCommListInt_xa55c:
    /*0000a55c*/ ADD         R1, SP, #20 
    /*0000a560*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a564*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a568*/ BL          0x000000000000A568          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a56c*/ LDR         R2, [SP, #8] 
    /*0000a570*/ MOV         R1, R8 
    /*0000a574*/ LDR         R0, [R4] 
    /*0000a578*/ BL          0x000000000000A578          @ VGS_DrvQueryBusyJobNum [R_ARM_CALL: .text+0xb3b0] 
    /*0000a57c*/ SUBS        R3, R0, #0 
    /*0000a580*/ BNE         VGS_DrvCommListInt_xa598
    /*0000a584*/ LDR         R2, [R4] 
    /*0000a588*/ ADD         R8, R8, #42                 @ 0x2a 
    /*0000a58c*/ ADD         R0, R2, #164                @ 0xa4 
    /*0000a590*/ STR         R3, [R2, R8, LSL #2] 
    /*0000a594*/ BL          0x000000000000A594          @ osal_wakeup [R_ARM_CALL: +0x0] 
    VGS_DrvCommListInt_xa598:
    /*0000a598*/ ADD         R1, SP, #20 
    /*0000a59c*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a5a0*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a5a4*/ BL          0x000000000000A5A4          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a5a8*/ MOV         R0, #0 
    /*0000a5ac*/ ADD         SP, SP, #28 
    /*0000a5b0*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvCommListInt_xa5b4:
    /*0000a5b4*/ BL          0x000000000000A5B4          @ VGS_DrvQueryBusyTotalJobNum [R_ARM_CALL: .text+0xb3c0] 
    /*0000a5b8*/ CMP         R0, #0 
    /*0000a5bc*/ BNE         VGS_DrvCommListInt_xa55c
    /*0000a5c0*/ BL          0x000000000000A5C0          @ VGS_DrvCommExitEx [R_ARM_CALL: .text+0xa23c] 
    /*0000a5c4*/ BL          0x000000000000A5C4          @ VGS_CancelAllBusyJob [R_ARM_CALL: .text+0x6714] 
    /*0000a5c8*/ BL          0x000000000000A5C8          @ VGS_CancelAllCreatedJob [R_ARM_CALL: .text+0x6b30] 
    /*0000a5cc*/ B           VGS_DrvCommListInt_xa55c
FUNC_END VGS_DrvCommListInt


FUNC_BEGIN VGS_DrvCommIrqProc
    /*0000a5d0*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*0000a5d4*/ SUB         SP, SP, #56                 @ 0x38 
    /*0000a5d8*/ ADD         R6, SP, #32 
    /*0000a5dc*/ MOV         R5, #0 
    /*0000a5e0*/ STR         R5, [SP, #20] 
    /*0000a5e4*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*0000a5e8*/ MOV         R0, R6 
    /*0000a5ec*/ STR         R5, [SP, #24] 
    /*0000a5f0*/ BL          0x000000000000A5F0          @ osal_gettimeofday [R_ARM_CALL: +0x0] 
    /*0000a5f4*/ ADD         R1, SP, #24 
    /*0000a5f8*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a5fc*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a600*/ BL          0x000000000000A600          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a604*/ ADD         R1, SP, #24 
    /*0000a608*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a60c*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a610*/ BL          0x000000000000A610          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a614*/ ADD         R1, SP, #20 
    /*0000a618*/ MOV         R0, R5 
    /*0000a61c*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000a620*/ BL          0x000000000000A620          @ VGS_HAL_GetIntStatus [R_ARM_CALL: .text+0x10130] 
    /*0000a624*/ LDR         R0, [SP, #20] 
    /*0000a628*/ BL          0x000000000000A628          @ VGS_DRV_IsWrongInt [R_ARM_CALL: .text+0xd744] 
    /*0000a62c*/ MOV         R7, R0 
    /*0000a630*/ MOV         R0, R5 
    /*0000a634*/ BL          0x000000000000A634          @ VGS_HAL_ClrInt [R_ARM_CALL: .text+0x1014c] 
    /*0000a638*/ ADD         R1, SP, #24 
    /*0000a63c*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a640*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a644*/ BL          0x000000000000A644          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a648*/ LDR         R1, [R4] 
    /*0000a64c*/ MOV         R0, R5 
    /*0000a650*/ ADD         R1, R1, #160                @ 0xa0 
    /*0000a654*/ BL          0x000000000000A654          @ VGS_HAL_GetNodeID [R_ARM_CALL: .text+0x10168] 
    /*0000a658*/ LDR         R3, [R4] 
    /*0000a65c*/ LDR         R2, [R3, #156]              @ 0x9c 
    /*0000a660*/ LDR         R3, [R3, #160]              @ 0xa0 
    /*0000a664*/ CMP         R2, R3 
    /*0000a668*/ BEQ         VGS_DrvCommIrqProc_xa6a8
    /*0000a66c*/ STR         R3, [SP, #12] 
    /*0000a670*/ MOV         R1, #45                     @ 0x2d 
    /*0000a674*/ MOVW        R3, #1471                   @ 0x5bf 
    /*0000a678*/ STR         R2, [SP, #8] 
    /*0000a67c*/ STR         R3, [SP] 
    /*0000a680*/ MOVW        R2, #0                      @ .LC31 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2958] 
    /*0000a684*/ LDR         R3, [PC, #380]              @ 0x000000000000a808 
    /*0000a688*/ MOVT        R2, #0                      @ .LC31 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2958] 
    /*0000a68c*/ STR         R5, [SP, #4] 
    /*0000a690*/ MOV         R0, #3 
    /*0000a694*/ BL          0x000000000000A694          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a698*/ LDR         R2, [R4] 
    /*0000a69c*/ LDR         R3, [R2, #268]              @ 0x10c 
    /*0000a6a0*/ ADD         R3, R3, #1 
    /*0000a6a4*/ STR         R3, [R2, #268]              @ 0x10c 
    VGS_DrvCommIrqProc_xa6a8:
    /*0000a6a8*/ ADD         R1, SP, #24 
    /*0000a6ac*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a6b0*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a6b4*/ BL          0x000000000000A6B4          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a6b8*/ CMP         R7, #0 
    /*0000a6bc*/ BEQ         VGS_DrvCommIrqProc_xa6f0
    /*0000a6c0*/ MOV         R5, #0 
    /*0000a6c4*/ MOVW        R3, #1479                   @ 0x5c7 
    /*0000a6c8*/ STR         R5, [SP, #4] 
    /*0000a6cc*/ MOVW        R2, #0                      @ .LC32 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x29a0] 
    /*0000a6d0*/ STR         R3, [SP] 
    /*0000a6d4*/ MOVT        R2, #0                      @ .LC32 [R_ARM_MOVT_ABS: .rodata.str1.4+0x29a0] 
    /*0000a6d8*/ LDR         R3, [PC, #296]              @ 0x000000000000a808 
    /*0000a6dc*/ MOV         R1, #45                     @ 0x2d 
    /*0000a6e0*/ MOV         R0, #3 
    /*0000a6e4*/ BL          0x000000000000A6E4          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a6e8*/ MOV         R0, R5 
    /*0000a6ec*/ BL          0x000000000000A6EC          @ VGS_DRV_ClkDisable [R_ARM_CALL: .text+0xd898] 
    VGS_DrvCommIrqProc_xa6f0:
    /*0000a6f0*/ MOV         R1, R7 
    /*0000a6f4*/ MOV         R0, #0 
    /*0000a6f8*/ BL          0x000000000000A6F8          @ VGS_DrvCommListInt [R_ARM_CALL: .text+0xa330] 
    /*0000a6fc*/ ADD         R0, SP, #40                 @ 0x28 
    /*0000a700*/ BL          0x000000000000A700          @ osal_gettimeofday [R_ARM_CALL: +0x0] 
    /*0000a704*/ LDM         R6, {R0, R1} 
    /*0000a708*/ ADD         R7, SP, #56                 @ 0x38 
    /*0000a70c*/ ADD         R6, SP, #48                 @ 0x30 
    /*0000a710*/ MOV         R3, #0 
    /*0000a714*/ LDR         R5, [SP, #40]               @ 0x28 
    /*0000a718*/ STR         R3, [R7, #-28]!             @ 0xffffffe4 
    /*0000a71c*/ STM         R6, {R0, R1} 
    /*0000a720*/ MOV         R1, R7 
    /*0000a724*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a728*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a72c*/ LDR         R8, [SP, #44]               @ 0x2c 
    /*0000a730*/ BL          0x000000000000A730          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a734*/ LDR         R4, [R4] 
    /*0000a738*/ MOV         R1, R7 
    /*0000a73c*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a740*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a744*/ BL          0x000000000000A744          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a748*/ LDR         R1, [SP, #52]               @ 0x34 
    /*0000a74c*/ LDR         R2, [SP, #48]               @ 0x30 
    /*0000a750*/ MOVW        IP, #16960                  @ 0x4240 
    /*0000a754*/ LDR         R0, [R4, #312]              @ 0x138 
    /*0000a758*/ SUB         R3, R8, R1 
    /*0000a75c*/ SUB         R5, R5, R2 
    /*0000a760*/ MOVT        IP, #15 
    /*0000a764*/ SUB         R2, R2, R0 
    /*0000a768*/ LDR         R0, [R4, #316]              @ 0x13c 
    /*0000a76c*/ MLA         R3, IP, R5, R3 
    /*0000a770*/ SUB         R0, R1, R0 
    /*0000a774*/ LDR         R1, [R4, #300]              @ 0x12c 
    /*0000a778*/ MOVW        LR, #16959                  @ 0x423f 
    /*0000a77c*/ MLA         R2, IP, R2, R0 
    /*0000a780*/ CMP         R1, R3 
    /*0000a784*/ MOVT        LR, #15 
    /*0000a788*/ LDR         R0, [R4, #288]              @ 0x120 
    /*0000a78c*/ MOVCC       R1, R3 
    /*0000a790*/ STR         R3, [R4, #296]              @ 0x128 
    /*0000a794*/ CMP         R2, LR 
    /*0000a798*/ LDR         R2, [R4, #272]              @ 0x110 
    /*0000a79c*/ ADD         R3, R3, R0 
    /*0000a7a0*/ STR         R1, [R4, #300]              @ 0x12c 
    /*0000a7a4*/ ADD         R2, R2, #1 
    /*0000a7a8*/ STR         R3, [R4, #288]              @ 0x120 
    /*0000a7ac*/ STR         R2, [R4, #272]              @ 0x110 
    /*0000a7b0*/ BLS         VGS_DrvCommIrqProc_xa7fc
    /*0000a7b4*/ LDR         R1, [R4, #276]              @ 0x114 
    /*0000a7b8*/ LDR         R0, [R4, #284]              @ 0x11c 
    /*0000a7bc*/ SUB         R1, R2, R1 
    /*0000a7c0*/ STR         R1, [R4, #280]              @ 0x118 
    /*0000a7c4*/ CMP         R1, R0 
    /*0000a7c8*/ STRHI       R1, [R4, #284]              @ 0x11c 
    /*0000a7cc*/ LDR         R1, [R4, #292]              @ 0x124 
    /*0000a7d0*/ LDR         R0, [R4, #308]              @ 0x134 
    /*0000a7d4*/ SUB         R1, R3, R1 
    /*0000a7d8*/ STR         R2, [R4, #276]              @ 0x114 
    /*0000a7dc*/ CMP         R1, R0 
    /*0000a7e0*/ STR         R1, [R4, #304]              @ 0x130 
    /*0000a7e4*/ STRHI       R1, [R4, #308]              @ 0x134 
    /*0000a7e8*/ ADD         R0, R4, #312                @ 0x138 
    /*0000a7ec*/ STR         R3, [R4, #292]              @ 0x124 
    /*0000a7f0*/ MOV         R1, R6 
    /*0000a7f4*/ MOV         R2, #8 
    /*0000a7f8*/ BL          0x000000000000A7F8          @ osal_memcpy [R_ARM_CALL: +0x0] 
    VGS_DrvCommIrqProc_xa7fc:
    /*0000a7fc*/ MOV         R0, #1 
    /*0000a800*/ ADD         SP, SP, #56                 @ 0x38 
    /*0000a804*/ POP         {R4, R5, R6, R7, R8, PC} 
    /*0000a808*/ ANDEQ       R0, R0, IP, LSR R6 
FUNC_END VGS_DrvCommIrqProc


FUNC_BEGIN VGS_DrvCommExit
    /*0000a80c*/ PUSH        {R4, R5, R6, LR} 
    /*0000a810*/ SUB         SP, SP, #8 
    /*0000a814*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*0000a818*/ MOVW        R6, #0                      @ VGS_DrvCommWorking [R_ARM_MOVW_ABS_NC: .text+0x886c] 
    /*0000a81c*/ ADD         R5, SP, #8 
    /*0000a820*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000a824*/ MOVT        R6, #0                      @ VGS_DrvCommWorking [R_ARM_MOVT_ABS: .text+0x886c] 
    /*0000a828*/ MOV         R3, #0 
    /*0000a82c*/ STR         R3, [R5, #-4]! 
    /*0000a830*/ STR         R3, [SP] 
    VGS_DrvCommExit_xa834:
    /*0000a834*/ LDR         R0, [R4] 
    /*0000a838*/ LDR         R3, [R0, #168]              @ 0xa8 
    /*0000a83c*/ CMP         R3, #0 
    /*0000a840*/ BNE         VGS_DrvCommExit_xa874
    VGS_DrvCommExit_xa844:
    /*0000a844*/ MOV         R1, SP 
    /*0000a848*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a84c*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a850*/ BL          0x000000000000A850          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a854*/ BL          0x000000000000A854          @ VGS_DrvCommExitEx [R_ARM_CALL: .text+0xa23c] 
    /*0000a858*/ MOV         R1, SP 
    /*0000a85c*/ MOVW        R0, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a860*/ MOVT        R0, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a864*/ BL          0x000000000000A864          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a868*/ MOV         R0, #0 
    /*0000a86c*/ ADD         SP, SP, #8 
    /*0000a870*/ POP         {R4, R5, R6, PC} 
    VGS_DrvCommExit_xa874:
    /*0000a874*/ ADD         R0, R0, #164                @ 0xa4 
    /*0000a878*/ MOV         R2, R5 
    /*0000a87c*/ MOV         R1, R6 
    /*0000a880*/ BL          0x000000000000A880          @ osal_wait_uninterruptible [R_ARM_CALL: +0x0] 
    /*0000a884*/ CMP         R0, #0 
    /*0000a888*/ BGE         VGS_DrvCommExit_xa834
    /*0000a88c*/ B           VGS_DrvCommExit_xa844
FUNC_END VGS_DrvCommExit


FUNC_BEGIN VGS_DrvCommNotify
    /*0000a890*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000a894*/ SUB         SP, SP, #12 
    /*0000a898*/ ADD         R5, SP, #8 
    /*0000a89c*/ MOVW        R4, #0                      @ g_stVgsLock [R_ARM_MOVW_ABS_NC: .bss+0x4] 
    /*0000a8a0*/ MOVT        R4, #0                      @ g_stVgsLock [R_ARM_MOVT_ABS: .bss+0x4] 
    /*0000a8a4*/ MOV         R7, R0 
    /*0000a8a8*/ MOV         R6, #0 
    /*0000a8ac*/ STR         R6, [R5, #-4]! 
    /*0000a8b0*/ MOV         R0, R4 
    /*0000a8b4*/ MOV         R1, R5 
    /*0000a8b8*/ BL          0x000000000000A8B8          @ osal_spin_lock_irqsave [R_ARM_CALL: +0x0] 
    /*0000a8bc*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0x578] 
    /*0000a8c0*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0x578] 
    /*0000a8c4*/ MOV         R0, R4 
    /*0000a8c8*/ MOV         R1, R5 
    /*0000a8cc*/ LDR         R3, [R3] 
    /*0000a8d0*/ STR         R7, [R3, #176]              @ 0xb0 
    /*0000a8d4*/ BL          0x000000000000A8D4          @ osal_spin_unlock_irqrestore [R_ARM_CALL: +0x0] 
    /*0000a8d8*/ MOV         R0, R6 
    /*0000a8dc*/ ADD         SP, SP, #12 
    /*0000a8e0*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END VGS_DrvCommNotify


FUNC_BEGIN VGS_DrvDeInitJobBuf
    /*0000a8e4*/ LDR         R3, [R0] 
    /*0000a8e8*/ CMP         R3, #0 
    /*0000a8ec*/ BXEQ        LR 
    /*0000a8f0*/ PUSH        {R4, LR} 
    /*0000a8f4*/ SUB         SP, SP, #8 
    /*0000a8f8*/ MOV         R4, R0 
    /*0000a8fc*/ MOV         R1, #45                     @ 0x2d 
    /*0000a900*/ STR         R3, [SP, #4] 
    /*0000a904*/ MOV         R2, #52                     @ 0x34 
    /*0000a908*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .rodata+0x650] 
    /*0000a90c*/ STR         R2, [SP] 
    /*0000a910*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .rodata+0x650] 
    /*0000a914*/ MOVW        R2, #0                      @ .LC0 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2a00] 
    /*0000a918*/ MOV         R0, #7 
    /*0000a91c*/ MOVT        R2, #0                      @ .LC0 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2a00] 
    /*0000a920*/ BL          0x000000000000A920          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a924*/ LDR         R0, [R4] 
    /*0000a928*/ BL          0x000000000000A928          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*0000a92c*/ MOV         R3, #0 
    /*0000a930*/ STR         R3, [R4] 
    /*0000a934*/ STR         R3, [R4, #4] 
    /*0000a938*/ ADD         SP, SP, #8 
    /*0000a93c*/ POP         {R4, PC} 
FUNC_END VGS_DrvDeInitJobBuf


FUNC_BEGIN VGS_DrvDeInitTaskBuf
    /*0000a940*/ LDR         R3, [R0] 
    /*0000a944*/ CMP         R3, #0 
    /*0000a948*/ BXEQ        LR 
    /*0000a94c*/ PUSH        {R4, LR} 
    /*0000a950*/ SUB         SP, SP, #8 
    /*0000a954*/ MOV         R4, R0 
    /*0000a958*/ MOV         R1, #45                     @ 0x2d 
    /*0000a95c*/ STR         R3, [SP, #4] 
    /*0000a960*/ MOVW        R2, #0                      @ .LC1 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2a30] 
    /*0000a964*/ MOV         R3, #77                     @ 0x4d 
    /*0000a968*/ MOVT        R2, #0                      @ .LC1 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2a30] 
    /*0000a96c*/ STR         R3, [SP] 
    /*0000a970*/ MOV         R0, #7 
    /*0000a974*/ LDR         R3, [PC, #24]               @ 0x000000000000a994 
    /*0000a978*/ BL          0x000000000000A978          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000a97c*/ LDR         R0, [R4] 
    /*0000a980*/ BL          0x000000000000A980          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*0000a984*/ MOV         R3, #0 
    /*0000a988*/ STR         R3, [R4] 
    /*0000a98c*/ ADD         SP, SP, #8 
    /*0000a990*/ POP         {R4, PC} 
    /*0000a994*/ ANDEQ       R0, R0, R4, ROR #12 
FUNC_END VGS_DrvDeInitTaskBuf


FUNC_BEGIN VGS_DrvInitBuf
    /*0000a998*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000a99c*/ MOV         FP, #60                     @ 0x3c 
    /*0000a9a0*/ MUL         SL, FP, R3 
    /*0000a9a4*/ SUB         SP, SP, #44                 @ 0x2c 
    /*0000a9a8*/ MOV         R4, R0 
    /*0000a9ac*/ MOV         R5, R1 
    /*0000a9b0*/ MOV         R6, R2 
    /*0000a9b4*/ MOV         R1, #0 
    /*0000a9b8*/ MOV         R2, #80                     @ 0x50 
    /*0000a9bc*/ ADD         R8, R0, #8 
    /*0000a9c0*/ MOV         R7, R3 
    /*0000a9c4*/ LDR         R9, [SP, #80]               @ 0x50 
    /*0000a9c8*/ BL          0x000000000000A9C8          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000a9cc*/ ADD         R3, R4, #16 
    /*0000a9d0*/ ADD         R2, R4, #40                 @ 0x28 
    /*0000a9d4*/ STR         R3, [R4, #16] 
    /*0000a9d8*/ STR         R3, [R4, #20] 
    /*0000a9dc*/ MOV         R0, SL 
    /*0000a9e0*/ ADD         R3, R4, #48                 @ 0x30 
    /*0000a9e4*/ STR         R8, [R4, #8] 
    /*0000a9e8*/ STR         R8, [R4, #12] 
    /*0000a9ec*/ STR         R2, [R4, #40]               @ 0x28 
    /*0000a9f0*/ STR         R2, [R4, #44]               @ 0x2c 
    /*0000a9f4*/ STR         R3, [R4, #48]               @ 0x30 
    /*0000a9f8*/ STR         R3, [R4, #52]               @ 0x34 
    /*0000a9fc*/ BL          0x000000000000A9FC          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*0000aa00*/ CMP         R0, #0 
    /*0000aa04*/ BEQ         VGS_DrvInitBuf_xad04
    /*0000aa08*/ MOV         LR, #56                     @ 0x38 
    /*0000aa0c*/ CMP         R7, #0 
    /*0000aa10*/ MLA         LR, LR, R7, R0 
    /*0000aa14*/ STM         R4, {R0, LR} 
    /*0000aa18*/ BEQ         VGS_DrvInitBuf_xaa90
    /*0000aa1c*/ MOV         IP, #0 
    /*0000aa20*/ MOV         R3, IP 
    /*0000aa24*/ MOV         R1, IP 
    /*0000aa28*/ B           VGS_DrvInitBuf_xaa30
    VGS_DrvInitBuf_xaa2c:
    /*0000aa2c*/ LDM         R4, {R0, LR} 
    VGS_DrvInitBuf_xaa30:
    /*0000aa30*/ ADD         R2, R0, IP 
    /*0000aa34*/ STR         R2, [LR, R3, LSL #2] 
    /*0000aa38*/ ADD         LR, R2, #12 
    /*0000aa3c*/ STR         R3, [R2, #40]               @ 0x28 
    /*0000aa40*/ ADD         R3, R3, #1 
    /*0000aa44*/ STR         LR, [R2, #12] 
    /*0000aa48*/ CMP         R7, R3 
    /*0000aa4c*/ STR         LR, [R2, #16] 
    /*0000aa50*/ LDR         LR, [R4, #12] 
    /*0000aa54*/ STR         R2, [R4, #12] 
    /*0000aa58*/ STR         R8, [R0, IP] 
    /*0000aa5c*/ ADD         IP, IP, #56                 @ 0x38 
    /*0000aa60*/ STR         LR, [R2, #4] 
    /*0000aa64*/ STR         R2, [LR] 
    /*0000aa68*/ STR         R1, [R2, #24] 
    /*0000aa6c*/ STR         FP, [R2, #28] 
    /*0000aa70*/ STR         R1, [R2, #20] 
    /*0000aa74*/ STR         R1, [R2, #44]               @ 0x2c 
    /*0000aa78*/ STR         R1, [R2, #48]               @ 0x30 
    /*0000aa7c*/ STR         R1, [R2, #52]               @ 0x34 
    /*0000aa80*/ LDR         R2, [R4, #56]               @ 0x38 
    /*0000aa84*/ ADD         R2, R2, #1 
    /*0000aa88*/ STR         R2, [R4, #56]               @ 0x38 
    /*0000aa8c*/ BNE         VGS_DrvInitBuf_xaa2c
    VGS_DrvInitBuf_xaa90:
    /*0000aa90*/ LSL         R8, R9, #9 
    /*0000aa94*/ MOV         R2, #16 
    /*0000aa98*/ MOV         R1, #0 
    /*0000aa9c*/ MOV         R0, R5 
    /*0000aaa0*/ BL          0x000000000000AAA0          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000aaa4*/ ADD         R7, R5, #4 
    /*0000aaa8*/ MOV         R0, R8 
    /*0000aaac*/ STR         R7, [R5, #4] 
    /*0000aab0*/ STR         R7, [R5, #8] 
    /*0000aab4*/ BL          0x000000000000AAB4          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*0000aab8*/ CMP         R0, #0 
    /*0000aabc*/ BEQ         VGS_DrvInitBuf_xac88
    /*0000aac0*/ CMP         R9, #0 
    /*0000aac4*/ STR         R0, [R5] 
    /*0000aac8*/ BEQ         VGS_DrvInitBuf_xab14
    /*0000aacc*/ MOV         R2, #0 
    /*0000aad0*/ B           VGS_DrvInitBuf_xaad8
    VGS_DrvInitBuf_xaad4:
    /*0000aad4*/ LDR         R0, [R5] 
    VGS_DrvInitBuf_xaad8:
    /*0000aad8*/ ADD         R3, R0, R2, LSL #9 
    /*0000aadc*/ ADD         R1, R3, #8 
    /*0000aae0*/ STR         R1, [R3, #8] 
    /*0000aae4*/ STR         R1, [R3, #12] 
    /*0000aae8*/ LDR         R1, [R5, #8] 
    /*0000aaec*/ STR         R3, [R5, #8] 
    /*0000aaf0*/ STR         R7, [R0, R2, LSL #9] 
    /*0000aaf4*/ ADD         R2, R2, #1 
    /*0000aaf8*/ STR         R1, [R3, #4] 
    /*0000aafc*/ CMP         R9, R2 
    /*0000ab00*/ STR         R3, [R1] 
    /*0000ab04*/ LDR         R3, [R5, #12] 
    /*0000ab08*/ ADD         R3, R3, #1 
    /*0000ab0c*/ STR         R3, [R5, #12] 
    /*0000ab10*/ BNE         VGS_DrvInitBuf_xaad4
    VGS_DrvInitBuf_xab14:
    /*0000ab14*/ LDR         R3, [SP, #84]               @ 0x54 
    /*0000ab18*/ MOV         R7, #24 
    /*0000ab1c*/ MOV         SL, #0 
    /*0000ab20*/ MOV         R2, #32 
    /*0000ab24*/ MOV         R1, SL 
    /*0000ab28*/ MOV         R0, R6 
    /*0000ab2c*/ MUL         FP, R7, R3 
    /*0000ab30*/ ADD         R3, R6, #4 
    /*0000ab34*/ MOV         R8, #0 
    /*0000ab38*/ MOV         R9, #0 
    /*0000ab3c*/ STR         R3, [SP, #20] 
    /*0000ab40*/ STRD        R8, [SP, #32] 
    /*0000ab44*/ MOV         R8, R3 
    /*0000ab48*/ STR         SL, [SP, #28] 
    /*0000ab4c*/ BL          0x000000000000AB4C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000ab50*/ STR         R8, [R6, #4] 
    /*0000ab54*/ MOV         R0, FP 
    /*0000ab58*/ STR         R8, [R6, #8] 
    /*0000ab5c*/ BL          0x000000000000AB5C          @ osal_vmalloc [R_ARM_CALL: +0x0] 
    /*0000ab60*/ SUBS        R9, R0, #0 
    /*0000ab64*/ BEQ         VGS_DrvInitBuf_xad34
    /*0000ab68*/ MOV         R2, FP 
    /*0000ab6c*/ MOV         R1, SL 
    /*0000ab70*/ BL          0x000000000000AB70          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000ab74*/ LDR         R3, [SP, #84]               @ 0x54 
    /*0000ab78*/ MOV         R8, #2512                   @ 0x9d0 
    /*0000ab7c*/ STR         R9, [R6] 
    /*0000ab80*/ MOVW        R1, #0                      @ .LC3 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2a94] 
    /*0000ab84*/ ADD         R2, SP, #32 
    /*0000ab88*/ MUL         FP, R8, R3 
    /*0000ab8c*/ MOVT        R1, #0                      @ .LC3 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2a94] 
    /*0000ab90*/ ADD         R3, SP, #28 
    /*0000ab94*/ MOV         R0, SL 
    /*0000ab98*/ ADD         FP, FP, #16 
    /*0000ab9c*/ STR         FP, [SP] 
    /*0000aba0*/ BL          0x000000000000ABA0          @ CMPI_MmzMallocNocache [R_ARM_CALL: +0x0] 
    /*0000aba4*/ SUBS        R9, R0, #0 
    /*0000aba8*/ BNE         VGS_DrvInitBuf_xacc8
    /*0000abac*/ MOV         R2, FP 
    /*0000abb0*/ MOV         R1, R9 
    /*0000abb4*/ LDR         R0, [SP, #28] 
    /*0000abb8*/ BL          0x000000000000ABB8          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000abbc*/ LDRD        R2, [SP, #32] 
    /*0000abc0*/ LDR         LR, [SP, #84]               @ 0x54 
    /*0000abc4*/ ADDS        R0, R2, #15 
    /*0000abc8*/ LDR         IP, [SP, #28] 
    /*0000abcc*/ ADC         R1, R3, #0 
    /*0000abd0*/ CMP         LR, #0 
    /*0000abd4*/ BIC         R4, R0, #15 
    /*0000abd8*/ STRD        R2, [R6, #16] 
    /*0000abdc*/ MOV         R5, R1 
    /*0000abe0*/ STR         IP, [R6, #24] 
    /*0000abe4*/ STRD        R4, [SP, #8] 
    /*0000abe8*/ BEQ         VGS_DrvInitBuf_xac7c
    /*0000abec*/ MOV         LR, R4 
    /*0000abf0*/ MOV         R1, R9 
    /*0000abf4*/ MOV         R4, R9 
    /*0000abf8*/ LDR         R5, [SP, #20] 
    /*0000abfc*/ MOV         SL, IP 
    /*0000ac00*/ STR         R9, [SP, #20] 
    /*0000ac04*/ LDR         R9, [SP, #84]               @ 0x54 
    /*0000ac08*/ B           VGS_DrvInitBuf_xac14
    VGS_DrvInitBuf_xac0c:
    /*0000ac0c*/ LDR         SL, [SP, #28] 
    /*0000ac10*/ LDRD        R2, [SP, #32] 
    VGS_DrvInitBuf_xac14:
    /*0000ac14*/ MUL         R0, R7, R4 
    /*0000ac18*/ LDR         IP, [R6] 
    /*0000ac1c*/ MUL         R4, R8, R4 
    /*0000ac20*/ SUB         R2, LR, R2 
    /*0000ac24*/ ADD         R3, IP, R0 
    /*0000ac28*/ ADD         R1, R1, #1 
    /*0000ac2c*/ ADD         R2, R2, R4 
    /*0000ac30*/ UXTH        R1, R1 
    /*0000ac34*/ ADD         SL, SL, R2 
    /*0000ac38*/ STR         SL, [R3, #16] 
    /*0000ac3c*/ LDRD        SL, [SP, #8] 
    /*0000ac40*/ ADDS        SL, SL, R4 
    /*0000ac44*/ MOV         R4, R1 
    /*0000ac48*/ ADC         FP, FP, #0 
    /*0000ac4c*/ STRD        SL, [R3, #8] 
    /*0000ac50*/ LDR         R2, [R6, #8] 
    /*0000ac54*/ CMP         R9, R1 
    /*0000ac58*/ STR         R3, [R6, #8] 
    /*0000ac5c*/ STR         R5, [IP, R0] 
    /*0000ac60*/ STR         R2, [R3, #4] 
    /*0000ac64*/ STR         R3, [R2] 
    /*0000ac68*/ LDR         R3, [R6, #28] 
    /*0000ac6c*/ ADD         R3, R3, #1 
    /*0000ac70*/ STR         R3, [R6, #28] 
    /*0000ac74*/ BHI         VGS_DrvInitBuf_xac0c
    /*0000ac78*/ LDR         R9, [SP, #20] 
    VGS_DrvInitBuf_xac7c:
    /*0000ac7c*/ MOV         R0, R9 
    /*0000ac80*/ ADD         SP, SP, #44                 @ 0x2c 
    /*0000ac84*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvInitBuf_xac88:
    /*0000ac88*/ MOV         R1, #45                     @ 0x2d 
    /*0000ac8c*/ STR         R8, [SP, #4] 
    /*0000ac90*/ MOV         R3, #240                    @ 0xf0 
    /*0000ac94*/ MOVW        R2, #0                      @ .LC2 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2a60] 
    /*0000ac98*/ STR         R3, [SP] 
    /*0000ac9c*/ MOVT        R2, #0                      @ .LC2 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2a60] 
    /*0000aca0*/ LDR         R3, [PC, #180]              @ 0x000000000000ad5c 
    /*0000aca4*/ MOV         R0, #1 
    /*0000aca8*/ BL          0x000000000000ACA8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000acac*/ MOV         R0, R4 
    /*0000acb0*/ BL          0x000000000000A8E4 
    /*0000acb4*/ MOVW        R9, #32781                  @ 0x800d 
    /*0000acb8*/ MOVT        R9, #41005                  @ 0xa02d 
    /*0000acbc*/ MOV         R0, R9 
    /*0000acc0*/ ADD         SP, SP, #44                 @ 0x2c 
    /*0000acc4*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_DrvInitBuf_xacc8:
    /*0000acc8*/ MOVW        R3, #311                    @ 0x137 
    /*0000accc*/ MOVW        R2, #0                      @ .LC4 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2aa0] 
    /*0000acd0*/ STR         R3, [SP] 
    /*0000acd4*/ MOV         R0, SL 
    /*0000acd8*/ MOVT        R2, #0                      @ .LC4 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2aa0] 
    /*0000acdc*/ LDR         R3, [PC, #124]              @ 0x000000000000ad60 
    /*0000ace0*/ MOV         R1, #45                     @ 0x2d 
    /*0000ace4*/ BL          0x000000000000ACE4          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DrvInitBuf_xace8:
    /*0000ace8*/ MOV         R0, R4 
    /*0000acec*/ MOVW        R9, #32781                  @ 0x800d 
    /*0000acf0*/ BL          0x000000000000A8E4 
    /*0000acf4*/ MOV         R0, R5 
    /*0000acf8*/ BL          0x000000000000A940 
    /*0000acfc*/ MOVT        R9, #41005                  @ 0xa02d 
    /*0000ad00*/ B           VGS_DrvInitBuf_xac7c
    VGS_DrvInitBuf_xad04:
    /*0000ad04*/ MOV         R3, #168                    @ 0xa8 
    /*0000ad08*/ STR         SL, [SP, #4] 
    /*0000ad0c*/ STR         R3, [SP] 
    /*0000ad10*/ MOVW        R2, #0                      @ .LC2 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2a60] 
    /*0000ad14*/ LDR         R3, [PC, #72]               @ 0x000000000000ad64 
    /*0000ad18*/ MOVT        R2, #0                      @ .LC2 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2a60] 
    /*0000ad1c*/ MOV         R1, #45                     @ 0x2d 
    /*0000ad20*/ MOV         R0, #1 
    /*0000ad24*/ MOVW        R9, #32781                  @ 0x800d 
    /*0000ad28*/ BL          0x000000000000AD28          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ad2c*/ MOVT        R9, #41005                  @ 0xa02d 
    /*0000ad30*/ B           VGS_DrvInitBuf_xac7c
    VGS_DrvInitBuf_xad34:
    /*0000ad34*/ MOVW        R3, #295                    @ 0x127 
    /*0000ad38*/ STR         FP, [SP, #4] 
    /*0000ad3c*/ STR         R3, [SP] 
    /*0000ad40*/ MOVW        R2, #0                      @ .LC2 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2a60] 
    /*0000ad44*/ LDR         R3, [PC, #20]               @ 0x000000000000ad60 
    /*0000ad48*/ MOVT        R2, #0                      @ .LC2 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2a60] 
    /*0000ad4c*/ MOV         R1, #45                     @ 0x2d 
    /*0000ad50*/ MOV         R0, #1 
    /*0000ad54*/ BL          0x000000000000AD54          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ad58*/ B           VGS_DrvInitBuf_xace8
    /*0000ad5c*/ MULEQ       R0, R0, R6 
    /*0000ad60*/ ANDEQ       R0, R0, R4, LSR #13 
    /*0000ad64*/ ANDEQ       R0, R0, IP, ROR R6 
FUNC_END VGS_DrvInitBuf


FUNC_BEGIN VGS_DrvDeInitBuf
    /*0000ad68*/ PUSH        {R4, R5, LR} 
    /*0000ad6c*/ MOV         R5, R1 
    /*0000ad70*/ SUB         SP, SP, #12 
    /*0000ad74*/ MOV         R4, R2 
    /*0000ad78*/ BL          0x000000000000A8E4 
    /*0000ad7c*/ MOV         R0, R5 
    /*0000ad80*/ BL          0x000000000000A940 
    /*0000ad84*/ LDR         R3, [R4] 
    /*0000ad88*/ CMP         R3, #0 
    /*0000ad8c*/ BEQ         VGS_DrvDeInitBuf_xadc4
    /*0000ad90*/ STR         R3, [SP, #4] 
    /*0000ad94*/ MOV         R1, #45                     @ 0x2d 
    /*0000ad98*/ MOV         R3, #101                    @ 0x65 
    /*0000ad9c*/ MOVW        R2, #0                      @ .LC5 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2ad0] 
    /*0000ada0*/ STR         R3, [SP] 
    /*0000ada4*/ MOVT        R2, #0                      @ .LC5 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2ad0] 
    /*0000ada8*/ LDR         R3, [PC, #60]               @ 0x000000000000adec 
    /*0000adac*/ MOV         R0, #7 
    /*0000adb0*/ BL          0x000000000000ADB0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000adb4*/ LDR         R0, [R4] 
    /*0000adb8*/ BL          0x000000000000ADB8          @ osal_vfree [R_ARM_CALL: +0x0] 
    /*0000adbc*/ MOV         R3, #0 
    /*0000adc0*/ STR         R3, [R4] 
    VGS_DrvDeInitBuf_xadc4:
    /*0000adc4*/ LDRD        R0, [R4, #16] 
    /*0000adc8*/ LDR         R2, [R4, #24] 
    /*0000adcc*/ BL          0x000000000000ADCC          @ CMPI_MmzFree [R_ARM_CALL: +0x0] 
    /*0000add0*/ MOV         R0, #0 
    /*0000add4*/ MOV         R1, #0 
    /*0000add8*/ MOV         R3, #0 
    /*0000addc*/ STRD        R0, [R4, #16] 
    /*0000ade0*/ STR         R3, [R4, #24] 
    /*0000ade4*/ ADD         SP, SP, #12 
    /*0000ade8*/ POP         {R4, R5, PC} 
    /*0000adec*/ @           <UNDEFINED> instruction: 0x000006b8 
FUNC_END VGS_DrvDeInitBuf


FUNC_BEGIN VGS_DrvPutNodeToFreeList
    /*0000adf0*/ LDR         R3, [R0, #8] 
    /*0000adf4*/ ADD         R2, R0, #4 
    /*0000adf8*/ STR         R1, [R0, #8] 
    /*0000adfc*/ STM         R1, {R2, R3} 
    /*0000ae00*/ STR         R1, [R3] 
    /*0000ae04*/ LDR         R3, [R0, #28] 
    /*0000ae08*/ ADD         R3, R3, #1 
    /*0000ae0c*/ STR         R3, [R0, #28] 
    /*0000ae10*/ BX          LR 
FUNC_END VGS_DrvPutNodeToFreeList


FUNC_BEGIN VGS_DrvQueryFreeNodeNum
    /*0000ae14*/ LDR         R0, [R0, #28] 
    /*0000ae18*/ BX          LR 
FUNC_END VGS_DrvQueryFreeNodeNum


FUNC_BEGIN VGS_DrvGetNodeFromFreeList
    /*0000ae1c*/ MOV         R2, R0 
    /*0000ae20*/ LDR         R3, [R2, #4]! 
    /*0000ae24*/ CMP         R3, R2 
    /*0000ae28*/ BEQ         VGS_DrvGetNodeFromFreeList_xae70
    /*0000ae2c*/ PUSH        {R4, LR} 
    /*0000ae30*/ MOV         R1, R0 
    /*0000ae34*/ LDR         LR, [R3, #4] 
    /*0000ae38*/ MOV         R0, R3 
    /*0000ae3c*/ LDR         R4, [R3] 
    /*0000ae40*/ MOV         IP, #256                    @ 0x100 
    /*0000ae44*/ MOV         R2, #512                    @ 0x200 
    /*0000ae48*/ MOVT        IP, #16 
    /*0000ae4c*/ MOVT        R2, #32 
    /*0000ae50*/ STR         LR, [R4, #4] 
    /*0000ae54*/ STR         R4, [LR] 
    /*0000ae58*/ STR         IP, [R3] 
    /*0000ae5c*/ STR         R2, [R3, #4] 
    /*0000ae60*/ LDR         R3, [R1, #28] 
    /*0000ae64*/ SUB         R3, R3, #1 
    /*0000ae68*/ STR         R3, [R1, #28] 
    /*0000ae6c*/ POP         {R4, PC} 
    VGS_DrvGetNodeFromFreeList_xae70:
    /*0000ae70*/ MOV         R0, #0 
    /*0000ae74*/ BX          LR 
FUNC_END VGS_DrvGetNodeFromFreeList


FUNC_BEGIN VGS_DrvPutNodeToTask
    /*0000ae78*/ LDR         R3, [R1, #12] 
    /*0000ae7c*/ ADD         R2, R1, #8 
    /*0000ae80*/ STR         R0, [R1, #12] 
    /*0000ae84*/ STM         R0, {R2, R3} 
    /*0000ae88*/ STR         R0, [R3] 
    /*0000ae8c*/ BX          LR 
FUNC_END VGS_DrvPutNodeToTask


FUNC_BEGIN VGS_DrvGetNodeFromTask
    /*0000ae90*/ PUSH        {R4, LR} 
    /*0000ae94*/ ADD         R3, R0, #8 
    /*0000ae98*/ LDR         R2, [R0, #8] 
    /*0000ae9c*/ MOV         R4, R1 
    /*0000aea0*/ CMP         R2, R3 
    /*0000aea4*/ BEQ         VGS_DrvGetNodeFromTask_xaed0
    VGS_DrvGetNodeFromTask_xaea8:
    /*0000aea8*/ LDR         R1, [R4, #4] 
    /*0000aeac*/ MOV         R2, #256                    @ 0x100 
    /*0000aeb0*/ LDR         R0, [R4] 
    /*0000aeb4*/ MOVT        R2, #16 
    /*0000aeb8*/ MOV         R3, #512                    @ 0x200 
    /*0000aebc*/ MOVT        R3, #32 
    /*0000aec0*/ STR         R1, [R0, #4] 
    /*0000aec4*/ STR         R0, [R1] 
    /*0000aec8*/ STM         R4, {R2, R3} 
    /*0000aecc*/ POP         {R4, PC} 
    VGS_DrvGetNodeFromTask_xaed0:
    /*0000aed0*/ MOVW        R3, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b00] 
    /*0000aed4*/ MOVW        R0, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b08] 
    /*0000aed8*/ MOVT        R3, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b00] 
    /*0000aedc*/ MOVT        R0, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b08] 
    /*0000aee0*/ MOV         R2, #528                    @ 0x210 
    /*0000aee4*/ LDR         R1, [PC, #4]                @ 0x000000000000aef0 
    /*0000aee8*/ BL          0x000000000000AEE8          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000aeec*/ B           VGS_DrvGetNodeFromTask_xaea8
    /*0000aef0*/ LDRDEQ      R0, [R0], -R0               @ <UNPREDICTABLE> 
FUNC_END VGS_DrvGetNodeFromTask


FUNC_BEGIN VGS_DrvQueryFreeTaskNum
    /*0000aef4*/ LDR         R0, [R0, #12] 
    /*0000aef8*/ BX          LR 
FUNC_END VGS_DrvQueryFreeTaskNum


FUNC_BEGIN VGS_DrvGetTaskFromFreeList
    /*0000aefc*/ MOV         R2, R0 
    /*0000af00*/ LDR         R3, [R2, #4]! 
    /*0000af04*/ CMP         R3, R2 
    /*0000af08*/ BEQ         VGS_DrvGetTaskFromFreeList_xaf50
    /*0000af0c*/ PUSH        {R4, LR} 
    /*0000af10*/ MOV         R1, R0 
    /*0000af14*/ LDR         LR, [R3, #4] 
    /*0000af18*/ MOV         R0, R3 
    /*0000af1c*/ LDR         R4, [R3] 
    /*0000af20*/ MOV         IP, #256                    @ 0x100 
    /*0000af24*/ MOV         R2, #512                    @ 0x200 
    /*0000af28*/ MOVT        IP, #16 
    /*0000af2c*/ MOVT        R2, #32 
    /*0000af30*/ STR         LR, [R4, #4] 
    /*0000af34*/ STR         R4, [LR] 
    /*0000af38*/ STR         IP, [R3] 
    /*0000af3c*/ STR         R2, [R3, #4] 
    /*0000af40*/ LDR         R3, [R1, #12] 
    /*0000af44*/ SUB         R3, R3, #1 
    /*0000af48*/ STR         R3, [R1, #12] 
    /*0000af4c*/ POP         {R4, PC} 
    VGS_DrvGetTaskFromFreeList_xaf50:
    /*0000af50*/ MOV         R0, #0 
    /*0000af54*/ BX          LR 
FUNC_END VGS_DrvGetTaskFromFreeList


FUNC_BEGIN VGS_DrvPutTaskToFreeList
    /*0000af58*/ LDR         R3, [R0, #8] 
    /*0000af5c*/ ADD         R2, R0, #4 
    /*0000af60*/ STR         R1, [R0, #8] 
    /*0000af64*/ STM         R1, {R2, R3} 
    /*0000af68*/ STR         R1, [R3] 
    /*0000af6c*/ LDR         R3, [R0, #12] 
    /*0000af70*/ ADD         R3, R3, #1 
    /*0000af74*/ STR         R3, [R0, #12] 
    /*0000af78*/ BX          LR 
FUNC_END VGS_DrvPutTaskToFreeList


FUNC_BEGIN VGS_DrvGetTaskFromJob
    /*0000af7c*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000af80*/ ADD         R3, R0, #12 
    /*0000af84*/ LDR         R2, [R0, #12] 
    /*0000af88*/ SUB         SP, SP, #12 
    /*0000af8c*/ CMP         R2, R3 
    /*0000af90*/ BEQ         VGS_DrvGetTaskFromJob_xafcc
    /*0000af94*/ LDR         IP, [R1, #4] 
    /*0000af98*/ MOV         R2, #256                    @ 0x100 
    /*0000af9c*/ LDR         LR, [R1] 
    /*0000afa0*/ MOVT        R2, #16 
    /*0000afa4*/ MOV         R3, #512                    @ 0x200 
    /*0000afa8*/ MOVT        R3, #32 
    /*0000afac*/ STR         IP, [LR, #4] 
    /*0000afb0*/ STR         LR, [IP] 
    /*0000afb4*/ STM         R1, {R2, R3} 
    /*0000afb8*/ LDR         R3, [R0, #24] 
    /*0000afbc*/ SUB         R3, R3, #1 
    /*0000afc0*/ STR         R3, [R0, #24] 
    VGS_DrvGetTaskFromJob_xafc4:
    /*0000afc4*/ ADD         SP, SP, #12 
    /*0000afc8*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DrvGetTaskFromJob_xafcc:
    /*0000afcc*/ STR         R0, [SP, #4] 
    /*0000afd0*/ MOVW        R3, #573                    @ 0x23d 
    /*0000afd4*/ MOVW        R2, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b48] 
    /*0000afd8*/ STR         R3, [SP] 
    /*0000afdc*/ MOVT        R2, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b48] 
    /*0000afe0*/ LDR         R3, [PC, #12]               @ 0x000000000000aff4 
    /*0000afe4*/ MOV         R1, #45                     @ 0x2d 
    /*0000afe8*/ MOV         R0, #4 
    /*0000afec*/ BL          0x000000000000AFEC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000aff0*/ B           VGS_DrvGetTaskFromJob_xafc4
    /*0000aff4*/ ANDEQ       R0, R0, R8, ROR #13 
FUNC_END VGS_DrvGetTaskFromJob


FUNC_BEGIN VGS_DrvPutTaskToJob
    /*0000aff8*/ LDR         R3, [R1, #16] 
    /*0000affc*/ ADD         R2, R1, #12 
    /*0000b000*/ STR         R0, [R1, #16] 
    /*0000b004*/ STM         R0, {R2, R3} 
    /*0000b008*/ STR         R0, [R3] 
    /*0000b00c*/ LDR         R3, [R1, #24] 
    /*0000b010*/ ADD         R3, R3, #1 
    /*0000b014*/ STR         R3, [R1, #24] 
    /*0000b018*/ BX          LR 
FUNC_END VGS_DrvPutTaskToJob


FUNC_BEGIN VGS_DrvQueryFreeJobNum
    /*0000b01c*/ LDR         R0, [R0, #56]               @ 0x38 
    /*0000b020*/ BX          LR 
FUNC_END VGS_DrvQueryFreeJobNum


FUNC_BEGIN VGS_DrvGetJobFromFreeList
    /*0000b024*/ PUSH        {R4, R5, R6, LR} 
    /*0000b028*/ ADD         R3, R0, #8 
    /*0000b02c*/ LDR         R2, [R0, #8] 
    /*0000b030*/ MOV         R4, R0 
    /*0000b034*/ MOV         R5, R1 
    /*0000b038*/ CMP         R2, R3 
    /*0000b03c*/ BEQ         VGS_DrvGetJobFromFreeList_xb074
    VGS_DrvGetJobFromFreeList_xb040:
    /*0000b040*/ LDR         R1, [R5, #4] 
    /*0000b044*/ MOV         R2, #256                    @ 0x100 
    /*0000b048*/ LDR         R0, [R5] 
    /*0000b04c*/ MOVT        R2, #16 
    /*0000b050*/ MOV         R3, #512                    @ 0x200 
    /*0000b054*/ MOVT        R3, #32 
    /*0000b058*/ STR         R1, [R0, #4] 
    /*0000b05c*/ STR         R0, [R1] 
    /*0000b060*/ STM         R5, {R2, R3} 
    /*0000b064*/ LDR         R3, [R4, #56]               @ 0x38 
    /*0000b068*/ SUB         R3, R3, #1 
    /*0000b06c*/ STR         R3, [R4, #56]               @ 0x38 
    /*0000b070*/ POP         {R4, R5, R6, PC} 
    VGS_DrvGetJobFromFreeList_xb074:
    /*0000b074*/ MOVW        R3, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b00] 
    /*0000b078*/ MOVW        R0, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b08] 
    /*0000b07c*/ MOVT        R3, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b00] 
    /*0000b080*/ MOVT        R0, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b08] 
    /*0000b084*/ MOVW        R2, #602                    @ 0x25a 
    /*0000b088*/ LDR         R1, [PC, #4]                @ 0x000000000000b094 
    /*0000b08c*/ BL          0x000000000000B08C          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000b090*/ B           VGS_DrvGetJobFromFreeList_xb040
    /*0000b094*/ ANDEQ       R0, R0, R0, LSL #14 
FUNC_END VGS_DrvGetJobFromFreeList


FUNC_BEGIN VGS_DrvPutJobToFreeList
    /*0000b098*/ LDR         R2, [R0, #12] 
    /*0000b09c*/ ADD         R3, R0, #8 
    /*0000b0a0*/ STR         R1, [R0, #12] 
    /*0000b0a4*/ MOV         IP, #60                     @ 0x3c 
    /*0000b0a8*/ STR         R3, [R1] 
    /*0000b0ac*/ MOV         R3, #0 
    /*0000b0b0*/ STR         R2, [R1, #4] 
    /*0000b0b4*/ STR         R1, [R2] 
    /*0000b0b8*/ STR         IP, [R1, #28] 
    /*0000b0bc*/ STR         R3, [R1, #24] 
    /*0000b0c0*/ STR         R3, [R1, #20] 
    /*0000b0c4*/ STR         R3, [R1, #44]               @ 0x2c 
    /*0000b0c8*/ STR         R3, [R1, #48]               @ 0x30 
    /*0000b0cc*/ STR         R3, [R1, #52]               @ 0x34 
    /*0000b0d0*/ LDR         R3, [R0, #56]               @ 0x38 
    /*0000b0d4*/ ADD         R3, R3, #1 
    /*0000b0d8*/ STR         R3, [R0, #56]               @ 0x38 
    /*0000b0dc*/ BX          LR 
FUNC_END VGS_DrvPutJobToFreeList


FUNC_BEGIN VGS_DrvQueryWaitJobNum
    /*0000b0e0*/ LDR         R0, [R0, #60]               @ 0x3c 
    /*0000b0e4*/ BX          LR 
FUNC_END VGS_DrvQueryWaitJobNum


FUNC_BEGIN VGS_DrvGetJobFromWaitList
    /*0000b0e8*/ PUSH        {R4, R5, R6, LR} 
    /*0000b0ec*/ ADD         R3, R0, #16 
    /*0000b0f0*/ LDR         R2, [R0, #16] 
    /*0000b0f4*/ MOV         R4, R0 
    /*0000b0f8*/ MOV         R5, R1 
    /*0000b0fc*/ CMP         R2, R3 
    /*0000b100*/ BEQ         VGS_DrvGetJobFromWaitList_xb138
    VGS_DrvGetJobFromWaitList_xb104:
    /*0000b104*/ LDR         R1, [R5, #4] 
    /*0000b108*/ MOV         R2, #256                    @ 0x100 
    /*0000b10c*/ LDR         R0, [R5] 
    /*0000b110*/ MOVT        R2, #16 
    /*0000b114*/ MOV         R3, #512                    @ 0x200 
    /*0000b118*/ MOVT        R3, #32 
    /*0000b11c*/ STR         R1, [R0, #4] 
    /*0000b120*/ STR         R0, [R1] 
    /*0000b124*/ STM         R5, {R2, R3} 
    /*0000b128*/ LDR         R3, [R4, #60]               @ 0x3c 
    /*0000b12c*/ SUB         R3, R3, #1 
    /*0000b130*/ STR         R3, [R4, #60]               @ 0x3c 
    /*0000b134*/ POP         {R4, R5, R6, PC} 
    VGS_DrvGetJobFromWaitList_xb138:
    /*0000b138*/ MOVW        R3, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b00] 
    /*0000b13c*/ MOVW        R0, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b08] 
    /*0000b140*/ MOVT        R3, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b00] 
    /*0000b144*/ MOVT        R0, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b08] 
    /*0000b148*/ MOVW        R2, #637                    @ 0x27d 
    /*0000b14c*/ LDR         R1, [PC, #4]                @ 0x000000000000b158 
    /*0000b150*/ BL          0x000000000000B150          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000b154*/ B           VGS_DrvGetJobFromWaitList_xb104
    /*0000b158*/ ANDEQ       R0, R0, IP, LSL R7 
FUNC_END VGS_DrvGetJobFromWaitList


FUNC_BEGIN VGS_DrvPutJobToWaitList
    /*0000b15c*/ LDR         R3, [R0, #20] 
    /*0000b160*/ ADD         R2, R0, #16 
    /*0000b164*/ STR         R1, [R0, #20] 
    /*0000b168*/ STM         R1, {R2, R3} 
    /*0000b16c*/ STR         R1, [R3] 
    /*0000b170*/ LDR         R3, [R0, #60]               @ 0x3c 
    /*0000b174*/ ADD         R3, R3, #1 
    /*0000b178*/ STR         R3, [R0, #60]               @ 0x3c 
    /*0000b17c*/ BX          LR 
FUNC_END VGS_DrvPutJobToWaitList


FUNC_BEGIN VGS_DrvPutJobToProcList
    /*0000b180*/ ADD         IP, R0, R2, LSL #3 
    /*0000b184*/ ADD         R2, R2, #3 
    /*0000b188*/ LDR         R3, [IP, #28] 
    /*0000b18c*/ ADD         R2, R0, R2, LSL #3 
    /*0000b190*/ STR         R1, [IP, #28] 
    /*0000b194*/ STM         R1, {R2, R3} 
    /*0000b198*/ STR         R1, [R3] 
    /*0000b19c*/ LDR         R3, [R0, #64]               @ 0x40 
    /*0000b1a0*/ ADD         R3, R3, #1 
    /*0000b1a4*/ STR         R3, [R0, #64]               @ 0x40 
    /*0000b1a8*/ BX          LR 
FUNC_END VGS_DrvPutJobToProcList


FUNC_BEGIN VGS_DrvGetJobFromProcList
    /*0000b1ac*/ ADD         R2, R2, #3 
    /*0000b1b0*/ PUSH        {R4, R5, R6, LR} 
    /*0000b1b4*/ MOV         R4, R0 
    /*0000b1b8*/ LDR         R3, [R0, R2, LSL #3] 
    /*0000b1bc*/ ADD         R2, R0, R2, LSL #3 
    /*0000b1c0*/ MOV         R5, R1 
    /*0000b1c4*/ CMP         R3, R2 
    /*0000b1c8*/ BEQ         VGS_DrvGetJobFromProcList_xb200
    VGS_DrvGetJobFromProcList_xb1cc:
    /*0000b1cc*/ LDR         R1, [R5, #4] 
    /*0000b1d0*/ MOV         R2, #256                    @ 0x100 
    /*0000b1d4*/ LDR         R0, [R5] 
    /*0000b1d8*/ MOVT        R2, #16 
    /*0000b1dc*/ MOV         R3, #512                    @ 0x200 
    /*0000b1e0*/ MOVT        R3, #32 
    /*0000b1e4*/ STR         R1, [R0, #4] 
    /*0000b1e8*/ STR         R0, [R1] 
    /*0000b1ec*/ STM         R5, {R2, R3} 
    /*0000b1f0*/ LDR         R3, [R4, #64]               @ 0x40 
    /*0000b1f4*/ SUB         R3, R3, #1 
    /*0000b1f8*/ STR         R3, [R4, #64]               @ 0x40 
    /*0000b1fc*/ POP         {R4, R5, R6, PC} 
    VGS_DrvGetJobFromProcList_xb200:
    /*0000b200*/ MOVW        R3, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b00] 
    /*0000b204*/ MOVW        R0, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b08] 
    /*0000b208*/ MOVT        R3, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b00] 
    /*0000b20c*/ MOVT        R0, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b08] 
    /*0000b210*/ MOVW        R2, #663                    @ 0x297 
    /*0000b214*/ LDR         R1, [PC, #4]                @ 0x000000000000b220 
    /*0000b218*/ BL          0x000000000000B218          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000b21c*/ B           VGS_DrvGetJobFromProcList_xb1cc
    /*0000b220*/ ANDEQ       R0, R0, R8, LSR R7 
FUNC_END VGS_DrvGetJobFromProcList


FUNC_BEGIN VGS_DrvPutJobToProcFreeList
    /*0000b224*/ LDR         R3, [R0, #36]               @ 0x24 
    /*0000b228*/ ADD         R2, R0, #32 
    /*0000b22c*/ STR         R1, [R0, #36]               @ 0x24 
    /*0000b230*/ STM         R1, {R2, R3} 
    /*0000b234*/ STR         R1, [R3] 
    /*0000b238*/ LDR         R3, [R0, #68]               @ 0x44 
    /*0000b23c*/ ADD         R3, R3, #1 
    /*0000b240*/ STR         R3, [R0, #68]               @ 0x44 
    /*0000b244*/ BX          LR 
FUNC_END VGS_DrvPutJobToProcFreeList


FUNC_BEGIN VGS_DrvGetJobFromProcFreeList
    /*0000b248*/ MOV         R2, R0 
    /*0000b24c*/ PUSH        {R4, LR} 
    /*0000b250*/ MOV         R4, R0 
    /*0000b254*/ LDR         R3, [R2, #32]! 
    /*0000b258*/ CMP         R3, R2 
    /*0000b25c*/ BEQ         VGS_DrvGetJobFromProcFreeList_xb298
    VGS_DrvGetJobFromProcFreeList_xb260:
    /*0000b260*/ LDR         IP, [R3, #4] 
    /*0000b264*/ MOV         R0, R3 
    /*0000b268*/ LDR         LR, [R3] 
    /*0000b26c*/ MOV         R1, #256                    @ 0x100 
    /*0000b270*/ MOV         R2, #512                    @ 0x200 
    /*0000b274*/ MOVT        R1, #16 
    /*0000b278*/ MOVT        R2, #32 
    /*0000b27c*/ STR         IP, [LR, #4] 
    /*0000b280*/ STR         LR, [IP] 
    /*0000b284*/ STM         R3, {R1, R2} 
    /*0000b288*/ LDR         R3, [R4, #68]               @ 0x44 
    /*0000b28c*/ SUB         R3, R3, #1 
    /*0000b290*/ STR         R3, [R4, #68]               @ 0x44 
    /*0000b294*/ POP         {R4, PC} 
    VGS_DrvGetJobFromProcFreeList_xb298:
    /*0000b298*/ MOVW        R3, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b00] 
    /*0000b29c*/ MOVW        R0, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b08] 
    /*0000b2a0*/ MOVT        R3, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b00] 
    /*0000b2a4*/ MOVT        R0, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b08] 
    /*0000b2a8*/ MOV         R2, #684                    @ 0x2ac 
    /*0000b2ac*/ LDR         R1, [PC, #8]                @ 0x000000000000b2bc 
    /*0000b2b0*/ BL          0x000000000000B2B0          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000b2b4*/ LDR         R3, [R4, #32] 
    /*0000b2b8*/ B           VGS_DrvGetJobFromProcFreeList_xb260
    /*0000b2bc*/ ANDEQ       R0, R0, R4, ASR R7 
FUNC_END VGS_DrvGetJobFromProcFreeList


FUNC_BEGIN VGS_DrvGetJobFromBusyList
    /*0000b2c0*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*0000b2c4*/ LSL         R4, R2, #1 
    /*0000b2c8*/ ADD         R2, R4, R3 
    /*0000b2cc*/ MOV         R7, R3 
    /*0000b2d0*/ ADD         R2, R2, #5 
    /*0000b2d4*/ ADD         R3, R3, #5 
    /*0000b2d8*/ ADD         R3, R4, R3 
    /*0000b2dc*/ MOV         R5, R0 
    /*0000b2e0*/ LDR         R2, [R0, R2, LSL #3] 
    /*0000b2e4*/ MOV         R6, R1 
    /*0000b2e8*/ ADD         R3, R0, R3, LSL #3 
    /*0000b2ec*/ CMP         R2, R3 
    /*0000b2f0*/ BEQ         VGS_DrvGetJobFromBusyList_xb338
    VGS_DrvGetJobFromBusyList_xb2f4:
    /*0000b2f4*/ LDM         R6, {R0, R1} 
    /*0000b2f8*/ ADD         R4, R5, R4 
    /*0000b2fc*/ ADD         R4, R4, R7 
    /*0000b300*/ MOV         R2, #256                    @ 0x100 
    /*0000b304*/ MOV         R3, #512                    @ 0x200 
    /*0000b308*/ MOVT        R2, #16 
    /*0000b30c*/ STR         R1, [R0, #4] 
    /*0000b310*/ MOVT        R3, #32 
    /*0000b314*/ STR         R0, [R1] 
    /*0000b318*/ STM         R6, {R2, R3} 
    /*0000b31c*/ LDRB        R3, [R4, #72]               @ 0x48 
    /*0000b320*/ SUB         R3, R3, #1 
    /*0000b324*/ STRB        R3, [R4, #72]               @ 0x48 
    /*0000b328*/ LDR         R3, [R5, #76]               @ 0x4c 
    /*0000b32c*/ SUB         R3, R3, #1 
    /*0000b330*/ STR         R3, [R5, #76]               @ 0x4c 
    /*0000b334*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DrvGetJobFromBusyList_xb338:
    /*0000b338*/ MOVW        R3, #0                      @ .LC6 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b00] 
    /*0000b33c*/ MOVW        R0, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b08] 
    /*0000b340*/ MOVT        R3, #0                      @ .LC6 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b00] 
    /*0000b344*/ MOVT        R0, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b08] 
    /*0000b348*/ MOV         R2, #704                    @ 0x2c0 
    /*0000b34c*/ LDR         R1, [PC, #4]                @ 0x000000000000b358 
    /*0000b350*/ BL          0x000000000000B350          @ osal_panic [R_ARM_CALL: +0x0] 
    /*0000b354*/ B           VGS_DrvGetJobFromBusyList_xb2f4
    /*0000b358*/ ANDEQ       R0, R0, R4, ROR R7 
FUNC_END VGS_DrvGetJobFromBusyList


FUNC_BEGIN VGS_DrvPutJobToBusyList
    /*0000b35c*/ LSL         R2, R2, #1 
    /*0000b360*/ ADD         IP, R3, #5 
    /*0000b364*/ PUSH        {R4, LR} 
    /*0000b368*/ ADD         R4, R3, R2 
    /*0000b36c*/ ADD         LR, R0, R2 
    /*0000b370*/ ADD         IP, IP, R2 
    /*0000b374*/ ADD         R4, R0, R4, LSL #3 
    /*0000b378*/ ADD         R3, LR, R3 
    /*0000b37c*/ ADD         IP, R0, IP, LSL #3 
    /*0000b380*/ LDR         R2, [R4, #44]               @ 0x2c 
    /*0000b384*/ STR         R1, [R4, #44]               @ 0x2c 
    /*0000b388*/ STR         IP, [R1] 
    /*0000b38c*/ STR         R2, [R1, #4] 
    /*0000b390*/ STR         R1, [R2] 
    /*0000b394*/ LDRB        R2, [R3, #72]               @ 0x48 
    /*0000b398*/ ADD         R2, R2, #1 
    /*0000b39c*/ STRB        R2, [R3, #72]               @ 0x48 
    /*0000b3a0*/ LDR         R3, [R0, #76]               @ 0x4c 
    /*0000b3a4*/ ADD         R3, R3, #1 
    /*0000b3a8*/ STR         R3, [R0, #76]               @ 0x4c 
    /*0000b3ac*/ POP         {R4, PC} 
FUNC_END VGS_DrvPutJobToBusyList


FUNC_BEGIN VGS_DrvQueryBusyJobNum
    /*0000b3b0*/ ADD         R1, R0, R1, LSL #1 
    /*0000b3b4*/ ADD         R2, R1, R2 
    /*0000b3b8*/ LDRB        R0, [R2, #72]               @ 0x48 
    /*0000b3bc*/ BX          LR 
FUNC_END VGS_DrvQueryBusyJobNum


FUNC_BEGIN VGS_DrvQueryBusyTotalJobNum
    /*0000b3c0*/ LDR         R0, [R0, #76]               @ 0x4c 
    /*0000b3c4*/ BX          LR 
FUNC_END VGS_DrvQueryBusyTotalJobNum


FUNC_BEGIN VGS_DRV_CheckRect
    /*0000b3c8*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000b3cc*/ SUB         SP, SP, #36                 @ 0x24 
    /*0000b3d0*/ LDR         R4, [R0] 
    /*0000b3d4*/ LDR         R6, [R0, #8] 
    /*0000b3d8*/ CMP         R4, #0 
    /*0000b3dc*/ LDR         R5, [R0, #12] 
    /*0000b3e0*/ LDR         R7, [SP, #60]               @ 0x3c 
    /*0000b3e4*/ LDR         LR, [R0, #4] 
    /*0000b3e8*/ BLT         VGS_DRV_CheckRect_xb4c8
    /*0000b3ec*/ CMP         LR, #0 
    /*0000b3f0*/ BLT         VGS_DRV_CheckRect_xb4c8
    /*0000b3f4*/ ORR         IP, R6, R5 
    /*0000b3f8*/ ORR         IP, IP, R4 
    /*0000b3fc*/ ORR         IP, IP, LR 
    /*0000b400*/ TST         IP, #1 
    /*0000b404*/ BEQ         VGS_DRV_CheckRect_xb484
    VGS_DRV_CheckRect_xb408:
    /*0000b408*/ CMP         R7, #0 
    /*0000b40c*/ MOVEQ       R7, #1 
    /*0000b410*/ BNE         VGS_DRV_CheckRect_xb438
    VGS_DRV_CheckRect_xb414:
    /*0000b414*/ CMP         R4, R1 
    /*0000b418*/ CMPLS       LR, R2 
    /*0000b41c*/ BHI         VGS_DRV_CheckRect_xb438
    /*0000b420*/ CMP         R5, R2 
    /*0000b424*/ CMPLS       R6, R1 
    /*0000b428*/ BHI         VGS_DRV_CheckRect_xb438
    /*0000b42c*/ ADD         R3, R6, R4 
    /*0000b430*/ CMP         R1, R3 
    /*0000b434*/ BCS         VGS_DRV_CheckRect_xb4a8
    VGS_DRV_CheckRect_xb438:
    /*0000b438*/ STR         R2, [SP, #24] 
    /*0000b43c*/ MOV         R0, #141                    @ 0x8d 
    /*0000b440*/ STR         R1, [SP, #20] 
    /*0000b444*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .rodata+0x790] 
    /*0000b448*/ STR         R0, [SP] 
    /*0000b44c*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .rodata+0x790] 
    /*0000b450*/ STR         R5, [SP, #16] 
    /*0000b454*/ MOVW        R2, #0                      @ .LC8 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2bb0] 
    /*0000b458*/ STR         R6, [SP, #12] 
    /*0000b45c*/ MOVT        R2, #0                      @ .LC8 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2bb0] 
    /*0000b460*/ STR         LR, [SP, #8] 
    /*0000b464*/ MOV         R1, #45                     @ 0x2d 
    /*0000b468*/ STR         R4, [SP, #4] 
    /*0000b46c*/ MOV         R0, #3 
    /*0000b470*/ BL          0x000000000000B470          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000b474*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000b478*/ MOVT        R0, #41005                  @ 0xa02d 
    VGS_DRV_CheckRect_xb47c:
    /*0000b47c*/ ADD         SP, SP, #36                 @ 0x24 
    /*0000b480*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_CheckRect_xb484:
    /*0000b484*/ LDR         R0, [SP, #56]               @ 0x38 
    /*0000b488*/ CMP         R5, R0 
    /*0000b48c*/ CMPCS       R6, R3 
    /*0000b490*/ MOVCC       R0, #1 
    /*0000b494*/ MOVCS       R0, #0 
    /*0000b498*/ BCC         VGS_DRV_CheckRect_xb408
    /*0000b49c*/ CMP         R7, #0 
    /*0000b4a0*/ BNE         VGS_DRV_CheckRect_xb47c
    /*0000b4a4*/ B           VGS_DRV_CheckRect_xb414
    VGS_DRV_CheckRect_xb4a8:
    /*0000b4a8*/ ADD         R0, R5, LR 
    /*0000b4ac*/ CMP         R2, R0 
    /*0000b4b0*/ MOVCS       R0, R7 
    /*0000b4b4*/ ORRCC       R0, R7, #1 
    /*0000b4b8*/ CMP         R0, #0 
    /*0000b4bc*/ BNE         VGS_DRV_CheckRect_xb438
    /*0000b4c0*/ ADD         SP, SP, #36                 @ 0x24 
    /*0000b4c4*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_CheckRect_xb4c8:
    /*0000b4c8*/ MOV         R2, #120                    @ 0x78 
    /*0000b4cc*/ STR         LR, [SP, #8] 
    /*0000b4d0*/ STR         R2, [SP] 
    /*0000b4d4*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .rodata+0x790] 
    /*0000b4d8*/ STR         R4, [SP, #4] 
    /*0000b4dc*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .rodata+0x790] 
    /*0000b4e0*/ MOVW        R2, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b7c] 
    /*0000b4e4*/ MOV         R1, #45                     @ 0x2d 
    /*0000b4e8*/ MOVT        R2, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b7c] 
    /*0000b4ec*/ MOV         R0, #3 
    /*0000b4f0*/ BL          0x000000000000B4F0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000b4f4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000b4f8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000b4fc*/ B           VGS_DRV_CheckRect_xb47c
FUNC_END VGS_DRV_CheckRect


FUNC_BEGIN VGS_DRV_CheckImageAddressAttr
    /*0000b500*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000b504*/ SUB         SP, SP, #16 
    /*0000b508*/ LDR         R3, [R0, #20] 
    /*0000b50c*/ CMP         R3, #0 
    /*0000b510*/ BEQ         VGS_DRV_CheckImageAddressAttr_xb580
    /*0000b514*/ ADD         R1, R0, #72                 @ 0x48 
    /*0000b518*/ ADD         IP, R0, #32 
    /*0000b51c*/ MOV         R3, #16 
    /*0000b520*/ MOV         R2, #0 
    VGS_DRV_CheckImageAddressAttr_xb524:
    /*0000b524*/ LDRD        R4, [R1], #8 
    /*0000b528*/ MOV         R7, #0 
    /*0000b52c*/ ORRS        LR, R4, R5 
    /*0000b530*/ AND         R6, R4, #15 
    /*0000b534*/ BEQ         VGS_DRV_CheckImageAddressAttr_xb654
    /*0000b538*/ ORRS        LR, R6, R7 
    /*0000b53c*/ BNE         VGS_DRV_CheckImageAddressAttr_xb654
    /*0000b540*/ LDR         R4, [R0] 
    /*0000b544*/ LDR         LR, [IP], #4 
    /*0000b548*/ CMP         R4, #4096                   @ 0x1000 
    /*0000b54c*/ MOVHI       R3, #32 
    /*0000b550*/ CMP         R3, LR 
    /*0000b554*/ BNE         VGS_DRV_CheckImageAddressAttr_xb670
    /*0000b558*/ LDR         LR, [R0, #12] 
    /*0000b55c*/ ADD         R2, R2, #1 
    /*0000b560*/ CMP         LR, #39                     @ 0x27 
    /*0000b564*/ BEQ         VGS_DRV_CheckImageAddressAttr_xb68c
    /*0000b568*/ CMP         R2, #2 
    /*0000b56c*/ BNE         VGS_DRV_CheckImageAddressAttr_xb524
    /*0000b570*/ MOV         SL, #31 
    /*0000b574*/ MOV         R6, #15 
    /*0000b578*/ MOV         R7, #0 
    /*0000b57c*/ B           VGS_DRV_CheckImageAddressAttr_xb58c
    VGS_DRV_CheckImageAddressAttr_xb580:
    /*0000b580*/ MOV         SL, #15 
    /*0000b584*/ MOV         R6, #1 
    /*0000b588*/ MOV         R7, #0 
    VGS_DRV_CheckImageAddressAttr_xb58c:
    /*0000b58c*/ ADD         IP, R0, #120                @ 0x78 
    /*0000b590*/ ADD         LR, R0, #44                 @ 0x2c 
    /*0000b594*/ MOV         R2, #0 
    VGS_DRV_CheckImageAddressAttr_xb598:
    /*0000b598*/ LDRD        R4, [IP], #8 
    /*0000b59c*/ ORRS        R3, R4, R5 
    /*0000b5a0*/ AND         R8, R6, R4 
    /*0000b5a4*/ AND         R9, R7, R5 
    /*0000b5a8*/ BEQ         VGS_DRV_CheckImageAddressAttr_xb5ec
    /*0000b5ac*/ ORRS        R3, R8, R9 
    /*0000b5b0*/ BNE         VGS_DRV_CheckImageAddressAttr_xb5ec
    /*0000b5b4*/ LDR         R3, [LR], #4 
    /*0000b5b8*/ CMP         R3, #0 
    /*0000b5bc*/ BEQ         VGS_DRV_CheckImageAddressAttr_xb620
    /*0000b5c0*/ ANDS        R1, SL, R3 
    /*0000b5c4*/ BNE         VGS_DRV_CheckImageAddressAttr_xb620
    /*0000b5c8*/ LDR         R3, [R0, #12] 
    /*0000b5cc*/ ADD         R2, R2, #1 
    /*0000b5d0*/ CMP         R3, #39                     @ 0x27 
    /*0000b5d4*/ BEQ         VGS_DRV_CheckImageAddressAttr_xb5e0
    /*0000b5d8*/ CMP         R2, #2 
    /*0000b5dc*/ BNE         VGS_DRV_CheckImageAddressAttr_xb598
    VGS_DRV_CheckImageAddressAttr_xb5e0:
    /*0000b5e0*/ MOV         R0, R1 
    VGS_DRV_CheckImageAddressAttr_xb5e4:
    /*0000b5e4*/ ADD         SP, SP, #16 
    /*0000b5e8*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DRV_CheckImageAddressAttr_xb5ec:
    /*0000b5ec*/ STR         R2, [SP, #4] 
    /*0000b5f0*/ MOVW        R2, #0                      @ .LC11 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2c68] 
    /*0000b5f4*/ MOVT        R2, #0                      @ .LC11 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2c68] 
    /*0000b5f8*/ MOVW        R3, #3784                   @ 0xec8 
    /*0000b5fc*/ STRD        R4, [SP, #8] 
    /*0000b600*/ STR         R3, [SP] 
    VGS_DRV_CheckImageAddressAttr_xb604:
    /*0000b604*/ LDR         R3, [PC, #144]              @ 0x000000000000b69c 
    /*0000b608*/ MOV         R1, #45                     @ 0x2d 
    /*0000b60c*/ MOV         R0, #3 
    /*0000b610*/ BL          0x000000000000B610          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000b614*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000b618*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000b61c*/ B           VGS_DRV_CheckImageAddressAttr_xb5e4
    VGS_DRV_CheckImageAddressAttr_xb620:
    /*0000b620*/ STR         R2, [SP, #4] 
    /*0000b624*/ MOVW        R2, #0                      @ .LC12 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2c9c] 
    /*0000b628*/ MOVT        R2, #0                      @ .LC12 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2c9c] 
    /*0000b62c*/ STR         R3, [SP, #8] 
    /*0000b630*/ MOVW        R3, #3790                   @ 0xece 
    /*0000b634*/ STR         R3, [SP] 
    VGS_DRV_CheckImageAddressAttr_xb638:
    /*0000b638*/ LDR         R3, [PC, #92]               @ 0x000000000000b69c 
    /*0000b63c*/ MOV         R1, #45                     @ 0x2d 
    /*0000b640*/ MOV         R0, #3 
    /*0000b644*/ BL          0x000000000000B644          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000b648*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000b64c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000b650*/ B           VGS_DRV_CheckImageAddressAttr_xb5e4
    VGS_DRV_CheckImageAddressAttr_xb654:
    /*0000b654*/ MOVW        R3, #3750                   @ 0xea6 
    /*0000b658*/ STR         R2, [SP, #4] 
    /*0000b65c*/ STRD        R4, [SP, #8] 
    /*0000b660*/ MOVW        R2, #0                      @ .LC9 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2bf8] 
    /*0000b664*/ STR         R3, [SP] 
    /*0000b668*/ MOVT        R2, #0                      @ .LC9 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2bf8] 
    /*0000b66c*/ B           VGS_DRV_CheckImageAddressAttr_xb604
    VGS_DRV_CheckImageAddressAttr_xb670:
    /*0000b670*/ MOVW        R3, #3762                   @ 0xeb2 
    /*0000b674*/ STR         R2, [SP, #4] 
    /*0000b678*/ STR         LR, [SP, #8] 
    /*0000b67c*/ MOVW        R2, #0                      @ .LC10 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2c30] 
    /*0000b680*/ STR         R3, [SP] 
    /*0000b684*/ MOVT        R2, #0                      @ .LC10 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2c30] 
    /*0000b688*/ B           VGS_DRV_CheckImageAddressAttr_xb638
    VGS_DRV_CheckImageAddressAttr_xb68c:
    /*0000b68c*/ MOV         R6, #15 
    /*0000b690*/ MOV         R7, #0 
    /*0000b694*/ MOV         SL, #31 
    /*0000b698*/ B           VGS_DRV_CheckImageAddressAttr_xb58c
    /*0000b69c*/ ANDEQ       R0, R0, R4, LSR #15 
FUNC_END VGS_DRV_CheckImageAddressAttr


FUNC_BEGIN VGS_DRV_CheckImageCommonAttr
    /*0000b6a0*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000b6a4*/ SUB         SP, SP, #12 
    /*0000b6a8*/ LDR         R2, [R0, #12] 
    /*0000b6ac*/ SUB         R1, R2, #25 
    /*0000b6b0*/ CMP         R1, #14 
    /*0000b6b4*/ BLS         VGS_DRV_CheckImageCommonAttr_xb6f0
    VGS_DRV_CheckImageCommonAttr_xb6b8:
    /*0000b6b8*/ CMP         R2, #29 
    /*0000b6bc*/ CMPNE       R2, #26 
    /*0000b6c0*/ BNE         VGS_DRV_CheckImageCommonAttr_xb704
    VGS_DRV_CheckImageCommonAttr_xb6c4:
    /*0000b6c4*/ LDR         R3, [R0, #16] 
    /*0000b6c8*/ CMP         R3, #0 
    /*0000b6cc*/ BNE         VGS_DRV_CheckImageCommonAttr_xb74c
    /*0000b6d0*/ LDR         R3, [R0, #20] 
    /*0000b6d4*/ CMP         R3, #1 
    /*0000b6d8*/ BHI         VGS_DRV_CheckImageCommonAttr_xb734
    /*0000b6dc*/ LDR         R0, [R0, #24] 
    /*0000b6e0*/ CMP         R0, #0 
    /*0000b6e4*/ BNE         VGS_DRV_CheckImageCommonAttr_xb764
    VGS_DRV_CheckImageCommonAttr_xb6e8:
    /*0000b6e8*/ ADD         SP, SP, #12 
    /*0000b6ec*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DRV_CheckImageCommonAttr_xb6f0:
    /*0000b6f0*/ MOVW        R3, #16393                  @ 0x4009 
    /*0000b6f4*/ MVN         R3, R3, LSR R1 
    /*0000b6f8*/ TST         R3, #1 
    /*0000b6fc*/ BEQ         VGS_DRV_CheckImageCommonAttr_xb6c4
    /*0000b700*/ B           VGS_DRV_CheckImageCommonAttr_xb6b8
    VGS_DRV_CheckImageCommonAttr_xb704:
    /*0000b704*/ STR         R2, [SP, #4] 
    /*0000b708*/ MOVW        R2, #0                      @ .LC13 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2cd0] 
    /*0000b70c*/ MOVT        R2, #0                      @ .LC13 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2cd0] 
    /*0000b710*/ MOVW        R3, #3705                   @ 0xe79 
    /*0000b714*/ STR         R3, [SP] 
    VGS_DRV_CheckImageCommonAttr_xb718:
    /*0000b718*/ LDR         R3, [PC, #92]               @ 0x000000000000b77c 
    /*0000b71c*/ MOV         R1, #45                     @ 0x2d 
    /*0000b720*/ MOV         R0, #3 
    /*0000b724*/ BL          0x000000000000B724          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000b728*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000b72c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000b730*/ B           VGS_DRV_CheckImageCommonAttr_xb6e8
    VGS_DRV_CheckImageCommonAttr_xb734:
    /*0000b734*/ STR         R3, [SP, #4] 
    /*0000b738*/ MOVW        R2, #0                      @ .LC15 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2d38] 
    /*0000b73c*/ MOVW        R3, #3719                   @ 0xe87 
    /*0000b740*/ MOVT        R2, #0                      @ .LC15 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2d38] 
    /*0000b744*/ STR         R3, [SP] 
    /*0000b748*/ B           VGS_DRV_CheckImageCommonAttr_xb718
    VGS_DRV_CheckImageCommonAttr_xb74c:
    /*0000b74c*/ STR         R3, [SP, #4] 
    /*0000b750*/ MOVW        R2, #0                      @ .LC14 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2d04] 
    /*0000b754*/ MOV         R3, #3712                   @ 0xe80 
    /*0000b758*/ MOVT        R2, #0                      @ .LC14 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2d04] 
    /*0000b75c*/ STR         R3, [SP] 
    /*0000b760*/ B           VGS_DRV_CheckImageCommonAttr_xb718
    VGS_DRV_CheckImageCommonAttr_xb764:
    /*0000b764*/ MOVW        R3, #3726                   @ 0xe8e 
    /*0000b768*/ MOVW        R2, #0                      @ .LC16 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2d6c] 
    /*0000b76c*/ STR         R0, [SP, #4] 
    /*0000b770*/ MOVT        R2, #0                      @ .LC16 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2d6c] 
    /*0000b774*/ STR         R3, [SP] 
    /*0000b778*/ B           VGS_DRV_CheckImageCommonAttr_xb718
    /*0000b77c*/ ANDEQ       R0, R0, R4, ASR #15 
FUNC_END VGS_DRV_CheckImageCommonAttr


FUNC_BEGIN VGS_DRV_COMM_CheckTureFalse.part.0
    /*0000b780*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000b784*/ SUB         SP, SP, #20 
    /*0000b788*/ MOV         R3, #103                    @ 0x67 
    /*0000b78c*/ MOVW        R2, #0                      @ .LC17 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2da4] 
    /*0000b790*/ STR         R0, [SP, #8] 
    /*0000b794*/ MOVT        R2, #0                      @ .LC17 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2da4] 
    /*0000b798*/ STR         R1, [SP, #4] 
    /*0000b79c*/ MOV         R0, #3 
    /*0000b7a0*/ STR         R3, [SP] 
    /*0000b7a4*/ MOV         R1, #45                     @ 0x2d 
    /*0000b7a8*/ LDR         R3, [PC, #16]               @ 0x000000000000b7c0 
    /*0000b7ac*/ BL          0x000000000000B7AC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000b7b0*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000b7b4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000b7b8*/ ADD         SP, SP, #20 
    /*0000b7bc*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    /*0000b7c0*/ ANDEQ       R0, R0, R4, ROR #15 
FUNC_END VGS_DRV_COMM_CheckTureFalse.part.0


FUNC_BEGIN VGS_DRV_IsPixFmtSp420
    /*0000b7c4*/ CMP         R0, #29 
    /*0000b7c8*/ CMPNE       R0, #26 
    /*0000b7cc*/ MOVEQ       R0, #1 
    /*0000b7d0*/ MOVNE       R0, #0 
    /*0000b7d4*/ BX          LR 
FUNC_END VGS_DRV_IsPixFmtSp420


FUNC_BEGIN VGS_DRV_IsPixFmtSp422
    /*0000b7d8*/ CMP         R0, #28 
    /*0000b7dc*/ CMPNE       R0, #25 
    /*0000b7e0*/ MOVEQ       R0, #1 
    /*0000b7e4*/ MOVNE       R0, #0 
    /*0000b7e8*/ BX          LR 
FUNC_END VGS_DRV_IsPixFmtSp422


FUNC_BEGIN VGS_DRV_IsPixFmtInvert
    /*0000b7ec*/ SUB         R0, R0, #28 
    /*0000b7f0*/ SUB         R1, R1, #28 
    /*0000b7f4*/ CMP         R0, #1 
    /*0000b7f8*/ MOVHI       R0, #0 
    /*0000b7fc*/ MOVLS       R0, #1 
    /*0000b800*/ CMP         R1, #1 
    /*0000b804*/ EORLS       R0, R0, #1 
    /*0000b808*/ BX          LR 
FUNC_END VGS_DRV_IsPixFmtInvert


FUNC_BEGIN VGS_GetMinCoordinate
    /*0000b80c*/ CMP         R2, R3 
    /*0000b810*/ MOVLT       R3, R2 
    /*0000b814*/ CMP         R3, R1 
    /*0000b818*/ MOVGE       R3, R1 
    /*0000b81c*/ CMP         R3, R0 
    /*0000b820*/ MOVLT       R0, R3 
    /*0000b824*/ BX          LR 
FUNC_END VGS_GetMinCoordinate


FUNC_BEGIN VGS_GetMaxCoordinate
    /*0000b828*/ CMP         R2, R3 
    /*0000b82c*/ MOVGE       R3, R2 
    /*0000b830*/ CMP         R3, R1 
    /*0000b834*/ MOVLT       R3, R1 
    /*0000b838*/ CMP         R3, R0 
    /*0000b83c*/ MOVGE       R0, R3 
    /*0000b840*/ BX          LR 
FUNC_END VGS_GetMaxCoordinate


FUNC_BEGIN VGS_DRV_GenSclCfg
    /*0000b844*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000b848*/ SUB         SP, SP, #44                 @ 0x2c 
    /*0000b84c*/ MOV         R6, R1 
    /*0000b850*/ MOV         R8, R2 
    /*0000b854*/ LDR         R7, [SP, #80]               @ 0x50 
    /*0000b858*/ MOV         FP, R3 
    /*0000b85c*/ MOV         R5, R0 
    /*0000b860*/ MOV         R2, R0 
    /*0000b864*/ MOV         R3, #0 
    /*0000b868*/ LDR         R9, [SP, #88]               @ 0x58 
    /*0000b86c*/ LSL         R0, R7, #20 
    /*0000b870*/ LSR         R1, R7, #12 
    /*0000b874*/ LDR         SL, [SP, #84]               @ 0x54 
    /*0000b878*/ LDR         R4, [SP, #96]               @ 0x60 
    /*0000b87c*/ BL          0x000000000000B87C          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b880*/ MOV         R2, R7 
    /*0000b884*/ LSR         R1, R5, #12 
    /*0000b888*/ MOV         R3, #0 
    /*0000b88c*/ STR         R0, [SP, #4] 
    /*0000b890*/ LSL         R0, R5, #20 
    /*0000b894*/ BL          0x000000000000B894          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b898*/ MOV         R2, R8 
    /*0000b89c*/ LSR         R1, R9, #12 
    /*0000b8a0*/ MOV         R3, #0 
    /*0000b8a4*/ MOV         R5, R0 
    /*0000b8a8*/ LSL         R0, R9, #20 
    /*0000b8ac*/ BL          0x000000000000B8AC          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b8b0*/ MOV         R2, R9 
    /*0000b8b4*/ LSR         R1, R8, #12 
    /*0000b8b8*/ MOV         R3, #0 
    /*0000b8bc*/ MOV         R7, R0 
    /*0000b8c0*/ LSL         R0, R8, #20 
    /*0000b8c4*/ BL          0x000000000000B8C4          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b8c8*/ MOV         R2, R6 
    /*0000b8cc*/ LSR         R1, SL, #12 
    /*0000b8d0*/ MOV         R3, #0 
    /*0000b8d4*/ MOV         R8, R0 
    /*0000b8d8*/ LSL         R0, SL, #20 
    /*0000b8dc*/ BL          0x000000000000B8DC          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b8e0*/ MOV         R2, SL 
    /*0000b8e4*/ LSR         R1, R6, #12 
    /*0000b8e8*/ MOV         R3, #0 
    /*0000b8ec*/ MOV         R9, R0 
    /*0000b8f0*/ LSL         R0, R6, #20 
    /*0000b8f4*/ BL          0x000000000000B8F4          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b8f8*/ LDR         R3, [SP, #92]               @ 0x5c 
    /*0000b8fc*/ MOV         R2, FP 
    /*0000b900*/ LSR         R1, R3, #12 
    /*0000b904*/ MOV         R6, R0 
    /*0000b908*/ LSL         R0, R3, #20 
    /*0000b90c*/ MOV         R3, #0 
    /*0000b910*/ BL          0x000000000000B910          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b914*/ LSR         R1, FP, #12 
    /*0000b918*/ MOV         R3, #0 
    /*0000b91c*/ LDR         R2, [SP, #92]               @ 0x5c 
    /*0000b920*/ MOV         SL, R0 
    /*0000b924*/ LSL         R0, FP, #20 
    /*0000b928*/ BL          0x000000000000B928          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*0000b92c*/ LDR         R3, [SP, #100]              @ 0x64 
    /*0000b930*/ STR         R3, [SP, #28] 
    /*0000b934*/ LDR         R3, [SP, #108]              @ 0x6c 
    /*0000b938*/ MOV         FP, R0 
    /*0000b93c*/ CMP         R3, #6 
    /*0000b940*/ LDRLS       PC, [PC, R3, LSL #2] 
    /*0000b944*/ B           VGS_DRV_GenSclCfg_xb964
    /*0000b948*/ ANDEQ       FP, R0, R4, ROR #18 
    /*0000b94c*/ ANDEQ       FP, R0, R4, ROR #18 
    /*0000b950*/ STRDEQ      FP, [R0], -R4 
    /*0000b954*/ ANDEQ       FP, R0, R0, LSL #20 
    /*0000b958*/ ANDEQ       FP, R0, IP, LSL #20 
    /*0000b95c*/ ANDEQ       FP, R0, R8, ASR #19 
    /*0000b960*/ ANDEQ       FP, R0, R8, ROR #19 
    VGS_DRV_GenSclCfg_xb964:
    /*0000b964*/ MOV         R3, #0 
    /*0000b968*/ STR         R3, [SP, #36]               @ 0x24 
    VGS_DRV_GenSclCfg_xb96c:
    /*0000b96c*/ MOV         R3, #0 
    /*0000b970*/ STR         R3, [SP, #32] 
    /*0000b974*/ STR         R3, [SP, #24] 
    VGS_DRV_GenSclCfg_xb978:
    /*0000b978*/ LDR         R3, [SP, #4] 
    /*0000b97c*/ MOV         R0, #2 
    /*0000b980*/ STR         R7, [SP, #16] 
    /*0000b984*/ STR         R9, [SP, #12] 
    /*0000b988*/ STR         R3, [SP, #8] 
    /*0000b98c*/ STR         SL, [SP, #20] 
    /*0000b990*/ BL          0x000000000000B990          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000b994*/ MOV         R3, R4 
    /*0000b998*/ ADD         R2, SP, #8 
    /*0000b99c*/ ADD         R1, SP, #24 
    /*0000b9a0*/ LDR         R7, [R0, #84]               @ 0x54 
    /*0000b9a4*/ MOV         R0, #45                     @ 0x2d 
    /*0000b9a8*/ BLX         R7 
    /*0000b9ac*/ STR         R5, [R4, #64]               @ 0x40 
    /*0000b9b0*/ STR         R5, [R4, #80]               @ 0x50 
    /*0000b9b4*/ STR         R6, [R4, #84]               @ 0x54 
    /*0000b9b8*/ STR         R8, [R4, #88]               @ 0x58 
    /*0000b9bc*/ STR         FP, [R4, #92]               @ 0x5c 
    /*0000b9c0*/ ADD         SP, SP, #44                 @ 0x2c 
    /*0000b9c4*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    /*0000b9c8*/ MOV         R6, #2097152                @ 0x200000 
    /*0000b9cc*/ MOV         R3, #5 
    /*0000b9d0*/ MOV         R5, R6 
    /*0000b9d4*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000b9d8*/ MOV         R3, #0 
    /*0000b9dc*/ STR         R3, [SP, #32] 
    /*0000b9e0*/ STR         R3, [SP, #24] 
    /*0000b9e4*/ B           VGS_DRV_GenSclCfg_xb978
    /*0000b9e8*/ MOV         R3, #6 
    /*0000b9ec*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000b9f0*/ B           VGS_DRV_GenSclCfg_xb96c
    /*0000b9f4*/ MOV         R3, #2 
    /*0000b9f8*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000b9fc*/ B           VGS_DRV_GenSclCfg_xb96c
    /*0000ba00*/ MOV         R3, #3 
    /*0000ba04*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000ba08*/ B           VGS_DRV_GenSclCfg_xb96c
    /*0000ba0c*/ MOV         R3, #4 
    /*0000ba10*/ STR         R3, [SP, #36]               @ 0x24 
    /*0000ba14*/ B           VGS_DRV_GenSclCfg_xb96c
FUNC_END VGS_DRV_GenSclCfg


FUNC_BEGIN VGS_DRV_RequestIrq
    /*0000ba18*/ MOVW        R2, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .data+0x120] 
    /*0000ba1c*/ MOVT        R2, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .data+0x120] 
    /*0000ba20*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000ba24*/ SUB         SP, SP, #12 
    /*0000ba28*/ LDR         IP, [R2] 
    /*0000ba2c*/ MOV         R1, R0 
    /*0000ba30*/ STR         R0, [SP] 
    /*0000ba34*/ MOVW        R3, #0                      @ .LC18 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2df0] 
    /*0000ba38*/ MOV         R2, #0 
    /*0000ba3c*/ MOVT        R3, #0                      @ .LC18 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2df0] 
    /*0000ba40*/ MOV         R0, IP 
    /*0000ba44*/ BL          0x000000000000BA44          @ osal_request_irq [R_ARM_CALL: +0x0] 
    /*0000ba48*/ CMP         R0, #0 
    /*0000ba4c*/ BNE         VGS_DRV_RequestIrq_xba58
    VGS_DRV_RequestIrq_xba50:
    /*0000ba50*/ ADD         SP, SP, #12 
    /*0000ba54*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DRV_RequestIrq_xba58:
    /*0000ba58*/ MOV         R3, #356                    @ 0x164 
    /*0000ba5c*/ MOVW        R2, #0                      @ .LC19 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2df4] 
    /*0000ba60*/ STR         R3, [SP] 
    /*0000ba64*/ MOVT        R2, #0                      @ .LC19 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2df4] 
    /*0000ba68*/ LDR         R3, [PC, #16]               @ 0x000000000000ba80 
    /*0000ba6c*/ MOV         R1, #45                     @ 0x2d 
    /*0000ba70*/ MOV         R0, #0 
    /*0000ba74*/ BL          0x000000000000BA74          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ba78*/ MVN         R0, #0 
    /*0000ba7c*/ B           VGS_DRV_RequestIrq_xba50
    /*0000ba80*/ ANDEQ       R0, R0, R0, LSL #16 
FUNC_END VGS_DRV_RequestIrq


FUNC_BEGIN VGS_DRV_SetReg_GME
    /*0000ba84*/ LDR         IP, [R0] 
    /*0000ba88*/ ADDS        R2, R2, #2000               @ 0x7d0 
    /*0000ba8c*/ LDR         R1, [R1, #476]              @ 0x1dc 
    /*0000ba90*/ ADC         R3, R3, #0 
    /*0000ba94*/ ORR         IP, IP, #-2147483648        @ 0x80000000 
    /*0000ba98*/ STR         IP, [R0] 
    /*0000ba9c*/ LDR         IP, [R0, #1032]             @ 0x408 
    /*0000baa0*/ BFC         IP, #0, #1 
    /*0000baa4*/ STR         IP, [R0, #1032]             @ 0x408 
    /*0000baa8*/ STR         R2, [R0, #92]               @ 0x5c 
    /*0000baac*/ STR         R3, [R0, #96]               @ 0x60 
    /*0000bab0*/ LDR         R3, [R1] 
    /*0000bab4*/ STR         R3, [R0, #2000]             @ 0x7d0 
    /*0000bab8*/ LDR         R3, [R1, #4] 
    /*0000babc*/ STR         R3, [R0, #2004]             @ 0x7d4 
    /*0000bac0*/ LDR         R3, [R1, #8] 
    /*0000bac4*/ STR         R3, [R0, #2008]             @ 0x7d8 
    /*0000bac8*/ LDR         R3, [R1, #12] 
    /*0000bacc*/ STR         R3, [R0, #2012]             @ 0x7dc 
    /*0000bad0*/ LDR         R3, [R1, #16] 
    /*0000bad4*/ STR         R3, [R0, #2016]             @ 0x7e0 
    /*0000bad8*/ LDR         R3, [R1, #20] 
    /*0000badc*/ STR         R3, [R0, #2020]             @ 0x7e4 
    /*0000bae0*/ LDR         R3, [R1, #24] 
    /*0000bae4*/ STR         R3, [R0, #2024]             @ 0x7e8 
    /*0000bae8*/ LDR         R3, [R1, #28] 
    /*0000baec*/ STR         R3, [R0, #2028]             @ 0x7ec 
    /*0000baf0*/ LDR         R3, [R1, #32] 
    /*0000baf4*/ STR         R3, [R0, #2032]             @ 0x7f0 
    /*0000baf8*/ LDR         R3, [R1, #36]               @ 0x24 
    /*0000bafc*/ STR         R3, [R0, #2036]             @ 0x7f4 
    /*0000bb00*/ LDR         R3, [R1, #40]               @ 0x28 
    /*0000bb04*/ STR         R3, [R0, #2040]             @ 0x7f8 
    /*0000bb08*/ LDR         R3, [R1, #44]               @ 0x2c 
    /*0000bb0c*/ STR         R3, [R0, #2044]             @ 0x7fc 
    /*0000bb10*/ LDR         R3, [R1, #48]               @ 0x30 
    /*0000bb14*/ STR         R3, [R0, #2048]             @ 0x800 
    /*0000bb18*/ LDR         R3, [R1, #52]               @ 0x34 
    /*0000bb1c*/ STR         R3, [R0, #2052]             @ 0x804 
    /*0000bb20*/ LDR         R3, [R1, #56]               @ 0x38 
    /*0000bb24*/ STR         R3, [R0, #2056]             @ 0x808 
    /*0000bb28*/ LDR         R3, [R1, #60]               @ 0x3c 
    /*0000bb2c*/ STR         R3, [R0, #2060]             @ 0x80c 
    /*0000bb30*/ LDR         R3, [R1, #64]               @ 0x40 
    /*0000bb34*/ STR         R3, [R0, #2064]             @ 0x810 
    /*0000bb38*/ LDR         R3, [R1, #68]               @ 0x44 
    /*0000bb3c*/ STR         R3, [R0, #2068]             @ 0x814 
    /*0000bb40*/ LDR         R3, [R1, #72]               @ 0x48 
    /*0000bb44*/ STR         R3, [R0, #2072]             @ 0x818 
    /*0000bb48*/ LDR         R3, [R1, #76]               @ 0x4c 
    /*0000bb4c*/ STR         R3, [R0, #2076]             @ 0x81c 
    /*0000bb50*/ LDR         R3, [R1, #80]               @ 0x50 
    /*0000bb54*/ STR         R3, [R0, #2080]             @ 0x820 
    /*0000bb58*/ LDR         R3, [R1] 
    /*0000bb5c*/ STR         R3, [R0, #2000]             @ 0x7d0 
    /*0000bb60*/ LDR         R3, [R1, #84]               @ 0x54 
    /*0000bb64*/ STR         R3, [R0, #2084]             @ 0x824 
    /*0000bb68*/ LDR         R3, [R1, #88]               @ 0x58 
    /*0000bb6c*/ STR         R3, [R0, #2088]             @ 0x828 
    /*0000bb70*/ LDR         R3, [R1, #92]               @ 0x5c 
    /*0000bb74*/ STR         R3, [R0, #2092]             @ 0x82c 
    /*0000bb78*/ LDR         R3, [R1, #96]               @ 0x60 
    /*0000bb7c*/ STR         R3, [R0, #2096]             @ 0x830 
    /*0000bb80*/ LDR         R3, [R1, #100]              @ 0x64 
    /*0000bb84*/ STR         R3, [R0, #2100]             @ 0x834 
    /*0000bb88*/ LDR         R3, [R1, #104]              @ 0x68 
    /*0000bb8c*/ STR         R3, [R0, #2104]             @ 0x838 
    /*0000bb90*/ LDR         R3, [R1, #108]              @ 0x6c 
    /*0000bb94*/ STR         R3, [R0, #2108]             @ 0x83c 
    /*0000bb98*/ LDR         R3, [R1, #112]              @ 0x70 
    /*0000bb9c*/ STR         R3, [R0, #2112]             @ 0x840 
    /*0000bba0*/ LDR         R3, [R1, #116]              @ 0x74 
    /*0000bba4*/ STR         R3, [R0, #2116]             @ 0x844 
    /*0000bba8*/ LDR         R3, [R1, #120]              @ 0x78 
    /*0000bbac*/ STR         R3, [R0, #2120]             @ 0x848 
    /*0000bbb0*/ LDR         R3, [R1, #124]              @ 0x7c 
    /*0000bbb4*/ STR         R3, [R0, #2124]             @ 0x84c 
    /*0000bbb8*/ LDR         R3, [R1, #128]              @ 0x80 
    /*0000bbbc*/ STR         R3, [R0, #2128]             @ 0x850 
    /*0000bbc0*/ LDR         R3, [R1, #132]              @ 0x84 
    /*0000bbc4*/ STR         R3, [R0, #2132]             @ 0x854 
    /*0000bbc8*/ LDR         R3, [R1, #136]              @ 0x88 
    /*0000bbcc*/ STR         R3, [R0, #2136]             @ 0x858 
    /*0000bbd0*/ LDR         R3, [R1, #140]              @ 0x8c 
    /*0000bbd4*/ STR         R3, [R0, #2140]             @ 0x85c 
    /*0000bbd8*/ LDR         R3, [R1, #144]              @ 0x90 
    /*0000bbdc*/ STR         R3, [R0, #2144]             @ 0x860 
    /*0000bbe0*/ LDR         R3, [R1, #148]              @ 0x94 
    /*0000bbe4*/ STR         R3, [R0, #2148]             @ 0x864 
    /*0000bbe8*/ LDR         R3, [R1, #152]              @ 0x98 
    /*0000bbec*/ STR         R3, [R0, #2152]             @ 0x868 
    /*0000bbf0*/ LDR         R3, [R1, #156]              @ 0x9c 
    /*0000bbf4*/ STR         R3, [R0, #2156]             @ 0x86c 
    /*0000bbf8*/ LDR         R3, [R1, #160]              @ 0xa0 
    /*0000bbfc*/ STR         R3, [R0, #2160]             @ 0x870 
    /*0000bc00*/ LDR         R3, [R1, #164]              @ 0xa4 
    /*0000bc04*/ STR         R3, [R0, #2164]             @ 0x874 
    /*0000bc08*/ LDR         R3, [R1, #168]              @ 0xa8 
    /*0000bc0c*/ STR         R3, [R0, #2168]             @ 0x878 
    /*0000bc10*/ LDR         R3, [R1, #172]              @ 0xac 
    /*0000bc14*/ STR         R3, [R0, #2172]             @ 0x87c 
    /*0000bc18*/ LDR         R3, [R1, #176]              @ 0xb0 
    /*0000bc1c*/ STR         R3, [R0, #2176]             @ 0x880 
    /*0000bc20*/ LDR         R3, [R1, #180]              @ 0xb4 
    /*0000bc24*/ STR         R3, [R0, #2180]             @ 0x884 
    /*0000bc28*/ LDR         R3, [R1, #184]              @ 0xb8 
    /*0000bc2c*/ STR         R3, [R0, #2184]             @ 0x888 
    /*0000bc30*/ LDR         R3, [R1, #188]              @ 0xbc 
    /*0000bc34*/ STR         R3, [R0, #2188]             @ 0x88c 
    /*0000bc38*/ LDR         R3, [R1, #192]              @ 0xc0 
    /*0000bc3c*/ STR         R3, [R0, #2192]             @ 0x890 
    /*0000bc40*/ LDR         R3, [R1, #196]              @ 0xc4 
    /*0000bc44*/ STR         R3, [R0, #2196]             @ 0x894 
    /*0000bc48*/ LDR         R3, [R1, #200]              @ 0xc8 
    /*0000bc4c*/ STR         R3, [R0, #2200]             @ 0x898 
    /*0000bc50*/ LDR         R3, [R1, #204]              @ 0xcc 
    /*0000bc54*/ STR         R3, [R0, #2204]             @ 0x89c 
    /*0000bc58*/ LDR         R3, [R1, #208]              @ 0xd0 
    /*0000bc5c*/ STR         R3, [R0, #2208]             @ 0x8a0 
    /*0000bc60*/ BX          LR 
FUNC_END VGS_DRV_SetReg_GME


FUNC_BEGIN VGS_DRV_SetReg_ModuleCtrl
    /*0000bc64*/ PUSH        {R4, LR} 
    /*0000bc68*/ LDR         IP, [R1, #180]              @ 0xb4 
    /*0000bc6c*/ LDR         LR, [R1, #480]              @ 0x1e0 
    /*0000bc70*/ ADDS        IP, IP, #0 
    /*0000bc74*/ LDR         R3, [R0] 
    /*0000bc78*/ LDR         R4, [R1, #448]              @ 0x1c0 
    /*0000bc7c*/ MOVNE       IP, #1 
    /*0000bc80*/ CMP         LR, #0 
    /*0000bc84*/ BFC         R3, #31, #1 
    /*0000bc88*/ BFI         R3, LR, #20, #1 
    /*0000bc8c*/ MOVNE       IP, #0 
    /*0000bc90*/ CMP         IP, #0 
    /*0000bc94*/ LDR         LR, [R2, #152]              @ 0x98 
    /*0000bc98*/ BFIEQ       R3, IP, #19, #1 
    /*0000bc9c*/ ORRNE       R3, R3, #786432             @ 0xc0000 
    /*0000bca0*/ BFIEQ       R3, IP, #18, #1 
    /*0000bca4*/ LDR         IP, [R1, #432]              @ 0x1b0 
    /*0000bca8*/ BFC         R3, #17, #1 
    /*0000bcac*/ CMP         IP, #0 
    /*0000bcb0*/ BFC         R3, #16, #1 
    /*0000bcb4*/ LDRBNE      IP, [R1, #260]              @ 0x104 
    /*0000bcb8*/ CMP         LR, #0 
    /*0000bcbc*/ BFI         R3, IP, #14, #2 
    /*0000bcc0*/ LDR         IP, [R1, #452]              @ 0x1c4 
    /*0000bcc4*/ BFI         R3, R4, #12, #1 
    /*0000bcc8*/ BFI         R3, IP, #11, #1 
    /*0000bccc*/ LDR         IP, [R1, #264]              @ 0x108 
    /*0000bcd0*/ BFC         R3, #10, #1 
    /*0000bcd4*/ BFI         R3, IP, #9, #1 
    /*0000bcd8*/ BNE         VGS_DRV_SetReg_ModuleCtrl_xbe30
    /*0000bcdc*/ LDR         IP, [R1, #128]              @ 0x80 
    /*0000bce0*/ LDR         R4, [R1, #336]              @ 0x150 
    /*0000bce4*/ BFI         R3, IP, #8, #1 
    /*0000bce8*/ LDR         IP, [R1, #332]              @ 0x14c 
    /*0000bcec*/ BFI         R3, R4, #7, #1 
    /*0000bcf0*/ BFI         R3, LR, #6, #1 
    /*0000bcf4*/ AND         IP, IP, #1 
    /*0000bcf8*/ BFI         R3, LR, #5, #1 
    /*0000bcfc*/ BFI         R3, LR, #4, #1 
    /*0000bd00*/ BFI         R3, LR, #3, #1 
    VGS_DRV_SetReg_ModuleCtrl_xbd04:
    /*0000bd04*/ BFI         R3, IP, #2, #1 
    /*0000bd08*/ STR         R3, [R0] 
    /*0000bd0c*/ LDR         R3, [R2, #152]              @ 0x98 
    /*0000bd10*/ LDR         IP, [R0, #4] 
    /*0000bd14*/ CMP         R3, #0 
    /*0000bd18*/ LDRNE       R3, [R2, #104]              @ 0x68 
    /*0000bd1c*/ LDREQ       R2, [R1, #100]              @ 0x64 
    /*0000bd20*/ LDRNE       LR, [R2, #24] 
    /*0000bd24*/ ANDNE       R3, R3, #1 
    /*0000bd28*/ BFIEQ       IP, R2, #0, #1 
    /*0000bd2c*/ BFINE       IP, LR, #0, #1 
    /*0000bd30*/ BFI         IP, R3, #2, #1 
    /*0000bd34*/ STR         IP, [R0, #4] 
    /*0000bd38*/ LDR         R2, [R1] 
    /*0000bd3c*/ LDR         R3, [R0, #8] 
    /*0000bd40*/ LDR         R2, [R2, #12] 
    /*0000bd44*/ SUB         R2, R2, #8 
    /*0000bd48*/ CMP         R2, #31 
    /*0000bd4c*/ BLS         VGS_DRV_SetReg_ModuleCtrl_xbd80
    VGS_DRV_SetReg_ModuleCtrl_xbd50:
    /*0000bd50*/ LDR         R2, [R1, #444]              @ 0x1bc 
    /*0000bd54*/ CMP         R2, #1 
    /*0000bd58*/ BEQ         VGS_DRV_SetReg_ModuleCtrl_xbe5c
    /*0000bd5c*/ CMP         R2, #0 
    /*0000bd60*/ BNE         VGS_DRV_SetReg_ModuleCtrl_xbd78
    /*0000bd64*/ LDR         R2, [R1, #448]              @ 0x1c0 
    /*0000bd68*/ CMP         R2, #1 
    /*0000bd6c*/ MOVEQ       R2, #2 
    /*0000bd70*/ BFIEQ       R3, R2, #1, #2 
    /*0000bd74*/ BEQ         VGS_DRV_SetReg_ModuleCtrl_xbd98
    VGS_DRV_SetReg_ModuleCtrl_xbd78:
    /*0000bd78*/ BFC         R3, #1, #2 
    /*0000bd7c*/ B           VGS_DRV_SetReg_ModuleCtrl_xbd98
    VGS_DRV_SetReg_ModuleCtrl_xbd80:
    /*0000bd80*/ MOV         IP, #-2147483621            @ 0x8000001b 
    /*0000bd84*/ MVN         R2, IP, LSR R2 
    /*0000bd88*/ TST         R2, #1 
    /*0000bd8c*/ BNE         VGS_DRV_SetReg_ModuleCtrl_xbd50
    VGS_DRV_SetReg_ModuleCtrl_xbd90:
    /*0000bd90*/ MOV         R2, #1 
    /*0000bd94*/ BFI         R3, R2, #1, #2 
    VGS_DRV_SetReg_ModuleCtrl_xbd98:
    /*0000bd98*/ LDR         IP, [R1, #324]              @ 0x144 
    /*0000bd9c*/ BFC         R3, #8, #2 
    /*0000bda0*/ LDR         R2, [R1, #328]              @ 0x148 
    /*0000bda4*/ ADDS        IP, IP, #0 
    /*0000bda8*/ MOVNE       IP, #1 
    /*0000bdac*/ ADDS        R2, R2, #0 
    /*0000bdb0*/ BFI         R3, IP, #10, #1 
    /*0000bdb4*/ BFC         R3, #5, #2 
    /*0000bdb8*/ MOVNE       R2, #1 
    /*0000bdbc*/ BFI         R3, R2, #7, #1 
    /*0000bdc0*/ STR         R3, [R0, #8] 
    /*0000bdc4*/ LDR         R2, [R1, #208]              @ 0xd0 
    /*0000bdc8*/ LDR         R3, [R0, #1024]             @ 0x400 
    /*0000bdcc*/ CMP         R2, #9 
    /*0000bdd0*/ MOVEQ       R2, #2 
    /*0000bdd4*/ BFIEQ       R3, R2, #21, #2 
    /*0000bdd8*/ BFIEQ       R3, R2, #23, #2 
    /*0000bddc*/ BEQ         VGS_DRV_SetReg_ModuleCtrl_xbdf8
    /*0000bde0*/ CMP         R2, #8 
    /*0000bde4*/ BFCNE       R3, #21, #2 
    /*0000bde8*/ MOVEQ       R2, #1 
    /*0000bdec*/ BFIEQ       R3, R2, #21, #2 
    /*0000bdf0*/ BFIEQ       R3, R2, #23, #2 
    /*0000bdf4*/ BFCNE       R3, #23, #2 
    VGS_DRV_SetReg_ModuleCtrl_xbdf8:
    /*0000bdf8*/ LDR         R2, [R1] 
    /*0000bdfc*/ LDR         R1, [R1, #480]              @ 0x1e0 
    /*0000be00*/ LDR         R2, [R2, #12] 
    /*0000be04*/ CMP         R2, #28 
    /*0000be08*/ CMPNE       R2, #25 
    /*0000be0c*/ MOVEQ       R2, #1 
    /*0000be10*/ MOVNE       R2, #0 
    /*0000be14*/ CMP         R1, #0 
    /*0000be18*/ BFI         R3, R2, #15, #6 
    /*0000be1c*/ ORRNE       R3, R3, #6291456            @ 0x600000 
    /*0000be20*/ MOVNE       R2, #6 
    /*0000be24*/ BFINE       R3, R2, #15, #6 
    /*0000be28*/ STR         R3, [R0, #1024]             @ 0x400 
    /*0000be2c*/ POP         {R4, PC} 
    VGS_DRV_SetReg_ModuleCtrl_xbe30:
    /*0000be30*/ LDR         IP, [R2, #36]               @ 0x24 
    /*0000be34*/ LDR         LR, [R1, #336]              @ 0x150 
    /*0000be38*/ BFI         R3, IP, #8, #1 
    /*0000be3c*/ LDR         IP, [R2, #80]               @ 0x50 
    /*0000be40*/ BFI         R3, LR, #7, #1 
    /*0000be44*/ BFC         R3, #6, #1 
    /*0000be48*/ AND         IP, IP, #1 
    /*0000be4c*/ BFC         R3, #5, #1 
    /*0000be50*/ BFC         R3, #4, #1 
    /*0000be54*/ BFC         R3, #3, #1 
    /*0000be58*/ B           VGS_DRV_SetReg_ModuleCtrl_xbd04
    VGS_DRV_SetReg_ModuleCtrl_xbe5c:
    /*0000be5c*/ LDR         R2, [R1, #448]              @ 0x1c0 
    /*0000be60*/ CMP         R2, #1 
    /*0000be64*/ BEQ         VGS_DRV_SetReg_ModuleCtrl_xbd90
    /*0000be68*/ BFC         R3, #1, #2 
    /*0000be6c*/ B           VGS_DRV_SetReg_ModuleCtrl_xbd98
FUNC_END VGS_DRV_SetReg_ModuleCtrl


FUNC_BEGIN VGS_DRV_SetReg_CurImg
    /*0000be70*/ LDR         IP, [R1, #480]              @ 0x1e0 
    /*0000be74*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000be78*/ CMP         IP, #0 
    /*0000be7c*/ LDR         R3, [R0, #1028]             @ 0x404 
    /*0000be80*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000be84*/ BEQ         VGS_DRV_SetReg_CurImg_xbfd8
    /*0000be88*/ CMP         IP, #0 
    /*0000be8c*/ LDR         LR, [R1, #60]               @ 0x3c 
    /*0000be90*/ LDREQ       IP, [R1, #56]               @ 0x38 
    /*0000be94*/ LDRNE       IP, [R2, #4] 
    /*0000be98*/ LSREQ       IP, IP, #1 
    /*0000be9c*/ SUB         IP, IP, #1 
    /*0000bea0*/ UXTH        IP, IP 
    /*0000bea4*/ BFI         R3, IP, #0, #16 
    /*0000bea8*/ LSR         IP, LR, #1 
    /*0000beac*/ SUB         IP, IP, #1 
    /*0000beb0*/ BFI         R3, IP, #16, #16 
    VGS_DRV_SetReg_CurImg_xbeb4:
    /*0000beb4*/ STR         R3, [R0, #1028]             @ 0x404 
    /*0000beb8*/ LDR         LR, [R1] 
    /*0000bebc*/ LDR         R3, [R0, #1032]             @ 0x408 
    /*0000bec0*/ LDR         IP, [LR, #20] 
    /*0000bec4*/ LDR         LR, [LR, #32] 
    /*0000bec8*/ ADDS        IP, IP, #0 
    /*0000becc*/ MOVNE       IP, #1 
    /*0000bed0*/ CMP         LR, #64                     @ 0x40 
    /*0000bed4*/ BFI         R3, IP, #0, #1 
    /*0000bed8*/ ORR         R3, R3, #512                @ 0x200 
    /*0000bedc*/ MOVEQ       IP, #2 
    /*0000bee0*/ BFIEQ       R3, IP, #21, #2 
    /*0000bee4*/ BFIEQ       R3, IP, #23, #2 
    /*0000bee8*/ BEQ         VGS_DRV_SetReg_CurImg_xbf04
    /*0000beec*/ CMP         LR, #32 
    /*0000bef0*/ BFCNE       R3, #21, #2 
    /*0000bef4*/ MOVEQ       IP, #1 
    /*0000bef8*/ BFIEQ       R3, IP, #21, #2 
    /*0000befc*/ BFIEQ       R3, IP, #23, #2 
    /*0000bf00*/ BFCNE       R3, #23, #2 
    VGS_DRV_SetReg_CurImg_xbf04:
    /*0000bf04*/ BFC         R3, #1, #1 
    /*0000bf08*/ LDR         IP, [R1, #468]              @ 0x1d4 
    /*0000bf0c*/ BFC         R3, #4, #1 
    /*0000bf10*/ BFC         R3, #8, #1 
    /*0000bf14*/ ORR         R3, R3, #-2147483648        @ 0x80000000 
    /*0000bf18*/ BFI         R3, IP, #5, #3 
    /*0000bf1c*/ BFC         R3, #25, #1 
    /*0000bf20*/ STR         R3, [R0, #1032]             @ 0x408 
    /*0000bf24*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000bf28*/ LDR         R3, [R0, #1040]             @ 0x410 
    /*0000bf2c*/ CMP         IP, #0 
    /*0000bf30*/ LDR         IP, [R1, #68]               @ 0x44 
    /*0000bf34*/ LDRHEQ      LR, [R1, #64]               @ 0x40 
    /*0000bf38*/ LDRHNE      LR, [R2, #12] 
    /*0000bf3c*/ BFI         R3, LR, #0, #16 
    /*0000bf40*/ BFI         R3, IP, #16, #16 
    /*0000bf44*/ STR         R3, [R0, #1040]             @ 0x410 
    /*0000bf48*/ LDR         R3, [R1, #464]              @ 0x1d0 
    /*0000bf4c*/ CMP         R3, #1 
    /*0000bf50*/ BEQ         VGS_DRV_SetReg_CurImg_xc000
    /*0000bf54*/ LDR         R3, [R1, #40]               @ 0x28 
    /*0000bf58*/ STR         R3, [R0, #1044]             @ 0x414 
    /*0000bf5c*/ LDR         R3, [R1, #48]               @ 0x30 
    /*0000bf60*/ STR         R3, [R0, #1052]             @ 0x41c 
    /*0000bf64*/ LDR         R3, [R1, #24] 
    /*0000bf68*/ STR         R3, [R0, #1124]             @ 0x464 
    /*0000bf6c*/ LDR         R3, [R1, #480]              @ 0x1e0 
    /*0000bf70*/ CMP         R3, #0 
    /*0000bf74*/ BEQ         VGS_DRV_SetReg_CurImg_xbf9c
    /*0000bf78*/ LDR         R3, [R2, #148]              @ 0x94 
    /*0000bf7c*/ CMP         R3, #1 
    /*0000bf80*/ BEQ         VGS_DRV_SetReg_CurImg_xbf9c
    /*0000bf84*/ LDR         IP, [R2, #12] 
    /*0000bf88*/ LDRD        R2, [R1, #32] 
    /*0000bf8c*/ LSL         IP, IP, #1 
    /*0000bf90*/ ADDS        R2, R2, IP 
    /*0000bf94*/ STR         R2, [R0, #1132]             @ 0x46c 
    /*0000bf98*/ B           VGS_DRV_SetReg_CurImg_xbfa4
    VGS_DRV_SetReg_CurImg_xbf9c:
    /*0000bf9c*/ LDR         R3, [R1, #32] 
    /*0000bfa0*/ STR         R3, [R0, #1132]             @ 0x46c 
    VGS_DRV_SetReg_CurImg_xbfa4:
    /*0000bfa4*/ LDR         R2, [R1] 
    /*0000bfa8*/ LDR         R3, [R0, #1140]             @ 0x474 
    /*0000bfac*/ LDR         IP, [R2, #44]               @ 0x2c 
    /*0000bfb0*/ LDR         R2, [R2, #48]               @ 0x30 
    /*0000bfb4*/ BFI         R3, IP, #0, #16 
    /*0000bfb8*/ BFI         R3, R2, #16, #16 
    /*0000bfbc*/ STR         R3, [R0, #1140]             @ 0x474 
    /*0000bfc0*/ LDR         R2, [R1] 
    /*0000bfc4*/ LDR         R3, [R0, #1060]             @ 0x424 
    /*0000bfc8*/ LDR         R2, [R2, #32] 
    /*0000bfcc*/ BFI         R3, R2, #0, #10 
    /*0000bfd0*/ STR         R3, [R0, #1060]             @ 0x424 
    /*0000bfd4*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DRV_SetReg_CurImg_xbfd8:
    /*0000bfd8*/ CMP         IP, #0 
    /*0000bfdc*/ LDR         LR, [R1, #60]               @ 0x3c 
    /*0000bfe0*/ LDREQ       IP, [R1, #56]               @ 0x38 
    /*0000bfe4*/ LDRNE       IP, [R2, #4] 
    /*0000bfe8*/ SUB         IP, IP, #1 
    /*0000bfec*/ UXTH        IP, IP 
    /*0000bff0*/ BFI         R3, IP, #0, #16 
    /*0000bff4*/ SUB         IP, LR, #1 
    /*0000bff8*/ BFI         R3, IP, #16, #16 
    /*0000bffc*/ B           VGS_DRV_SetReg_CurImg_xbeb4
    VGS_DRV_SetReg_CurImg_xc000:
    /*0000c000*/ LDR         R3, [R1] 
    /*0000c004*/ LDR         R3, [R3, #72]               @ 0x48 
    /*0000c008*/ STR         R3, [R0, #1044]             @ 0x414 
    /*0000c00c*/ LDR         R3, [R1] 
    /*0000c010*/ LDR         R3, [R3, #80]               @ 0x50 
    /*0000c014*/ STR         R3, [R0, #1052]             @ 0x41c 
    /*0000c018*/ LDR         R3, [R1] 
    /*0000c01c*/ LDR         R3, [R3, #120]              @ 0x78 
    /*0000c020*/ STR         R3, [R0, #1124]             @ 0x464 
    /*0000c024*/ LDR         R3, [R1] 
    /*0000c028*/ LDR         R3, [R3, #128]              @ 0x80 
    /*0000c02c*/ STR         R3, [R0, #1132]             @ 0x46c 
    /*0000c030*/ B           VGS_DRV_SetReg_CurImg_xbfa4
FUNC_END VGS_DRV_SetReg_CurImg


FUNC_BEGIN VGS_DRV_SetReg_CROP
    /*0000c034*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000c038*/ LDR         IP, [R1, #100]              @ 0x64 
    /*0000c03c*/ LDR         R3, [R0, #260]              @ 0x104 
    /*0000c040*/ CMP         IP, #1 
    /*0000c044*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c048*/ BEQ         VGS_DRV_SetReg_CROP_xc140
    /*0000c04c*/ CMP         IP, #0 
    /*0000c050*/ LDRNE       IP, [R2, #28] 
    /*0000c054*/ BFI         R3, IP, #0, #16 
    /*0000c058*/ BFC         R3, #16, #16 
    VGS_DRV_SetReg_CROP_xc05c:
    /*0000c05c*/ STR         R3, [R0, #260]              @ 0x104 
    /*0000c060*/ LDR         IP, [R1, #100]              @ 0x64 
    /*0000c064*/ LDR         R3, [R0, #256]              @ 0x100 
    /*0000c068*/ CMP         IP, #1 
    /*0000c06c*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c070*/ BEQ         VGS_DRV_SetReg_CROP_xc118
    /*0000c074*/ CMP         IP, #0 
    /*0000c078*/ BFIEQ       R3, IP, #0, #16 
    /*0000c07c*/ BFIEQ       R3, IP, #16, #16 
    /*0000c080*/ BEQ         VGS_DRV_SetReg_CROP_xc0b0
    /*0000c084*/ LDR         LR, [R1, #96]               @ 0x60 
    /*0000c088*/ LDR         IP, [R2, #32] 
    /*0000c08c*/ CMP         LR, #0 
    /*0000c090*/ SUB         IP, IP, #1 
    /*0000c094*/ BFI         R3, IP, #0, #16 
    /*0000c098*/ LDREQ       IP, [R1] 
    /*0000c09c*/ LDRNE       IP, [R1, #116]              @ 0x74 
    /*0000c0a0*/ LDREQ       IP, [IP, #4] 
    /*0000c0a4*/ SUB         IP, IP, #1 
    /*0000c0a8*/ UXTH        IP, IP 
    /*0000c0ac*/ BFI         R3, IP, #16, #16 
    VGS_DRV_SetReg_CROP_xc0b0:
    /*0000c0b0*/ STR         R3, [R0, #256]              @ 0x100 
    /*0000c0b4*/ LDR         R3, [R2, #152]              @ 0x98 
    /*0000c0b8*/ LDR         IP, [R0, #272]              @ 0x110 
    /*0000c0bc*/ CMP         R3, #0 
    /*0000c0c0*/ LDRNE       R3, [R1, #92]               @ 0x5c 
    /*0000c0c4*/ LDREQ       R3, [R1, #116]              @ 0x74 
    /*0000c0c8*/ LDRNE       LR, [R2, #112]              @ 0x70 
    /*0000c0cc*/ LDREQ       LR, [R1, #112]              @ 0x70 
    /*0000c0d0*/ SUB         R3, R3, #1 
    /*0000c0d4*/ SUB         LR, LR, #1 
    /*0000c0d8*/ UXTH        R3, R3 
    /*0000c0dc*/ BFI         IP, LR, #0, #16 
    /*0000c0e0*/ BFI         IP, R3, #16, #16 
    /*0000c0e4*/ STR         IP, [R0, #272]              @ 0x110 
    /*0000c0e8*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c0ec*/ LDR         R3, [R0, #276]              @ 0x114 
    /*0000c0f0*/ CMP         IP, #0 
    /*0000c0f4*/ LDRNE       R1, [R2, #108]              @ 0x6c 
    /*0000c0f8*/ MOVNE       R2, #0 
    /*0000c0fc*/ LDREQ       IP, [R1, #104]              @ 0x68 
    /*0000c100*/ LDRHEQ      R2, [R1, #108]              @ 0x6c 
    /*0000c104*/ BFINE       R3, R1, #0, #16 
    /*0000c108*/ BFIEQ       R3, IP, #0, #16 
    /*0000c10c*/ BFI         R3, R2, #16, #16 
    /*0000c110*/ STR         R3, [R0, #276]              @ 0x114 
    /*0000c114*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DRV_SetReg_CROP_xc118:
    /*0000c118*/ CMP         IP, #0 
    /*0000c11c*/ LDR         LR, [R1, #116]              @ 0x74 
    /*0000c120*/ LDREQ       IP, [R1, #112]              @ 0x70 
    /*0000c124*/ LDRNE       IP, [R2, #32] 
    /*0000c128*/ SUB         IP, IP, #1 
    /*0000c12c*/ UXTH        IP, IP 
    /*0000c130*/ BFI         R3, IP, #0, #16 
    /*0000c134*/ SUB         IP, LR, #1 
    /*0000c138*/ BFI         R3, IP, #16, #16 
    /*0000c13c*/ B           VGS_DRV_SetReg_CROP_xc0b0
    VGS_DRV_SetReg_CROP_xc140:
    /*0000c140*/ CMP         IP, #0 
    /*0000c144*/ LDR         IP, [R1, #108]              @ 0x6c 
    /*0000c148*/ LDRHEQ      LR, [R1, #104]              @ 0x68 
    /*0000c14c*/ LDRHNE      LR, [R2, #28] 
    /*0000c150*/ BFI         R3, LR, #0, #16 
    /*0000c154*/ BFI         R3, IP, #16, #16 
    /*0000c158*/ B           VGS_DRV_SetReg_CROP_xc05c
FUNC_END VGS_DRV_SetReg_CROP


FUNC_BEGIN VGS_DRV_SetReg_CUS_CDS
    /*0000c15c*/ LDR         R2, [R1, #480]              @ 0x1e0 
    /*0000c160*/ LDR         R3, [R1] 
    /*0000c164*/ CMP         R2, #0 
    /*0000c168*/ LDR         R2, [R0, #1888]             @ 0x760 
    /*0000c16c*/ LDR         R3, [R3, #12] 
    /*0000c170*/ BFCNE       R2, #1, #1 
    /*0000c174*/ BNE         VGS_DRV_SetReg_CUS_CDS_xc198
    /*0000c178*/ CMP         R3, #39                     @ 0x27 
    /*0000c17c*/ MOVEQ       IP, #1 
    /*0000c180*/ BEQ         VGS_DRV_SetReg_CUS_CDS_xc194
    /*0000c184*/ CMP         R3, #26 
    /*0000c188*/ CMPNE       R3, #29 
    /*0000c18c*/ MOVEQ       IP, #1 
    /*0000c190*/ MOVNE       IP, #0 
    VGS_DRV_SetReg_CUS_CDS_xc194:
    /*0000c194*/ BFI         R2, IP, #1, #1 
    VGS_DRV_SetReg_CUS_CDS_xc198:
    /*0000c198*/ STR         R2, [R0, #1888]             @ 0x760 
    /*0000c19c*/ LDR         R1, [R1, #480]              @ 0x1e0 
    /*0000c1a0*/ LDR         R2, [R0, #1892]             @ 0x764 
    /*0000c1a4*/ CMP         R1, #0 
    /*0000c1a8*/ BFCNE       R2, #1, #1 
    /*0000c1ac*/ BNE         VGS_DRV_SetReg_CUS_CDS_xc1d0
    /*0000c1b0*/ CMP         R3, #39                     @ 0x27 
    /*0000c1b4*/ MOVEQ       R3, #1 
    /*0000c1b8*/ BEQ         VGS_DRV_SetReg_CUS_CDS_xc1cc
    /*0000c1bc*/ CMP         R3, #29 
    /*0000c1c0*/ CMPNE       R3, #26 
    /*0000c1c4*/ MOVEQ       R3, #1 
    /*0000c1c8*/ MOVNE       R3, #0 
    VGS_DRV_SetReg_CUS_CDS_xc1cc:
    /*0000c1cc*/ BFI         R2, R3, #1, #1 
    VGS_DRV_SetReg_CUS_CDS_xc1d0:
    /*0000c1d0*/ STR         R2, [R0, #1892]             @ 0x764 
    /*0000c1d4*/ BX          LR 
FUNC_END VGS_DRV_SetReg_CUS_CDS


FUNC_BEGIN VGS_DRV_SetReg_OSD
    /*0000c1d8*/ PUSH        {R4, R5, LR} 
    /*0000c1dc*/ LDRD        R4, [SP, #12] 
    /*0000c1e0*/ ADDS        R4, R4, #1808               @ 0x710 
    /*0000c1e4*/ STR         R4, [R0, #68]               @ 0x44 
    /*0000c1e8*/ ADC         R5, R5, #0 
    /*0000c1ec*/ STR         R5, [R0, #72]               @ 0x48 
    /*0000c1f0*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c1f4*/ LDR         R3, [R0, #1808]             @ 0x710 
    /*0000c1f8*/ CMP         IP, #0 
    /*0000c1fc*/ LDRB        IP, [R1, #196]              @ 0xc4 
    /*0000c200*/ BFI         R3, IP, #0, #8 
    /*0000c204*/ LDREQ       IP, [R1, #192]              @ 0xc0 
    /*0000c208*/ LDRNE       IP, [R2, #68]               @ 0x44 
    /*0000c20c*/ AND         IP, IP, #1 
    /*0000c210*/ BFI         R3, IP, #31, #1 
    /*0000c214*/ STR         R3, [R0, #1808]             @ 0x710 
    /*0000c218*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c21c*/ LDR         R3, [R0, #1812]             @ 0x714 
    /*0000c220*/ CMP         IP, #0 
    /*0000c224*/ LDR         IP, [R1, #228]              @ 0xe4 
    /*0000c228*/ LDRHEQ      LR, [R1, #224]              @ 0xe0 
    /*0000c22c*/ LDRHNE      LR, [R2, #72]               @ 0x48 
    /*0000c230*/ BFI         R3, LR, #0, #16 
    /*0000c234*/ BFI         R3, IP, #16, #16 
    /*0000c238*/ STR         R3, [R0, #1812]             @ 0x714 
    /*0000c23c*/ LDR         IP, [R1, #192]              @ 0xc0 
    /*0000c240*/ LDR         R3, [R0, #1304]             @ 0x518 
    /*0000c244*/ CMP         IP, #1 
    /*0000c248*/ BFCNE       R3, #0, #16 
    /*0000c24c*/ BFCNE       R3, #16, #16 
    /*0000c250*/ BEQ         VGS_DRV_SetReg_OSD_xc2d8
    VGS_DRV_SetReg_OSD_xc254:
    /*0000c254*/ STR         R3, [R0, #1304]             @ 0x518 
    /*0000c258*/ LDR         IP, [R1, #192]              @ 0xc0 
    /*0000c25c*/ LDR         R3, [R0, #1308]             @ 0x51c 
    /*0000c260*/ CMP         IP, #1 
    /*0000c264*/ BFCNE       R3, #0, #8 
    /*0000c268*/ LDRBEQ      LR, [R1, #220]              @ 0xdc 
    /*0000c26c*/ ORRNE       R3, R3, #65280              @ 0xff00 
    /*0000c270*/ LDRBEQ      IP, [R1, #221]              @ 0xdd 
    /*0000c274*/ BFIEQ       R3, LR, #0, #8 
    /*0000c278*/ BFIEQ       R3, IP, #8, #8 
    /*0000c27c*/ ORR         R3, R3, #65536              @ 0x10000 
    /*0000c280*/ BFC         R3, #17, #2 
    /*0000c284*/ BFC         R3, #20, #1 
    /*0000c288*/ BFC         R3, #19, #1 
    /*0000c28c*/ STR         R3, [R0, #1308]             @ 0x51c 
    /*0000c290*/ LDR         R3, [R2, #152]              @ 0x98 
    /*0000c294*/ CMP         R3, #0 
    /*0000c298*/ LDRNE       R3, [R2, #64]               @ 0x40 
    /*0000c29c*/ LDREQ       R3, [R1, #200]              @ 0xc8 
    /*0000c2a0*/ STR         R3, [R0, #1312]             @ 0x520 
    /*0000c2a4*/ LDR         R2, [R1, #192]              @ 0xc0 
    /*0000c2a8*/ LDR         R3, [R0, #1320]             @ 0x528 
    /*0000c2ac*/ CMP         R2, #1 
    /*0000c2b0*/ BFCNE       R3, #0, #16 
    /*0000c2b4*/ LDREQ       R2, [R1, #212]              @ 0xd4 
    /*0000c2b8*/ BFIEQ       R3, R2, #0, #16 
    /*0000c2bc*/ STR         R3, [R0, #1320]             @ 0x528 
    /*0000c2c0*/ LDR         R3, [R0, #1324]             @ 0x52c 
    /*0000c2c4*/ BFC         R3, #9, #1 
    /*0000c2c8*/ BFC         R3, #8, #1 
    /*0000c2cc*/ BFC         R3, #0, #8 
    /*0000c2d0*/ STR         R3, [R0, #1324]             @ 0x52c 
    /*0000c2d4*/ POP         {R4, R5, PC} 
    VGS_DRV_SetReg_OSD_xc2d8:
    /*0000c2d8*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c2dc*/ LDR         LR, [R1, #236]              @ 0xec 
    /*0000c2e0*/ CMP         IP, #0 
    /*0000c2e4*/ LDREQ       IP, [R1, #232]              @ 0xe8 
    /*0000c2e8*/ LDRNE       IP, [R2, #76]               @ 0x4c 
    /*0000c2ec*/ SUB         IP, IP, #1 
    /*0000c2f0*/ UXTH        IP, IP 
    /*0000c2f4*/ BFI         R3, IP, #0, #16 
    /*0000c2f8*/ SUB         IP, LR, #1 
    /*0000c2fc*/ BFI         R3, IP, #16, #16 
    /*0000c300*/ B           VGS_DRV_SetReg_OSD_xc254
FUNC_END VGS_DRV_SetReg_OSD


FUNC_BEGIN VGS_DRV_SetReg_FPD
    /*0000c304*/ ADDS        R2, R2, #1888               @ 0x760 
    /*0000c308*/ STR         R2, [R0, #84]               @ 0x54 
    /*0000c30c*/ PUSH        {R4, R5, R6, LR} 
    /*0000c310*/ ADC         R3, R3, #0 
    /*0000c314*/ STR         R3, [R0, #88]               @ 0x58 
    /*0000c318*/ ADD         R4, R1, #360                @ 0x168 
    /*0000c31c*/ LDR         R3, [R1, #344]              @ 0x158 
    /*0000c320*/ MOVW        R5, #362                    @ 0x16a 
    /*0000c324*/ ADD         IP, R1, #364                @ 0x16c 
    /*0000c328*/ ADD         LR, R1, #372                @ 0x174 
    /*0000c32c*/ MOVW        R2, #426                    @ 0x1aa 
    /*0000c330*/ STR         R3, [R0, #1404]             @ 0x57c 
    /*0000c334*/ LDR         R3, [R0, #1908]             @ 0x774 
    /*0000c338*/ LDRH        R5, [R1, R5] 
    /*0000c33c*/ LDRH        R4, [R4] 
    /*0000c340*/ LDRH        IP, [IP] 
    /*0000c344*/ BFI         R3, R5, #0, #4 
    /*0000c348*/ BFI         R3, R4, #8, #4 
    /*0000c34c*/ MOVW        R5, #394                    @ 0x18a 
    /*0000c350*/ BFI         R3, IP, #16, #5 
    /*0000c354*/ STR         R3, [R0, #1908]             @ 0x774 
    /*0000c358*/ LDR         R3, [R0, #1912]             @ 0x778 
    /*0000c35c*/ ADD         R4, R1, #396                @ 0x18c 
    /*0000c360*/ LDRB        R6, [R1, #366]              @ 0x16e 
    /*0000c364*/ MOVW        IP, #398                    @ 0x18e 
    /*0000c368*/ BFI         R3, R6, #0, #3 
    /*0000c36c*/ STR         R3, [R0, #1912]             @ 0x778 
    /*0000c370*/ LDR         R3, [R0, #1916]             @ 0x77c 
    /*0000c374*/ LDRH        R6, [LR] 
    /*0000c378*/ ADD         LR, R1, #400                @ 0x190 
    /*0000c37c*/ BFI         R3, R6, #0, #5 
    /*0000c380*/ STR         R3, [R0, #1916]             @ 0x77c 
    /*0000c384*/ LDR         R3, [R0, #1920]             @ 0x780 
    /*0000c388*/ LDRH        R6, [R1, R2] 
    /*0000c38c*/ MOVW        R2, #402                    @ 0x192 
    /*0000c390*/ BFI         R3, R6, #0, #9 
    /*0000c394*/ STR         R3, [R0, #1920]             @ 0x780 
    /*0000c398*/ LDR         R3, [R0, #1924]             @ 0x784 
    /*0000c39c*/ LDR         R6, [R1, #428]              @ 0x1ac 
    /*0000c3a0*/ BFI         R3, R6, #0, #1 
    /*0000c3a4*/ STR         R3, [R0, #1924]             @ 0x784 
    /*0000c3a8*/ LDRH        R5, [R1, R5] 
    /*0000c3ac*/ LDR         R3, [R0, #1928]             @ 0x788 
    /*0000c3b0*/ LDRH        R4, [R4] 
    /*0000c3b4*/ LDRH        IP, [R1, IP] 
    /*0000c3b8*/ BFI         R3, R5, #0, #6 
    /*0000c3bc*/ LDRH        LR, [LR] 
    /*0000c3c0*/ BFI         R3, R4, #6, #6 
    /*0000c3c4*/ BFI         R3, IP, #12, #6 
    /*0000c3c8*/ ADD         IP, R1, #404                @ 0x194 
    /*0000c3cc*/ BFI         R3, LR, #18, #6 
    /*0000c3d0*/ STR         R3, [R0, #1928]             @ 0x788 
    /*0000c3d4*/ LDRH        R5, [R1, R2] 
    /*0000c3d8*/ MOVW        LR, #406                    @ 0x196 
    /*0000c3dc*/ LDR         R3, [R0, #1932]             @ 0x78c 
    /*0000c3e0*/ ADD         R2, R1, #408                @ 0x198 
    /*0000c3e4*/ LDRH        R4, [IP] 
    /*0000c3e8*/ ADD         IP, R1, #412                @ 0x19c 
    /*0000c3ec*/ LDRH        LR, [R1, LR] 
    /*0000c3f0*/ BFI         R3, R5, #0, #6 
    /*0000c3f4*/ LDRH        R2, [R2] 
    /*0000c3f8*/ BFI         R3, R4, #6, #6 
    /*0000c3fc*/ BFI         R3, LR, #12, #6 
    /*0000c400*/ MOVW        LR, #410                    @ 0x19a 
    /*0000c404*/ BFI         R3, R2, #18, #6 
    /*0000c408*/ STR         R3, [R0, #1932]             @ 0x78c 
    /*0000c40c*/ LDR         R3, [R0, #1936]             @ 0x790 
    /*0000c410*/ MOVW        R2, #414                    @ 0x19e 
    /*0000c414*/ LDRH        R5, [R1, LR] 
    /*0000c418*/ ADD         LR, R1, #416                @ 0x1a0 
    /*0000c41c*/ LDRH        R4, [IP] 
    /*0000c420*/ MOVW        IP, #418                    @ 0x1a2 
    /*0000c424*/ LDRH        R2, [R1, R2] 
    /*0000c428*/ BFI         R3, R5, #0, #6 
    /*0000c42c*/ LDRH        LR, [LR] 
    /*0000c430*/ BFI         R3, R4, #6, #6 
    /*0000c434*/ BFI         R3, R2, #12, #6 
    /*0000c438*/ ADD         R2, R1, #420                @ 0x1a4 
    /*0000c43c*/ BFI         R3, LR, #18, #6 
    /*0000c440*/ STR         R3, [R0, #1936]             @ 0x790 
    /*0000c444*/ LDR         R3, [R0, #1940]             @ 0x794 
    /*0000c448*/ MOVW        LR, #422                    @ 0x1a6 
    /*0000c44c*/ LDRH        R5, [R1, IP] 
    /*0000c450*/ ADD         IP, R1, #424                @ 0x1a8 
    /*0000c454*/ LDRH        R4, [R2] 
    /*0000c458*/ ADD         R2, R1, #384                @ 0x180 
    /*0000c45c*/ LDRH        LR, [R1, LR] 
    /*0000c460*/ BFI         R3, R5, #0, #6 
    /*0000c464*/ LDRH        IP, [IP] 
    /*0000c468*/ BFI         R3, R4, #6, #6 
    /*0000c46c*/ BFI         R3, LR, #12, #6 
    /*0000c470*/ ADD         R4, R1, #388                @ 0x184 
    /*0000c474*/ BFI         R3, IP, #18, #6 
    /*0000c478*/ STR         R3, [R0, #1940]             @ 0x794 
    /*0000c47c*/ LDR         R3, [R0, #1952]             @ 0x7a0 
    /*0000c480*/ MOVW        R5, #386                    @ 0x182 
    /*0000c484*/ LDRH        R2, [R2] 
    /*0000c488*/ ADD         LR, R1, #392                @ 0x188 
    /*0000c48c*/ MOVW        IP, #390                    @ 0x186 
    /*0000c490*/ BFI         R3, R2, #0, #11 
    /*0000c494*/ STR         R3, [R0, #1952]             @ 0x7a0 
    /*0000c498*/ LDR         R3, [R0, #1956]             @ 0x7a4 
    /*0000c49c*/ MOVW        R2, #374                    @ 0x176 
    /*0000c4a0*/ LDRH        R5, [R1, R5] 
    /*0000c4a4*/ LDRH        R4, [R4] 
    /*0000c4a8*/ BFI         R3, R5, #0, #11 
    /*0000c4ac*/ ADD         R5, R1, #376                @ 0x178 
    /*0000c4b0*/ BFI         R3, R4, #16, #11 
    /*0000c4b4*/ STR         R3, [R0, #1956]             @ 0x7a4 
    /*0000c4b8*/ LDR         R3, [R0, #1960]             @ 0x7a8 
    /*0000c4bc*/ MOVW        R4, #378                    @ 0x17a 
    /*0000c4c0*/ LDRH        IP, [R1, IP] 
    /*0000c4c4*/ LDRH        LR, [LR] 
    /*0000c4c8*/ BFI         R3, IP, #0, #11 
    /*0000c4cc*/ ADD         IP, R1, #380                @ 0x17c 
    /*0000c4d0*/ BFI         R3, LR, #16, #11 
    /*0000c4d4*/ STR         R3, [R0, #1960]             @ 0x7a8 
    /*0000c4d8*/ LDRH        R6, [R1, R2] 
    /*0000c4dc*/ MOVW        LR, #382                    @ 0x17e 
    /*0000c4e0*/ LDR         R3, [R0, #1968]             @ 0x7b0 
    /*0000c4e4*/ ADD         R2, R1, #368                @ 0x170 
    /*0000c4e8*/ BFI         R3, R6, #0, #11 
    /*0000c4ec*/ STR         R3, [R0, #1968]             @ 0x7b0 
    /*0000c4f0*/ LDR         R3, [R0, #1972]             @ 0x7b4 
    /*0000c4f4*/ LDRH        R5, [R5] 
    /*0000c4f8*/ LDRH        R4, [R1, R4] 
    /*0000c4fc*/ BFI         R3, R5, #0, #11 
    /*0000c500*/ BFI         R3, R4, #16, #11 
    /*0000c504*/ STR         R3, [R0, #1972]             @ 0x7b4 
    /*0000c508*/ LDR         R3, [R0, #1976]             @ 0x7b8 
    /*0000c50c*/ LDRH        IP, [IP] 
    /*0000c510*/ LDRH        R1, [R1, LR] 
    /*0000c514*/ BFI         R3, IP, #0, #11 
    /*0000c518*/ BFI         R3, R1, #16, #11 
    /*0000c51c*/ STR         R3, [R0, #1976]             @ 0x7b8 
    /*0000c520*/ LDR         R3, [R0, #1980]             @ 0x7bc 
    /*0000c524*/ LDRH        R2, [R2] 
    /*0000c528*/ BFI         R3, R2, #0, #16 
    /*0000c52c*/ STR         R3, [R0, #1980]             @ 0x7bc 
    /*0000c530*/ LDR         R3, [R0, #1984]             @ 0x7c0 
    /*0000c534*/ BFC         R3, #0, #1 
    /*0000c538*/ BFC         R3, #1, #1 
    /*0000c53c*/ STR         R3, [R0, #1984]             @ 0x7c0 
    /*0000c540*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_DRV_SetReg_FPD


FUNC_BEGIN VGS_DRV_SetReg_LumaStat
    /*0000c544*/ LDR         R2, [R1, #264]              @ 0x108 
    /*0000c548*/ LDR         R3, [R0, #1872]             @ 0x750 
    /*0000c54c*/ CMP         R2, #0 
    /*0000c550*/ BFIEQ       R3, R2, #0, #16 
    /*0000c554*/ LDRNE       IP, [R1, #272]              @ 0x110 
    /*0000c558*/ LDRNE       R2, [R1, #276]              @ 0x114 
    /*0000c55c*/ BFINE       R3, IP, #0, #16 
    /*0000c560*/ BFI         R3, R2, #16, #16 
    /*0000c564*/ STR         R3, [R0, #1872]             @ 0x750 
    /*0000c568*/ LDR         R2, [R1, #264]              @ 0x108 
    /*0000c56c*/ LDR         R3, [R0, #1876]             @ 0x754 
    /*0000c570*/ CMP         R2, #0 
    /*0000c574*/ BFIEQ       R3, R2, #0, #16 
    /*0000c578*/ LDRNE       IP, [R1, #280]              @ 0x118 
    /*0000c57c*/ LDRNE       R2, [R1, #284]              @ 0x11c 
    /*0000c580*/ SUBNE       IP, IP, #1 
    /*0000c584*/ BFINE       R3, IP, #0, #16 
    /*0000c588*/ SUBNE       R2, R2, #1 
    /*0000c58c*/ BFI         R3, R2, #16, #16 
    /*0000c590*/ STR         R3, [R0, #1876]             @ 0x754 
    /*0000c594*/ LDR         R3, [R1, #264]              @ 0x108 
    /*0000c598*/ CMP         R3, #0 
    /*0000c59c*/ LDRNE       R3, [R1, #288]              @ 0x120 
    /*0000c5a0*/ STR         R3, [R0, #1396]             @ 0x574 
    /*0000c5a4*/ BX          LR 
FUNC_END VGS_DRV_SetReg_LumaStat


FUNC_BEGIN VGS_DRV_SetReg_CSC
    /*0000c5a8*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000c5ac*/ MOVW        R6, #306                    @ 0x132 
    /*0000c5b0*/ LDR         R3, [R1, #480]              @ 0x1e0 
    /*0000c5b4*/ MOV         R1, #128                    @ 0x80 
    /*0000c5b8*/ LDR         R2, [R0, #1824]             @ 0x720 
    /*0000c5bc*/ MOVW        R5, #601                    @ 0x259 
    /*0000c5c0*/ CLZ         R3, R3 
    /*0000c5c4*/ MOV         R4, #117                    @ 0x75 
    /*0000c5c8*/ MOVW        LR, #32592                  @ 0x7f50 
    /*0000c5cc*/ MOVW        IP, #32421                  @ 0x7ea5 
    /*0000c5d0*/ LSR         R3, R3, #5 
    /*0000c5d4*/ MOVW        R7, #32330                  @ 0x7e4a 
    /*0000c5d8*/ BFI         R2, R3, #16, #1 
    /*0000c5dc*/ BFC         R2, #0, #9 
    /*0000c5e0*/ STR         R2, [R0, #1824]             @ 0x720 
    /*0000c5e4*/ LDR         R3, [R0, #1828]             @ 0x724 
    /*0000c5e8*/ MOVW        R2, #523                    @ 0x20b 
    /*0000c5ec*/ BFC         R3, #0, #9 
    /*0000c5f0*/ BFC         R3, #16, #9 
    /*0000c5f4*/ STR         R3, [R0, #1828]             @ 0x724 
    /*0000c5f8*/ LDR         R3, [R0, #1832]             @ 0x728 
    /*0000c5fc*/ BFI         R3, R1, #0, #9 
    /*0000c600*/ STR         R3, [R0, #1832]             @ 0x728 
    /*0000c604*/ LDR         R3, [R0, #1836]             @ 0x72c 
    /*0000c608*/ BFI         R3, R1, #0, #9 
    /*0000c60c*/ MOVW        R1, #32683                  @ 0x7fab 
    /*0000c610*/ BFC         R3, #16, #9 
    /*0000c614*/ STR         R3, [R0, #1836]             @ 0x72c 
    /*0000c618*/ LDR         R3, [R0, #1840]             @ 0x730 
    /*0000c61c*/ BFI         R3, R6, #0, #15 
    /*0000c620*/ BFI         R3, R5, #16, #15 
    /*0000c624*/ STR         R3, [R0, #1840]             @ 0x730 
    /*0000c628*/ LDR         R3, [R0, #1844]             @ 0x734 
    /*0000c62c*/ BFI         R3, R4, #0, #15 
    /*0000c630*/ BFI         R3, LR, #16, #15 
    /*0000c634*/ STR         R3, [R0, #1844]             @ 0x734 
    /*0000c638*/ LDR         R3, [R0, #1848]             @ 0x738 
    /*0000c63c*/ BFI         R3, IP, #0, #15 
    /*0000c640*/ BFI         R3, R2, #16, #15 
    /*0000c644*/ STR         R3, [R0, #1848]             @ 0x738 
    /*0000c648*/ LDR         R3, [R0, #1852]             @ 0x73c 
    /*0000c64c*/ BFI         R3, R2, #0, #15 
    /*0000c650*/ BFI         R3, R7, #16, #15 
    /*0000c654*/ STR         R3, [R0, #1852]             @ 0x73c 
    /*0000c658*/ LDR         R3, [R0, #1856]             @ 0x740 
    /*0000c65c*/ BFI         R3, R1, #0, #15 
    /*0000c660*/ STR         R3, [R0, #1856]             @ 0x740 
    /*0000c664*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END VGS_DRV_SetReg_CSC


FUNC_BEGIN VGS_DRV_SetReg_DestImg
    /*0000c668*/ PUSH        {R4, R5, R6, LR} 
    /*0000c66c*/ LDR         LR, [R1, #16] 
    /*0000c670*/ LDR         R3, [R0, #1332]             @ 0x534 
    /*0000c674*/ LDR         IP, [LR, #20] 
    /*0000c678*/ LDR         R4, [LR, #32] 
    /*0000c67c*/ ADDS        IP, IP, #0 
    /*0000c680*/ MOVNE       IP, #1 
    /*0000c684*/ CMP         R4, #64                     @ 0x40 
    /*0000c688*/ BFI         R3, IP, #0, #1 
    /*0000c68c*/ ORR         R3, R3, #2 
    /*0000c690*/ MOVEQ       IP, #2 
    /*0000c694*/ BFIEQ       R3, IP, #21, #2 
    /*0000c698*/ BFIEQ       R3, IP, #23, #2 
    /*0000c69c*/ BEQ         VGS_DRV_SetReg_DestImg_xc6b8
    /*0000c6a0*/ CMP         R4, #32 
    /*0000c6a4*/ BFCNE       R3, #21, #2 
    /*0000c6a8*/ MOVEQ       IP, #1 
    /*0000c6ac*/ BFIEQ       R3, IP, #21, #2 
    /*0000c6b0*/ BFIEQ       R3, IP, #23, #2 
    /*0000c6b4*/ BFCNE       R3, #23, #2 
    VGS_DRV_SetReg_DestImg_xc6b8:
    /*0000c6b8*/ LDR         R5, [R1] 
    /*0000c6bc*/ LDR         IP, [R1, #264]              @ 0x108 
    /*0000c6c0*/ LDR         R4, [R5, #24] 
    /*0000c6c4*/ CLZ         IP, IP 
    /*0000c6c8*/ CMP         R4, #0 
    /*0000c6cc*/ LSR         IP, IP, #5 
    /*0000c6d0*/ BFI         R3, IP, #31, #1 
    /*0000c6d4*/ LDR         R4, [LR, #24] 
    /*0000c6d8*/ BEQ         VGS_DRV_SetReg_DestImg_xc83c
    /*0000c6dc*/ CMP         R4, #0 
    /*0000c6e0*/ MOVEQ       IP, #1 
    /*0000c6e4*/ BNE         VGS_DRV_SetReg_DestImg_xc83c
    VGS_DRV_SetReg_DestImg_xc6e8:
    /*0000c6e8*/ LDR         R6, [R1, #480]              @ 0x1e0 
    /*0000c6ec*/ BFI         R3, IP, #18, #1 
    /*0000c6f0*/ BFC         R3, #19, #1 
    /*0000c6f4*/ LDR         IP, [LR, #12] 
    /*0000c6f8*/ CMP         R6, #0 
    /*0000c6fc*/ MOVNE       LR, #3 
    /*0000c700*/ BFINE       R3, LR, #12, #6 
    /*0000c704*/ BNE         VGS_DRV_SetReg_DestImg_xc718
    /*0000c708*/ CMP         IP, #29 
    /*0000c70c*/ CMPNE       IP, #26 
    /*0000c710*/ BFIEQ       R3, R6, #12, #6 
    /*0000c714*/ BNE         VGS_DRV_SetReg_DestImg_xc894
    VGS_DRV_SetReg_DestImg_xc718:
    /*0000c718*/ SUB         IP, IP, #28 
    /*0000c71c*/ LDR         LR, [R5, #12] 
    /*0000c720*/ CMP         IP, #1 
    /*0000c724*/ LDR         R5, [R1, #456]              @ 0x1c8 
    /*0000c728*/ SUB         LR, LR, #28 
    /*0000c72c*/ BFC         R3, #7, #1 
    /*0000c730*/ MOVHI       IP, #0 
    /*0000c734*/ MOVLS       IP, #1 
    /*0000c738*/ CMP         LR, #1 
    /*0000c73c*/ EORLS       IP, IP, #1 
    /*0000c740*/ LDR         LR, [R1, #460]              @ 0x1cc 
    /*0000c744*/ BFI         R3, IP, #6, #1 
    /*0000c748*/ ADDS        R4, R4, #0 
    /*0000c74c*/ BFI         R3, R5, #4, #1 
    /*0000c750*/ BFI         R3, LR, #5, #1 
    /*0000c754*/ MOVNE       R4, #1 
    /*0000c758*/ BFI         R3, R4, #8, #4 
    /*0000c75c*/ BFC         R3, #25, #1 
    /*0000c760*/ BFC         R3, #26, #2 
    /*0000c764*/ STR         R3, [R0, #1332]             @ 0x534 
    /*0000c768*/ LDR         IP, [R1, #96]               @ 0x60 
    /*0000c76c*/ LDR         R3, [R0, #1336]             @ 0x538 
    /*0000c770*/ CMP         IP, #0 
    /*0000c774*/ BNE         VGS_DRV_SetReg_DestImg_xc844
    /*0000c778*/ LDR         IP, [R1, #308]              @ 0x134 
    /*0000c77c*/ CMP         IP, #0 
    /*0000c780*/ BEQ         VGS_DRV_SetReg_DestImg_xc874
    /*0000c784*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c788*/ CMP         IP, #0 
    /*0000c78c*/ BNE         VGS_DRV_SetReg_DestImg_xc860
    VGS_DRV_SetReg_DestImg_xc790:
    /*0000c790*/ LDRH        IP, [R1, #72]               @ 0x48 
    VGS_DRV_SetReg_DestImg_xc794:
    /*0000c794*/ LDR         LR, [R1, #76]               @ 0x4c 
    /*0000c798*/ BFI         R3, IP, #0, #16 
    /*0000c79c*/ BFI         R3, LR, #16, #16 
    VGS_DRV_SetReg_DestImg_xc7a0:
    /*0000c7a0*/ STR         R3, [R0, #1336]             @ 0x538 
    /*0000c7a4*/ LDR         R3, [R2, #152]              @ 0x98 
    /*0000c7a8*/ LDR         IP, [R0, #1328]             @ 0x530 
    /*0000c7ac*/ CMP         R3, #0 
    /*0000c7b0*/ LDRNE       R3, [R2, #116]              @ 0x74 
    /*0000c7b4*/ LDREQ       R3, [R1, #88]               @ 0x58 
    /*0000c7b8*/ LDR         R2, [R1, #92]               @ 0x5c 
    /*0000c7bc*/ SUB         R3, R3, #1 
    /*0000c7c0*/ UXTH        R3, R3 
    /*0000c7c4*/ BFI         IP, R3, #0, #16 
    /*0000c7c8*/ SUB         R3, R2, #1 
    /*0000c7cc*/ BFI         IP, R3, #16, #16 
    /*0000c7d0*/ STR         IP, [R0, #1328]             @ 0x530 
    /*0000c7d4*/ LDR         R3, [R1, #124]              @ 0x7c 
    /*0000c7d8*/ CMP         R3, #0 
    /*0000c7dc*/ BNE         VGS_DRV_SetReg_DestImg_xc8b8
    /*0000c7e0*/ LDR         R3, [R1, #184]              @ 0xb8 
    /*0000c7e4*/ CMP         R3, #0 
    /*0000c7e8*/ BNE         VGS_DRV_SetReg_DestImg_xc8b8
    /*0000c7ec*/ LDR         R3, [R1, #16] 
    /*0000c7f0*/ LDR         R3, [R3, #72]               @ 0x48 
    /*0000c7f4*/ STR         R3, [R0, #1340]             @ 0x53c 
    /*0000c7f8*/ LDR         R3, [R1, #16] 
    /*0000c7fc*/ LDR         R3, [R3, #80]               @ 0x50 
    /*0000c800*/ STR         R3, [R0, #1348]             @ 0x544 
    /*0000c804*/ LDR         R3, [R1, #16] 
    /*0000c808*/ LDR         R3, [R3, #120]              @ 0x78 
    /*0000c80c*/ STR         R3, [R0, #1356]             @ 0x54c 
    /*0000c810*/ LDR         R3, [R1, #16] 
    /*0000c814*/ LDR         R3, [R3, #128]              @ 0x80 
    /*0000c818*/ STR         R3, [R0, #1364]             @ 0x554 
    VGS_DRV_SetReg_DestImg_xc81c:
    /*0000c81c*/ LDR         R2, [R1, #16] 
    /*0000c820*/ LDR         R3, [R0, #1372]             @ 0x55c 
    /*0000c824*/ LDR         R1, [R2, #44]               @ 0x2c 
    /*0000c828*/ LDR         R2, [R2, #48]               @ 0x30 
    /*0000c82c*/ BFI         R3, R1, #0, #16 
    /*0000c830*/ BFI         R3, R2, #16, #16 
    /*0000c834*/ STR         R3, [R0, #1372]             @ 0x55c 
    /*0000c838*/ POP         {R4, R5, R6, PC} 
    VGS_DRV_SetReg_DestImg_xc83c:
    /*0000c83c*/ MOV         IP, #0 
    /*0000c840*/ B           VGS_DRV_SetReg_DestImg_xc6e8
    VGS_DRV_SetReg_DestImg_xc844:
    /*0000c844*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c848*/ CMP         IP, #0 
    /*0000c84c*/ BEQ         VGS_DRV_SetReg_DestImg_xc790
    /*0000c850*/ LDR         IP, [R1, #308]              @ 0x134 
    /*0000c854*/ CMP         IP, #0 
    /*0000c858*/ LDRHEQ      IP, [R2, #136]              @ 0x88 
    /*0000c85c*/ BEQ         VGS_DRV_SetReg_DestImg_xc794
    VGS_DRV_SetReg_DestImg_xc860:
    /*0000c860*/ LDR         IP, [R2, #136]              @ 0x88 
    /*0000c864*/ LDR         LR, [R1, #72]               @ 0x48 
    /*0000c868*/ ADD         IP, IP, LR 
    /*0000c86c*/ UXTH        IP, IP 
    /*0000c870*/ B           VGS_DRV_SetReg_DestImg_xc794
    VGS_DRV_SetReg_DestImg_xc874:
    /*0000c874*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000c878*/ CMP         IP, #0 
    /*0000c87c*/ LDR         IP, [R1, #68]               @ 0x44 
    /*0000c880*/ LDRHEQ      LR, [R1, #64]               @ 0x40 
    /*0000c884*/ LDRHNE      LR, [R2, #136]              @ 0x88 
    /*0000c888*/ BFI         R3, LR, #0, #16 
    /*0000c88c*/ BFI         R3, IP, #16, #16 
    /*0000c890*/ B           VGS_DRV_SetReg_DestImg_xc7a0
    VGS_DRV_SetReg_DestImg_xc894:
    /*0000c894*/ CMP         IP, #25 
    /*0000c898*/ CMPNE       IP, #28 
    /*0000c89c*/ MOVEQ       LR, #1 
    /*0000c8a0*/ BFIEQ       R3, LR, #12, #6 
    /*0000c8a4*/ BEQ         VGS_DRV_SetReg_DestImg_xc718
    /*0000c8a8*/ CMP         IP, #39                     @ 0x27 
    /*0000c8ac*/ MOVEQ       LR, #2 
    /*0000c8b0*/ BFIEQ       R3, LR, #12, #6 
    /*0000c8b4*/ B           VGS_DRV_SetReg_DestImg_xc718
    VGS_DRV_SetReg_DestImg_xc8b8:
    /*0000c8b8*/ LDR         R3, [R1, #40]               @ 0x28 
    /*0000c8bc*/ STR         R3, [R0, #1340]             @ 0x53c 
    /*0000c8c0*/ LDR         R3, [R1, #48]               @ 0x30 
    /*0000c8c4*/ STR         R3, [R0, #1348]             @ 0x544 
    /*0000c8c8*/ LDR         R3, [R1, #24] 
    /*0000c8cc*/ STR         R3, [R0, #1356]             @ 0x54c 
    /*0000c8d0*/ LDR         R3, [R1, #32] 
    /*0000c8d4*/ STR         R3, [R0, #1364]             @ 0x554 
    /*0000c8d8*/ B           VGS_DRV_SetReg_DestImg_xc81c
FUNC_END VGS_DRV_SetReg_DestImg


FUNC_BEGIN VGS_DRV_SetReg_CurDcmp
    /*0000c8dc*/ PUSH        {R4, R5, LR} 
    /*0000c8e0*/ LDR         R4, [R1] 
    /*0000c8e4*/ LDR         LR, [R0, #1536]             @ 0x600 
    /*0000c8e8*/ LDR         R5, [R2, #8] 
    /*0000c8ec*/ LDR         IP, [R4, #16] 
    /*0000c8f0*/ LDR         R4, [R4, #20] 
    /*0000c8f4*/ LDR         R2, [R2, #12] 
    /*0000c8f8*/ CMP         R4, #1 
    /*0000c8fc*/ CMPEQ       IP, #0 
    /*0000c900*/ LDR         R4, [SP, #12] 
    /*0000c904*/ MOVEQ       IP, #1 
    /*0000c908*/ MOVNE       IP, #0 
    /*0000c90c*/ BFI         LR, IP, #0, #1 
    /*0000c910*/ BFI         LR, R5, #1, #1 
    /*0000c914*/ BFI         LR, R2, #2, #1 
    /*0000c918*/ STR         LR, [R0, #1536]             @ 0x600 
    /*0000c91c*/ LDR         R2, [R4, #152]              @ 0x98 
    /*0000c920*/ LDR         LR, [R0, #1540]             @ 0x604 
    /*0000c924*/ CMP         R2, #0 
    /*0000c928*/ LDR         R5, [R1, #60]               @ 0x3c 
    /*0000c92c*/ LDREQ       R2, [R1, #56]               @ 0x38 
    /*0000c930*/ LDRNE       R2, [R4, #16] 
    /*0000c934*/ SUB         R2, R2, #1 
    /*0000c938*/ UBFX        R2, R2, #0, #14 
    /*0000c93c*/ BFI         LR, R2, #0, #14 
    /*0000c940*/ SUB         R2, R5, #1 
    /*0000c944*/ BFI         LR, R2, #16, #14 
    /*0000c948*/ STR         LR, [R0, #1540]             @ 0x604 
    /*0000c94c*/ LDR         R2, [R0, #1568]             @ 0x620 
    /*0000c950*/ LDR         LR, [R3, #8] 
    /*0000c954*/ BFI         R2, IP, #0, #1 
    /*0000c958*/ LDR         R3, [R3, #12] 
    /*0000c95c*/ BFI         R2, LR, #1, #1 
    /*0000c960*/ BFI         R2, R3, #2, #1 
    /*0000c964*/ STR         R2, [R0, #1568]             @ 0x620 
    /*0000c968*/ LDR         R3, [R4, #152]              @ 0x98 
    /*0000c96c*/ LDR         R2, [R0, #1572]             @ 0x624 
    /*0000c970*/ CMP         R3, #0 
    /*0000c974*/ LDREQ       R3, [R1, #56]               @ 0x38 
    /*0000c978*/ LDRNE       R3, [R4, #20] 
    /*0000c97c*/ LDR         R1, [R1, #60]               @ 0x3c 
    /*0000c980*/ SUB         R3, R3, #1 
    /*0000c984*/ UBFX        R3, R3, #0, #14 
    /*0000c988*/ BFI         R2, R3, #0, #14 
    /*0000c98c*/ SUB         R3, R1, #1 
    /*0000c990*/ BFI         R2, R3, #16, #14 
    /*0000c994*/ STR         R2, [R0, #1572]             @ 0x624 
    /*0000c998*/ POP         {R4, R5, PC} 
FUNC_END VGS_DRV_SetReg_CurDcmp


FUNC_BEGIN VGS_DRV_SetReg_DestCmp
    /*0000c99c*/ PUSH        {R4, R5, R6, LR} 
    /*0000c9a0*/ LDR         R4, [R1, #16] 
    /*0000c9a4*/ LDR         IP, [R0, #1600]             @ 0x640 
    /*0000c9a8*/ LDR         LR, [R2, #12] 
    /*0000c9ac*/ LDR         R4, [R4, #20] 
    /*0000c9b0*/ LDR         R5, [R2, #8] 
    /*0000c9b4*/ SUB         R4, R4, #1 
    /*0000c9b8*/ CLZ         R4, R4 
    /*0000c9bc*/ LSR         R4, R4, #5 
    /*0000c9c0*/ BFI         IP, R4, #0, #1 
    /*0000c9c4*/ BFI         IP, LR, #1, #2 
    /*0000c9c8*/ LDR         LR, [R2] 
    /*0000c9cc*/ BFI         IP, R5, #3, #1 
    /*0000c9d0*/ LDR         R5, [R2, #24] 
    /*0000c9d4*/ BFI         IP, LR, #4, #1 
    /*0000c9d8*/ LDR         LR, [R2, #28] 
    /*0000c9dc*/ BFI         IP, R5, #5, #1 
    /*0000c9e0*/ LDR         R5, [R2, #32] 
    /*0000c9e4*/ SUB         LR, LR, #1 
    /*0000c9e8*/ BFI         IP, LR, #6, #5 
    /*0000c9ec*/ LDR         LR, [R2, #208]              @ 0xd0 
    /*0000c9f0*/ BFI         IP, R5, #11, #1 
    /*0000c9f4*/ LDR         R5, [R2, #212]              @ 0xd4 
    /*0000c9f8*/ BFI         IP, LR, #12, #3 
    /*0000c9fc*/ LDR         LR, [R2, #4] 
    /*0000ca00*/ BFI         IP, R5, #15, #1 
    /*0000ca04*/ LDR         R5, [R2, #20] 
    /*0000ca08*/ BFI         IP, LR, #16, #1 
    /*0000ca0c*/ LDR         LR, [R2, #36]               @ 0x24 
    /*0000ca10*/ BFI         IP, R5, #17, #1 
    /*0000ca14*/ LDR         R5, [SP, #16] 
    /*0000ca18*/ BFI         IP, LR, #18, #1 
    /*0000ca1c*/ LDR         LR, [R2, #16] 
    /*0000ca20*/ BFI         IP, LR, #19, #3 
    /*0000ca24*/ STR         IP, [R0, #1600]             @ 0x640 
    /*0000ca28*/ LDR         IP, [R5, #152]              @ 0x98 
    /*0000ca2c*/ LDR         LR, [R0, #1604]             @ 0x644 
    /*0000ca30*/ CMP         IP, #0 
    /*0000ca34*/ LDR         R6, [R1, #92]               @ 0x5c 
    /*0000ca38*/ LDREQ       IP, [R1, #88]               @ 0x58 
    /*0000ca3c*/ LDRNE       IP, [R5, #140]              @ 0x8c 
    /*0000ca40*/ SUB         IP, IP, #1 
    /*0000ca44*/ UBFX        IP, IP, #0, #14 
    /*0000ca48*/ BFI         LR, IP, #0, #14 
    /*0000ca4c*/ SUB         IP, R6, #1 
    /*0000ca50*/ BFI         LR, IP, #16, #14 
    /*0000ca54*/ STR         LR, [R0, #1604]             @ 0x644 
    /*0000ca58*/ LDR         LR, [R2, #152]              @ 0x98 
    /*0000ca5c*/ LDR         IP, [R0, #1608]             @ 0x648 
    /*0000ca60*/ LDR         R6, [R2, #156]              @ 0x9c 
    /*0000ca64*/ BFI         IP, LR, #0, #10 
    /*0000ca68*/ LDR         LR, [R2, #160]              @ 0xa0 
    /*0000ca6c*/ BFI         IP, R6, #10, #10 
    /*0000ca70*/ BFI         IP, LR, #20, #10 
    /*0000ca74*/ STR         IP, [R0, #1608]             @ 0x648 
    /*0000ca78*/ LDR         R6, [R2, #132]              @ 0x84 
    /*0000ca7c*/ LDR         IP, [R0, #1612]             @ 0x64c 
    /*0000ca80*/ LDR         LR, [R2, #136]              @ 0x88 
    /*0000ca84*/ BFI         IP, R6, #0, #8 
    /*0000ca88*/ LDR         R6, [R2, #140]              @ 0x8c 
    /*0000ca8c*/ BFI         IP, LR, #8, #6 
    /*0000ca90*/ LDR         LR, [R2, #144]              @ 0x90 
    /*0000ca94*/ BFI         IP, R6, #16, #8 
    /*0000ca98*/ BFI         IP, LR, #24, #4 
    /*0000ca9c*/ STR         IP, [R0, #1612]             @ 0x64c 
    /*0000caa0*/ LDR         IP, [R0, #1616]             @ 0x650 
    /*0000caa4*/ LDR         R6, [R2, #52]               @ 0x34 
    /*0000caa8*/ LDR         LR, [R2, #56]               @ 0x38 
    /*0000caac*/ BFI         IP, R6, #0, #8 
    /*0000cab0*/ LDR         R6, [R2, #60]               @ 0x3c 
    /*0000cab4*/ BFI         IP, LR, #8, #8 
    /*0000cab8*/ LDR         LR, [R2, #64]               @ 0x40 
    /*0000cabc*/ BFI         IP, R6, #16, #8 
    /*0000cac0*/ BFI         IP, LR, #24, #8 
    /*0000cac4*/ STR         IP, [R0, #1616]             @ 0x650 
    /*0000cac8*/ LDR         IP, [R0, #1620]             @ 0x654 
    /*0000cacc*/ LDR         LR, [R2, #68]               @ 0x44 
    /*0000cad0*/ LDR         R6, [R2, #72]               @ 0x48 
    /*0000cad4*/ BFI         IP, LR, #0, #6 
    /*0000cad8*/ LDR         LR, [R2, #76]               @ 0x4c 
    /*0000cadc*/ BFI         IP, R6, #8, #6 
    /*0000cae0*/ BFI         IP, LR, #16, #6 
    /*0000cae4*/ STR         IP, [R0, #1620]             @ 0x654 
    /*0000cae8*/ LDR         IP, [R0, #1624]             @ 0x658 
    /*0000caec*/ LDR         R6, [R2, #80]               @ 0x50 
    /*0000caf0*/ LDR         LR, [R2, #84]               @ 0x54 
    /*0000caf4*/ BFI         IP, R6, #0, #8 
    /*0000caf8*/ BFI         IP, LR, #8, #8 
    /*0000cafc*/ STR         IP, [R0, #1624]             @ 0x658 
    /*0000cb00*/ LDR         IP, [R2, #88]               @ 0x58 
    /*0000cb04*/ LDR         LR, [R0, #1628]             @ 0x65c 
    /*0000cb08*/ STR         IP, [R0, #1628]             @ 0x65c 
    /*0000cb0c*/ LDR         IP, [R0, #1632]             @ 0x660 
    /*0000cb10*/ LDR         IP, [R2, #92]               @ 0x5c 
    /*0000cb14*/ STR         IP, [R0, #1632]             @ 0x660 
    /*0000cb18*/ LDR         IP, [R2, #96]               @ 0x60 
    /*0000cb1c*/ LDR         LR, [R0, #1636]             @ 0x664 
    /*0000cb20*/ STR         IP, [R0, #1636]             @ 0x664 
    /*0000cb24*/ LDR         IP, [R2, #100]              @ 0x64 
    /*0000cb28*/ LDR         LR, [R0, #1640]             @ 0x668 
    /*0000cb2c*/ STR         IP, [R0, #1640]             @ 0x668 
    /*0000cb30*/ LDR         IP, [R2, #104]              @ 0x68 
    /*0000cb34*/ LDR         LR, [R0, #1644]             @ 0x66c 
    /*0000cb38*/ STR         IP, [R0, #1644]             @ 0x66c 
    /*0000cb3c*/ LDR         IP, [R2, #108]              @ 0x6c 
    /*0000cb40*/ LDR         LR, [R0, #1648]             @ 0x670 
    /*0000cb44*/ STR         IP, [R0, #1648]             @ 0x670 
    /*0000cb48*/ LDR         IP, [R2, #112]              @ 0x70 
    /*0000cb4c*/ LDR         LR, [R0, #1652]             @ 0x674 
    /*0000cb50*/ STR         IP, [R0, #1652]             @ 0x674 
    /*0000cb54*/ LDR         IP, [R2, #116]              @ 0x74 
    /*0000cb58*/ LDR         LR, [R0, #1656]             @ 0x678 
    /*0000cb5c*/ STR         IP, [R0, #1656]             @ 0x678 
    /*0000cb60*/ LDR         IP, [R2, #120]              @ 0x78 
    /*0000cb64*/ LDR         LR, [R0, #1660]             @ 0x67c 
    /*0000cb68*/ STR         IP, [R0, #1660]             @ 0x67c 
    /*0000cb6c*/ LDR         IP, [R2, #124]              @ 0x7c 
    /*0000cb70*/ LDR         LR, [R0, #1664]             @ 0x680 
    /*0000cb74*/ STR         IP, [R0, #1664]             @ 0x680 
    /*0000cb78*/ LDR         IP, [R0, #1668]             @ 0x684 
    /*0000cb7c*/ LDR         LR, [R2, #128]              @ 0x80 
    /*0000cb80*/ LDR         R6, [R2, #164]              @ 0xa4 
    /*0000cb84*/ BFI         IP, LR, #0, #16 
    /*0000cb88*/ LDR         LR, [R2, #168]              @ 0xa8 
    /*0000cb8c*/ BFI         IP, R6, #16, #3 
    /*0000cb90*/ BFI         IP, LR, #19, #3 
    /*0000cb94*/ STR         IP, [R0, #1668]             @ 0x684 
    /*0000cb98*/ LDR         IP, [R0, #1672]             @ 0x688 
    /*0000cb9c*/ LDR         LR, [R2, #148]              @ 0x94 
    /*0000cba0*/ BFI         IP, LR, #0, #16 
    /*0000cba4*/ STR         IP, [R0, #1672]             @ 0x688 
    /*0000cba8*/ LDR         R6, [R2, #172]              @ 0xac 
    /*0000cbac*/ LDR         IP, [R0, #1676]             @ 0x68c 
    /*0000cbb0*/ LDR         LR, [R2, #176]              @ 0xb0 
    /*0000cbb4*/ BFI         IP, R6, #0, #8 
    /*0000cbb8*/ LDR         R6, [R2, #180]              @ 0xb4 
    /*0000cbbc*/ BFI         IP, LR, #8, #8 
    /*0000cbc0*/ LDR         LR, [R2, #184]              @ 0xb8 
    /*0000cbc4*/ BFI         IP, R6, #16, #8 
    /*0000cbc8*/ BFI         IP, LR, #24, #8 
    /*0000cbcc*/ STR         IP, [R0, #1676]             @ 0x68c 
    /*0000cbd0*/ LDR         LR, [R2, #188]              @ 0xbc 
    /*0000cbd4*/ LDR         IP, [R0, #1680]             @ 0x690 
    /*0000cbd8*/ LDR         R6, [R2, #192]              @ 0xc0 
    /*0000cbdc*/ BFI         IP, LR, #0, #4 
    /*0000cbe0*/ LDR         LR, [R2, #196]              @ 0xc4 
    /*0000cbe4*/ BFI         IP, R6, #4, #4 
    /*0000cbe8*/ BFI         IP, LR, #8, #4 
    /*0000cbec*/ STR         IP, [R0, #1680]             @ 0x690 
    /*0000cbf0*/ LDR         IP, [R2, #200]              @ 0xc8 
    /*0000cbf4*/ LDR         LR, [R0, #1684]             @ 0x694 
    /*0000cbf8*/ LSR         R6, IP, #8 
    /*0000cbfc*/ BFI         LR, IP, #0, #8 
    /*0000cc00*/ BFI         LR, R6, #8, #8 
    /*0000cc04*/ LSR         R6, IP, #16 
    /*0000cc08*/ BFI         LR, R6, #16, #8 
    /*0000cc0c*/ LSR         IP, IP, #24 
    /*0000cc10*/ BFI         LR, IP, #24, #8 
    /*0000cc14*/ STR         LR, [R0, #1680]             @ 0x690 
    /*0000cc18*/ LDR         R2, [R2, #204]              @ 0xcc 
    /*0000cc1c*/ LDR         IP, [R0, #1688]             @ 0x698 
    /*0000cc20*/ LSR         LR, R2, #8 
    /*0000cc24*/ BFI         IP, R2, #0, #8 
    /*0000cc28*/ BFI         IP, LR, #8, #8 
    /*0000cc2c*/ LSR         LR, R2, #16 
    /*0000cc30*/ BFI         IP, LR, #16, #8 
    /*0000cc34*/ LSR         R2, R2, #24 
    /*0000cc38*/ BFI         IP, R2, #24, #8 
    /*0000cc3c*/ STR         IP, [R0, #1680]             @ 0x690 
    /*0000cc40*/ LDR         R2, [R0, #1704]             @ 0x6a8 
    /*0000cc44*/ LDR         LR, [R3, #12] 
    /*0000cc48*/ LDR         IP, [R3, #8] 
    /*0000cc4c*/ BFI         R2, R4, #0, #1 
    /*0000cc50*/ BFI         R2, LR, #1, #2 
    /*0000cc54*/ LDR         R4, [R3] 
    /*0000cc58*/ LDR         LR, [R3, #24] 
    /*0000cc5c*/ BFI         R2, IP, #3, #1 
    /*0000cc60*/ LDR         IP, [R3, #28] 
    /*0000cc64*/ BFI         R2, R4, #4, #1 
    /*0000cc68*/ LDR         R6, [R3, #32] 
    /*0000cc6c*/ BFI         R2, LR, #5, #1 
    /*0000cc70*/ SUB         IP, IP, #1 
    /*0000cc74*/ LDR         R4, [R3, #208]              @ 0xd0 
    /*0000cc78*/ BFI         R2, IP, #6, #5 
    /*0000cc7c*/ LDR         LR, [R3, #212]              @ 0xd4 
    /*0000cc80*/ BFI         R2, R6, #11, #1 
    /*0000cc84*/ LDR         IP, [R3, #4] 
    /*0000cc88*/ BFI         R2, R4, #12, #3 
    /*0000cc8c*/ LDR         R4, [R3, #20] 
    /*0000cc90*/ BFI         R2, LR, #15, #1 
    /*0000cc94*/ LDR         LR, [R3, #36]               @ 0x24 
    /*0000cc98*/ BFI         R2, IP, #16, #1 
    /*0000cc9c*/ LDR         IP, [R3, #16] 
    /*0000cca0*/ BFI         R2, R4, #17, #1 
    /*0000cca4*/ BFI         R2, LR, #18, #1 
    /*0000cca8*/ BFI         R2, IP, #19, #3 
    /*0000ccac*/ STR         R2, [R0, #1704]             @ 0x6a8 
    /*0000ccb0*/ LDR         R2, [R5, #152]              @ 0x98 
    /*0000ccb4*/ LDR         IP, [R0, #1708]             @ 0x6ac 
    /*0000ccb8*/ CMP         R2, #0 
    /*0000ccbc*/ LDREQ       R2, [R1, #88]               @ 0x58 
    /*0000ccc0*/ LDRNE       R2, [R5, #144]              @ 0x90 
    /*0000ccc4*/ LDR         R1, [R1, #92]               @ 0x5c 
    /*0000ccc8*/ SUB         R2, R2, #1 
    /*0000cccc*/ UBFX        R2, R2, #0, #14 
    /*0000ccd0*/ BFI         IP, R2, #0, #14 
    /*0000ccd4*/ SUB         R2, R1, #1 
    /*0000ccd8*/ BFI         IP, R2, #16, #14 
    /*0000ccdc*/ STR         IP, [R0, #1708]             @ 0x6ac 
    /*0000cce0*/ LDR         R1, [R3, #152]              @ 0x98 
    /*0000cce4*/ LDR         R2, [R0, #1712]             @ 0x6b0 
    /*0000cce8*/ LDR         IP, [R3, #156]              @ 0x9c 
    /*0000ccec*/ BFI         R2, R1, #0, #10 
    /*0000ccf0*/ LDR         R1, [R3, #160]              @ 0xa0 
    /*0000ccf4*/ BFI         R2, IP, #10, #10 
    /*0000ccf8*/ BFI         R2, R1, #20, #10 
    /*0000ccfc*/ STR         R2, [R0, #1712]             @ 0x6b0 
    /*0000cd00*/ LDR         R2, [R0, #1716]             @ 0x6b4 
    /*0000cd04*/ LDR         IP, [R3, #132]              @ 0x84 
    /*0000cd08*/ LDR         R1, [R3, #136]              @ 0x88 
    /*0000cd0c*/ BFI         R2, IP, #0, #8 
    /*0000cd10*/ LDR         IP, [R3, #140]              @ 0x8c 
    /*0000cd14*/ BFI         R2, R1, #8, #6 
    /*0000cd18*/ LDR         R1, [R3, #144]              @ 0x90 
    /*0000cd1c*/ BFI         R2, IP, #16, #8 
    /*0000cd20*/ BFI         R2, R1, #24, #4 
    /*0000cd24*/ STR         R2, [R0, #1716]             @ 0x6b4 
    /*0000cd28*/ LDR         R2, [R0, #1720]             @ 0x6b8 
    /*0000cd2c*/ LDR         IP, [R3, #52]               @ 0x34 
    /*0000cd30*/ LDR         R1, [R3, #56]               @ 0x38 
    /*0000cd34*/ BFI         R2, IP, #0, #8 
    /*0000cd38*/ LDR         IP, [R3, #60]               @ 0x3c 
    /*0000cd3c*/ BFI         R2, R1, #8, #8 
    /*0000cd40*/ LDR         R1, [R3, #64]               @ 0x40 
    /*0000cd44*/ BFI         R2, IP, #16, #8 
    /*0000cd48*/ BFI         R2, R1, #24, #8 
    /*0000cd4c*/ STR         R2, [R0, #1720]             @ 0x6b8 
    /*0000cd50*/ LDR         R2, [R0, #1724]             @ 0x6bc 
    /*0000cd54*/ LDR         R1, [R3, #68]               @ 0x44 
    /*0000cd58*/ LDR         IP, [R3, #72]               @ 0x48 
    /*0000cd5c*/ BFI         R2, R1, #0, #6 
    /*0000cd60*/ LDR         R1, [R3, #76]               @ 0x4c 
    /*0000cd64*/ BFI         R2, IP, #8, #6 
    /*0000cd68*/ BFI         R2, R1, #16, #6 
    /*0000cd6c*/ STR         R2, [R0, #1724]             @ 0x6bc 
    /*0000cd70*/ LDR         R2, [R0, #1728]             @ 0x6c0 
    /*0000cd74*/ LDR         IP, [R3, #80]               @ 0x50 
    /*0000cd78*/ LDR         R1, [R3, #84]               @ 0x54 
    /*0000cd7c*/ BFI         R2, IP, #0, #8 
    /*0000cd80*/ BFI         R2, R1, #8, #8 
    /*0000cd84*/ STR         R2, [R0, #1728]             @ 0x6c0 
    /*0000cd88*/ LDR         R2, [R3, #88]               @ 0x58 
    /*0000cd8c*/ LDR         R1, [R0, #1732]             @ 0x6c4 
    /*0000cd90*/ STR         R2, [R0, #1732]             @ 0x6c4 
    /*0000cd94*/ LDR         R2, [R0, #1736]             @ 0x6c8 
    /*0000cd98*/ LDR         R2, [R3, #92]               @ 0x5c 
    /*0000cd9c*/ STR         R2, [R0, #1736]             @ 0x6c8 
    /*0000cda0*/ LDR         R2, [R3, #96]               @ 0x60 
    /*0000cda4*/ LDR         R1, [R0, #1740]             @ 0x6cc 
    /*0000cda8*/ STR         R2, [R0, #1740]             @ 0x6cc 
    /*0000cdac*/ LDR         R2, [R3, #100]              @ 0x64 
    /*0000cdb0*/ LDR         R1, [R0, #1744]             @ 0x6d0 
    /*0000cdb4*/ STR         R2, [R0, #1744]             @ 0x6d0 
    /*0000cdb8*/ LDR         R2, [R3, #104]              @ 0x68 
    /*0000cdbc*/ LDR         R1, [R0, #1748]             @ 0x6d4 
    /*0000cdc0*/ STR         R2, [R0, #1748]             @ 0x6d4 
    /*0000cdc4*/ LDR         R2, [R3, #108]              @ 0x6c 
    /*0000cdc8*/ LDR         R1, [R0, #1752]             @ 0x6d8 
    /*0000cdcc*/ STR         R2, [R0, #1752]             @ 0x6d8 
    /*0000cdd0*/ LDR         R2, [R3, #112]              @ 0x70 
    /*0000cdd4*/ LDR         R1, [R0, #1756]             @ 0x6dc 
    /*0000cdd8*/ STR         R2, [R0, #1756]             @ 0x6dc 
    /*0000cddc*/ LDR         R2, [R3, #116]              @ 0x74 
    /*0000cde0*/ LDR         R1, [R0, #1760]             @ 0x6e0 
    /*0000cde4*/ STR         R2, [R0, #1760]             @ 0x6e0 
    /*0000cde8*/ LDR         R2, [R3, #120]              @ 0x78 
    /*0000cdec*/ LDR         R1, [R0, #1764]             @ 0x6e4 
    /*0000cdf0*/ STR         R2, [R0, #1764]             @ 0x6e4 
    /*0000cdf4*/ LDR         R2, [R3, #124]              @ 0x7c 
    /*0000cdf8*/ LDR         R1, [R0, #1768]             @ 0x6e8 
    /*0000cdfc*/ STR         R2, [R0, #1768]             @ 0x6e8 
    /*0000ce00*/ LDR         R2, [R0, #1772]             @ 0x6ec 
    /*0000ce04*/ LDR         R1, [R3, #128]              @ 0x80 
    /*0000ce08*/ LDR         IP, [R3, #164]              @ 0xa4 
    /*0000ce0c*/ BFI         R2, R1, #0, #16 
    /*0000ce10*/ LDR         R1, [R3, #168]              @ 0xa8 
    /*0000ce14*/ BFI         R2, IP, #16, #3 
    /*0000ce18*/ BFI         R2, R1, #19, #3 
    /*0000ce1c*/ STR         R2, [R0, #1772]             @ 0x6ec 
    /*0000ce20*/ LDR         R1, [R3, #148]              @ 0x94 
    /*0000ce24*/ LDR         R2, [R0, #1776]             @ 0x6f0 
    /*0000ce28*/ BFI         R2, R1, #0, #16 
    /*0000ce2c*/ STR         R2, [R0, #1776]             @ 0x6f0 
    /*0000ce30*/ LDR         IP, [R3, #172]              @ 0xac 
    /*0000ce34*/ LDR         R2, [R0, #1780]             @ 0x6f4 
    /*0000ce38*/ LDR         R1, [R3, #176]              @ 0xb0 
    /*0000ce3c*/ BFI         R2, IP, #0, #8 
    /*0000ce40*/ LDR         IP, [R3, #180]              @ 0xb4 
    /*0000ce44*/ BFI         R2, R1, #8, #8 
    /*0000ce48*/ LDR         R1, [R3, #184]              @ 0xb8 
    /*0000ce4c*/ BFI         R2, IP, #16, #8 
    /*0000ce50*/ BFI         R2, R1, #24, #8 
    /*0000ce54*/ STR         R2, [R0, #1780]             @ 0x6f4 
    /*0000ce58*/ LDR         R2, [R0, #1784]             @ 0x6f8 
    /*0000ce5c*/ LDR         R1, [R3, #188]              @ 0xbc 
    /*0000ce60*/ LDR         IP, [R3, #192]              @ 0xc0 
    /*0000ce64*/ BFI         R2, R1, #0, #4 
    /*0000ce68*/ LDR         R1, [R3, #196]              @ 0xc4 
    /*0000ce6c*/ BFI         R2, IP, #4, #4 
    /*0000ce70*/ BFI         R2, R1, #8, #4 
    /*0000ce74*/ STR         R2, [R0, #1784]             @ 0x6f8 
    /*0000ce78*/ LDR         R2, [R3, #200]              @ 0xc8 
    /*0000ce7c*/ LDR         R1, [R0, #1788]             @ 0x6fc 
    /*0000ce80*/ LSR         IP, R2, #8 
    /*0000ce84*/ BFI         R1, R2, #0, #8 
    /*0000ce88*/ BFI         R1, IP, #8, #8 
    /*0000ce8c*/ LSR         IP, R2, #16 
    /*0000ce90*/ BFI         R1, IP, #16, #8 
    /*0000ce94*/ LSR         R2, R2, #24 
    /*0000ce98*/ BFI         R1, R2, #24, #8 
    /*0000ce9c*/ STR         R1, [R0, #1780]             @ 0x6f4 
    /*0000cea0*/ LDR         R3, [R3, #204]              @ 0xcc 
    /*0000cea4*/ LDR         R2, [R0, #1792]             @ 0x700 
    /*0000cea8*/ LSR         R1, R3, #8 
    /*0000ceac*/ BFI         R2, R3, #0, #8 
    /*0000ceb0*/ BFI         R2, R1, #8, #8 
    /*0000ceb4*/ LSR         R1, R3, #16 
    /*0000ceb8*/ BFI         R2, R1, #16, #8 
    /*0000cebc*/ LSR         R3, R3, #24 
    /*0000cec0*/ BFI         R2, R3, #24, #8 
    /*0000cec4*/ STR         R2, [R0, #1780]             @ 0x6f4 
    /*0000cec8*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_DRV_SetReg_DestCmp


FUNC_BEGIN VGS_DRV_SetReg_SCALE
    /*0000cecc*/ PUSH        {R4, R5, LR} 
    /*0000ced0*/ LDR         IP, [R3] 
    /*0000ced4*/ LDRD        R4, [SP, #12] 
    /*0000ced8*/ STR         IP, [R0, #28] 
    /*0000cedc*/ ADDS        R4, R4, #2368               @ 0x940 
    /*0000cee0*/ LDR         IP, [R3, #4] 
    /*0000cee4*/ ADC         R5, R5, #0 
    /*0000cee8*/ STR         IP, [R0, #32] 
    /*0000ceec*/ LDR         IP, [R3, #8] 
    /*0000cef0*/ STR         IP, [R0, #36]               @ 0x24 
    /*0000cef4*/ LDR         IP, [R3, #12] 
    /*0000cef8*/ STR         IP, [R0, #40]               @ 0x28 
    /*0000cefc*/ LDR         IP, [R3, #16] 
    /*0000cf00*/ STR         IP, [R0, #44]               @ 0x2c 
    /*0000cf04*/ LDR         IP, [R3, #20] 
    /*0000cf08*/ STR         IP, [R0, #48]               @ 0x30 
    /*0000cf0c*/ LDR         IP, [R3, #24] 
    /*0000cf10*/ STR         IP, [R0, #52]               @ 0x34 
    /*0000cf14*/ LDR         IP, [R3, #28] 
    /*0000cf18*/ STR         IP, [R0, #56]               @ 0x38 
    /*0000cf1c*/ STR         R4, [R0, #76]               @ 0x4c 
    /*0000cf20*/ STR         R5, [R0, #80]               @ 0x50 
    /*0000cf24*/ LDR         LR, [R2, #152]              @ 0x98 
    /*0000cf28*/ LDR         IP, [R0, #2368]             @ 0x940 
    /*0000cf2c*/ CMP         LR, #0 
    /*0000cf30*/ BNE         VGS_DRV_SetReg_SCALE_xcf84
    /*0000cf34*/ LDR         R5, [R1, #56]               @ 0x38 
    /*0000cf38*/ LDR         R4, [R3, #80]               @ 0x50 
    /*0000cf3c*/ CMP         R5, #4096                   @ 0x1000 
    /*0000cf40*/ BFI         IP, R4, #0, #24 
    /*0000cf44*/ BHI         VGS_DRV_SetReg_SCALE_xd178
    /*0000cf48*/ ORR         IP, IP, #117440512          @ 0x7000000 
    /*0000cf4c*/ BFI         IP, LR, #28, #1 
    /*0000cf50*/ BFI         IP, LR, #29, #1 
    /*0000cf54*/ LDR         LR, [R1, #332]              @ 0x14c 
    /*0000cf58*/ CMP         LR, #0 
    /*0000cf5c*/ BEQ         VGS_DRV_SetReg_SCALE_xd194
    VGS_DRV_SetReg_SCALE_xcf60:
    /*0000cf60*/ CMP         R4, #1048576                @ 0x100000 
    /*0000cf64*/ BEQ         VGS_DRV_SetReg_SCALE_xd1ac
    /*0000cf68*/ LDR         LR, [R1, #320]              @ 0x140 
    /*0000cf6c*/ ORR         IP, IP, #1073741824         @ 0x40000000 
    /*0000cf70*/ CMP         LR, #0 
    /*0000cf74*/ BNE         VGS_DRV_SetReg_SCALE_xd1c8
    VGS_DRV_SetReg_SCALE_xcf78:
    /*0000cf78*/ MOV         LR, #1 
    VGS_DRV_SetReg_SCALE_xcf7c:
    /*0000cf7c*/ BFI         IP, LR, #31, #1 
    /*0000cf80*/ B           VGS_DRV_SetReg_SCALE_xcfa8
    VGS_DRV_SetReg_SCALE_xcf84:
    /*0000cf84*/ LDR         R4, [R2, #100]              @ 0x64 
    /*0000cf88*/ LDR         LR, [R1, #332]              @ 0x14c 
    /*0000cf8c*/ BFI         IP, R4, #0, #24 
    /*0000cf90*/ ORR         IP, IP, #117440512          @ 0x7000000 
    /*0000cf94*/ AND         LR, LR, #1 
    /*0000cf98*/ BFC         IP, #28, #1 
    /*0000cf9c*/ BFC         IP, #29, #1 
    /*0000cfa0*/ BFI         IP, LR, #30, #1 
    /*0000cfa4*/ BFI         IP, LR, #31, #1 
    VGS_DRV_SetReg_SCALE_xcfa8:
    /*0000cfa8*/ STR         IP, [R0, #2368]             @ 0x940 
    /*0000cfac*/ LDR         LR, [R1, #320]              @ 0x140 
    /*0000cfb0*/ LDR         IP, [R0, #2372]             @ 0x944 
    /*0000cfb4*/ CMP         LR, #5 
    /*0000cfb8*/ CMPNE       LR, #0 
    /*0000cfbc*/ MOVNE       LR, #267386880              @ 0xff00000 
    /*0000cfc0*/ BNE         VGS_DRV_SetReg_SCALE_xcfd0
    /*0000cfc4*/ LDR         LR, [R2, #152]              @ 0x98 
    /*0000cfc8*/ CMP         LR, #0 
    /*0000cfcc*/ LDRNE       LR, [R2, #84]               @ 0x54 
    VGS_DRV_SetReg_SCALE_xcfd0:
    /*0000cfd0*/ BFI         IP, LR, #0, #30 
    /*0000cfd4*/ STR         IP, [R0, #2372]             @ 0x944 
    /*0000cfd8*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000cfdc*/ LDR         LR, [R0, #2376]             @ 0x948 
    /*0000cfe0*/ CMP         IP, #0 
    /*0000cfe4*/ LDRNE       IP, [R2, #88]               @ 0x58 
    /*0000cfe8*/ BFI         LR, IP, #0, #30 
    /*0000cfec*/ STR         LR, [R0, #2376]             @ 0x948 
    /*0000cff0*/ LDR         R4, [R1] 
    /*0000cff4*/ LDR         LR, [R1, #16] 
    /*0000cff8*/ LDR         IP, [R0, #2380]             @ 0x94c 
    /*0000cffc*/ LDR         R4, [R4, #12] 
    /*0000d000*/ LDR         LR, [LR, #12] 
    /*0000d004*/ CMP         R4, #29 
    /*0000d008*/ CMPNE       R4, #26 
    /*0000d00c*/ MOVEQ       R4, #1 
    /*0000d010*/ MOVNE       R4, #0 
    /*0000d014*/ CMP         LR, #29 
    /*0000d018*/ CMPNE       LR, #26 
    /*0000d01c*/ BFI         IP, R4, #19, #2 
    /*0000d020*/ MOVEQ       LR, #1 
    /*0000d024*/ MOVNE       LR, #0 
    /*0000d028*/ BFI         IP, LR, #21, #2 
    /*0000d02c*/ CMP         R4, LR 
    /*0000d030*/ ORR         IP, IP, #25165824           @ 0x1800000 
    /*0000d034*/ BFC         IP, #26, #1 
    /*0000d038*/ BFC         IP, #28, #1 
    /*0000d03c*/ BFC         IP, #29, #1 
    /*0000d040*/ BEQ         VGS_DRV_SetReg_SCALE_xd088
    /*0000d044*/ LDR         LR, [R1, #448]              @ 0x1c0 
    /*0000d048*/ CMP         LR, #0 
    /*0000d04c*/ BNE         VGS_DRV_SetReg_SCALE_xd088
    /*0000d050*/ LDR         LR, [R1, #332]              @ 0x14c 
    /*0000d054*/ ORR         IP, IP, #1073741824         @ 0x40000000 
    /*0000d058*/ CMP         LR, #0 
    /*0000d05c*/ LDRNE       LR, [R3, #84]               @ 0x54 
    /*0000d060*/ BEQ         VGS_DRV_SetReg_SCALE_xd098
    /*0000d064*/ CMP         LR, #1048576                @ 0x100000 
    /*0000d068*/ BNE         VGS_DRV_SetReg_SCALE_xd170
    VGS_DRV_SetReg_SCALE_xd06c:
    /*0000d06c*/ LDR         LR, [R1, #316]              @ 0x13c 
    /*0000d070*/ CMP         LR, #0 
    /*0000d074*/ BNE         VGS_DRV_SetReg_SCALE_xd170
    /*0000d078*/ LDR         LR, [R1, #304]              @ 0x130 
    /*0000d07c*/ CMP         LR, #0 
    /*0000d080*/ BEQ         VGS_DRV_SetReg_SCALE_xd098
    /*0000d084*/ B           VGS_DRV_SetReg_SCALE_xd170
    VGS_DRV_SetReg_SCALE_xd088:
    /*0000d088*/ LDR         LR, [R1, #332]              @ 0x14c 
    /*0000d08c*/ CMP         LR, #0 
    /*0000d090*/ BNE         VGS_DRV_SetReg_SCALE_xd158
    /*0000d094*/ BFI         IP, LR, #30, #1 
    VGS_DRV_SetReg_SCALE_xd098:
    /*0000d098*/ MOV         LR, #0 
    VGS_DRV_SetReg_SCALE_xd09c:
    /*0000d09c*/ BFI         IP, LR, #31, #1 
    /*0000d0a0*/ STR         IP, [R0, #2380]             @ 0x94c 
    /*0000d0a4*/ LDR         IP, [R3, #84]               @ 0x54 
    /*0000d0a8*/ LDR         R3, [R0, #2384]             @ 0x950 
    /*0000d0ac*/ BFI         R3, IP, #0, #24 
    /*0000d0b0*/ STR         R3, [R0, #2384]             @ 0x950 
    /*0000d0b4*/ LDR         R3, [R0, #2388]             @ 0x954 
    /*0000d0b8*/ BFC         R3, #0, #24 
    /*0000d0bc*/ STR         R3, [R0, #2388]             @ 0x954 
    /*0000d0c0*/ LDR         R3, [R0, #2392]             @ 0x958 
    /*0000d0c4*/ BFC         R3, #0, #24 
    /*0000d0c8*/ STR         R3, [R0, #2392]             @ 0x958 
    /*0000d0cc*/ LDR         IP, [R1, #332]              @ 0x14c 
    /*0000d0d0*/ LDR         R3, [R0, #2396]             @ 0x95c 
    /*0000d0d4*/ CMP         IP, #0 
    /*0000d0d8*/ BFIEQ       R3, IP, #0, #16 
    /*0000d0dc*/ BFIEQ       R3, IP, #16, #16 
    /*0000d0e0*/ BEQ         VGS_DRV_SetReg_SCALE_xd10c
    /*0000d0e4*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000d0e8*/ LDR         LR, [R1, #92]               @ 0x5c 
    /*0000d0ec*/ CMP         IP, #0 
    /*0000d0f0*/ LDREQ       IP, [R1, #88]               @ 0x58 
    /*0000d0f4*/ LDRNE       IP, [R2, #96]               @ 0x60 
    /*0000d0f8*/ SUB         IP, IP, #1 
    /*0000d0fc*/ UXTH        IP, IP 
    /*0000d100*/ BFI         R3, IP, #0, #16 
    /*0000d104*/ SUB         IP, LR, #1 
    /*0000d108*/ BFI         R3, IP, #16, #16 
    VGS_DRV_SetReg_SCALE_xd10c:
    /*0000d10c*/ STR         R3, [R0, #2396]             @ 0x95c 
    /*0000d110*/ LDR         IP, [R1, #332]              @ 0x14c 
    /*0000d114*/ LDR         R3, [R0, #2400]             @ 0x960 
    /*0000d118*/ CMP         IP, #0 
    /*0000d11c*/ BFIEQ       R3, IP, #0, #16 
    /*0000d120*/ BFIEQ       R3, IP, #16, #16 
    /*0000d124*/ BEQ         VGS_DRV_SetReg_SCALE_xd150
    /*0000d128*/ LDR         IP, [R2, #152]              @ 0x98 
    /*0000d12c*/ CMP         IP, #0 
    /*0000d130*/ LDREQ       R2, [R1, #80]               @ 0x50 
    /*0000d134*/ LDRNE       R2, [R2, #92]               @ 0x5c 
    /*0000d138*/ LDR         R1, [R1, #84]               @ 0x54 
    /*0000d13c*/ SUB         R2, R2, #1 
    /*0000d140*/ UXTH        R2, R2 
    /*0000d144*/ BFI         R3, R2, #0, #16 
    /*0000d148*/ SUB         R2, R1, #1 
    /*0000d14c*/ BFI         R3, R2, #16, #16 
    VGS_DRV_SetReg_SCALE_xd150:
    /*0000d150*/ STR         R3, [R0, #2400]             @ 0x960 
    /*0000d154*/ POP         {R4, R5, PC} 
    VGS_DRV_SetReg_SCALE_xd158:
    /*0000d158*/ LDR         LR, [R3, #84]               @ 0x54 
    /*0000d15c*/ CMP         LR, #1048576                @ 0x100000 
    /*0000d160*/ BEQ         VGS_DRV_SetReg_SCALE_xd1d0
    VGS_DRV_SetReg_SCALE_xd164:
    /*0000d164*/ CMP         LR, #1048576                @ 0x100000 
    /*0000d168*/ ORR         IP, IP, #1073741824         @ 0x40000000 
    /*0000d16c*/ BEQ         VGS_DRV_SetReg_SCALE_xd06c
    VGS_DRV_SetReg_SCALE_xd170:
    /*0000d170*/ MOV         LR, #1 
    /*0000d174*/ B           VGS_DRV_SetReg_SCALE_xd09c
    VGS_DRV_SetReg_SCALE_xd178:
    /*0000d178*/ BFI         IP, LR, #24, #1 
    /*0000d17c*/ ORR         IP, IP, #100663296          @ 0x6000000 
    /*0000d180*/ BFI         IP, LR, #28, #1 
    /*0000d184*/ BFI         IP, LR, #29, #1 
    /*0000d188*/ LDR         LR, [R1, #332]              @ 0x14c 
    /*0000d18c*/ CMP         LR, #0 
    /*0000d190*/ BNE         VGS_DRV_SetReg_SCALE_xcf60
    VGS_DRV_SetReg_SCALE_xd194:
    /*0000d194*/ LDR         R4, [R1, #320]              @ 0x140 
    /*0000d198*/ BFI         IP, LR, #30, #1 
    /*0000d19c*/ CMP         R4, #0 
    /*0000d1a0*/ BNE         VGS_DRV_SetReg_SCALE_xd1c8
    VGS_DRV_SetReg_SCALE_xd1a4:
    /*0000d1a4*/ MOV         LR, #0 
    /*0000d1a8*/ B           VGS_DRV_SetReg_SCALE_xcf7c
    VGS_DRV_SetReg_SCALE_xd1ac:
    /*0000d1ac*/ LDR         LR, [R1, #312]              @ 0x138 
    /*0000d1b0*/ CMP         LR, #0 
    /*0000d1b4*/ BEQ         VGS_DRV_SetReg_SCALE_xd1f0
    VGS_DRV_SetReg_SCALE_xd1b8:
    /*0000d1b8*/ LDR         R4, [R1, #320]              @ 0x140 
    /*0000d1bc*/ ORR         IP, IP, #1073741824         @ 0x40000000 
    /*0000d1c0*/ CMP         R4, #0 
    /*0000d1c4*/ BEQ         VGS_DRV_SetReg_SCALE_xd21c
    VGS_DRV_SetReg_SCALE_xd1c8:
    /*0000d1c8*/ ORR         IP, IP, #-2147483648        @ 0x80000000 
    /*0000d1cc*/ B           VGS_DRV_SetReg_SCALE_xcfa8
    VGS_DRV_SetReg_SCALE_xd1d0:
    /*0000d1d0*/ LDR         R4, [R1, #316]              @ 0x13c 
    /*0000d1d4*/ CMP         R4, #0 
    /*0000d1d8*/ BNE         VGS_DRV_SetReg_SCALE_xd164
    /*0000d1dc*/ LDR         R4, [R1, #304]              @ 0x130 
    /*0000d1e0*/ CMP         R4, #0 
    /*0000d1e4*/ BNE         VGS_DRV_SetReg_SCALE_xd164
    /*0000d1e8*/ BFI         IP, R4, #30, #1 
    /*0000d1ec*/ B           VGS_DRV_SetReg_SCALE_xd06c
    VGS_DRV_SetReg_SCALE_xd1f0:
    /*0000d1f0*/ LDR         R4, [R1, #304]              @ 0x130 
    /*0000d1f4*/ CMP         R4, #0 
    /*0000d1f8*/ BNE         VGS_DRV_SetReg_SCALE_xd1b8
    /*0000d1fc*/ LDR         LR, [R1, #320]              @ 0x140 
    /*0000d200*/ BFI         IP, R4, #30, #1 
    /*0000d204*/ CMP         LR, #0 
    /*0000d208*/ BNE         VGS_DRV_SetReg_SCALE_xd1c8
    VGS_DRV_SetReg_SCALE_xd20c:
    /*0000d20c*/ LDR         LR, [R1, #304]              @ 0x130 
    /*0000d210*/ CMP         LR, #0 
    /*0000d214*/ BEQ         VGS_DRV_SetReg_SCALE_xd1a4
    /*0000d218*/ B           VGS_DRV_SetReg_SCALE_xcf78
    VGS_DRV_SetReg_SCALE_xd21c:
    /*0000d21c*/ CMP         LR, #0 
    /*0000d220*/ BNE         VGS_DRV_SetReg_SCALE_xcf78
    /*0000d224*/ B           VGS_DRV_SetReg_SCALE_xd20c
FUNC_END VGS_DRV_SetReg_SCALE


FUNC_BEGIN VGS_DRV_SetReg_COVER_Y
    /*0000d228*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000d22c*/ MOV         R4, #1 
    /*0000d230*/ ADD         R5, R1, #44                 @ 0x2c 
    /*0000d234*/ ADD         R7, R1, #68                 @ 0x44 
    /*0000d238*/ MOV         R9, R0 
    /*0000d23c*/ MOV         R8, R4 
    /*0000d240*/ MOV         SL, #0 
    VGS_DRV_SetReg_COVER_Y_xd244:
    /*0000d244*/ ADD         R0, R9, R4, LSL #3 
    /*0000d248*/ ADD         IP, R9, SL, LSL #3 
    /*0000d24c*/ LDR         R6, [R5] 
    /*0000d250*/ LDR         R2, [R0, #148]              @ 0x94 
    /*0000d254*/ LDR         R3, [IP, #148]              @ 0x94 
    /*0000d258*/ CMP         R2, R3 
    /*0000d25c*/ SUB         R1, R2, R3 
    /*0000d260*/ BFIEQ       R6, R8, #0, #30 
    /*0000d264*/ BEQ         VGS_DRV_SetReg_COVER_Y_xd280
    /*0000d268*/ LDR         R3, [IP, #152]              @ 0x98 
    /*0000d26c*/ LDR         R0, [R0, #152]              @ 0x98 
    /*0000d270*/ SUB         R0, R0, R3 
    /*0000d274*/ LSL         R0, R0, #14 
    /*0000d278*/ BL          0x000000000000D278          @ __aeabi_idiv [R_ARM_CALL: +0x0] 
    /*0000d27c*/ BFI         R6, R0, #0, #30 
    VGS_DRV_SetReg_COVER_Y_xd280:
    /*0000d280*/ CMP         R4, #3 
    /*0000d284*/ STR         R6, [R5], #4 
    /*0000d288*/ ADDEQ       SL, SL, #1 
    /*0000d28c*/ MOVEQ       R4, SL 
    /*0000d290*/ CMP         R7, R5 
    /*0000d294*/ ADD         R4, R4, #1 
    /*0000d298*/ BNE         VGS_DRV_SetReg_COVER_Y_xd244
    /*0000d29c*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
FUNC_END VGS_DRV_SetReg_COVER_Y


FUNC_BEGIN VGS_DRV_SetReg_COVER_K
    /*0000d2a0*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000d2a4*/ MOV         R9, R0 
    /*0000d2a8*/ LDR         R3, [R1, #152]              @ 0x98 
    /*0000d2ac*/ SUB         SP, SP, #16 
    /*0000d2b0*/ CMP         R3, #0 
    /*0000d2b4*/ BNE         VGS_DRV_SetReg_COVER_K_xd350
    /*0000d2b8*/ LDR         IP, [R0, #148]              @ 0x94 
    /*0000d2bc*/ LDR         R1, [R9, #164]              @ 0xa4 
    /*0000d2c0*/ LDR         R0, [R0, #156]              @ 0x9c 
    /*0000d2c4*/ LDR         R3, [R9, #172]              @ 0xac 
    /*0000d2c8*/ STR         IP, [SP] 
    /*0000d2cc*/ STMIB       SP, {R0, R1, R3} 
    VGS_DRV_SetReg_COVER_K_xd2d0:
    /*0000d2d0*/ MOV         R4, #1 
    /*0000d2d4*/ ADD         R5, R2, #20 
    /*0000d2d8*/ ADD         R7, R2, #44                 @ 0x2c 
    /*0000d2dc*/ MOV         R8, R4 
    /*0000d2e0*/ MOV         R6, #0 
    VGS_DRV_SetReg_COVER_K_xd2e4:
    /*0000d2e4*/ ADD         R3, SP, #16 
    /*0000d2e8*/ ADD         R1, R9, R4, LSL #3 
    /*0000d2ec*/ ADD         R0, R3, R4, LSL #2 
    /*0000d2f0*/ ADD         R2, R3, R6, LSL #2 
    /*0000d2f4*/ ADD         R3, R9, R6, LSL #3 
    /*0000d2f8*/ LDR         IP, [R1, #152]              @ 0x98 
    /*0000d2fc*/ LDR         SL, [R5] 
    /*0000d300*/ LDR         R3, [R3, #152]              @ 0x98 
    /*0000d304*/ CMP         IP, R3 
    /*0000d308*/ SUB         R1, IP, R3 
    /*0000d30c*/ BFIEQ       SL, R8, #0, #30 
    /*0000d310*/ BEQ         VGS_DRV_SetReg_COVER_K_xd32c
    /*0000d314*/ LDR         R3, [R2, #-16] 
    /*0000d318*/ LDR         R0, [R0, #-16] 
    /*0000d31c*/ SUB         R0, R0, R3 
    /*0000d320*/ LSL         R0, R0, #14 
    /*0000d324*/ BL          0x000000000000D324          @ __aeabi_idiv [R_ARM_CALL: +0x0] 
    /*0000d328*/ BFI         SL, R0, #0, #30 
    VGS_DRV_SetReg_COVER_K_xd32c:
    /*0000d32c*/ CMP         R4, #3 
    /*0000d330*/ STR         SL, [R5], #4 
    /*0000d334*/ ADDEQ       R6, R6, #1 
    /*0000d338*/ MOVEQ       R4, R6 
    /*0000d33c*/ CMP         R7, R5 
    /*0000d340*/ ADD         R4, R4, #1 
    /*0000d344*/ BNE         VGS_DRV_SetReg_COVER_K_xd2e4
    /*0000d348*/ ADD         SP, SP, #16 
    /*0000d34c*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DRV_SetReg_COVER_K_xd350:
    /*0000d350*/ LDR         LR, [R1, #44]               @ 0x2c 
    /*0000d354*/ LDR         IP, [R1, #48]               @ 0x30 
    /*0000d358*/ LDR         R0, [R1, #52]               @ 0x34 
    /*0000d35c*/ LDR         R3, [R1, #56]               @ 0x38 
    /*0000d360*/ STR         LR, [SP] 
    /*0000d364*/ STR         IP, [SP, #4] 
    /*0000d368*/ STR         R0, [SP, #8] 
    /*0000d36c*/ STR         R3, [SP, #12] 
    /*0000d370*/ B           VGS_DRV_SetReg_COVER_K_xd2d0
FUNC_END VGS_DRV_SetReg_COVER_K


FUNC_BEGIN VGS_DRV_SetReg_COVER
    /*0000d374*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000d378*/ SUB         SP, SP, #76                 @ 0x4c 
    /*0000d37c*/ MOV         R5, R2 
    /*0000d380*/ MOV         R4, R1 
    /*0000d384*/ LDRD        R6, [SP, #96]               @ 0x60 
    /*0000d388*/ MOV         R3, R0 
    /*0000d38c*/ ADDS        R6, R6, #2416               @ 0x970 
    /*0000d390*/ STR         R6, [R0, #60]               @ 0x3c 
    /*0000d394*/ ADC         R7, R7, #0 
    /*0000d398*/ STR         R7, [R0, #64]               @ 0x40 
    /*0000d39c*/ LDR         R2, [R2, #152]              @ 0x98 
    /*0000d3a0*/ ADD         R6, R0, #2432               @ 0x980 
    /*0000d3a4*/ LDR         R1, [R0, #2416]             @ 0x970 
    /*0000d3a8*/ CMP         R2, #0 
    /*0000d3ac*/ LDREQ       R2, [R4, #128]              @ 0x80 
    /*0000d3b0*/ LDRNE       R2, [R5, #40]               @ 0x28 
    /*0000d3b4*/ AND         R2, R2, #1 
    /*0000d3b8*/ BFI         R1, R2, #0, #1 
    /*0000d3bc*/ STR         R1, [R0, #2416]             @ 0x970 
    /*0000d3c0*/ LDR         R1, [R4, #132]              @ 0x84 
    /*0000d3c4*/ LDR         R2, [R0, #2420]             @ 0x974 
    /*0000d3c8*/ CMP         R1, #0 
    /*0000d3cc*/ LDRNE       R1, [R4, #140]              @ 0x8c 
    /*0000d3d0*/ MVNNE       R1, R1 
    /*0000d3d4*/ BFI         R2, R1, #0, #1 
    /*0000d3d8*/ STR         R2, [R0, #2420]             @ 0x974 
    /*0000d3dc*/ MOV         R1, R6 
    /*0000d3e0*/ LDR         R2, [R4, #144]              @ 0x90 
    /*0000d3e4*/ LDR         R0, [R0, #2428]             @ 0x97c 
    /*0000d3e8*/ SUB         R2, R2, #1 
    /*0000d3ec*/ BFI         R0, R2, #0, #4 
    /*0000d3f0*/ STR         R0, [R3, #2428]             @ 0x97c 
    /*0000d3f4*/ LDR         IP, [R3, #2424]             @ 0x978 
    /*0000d3f8*/ ADD         R0, SP, #4 
    /*0000d3fc*/ MOV         R2, #68                     @ 0x44 
    /*0000d400*/ ORR         IP, IP, #1 
    /*0000d404*/ STR         IP, [R3, #2424]             @ 0x978 
    /*0000d408*/ BL          0x000000000000D408          @ memcpy [R_ARM_CALL: +0x0] 
    /*0000d40c*/ LDR         R2, [R4, #136]              @ 0x88 
    /*0000d410*/ LDRH        R3, [SP, #4] 
    /*0000d414*/ UBFX        R1, R2, #16, #8 
    /*0000d418*/ UBFX        R0, R2, #8, #8 
    /*0000d41c*/ BFI         R3, R1, #0, #10 
    /*0000d420*/ STRH        R3, [SP, #4] 
    /*0000d424*/ LDR         R3, [SP, #4] 
    /*0000d428*/ UXTB        R2, R2 
    /*0000d42c*/ LDR         R1, [R5, #152]              @ 0x98 
    /*0000d430*/ BFI         R3, R0, #10, #10 
    /*0000d434*/ LDR         R0, [R4, #160]              @ 0xa0 
    /*0000d438*/ CMP         R1, #0 
    /*0000d43c*/ LDR         IP, [R4, #152]              @ 0x98 
    /*0000d440*/ LDR         R1, [R4, #168]              @ 0xa8 
    /*0000d444*/ STR         R3, [SP, #4] 
    /*0000d448*/ LSR         R3, R3, #16 
    /*0000d44c*/ BFI         R3, R2, #4, #10 
    /*0000d450*/ LDR         R2, [R4, #176]              @ 0xb0 
    /*0000d454*/ STRH        R0, [SP, #14] 
    /*0000d458*/ ADDNE       R0, R5, #44                 @ 0x2c 
    /*0000d45c*/ STRH        R3, [SP, #6] 
    /*0000d460*/ STRH        R1, [SP, #18] 
    /*0000d464*/ STRH        R2, [SP, #22] 
    /*0000d468*/ LDMNE       R0, {R0, R1, R2, R3} 
    /*0000d46c*/ LDREQ       R0, [R4, #148]              @ 0x94 
    /*0000d470*/ LDREQ       R1, [R4, #156]              @ 0x9c 
    /*0000d474*/ LDREQ       R2, [R4, #164]              @ 0xa4 
    /*0000d478*/ LDREQ       R3, [R4, #172]              @ 0xac 
    /*0000d47c*/ STRH        R0, [SP, #8] 
    /*0000d480*/ MOV         R0, R4 
    /*0000d484*/ STRH        R1, [SP, #12] 
    /*0000d488*/ ADD         R1, SP, #4 
    /*0000d48c*/ STRH        IP, [SP, #10] 
    /*0000d490*/ STRH        R3, [SP, #20] 
    /*0000d494*/ STRH        R2, [SP, #16] 
    /*0000d498*/ BL          0x000000000000D498          @ VGS_DRV_SetReg_COVER_Y [R_ARM_CALL: .text+0xd228] 
    /*0000d49c*/ ADD         R2, SP, #4 
    /*0000d4a0*/ MOV         R1, R5 
    /*0000d4a4*/ MOV         R0, R4 
    /*0000d4a8*/ BL          0x000000000000D4A8          @ VGS_DRV_SetReg_COVER_K [R_ARM_CALL: .text+0xd2a0] 
    /*0000d4ac*/ ADD         R1, SP, #4 
    /*0000d4b0*/ MOV         R0, R6 
    /*0000d4b4*/ MOV         R2, #68                     @ 0x44 
    /*0000d4b8*/ BL          0x000000000000D4B8          @ memcpy [R_ARM_CALL: +0x0] 
    /*0000d4bc*/ ADD         SP, SP, #76                 @ 0x4c 
    /*0000d4c0*/ POP         {R4, R5, R6, R7, PC} 
FUNC_END VGS_DRV_SetReg_COVER


FUNC_BEGIN VGS_DRV_DcmpCmpCfg
    /*0000d4c4*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000d4c8*/ SUB         SP, SP, #92                 @ 0x5c 
    /*0000d4cc*/ LDR         IP, [R0, #20] 
    /*0000d4d0*/ MOV         R4, R1 
    /*0000d4d4*/ LDR         R6, [R0, #332]              @ 0x14c 
    /*0000d4d8*/ MOV         R7, R2 
    /*0000d4dc*/ LDR         R5, [R0, #12] 
    /*0000d4e0*/ CMP         IP, #1 
    /*0000d4e4*/ LDR         LR, [R0] 
    /*0000d4e8*/ LDR         R2, [R0, #4] 
    /*0000d4ec*/ MOV         R0, #0 
    /*0000d4f0*/ LDR         R1, [R1, #12] 
    /*0000d4f4*/ STR         IP, [SP, #16] 
    /*0000d4f8*/ STR         R6, [SP, #8] 
    /*0000d4fc*/ LDR         IP, [R4, #20] 
    /*0000d500*/ LDR         R6, [R4] 
    /*0000d504*/ STR         R5, [SP, #12] 
    /*0000d508*/ LDR         R5, [R4, #4] 
    /*0000d50c*/ STR         LR, [SP, #28] 
    /*0000d510*/ MOV         LR, #45                     @ 0x2d 
    /*0000d514*/ STR         R2, [SP, #32] 
    /*0000d518*/ STR         R1, [SP, #52]               @ 0x34 
    /*0000d51c*/ STR         IP, [SP, #56]               @ 0x38 
    /*0000d520*/ STR         R6, [SP, #68]               @ 0x44 
    /*0000d524*/ STR         R5, [SP, #72]               @ 0x48 
    /*0000d528*/ STR         R0, [SP, #20] 
    /*0000d52c*/ STR         R0, [SP, #36]               @ 0x24 
    /*0000d530*/ STR         R0, [SP, #40]               @ 0x28 
    /*0000d534*/ STR         R0, [SP, #44]               @ 0x2c 
    /*0000d538*/ STR         R0, [SP, #60]               @ 0x3c 
    /*0000d53c*/ STR         R0, [SP, #76]               @ 0x4c 
    /*0000d540*/ STR         R0, [SP, #80]               @ 0x50 
    /*0000d544*/ STR         R0, [SP, #84]               @ 0x54 
    /*0000d548*/ STR         LR, [SP, #48]               @ 0x30 
    /*0000d54c*/ BEQ         VGS_DRV_DcmpCmpCfg_xd584
    VGS_DRV_DcmpCmpCfg_xd550:
    /*0000d550*/ CMP         IP, #1 
    /*0000d554*/ BEQ         VGS_DRV_DcmpCmpCfg_xd560
    /*0000d558*/ ADD         SP, SP, #92                 @ 0x5c 
    /*0000d55c*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_DcmpCmpCfg_xd560:
    /*0000d560*/ MOV         R0, #2 
    /*0000d564*/ BL          0x000000000000D564          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000d568*/ LDR         R2, [SP, #116]              @ 0x74 
    /*0000d56c*/ LDR         R1, [SP, #112]              @ 0x70 
    /*0000d570*/ LDR         R3, [R0, #128]              @ 0x80 
    /*0000d574*/ ADD         R0, SP, #48                 @ 0x30 
    /*0000d578*/ BLX         R3 
    /*0000d57c*/ ADD         SP, SP, #92                 @ 0x5c 
    /*0000d580*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_DcmpCmpCfg_xd584:
    /*0000d584*/ MOV         R0, #2 
    /*0000d588*/ STR         R3, [SP, #4] 
    /*0000d58c*/ BL          0x000000000000D58C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000d590*/ LDR         R3, [SP, #4] 
    /*0000d594*/ MOV         R1, R7 
    /*0000d598*/ MOV         R2, R3 
    /*0000d59c*/ LDR         R3, [R0, #128]              @ 0x80 
    /*0000d5a0*/ ADD         R0, SP, #8 
    /*0000d5a4*/ BLX         R3 
    /*0000d5a8*/ LDR         IP, [R4, #20] 
    /*0000d5ac*/ B           VGS_DRV_DcmpCmpCfg_xd550
FUNC_END VGS_DRV_DcmpCmpCfg


FUNC_BEGIN VGS_DRV_SetReg
    /*0000d5b0*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*0000d5b4*/ MOVW        R7, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000d5b8*/ MOVT        R7, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000d5bc*/ SUB         SP, SP, #12 
    /*0000d5c0*/ ADD         SL, R7, #216                @ 0xd8 
    /*0000d5c4*/ MOV         R4, R1 
    /*0000d5c8*/ MOV         R5, R0 
    /*0000d5cc*/ ADD         R8, R7, #432                @ 0x1b0 
    /*0000d5d0*/ MOV         FP, R2 
    /*0000d5d4*/ MOV         R0, R7 
    /*0000d5d8*/ MOV         R2, #216                    @ 0xd8 
    /*0000d5dc*/ MOV         R1, #0 
    /*0000d5e0*/ BL          0x000000000000D5E0          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000d5e4*/ ADD         R9, R7, #648                @ 0x288 
    /*0000d5e8*/ MOV         R0, SL 
    /*0000d5ec*/ MOV         R2, #216                    @ 0xd8 
    /*0000d5f0*/ MOV         R1, #0 
    /*0000d5f4*/ MOV         R6, #156                    @ 0x9c 
    /*0000d5f8*/ BL          0x000000000000D5F8          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000d5fc*/ MOV         R0, R8 
    /*0000d600*/ MOV         R2, #216                    @ 0xd8 
    /*0000d604*/ MOV         R1, #0 
    /*0000d608*/ BL          0x000000000000D608          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000d60c*/ MOV         R0, R9 
    /*0000d610*/ MOV         R2, #216                    @ 0xd8 
    /*0000d614*/ MOV         R1, #0 
    /*0000d618*/ BL          0x000000000000D618          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000d61c*/ LDR         R1, [R4, #16] 
    /*0000d620*/ LDR         R0, [R4] 
    /*0000d624*/ MOV         R3, SL 
    /*0000d628*/ MOV         R2, R7 
    /*0000d62c*/ STR         R9, [SP, #4] 
    /*0000d630*/ STR         R8, [SP] 
    /*0000d634*/ BL          0x000000000000D634          @ VGS_DRV_DcmpCmpCfg [R_ARM_CALL: .text+0xd4c4] 
    /*0000d638*/ LDR         R2, [SP, #60]               @ 0x3c 
    /*0000d63c*/ ADD         R3, R7, #864                @ 0x360 
    /*0000d640*/ MOV         R1, R4 
    /*0000d644*/ MOV         R0, R5 
    /*0000d648*/ MLA         R6, R6, R2, R3 
    /*0000d64c*/ MOV         R2, R6 
    /*0000d650*/ BL          0x000000000000D650          @ VGS_DRV_SetReg_ModuleCtrl [R_ARM_CALL: .text+0xbc64] 
    /*0000d654*/ MOV         R2, R6 
    /*0000d658*/ MOV         R1, R4 
    /*0000d65c*/ MOV         R0, R5 
    /*0000d660*/ BL          0x000000000000D660          @ VGS_DRV_SetReg_CurImg [R_ARM_CALL: .text+0xbe70] 
    /*0000d664*/ MOV         R2, R6 
    /*0000d668*/ MOV         R1, R4 
    /*0000d66c*/ MOV         R0, R5 
    /*0000d670*/ BL          0x000000000000D670          @ VGS_DRV_SetReg_CROP [R_ARM_CALL: .text+0xc034] 
    /*0000d674*/ LDRD        R2, [SP, #48]               @ 0x30 
    /*0000d678*/ MOV         R1, R4 
    /*0000d67c*/ MOV         R0, R5 
    /*0000d680*/ STRD        R2, [SP] 
    /*0000d684*/ MOV         R2, R6 
    /*0000d688*/ BL          0x000000000000D688          @ VGS_DRV_SetReg_OSD [R_ARM_CALL: .text+0xc1d8] 
    /*0000d68c*/ MOV         R1, R4 
    /*0000d690*/ MOV         R0, R5 
    /*0000d694*/ BL          0x000000000000D694          @ VGS_DRV_SetReg_CUS_CDS [R_ARM_CALL: .text+0xc15c] 
    /*0000d698*/ LDRD        R2, [SP, #48]               @ 0x30 
    /*0000d69c*/ MOV         R1, R4 
    /*0000d6a0*/ MOV         R0, R5 
    /*0000d6a4*/ BL          0x000000000000D6A4          @ VGS_DRV_SetReg_FPD [R_ARM_CALL: .text+0xc304] 
    /*0000d6a8*/ MOV         R2, R6 
    /*0000d6ac*/ MOV         R1, R4 
    /*0000d6b0*/ MOV         R0, R5 
    /*0000d6b4*/ BL          0x000000000000D6B4          @ VGS_DRV_SetReg_LumaStat [R_ARM_CALL: .text+0xc544] 
    /*0000d6b8*/ MOV         R1, R4 
    /*0000d6bc*/ MOV         R0, R5 
    /*0000d6c0*/ BL          0x000000000000D6C0          @ VGS_DRV_SetReg_CSC [R_ARM_CALL: .text+0xc5a8] 
    /*0000d6c4*/ MOV         R2, R6 
    /*0000d6c8*/ MOV         R1, R4 
    /*0000d6cc*/ MOV         R0, R5 
    /*0000d6d0*/ BL          0x000000000000D6D0          @ VGS_DRV_SetReg_DestImg [R_ARM_CALL: .text+0xc668] 
    /*0000d6d4*/ MOV         R3, SL 
    /*0000d6d8*/ MOV         R2, R7 
    /*0000d6dc*/ MOV         R1, R4 
    /*0000d6e0*/ MOV         R0, R5 
    /*0000d6e4*/ STR         R6, [SP] 
    /*0000d6e8*/ BL          0x000000000000D6E8          @ VGS_DRV_SetReg_CurDcmp [R_ARM_CALL: .text+0xc8dc] 
    /*0000d6ec*/ MOV         R3, R9 
    /*0000d6f0*/ MOV         R2, R8 
    /*0000d6f4*/ MOV         R1, R4 
    /*0000d6f8*/ MOV         R0, R5 
    /*0000d6fc*/ STR         R6, [SP] 
    /*0000d700*/ BL          0x000000000000D700          @ VGS_DRV_SetReg_DestCmp [R_ARM_CALL: .text+0xc99c] 
    /*0000d704*/ LDRD        R2, [SP, #48]               @ 0x30 
    /*0000d708*/ MOV         R1, R4 
    /*0000d70c*/ MOV         R0, R5 
    /*0000d710*/ STRD        R2, [SP] 
    /*0000d714*/ MOV         R3, FP 
    /*0000d718*/ MOV         R2, R6 
    /*0000d71c*/ BL          0x000000000000D71C          @ VGS_DRV_SetReg_SCALE [R_ARM_CALL: .text+0xcecc] 
    /*0000d720*/ LDRD        R0, [SP, #48]               @ 0x30 
    /*0000d724*/ MOV         R2, R6 
    /*0000d728*/ STRD        R0, [SP] 
    /*0000d72c*/ MOV         R0, R5 
    /*0000d730*/ MOV         R1, R4 
    /*0000d734*/ BL          0x000000000000D734          @ VGS_DRV_SetReg_COVER [R_ARM_CALL: .text+0xd374] 
    /*0000d738*/ MOV         R0, #0 
    /*0000d73c*/ ADD         SP, SP, #12 
    /*0000d740*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
FUNC_END VGS_DRV_SetReg


FUNC_BEGIN VGS_DRV_IsWrongInt
    /*0000d744*/ PUSH        {R4, R5, LR} 
    /*0000d748*/ MOV         R5, R0 
    /*0000d74c*/ LDR         LR, [PC, #176]              @ 0x000000000000d804 
    /*0000d750*/ ANDS        R4, R0, #255                @ 0xff 
    /*0000d754*/ SUB         SP, SP, #44                 @ 0x2c 
    /*0000d758*/ ADD         IP, SP, #16 
    /*0000d75c*/ LDM         LR!, {R0, R1, R2, R3} 
    /*0000d760*/ STMIA       IP!, {R0, R1, R2, R3} 
    /*0000d764*/ LDM         LR, {R0, R1} 
    /*0000d768*/ STM         IP, {R0, R1} 
    /*0000d76c*/ BEQ         VGS_DRV_IsWrongInt_xd7ac
    /*0000d770*/ CMP         R4, #128                    @ 0x80 
    /*0000d774*/ BEQ         VGS_DRV_IsWrongInt_xd7a8
    /*0000d778*/ CMP         R4, #32 
    /*0000d77c*/ BEQ         VGS_DRV_IsWrongInt_xd7ec
    /*0000d780*/ CMP         R4, #16 
    /*0000d784*/ BEQ         VGS_DRV_IsWrongInt_xd7f4
    /*0000d788*/ CMP         R4, #8 
    /*0000d78c*/ BEQ         VGS_DRV_IsWrongInt_xd7fc
    /*0000d790*/ CMP         R4, #2 
    /*0000d794*/ MOVNE       R4, #5 
    /*0000d798*/ BNE         VGS_DRV_IsWrongInt_xd7ac
    /*0000d79c*/ MOV         R0, #0 
    /*0000d7a0*/ ADD         SP, SP, #44                 @ 0x2c 
    /*0000d7a4*/ POP         {R4, R5, PC} 
    VGS_DRV_IsWrongInt_xd7a8:
    /*0000d7a8*/ MOV         R4, #1 
    VGS_DRV_IsWrongInt_xd7ac:
    /*0000d7ac*/ ADD         R3, SP, #40                 @ 0x28 
    /*0000d7b0*/ STR         R5, [SP, #8] 
    /*0000d7b4*/ ADD         R4, R3, R4, LSL #2 
    /*0000d7b8*/ MOV         R1, #45                     @ 0x2d 
    /*0000d7bc*/ MOVW        R3, #2612                   @ 0xa34 
    /*0000d7c0*/ MOVW        R2, #0                      @ .LC21 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2e24] 
    /*0000d7c4*/ LDR         IP, [R4, #-24]              @ 0xffffffe8 
    /*0000d7c8*/ MOVT        R2, #0                      @ .LC21 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2e24] 
    /*0000d7cc*/ STR         R3, [SP] 
    /*0000d7d0*/ MOV         R0, #0 
    /*0000d7d4*/ LDR         R3, [PC, #44]               @ 0x000000000000d808 
    /*0000d7d8*/ STR         IP, [SP, #4] 
    /*0000d7dc*/ BL          0x000000000000D7DC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000d7e0*/ MVN         R0, #0 
    /*0000d7e4*/ ADD         SP, SP, #44                 @ 0x2c 
    /*0000d7e8*/ POP         {R4, R5, PC} 
    VGS_DRV_IsWrongInt_xd7ec:
    /*0000d7ec*/ MOV         R4, #2 
    /*0000d7f0*/ B           VGS_DRV_IsWrongInt_xd7ac
    VGS_DRV_IsWrongInt_xd7f4:
    /*0000d7f4*/ MOV         R4, #3 
    /*0000d7f8*/ B           VGS_DRV_IsWrongInt_xd7ac
    VGS_DRV_IsWrongInt_xd7fc:
    /*0000d7fc*/ MOV         R4, #4 
    /*0000d800*/ B           VGS_DRV_IsWrongInt_xd7ac
    /*0000d804*/ ANDEQ       R0, R0, R4, LSL R8 
    /*0000d808*/ ANDEQ       R0, R0, IP, LSR #16 
FUNC_END VGS_DRV_IsWrongInt


FUNC_BEGIN VGS_DRV_PwrOn
    /*0000d80c*/ MOV         R0, #0 
    /*0000d810*/ BX          LR 
FUNC_END VGS_DRV_PwrOn


FUNC_BEGIN VGS_DRV_ClkEnable
    /*0000d814*/ PUSH        {R4, R5, R6, LR} 
    /*0000d818*/ SUB         SP, SP, #16 
    /*0000d81c*/ ADD         R4, SP, #16 
    /*0000d820*/ MOV         R6, R0 
    /*0000d824*/ MOV         R0, #2 
    /*0000d828*/ MOV         R5, #0 
    /*0000d82c*/ MOV         R2, #1 
    /*0000d830*/ MOV         R3, #45                     @ 0x2d 
    /*0000d834*/ STR         R2, [R4, #-16]! 
    /*0000d838*/ STR         R3, [SP, #4] 
    /*0000d83c*/ STR         R6, [SP, #8] 
    /*0000d840*/ STR         R5, [SP, #12] 
    /*0000d844*/ BL          0x000000000000D844          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000d848*/ MOV         R2, R4 
    /*0000d84c*/ MOV         R1, #199                    @ 0xc7 
    /*0000d850*/ LDR         R3, [R0, #20] 
    /*0000d854*/ ADD         R0, SP, #4 
    /*0000d858*/ BLX         R3 
    /*0000d85c*/ MOV         R0, #2 
    /*0000d860*/ STR         R5, [SP] 
    /*0000d864*/ BL          0x000000000000D864          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000d868*/ MOV         R2, R4 
    /*0000d86c*/ MOV         R1, #198                    @ 0xc6 
    /*0000d870*/ LDR         R3, [R0, #20] 
    /*0000d874*/ ADD         R0, SP, #4 
    /*0000d878*/ BLX         R3 
    /*0000d87c*/ MOV         R0, R6 
    /*0000d880*/ MOVW        R1, #25690                  @ 0x645a 
    /*0000d884*/ MOVT        R1, #4352                   @ 0x1100 
    /*0000d888*/ BL          0x000000000000D888          @ VGS_HAL_SetOutstanding [R_ARM_CALL: .text+0x10184] 
    /*0000d88c*/ MOV         R0, R5 
    /*0000d890*/ ADD         SP, SP, #16 
    /*0000d894*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_DRV_ClkEnable


FUNC_BEGIN VGS_DRV_ClkDisable
    /*0000d898*/ PUSH        {R4, R5, LR} 
    /*0000d89c*/ SUB         SP, SP, #20 
    /*0000d8a0*/ ADD         R4, SP, #16 
    /*0000d8a4*/ MOV         R5, #0 
    /*0000d8a8*/ STR         R0, [SP, #8] 
    /*0000d8ac*/ MOV         R0, #2 
    /*0000d8b0*/ MOV         R2, #1 
    /*0000d8b4*/ MOV         R3, #45                     @ 0x2d 
    /*0000d8b8*/ STR         R2, [R4, #-16]! 
    /*0000d8bc*/ STR         R3, [SP, #4] 
    /*0000d8c0*/ STR         R5, [SP, #12] 
    /*0000d8c4*/ BL          0x000000000000D8C4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000d8c8*/ MOV         R2, R4 
    /*0000d8cc*/ MOV         R1, #198                    @ 0xc6 
    /*0000d8d0*/ LDR         R3, [R0, #20] 
    /*0000d8d4*/ ADD         R0, SP, #4 
    /*0000d8d8*/ BLX         R3 
    /*0000d8dc*/ MOV         R0, #2 
    /*0000d8e0*/ STR         R5, [SP] 
    /*0000d8e4*/ BL          0x000000000000D8E4          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*0000d8e8*/ MOV         R2, R4 
    /*0000d8ec*/ MOV         R1, #199                    @ 0xc7 
    /*0000d8f0*/ LDR         R3, [R0, #20] 
    /*0000d8f4*/ ADD         R0, SP, #4 
    /*0000d8f8*/ BLX         R3 
    /*0000d8fc*/ MOV         R0, R5 
    /*0000d900*/ ADD         SP, SP, #20 
    /*0000d904*/ POP         {R4, R5, PC} 
FUNC_END VGS_DRV_ClkDisable


FUNC_BEGIN VGS_DRV_Reset
    /*0000d908*/ PUSH        {R4, LR} 
    /*0000d90c*/ MOV         R0, #0 
    /*0000d910*/ BL          0x000000000000D910          @ VGS_DRV_ClkEnable [R_ARM_CALL: .text+0xd814] 
    /*0000d914*/ MOV         R0, #0 
    /*0000d918*/ BL          0x000000000000D918          @ VGS_DRV_ClkDisable [R_ARM_CALL: .text+0xd898] 
    /*0000d91c*/ MOV         R0, #0 
    /*0000d920*/ POP         {R4, PC} 
FUNC_END VGS_DRV_Reset


FUNC_BEGIN VGS_DRV_AbolishReset
    VGS_DRV_AbolishReset_xd924:
    /*0000d924*/ B           VGS_DRV_AbolishReset_xd924  @ VGS_DRV_Reset [R_ARM_JUMP24: .text+0xd908] 
FUNC_END VGS_DRV_AbolishReset


FUNC_BEGIN VGS_DRV_FreetIrq
    /*0000d928*/ MOVW        R3, #0                      @ .LANCHOR1 [R_ARM_MOVW_ABS_NC: .data+0x120] 
    /*0000d92c*/ MOVT        R3, #0                      @ .LANCHOR1 [R_ARM_MOVT_ABS: .data+0x120] 
    /*0000d930*/ PUSH        {R4, LR} 
    /*0000d934*/ MOVW        R1, #0                      @ VGS_DrvCommIrqProc [R_ARM_MOVW_ABS_NC: .text+0xa5d0] 
    /*0000d938*/ LDR         R0, [R3] 
    /*0000d93c*/ MOVT        R1, #0                      @ VGS_DrvCommIrqProc [R_ARM_MOVT_ABS: .text+0xa5d0] 
    /*0000d940*/ BL          0x000000000000D940          @ osal_free_irq [R_ARM_CALL: +0x0] 
    /*0000d944*/ MOV         R0, #0 
    /*0000d948*/ POP         {R4, PC} 
FUNC_END VGS_DRV_FreetIrq


FUNC_BEGIN VGS_DRV_ConvertGhdrInfo
    /*0000d94c*/ MOV         R0, #0 
    /*0000d950*/ BX          LR 
FUNC_END VGS_DRV_ConvertGhdrInfo


FUNC_BEGIN VGS_DRV_ConvertVdHdrInfo
    /*0000d954*/ MOV         R0, #0 
    /*0000d958*/ BX          LR 
FUNC_END VGS_DRV_ConvertVdHdrInfo


FUNC_BEGIN VGS_DRV_ConvertCropInfo
    /*0000d95c*/ LDR         R2, [R0] 
    /*0000d960*/ LDR         R3, [R1] 
    /*0000d964*/ STR         R2, [R1, #104]              @ 0x68 
    /*0000d968*/ LDR         R2, [R0, #4] 
    /*0000d96c*/ STR         R2, [R1, #108]              @ 0x6c 
    /*0000d970*/ LDR         R2, [R0, #8] 
    /*0000d974*/ STR         R2, [R1, #112]              @ 0x70 
    /*0000d978*/ LDR         R2, [R0, #12] 
    /*0000d97c*/ STR         R2, [R1, #116]              @ 0x74 
    /*0000d980*/ LDR         R2, [R0, #8] 
    /*0000d984*/ STR         R2, [R1, #80]               @ 0x50 
    /*0000d988*/ LDR         R2, [R0, #12] 
    /*0000d98c*/ STR         R2, [R1, #84]               @ 0x54 
    /*0000d990*/ LDR         R3, [R3, #20] 
    /*0000d994*/ CMP         R3, #0 
    /*0000d998*/ BNE         VGS_DRV_ConvertCropInfo_xd9a8
    /*0000d99c*/ LDR         R3, [R1, #480]              @ 0x1e0 
    /*0000d9a0*/ CMP         R3, #0 
    /*0000d9a4*/ BEQ         VGS_DRV_ConvertCropInfo_xd9e4
    VGS_DRV_ConvertCropInfo_xd9a8:
    /*0000d9a8*/ MOV         R3, #0 
    /*0000d9ac*/ MOV         R2, #1 
    /*0000d9b0*/ STR         R3, [R1, #64]               @ 0x40 
    /*0000d9b4*/ STR         R2, [R1, #100]              @ 0x64 
    /*0000d9b8*/ STR         R3, [R1, #68]               @ 0x44 
    /*0000d9bc*/ LDR         R3, [R0] 
    /*0000d9c0*/ STR         R3, [R1, #104]              @ 0x68 
    /*0000d9c4*/ LDR         R3, [R0, #4] 
    /*0000d9c8*/ STR         R3, [R1, #108]              @ 0x6c 
    /*0000d9cc*/ LDR         R3, [R0, #8] 
    /*0000d9d0*/ STR         R3, [R1, #112]              @ 0x70 
    /*0000d9d4*/ LDR         R3, [R0, #12] 
    /*0000d9d8*/ MOV         R0, #0 
    /*0000d9dc*/ STR         R3, [R1, #116]              @ 0x74 
    /*0000d9e0*/ BX          LR 
    VGS_DRV_ConvertCropInfo_xd9e4:
    /*0000d9e4*/ STR         R3, [R1, #100]              @ 0x64 
    /*0000d9e8*/ LDR         R2, [R0, #8] 
    /*0000d9ec*/ STR         R2, [R1, #56]               @ 0x38 
    /*0000d9f0*/ LDR         R2, [R0, #12] 
    /*0000d9f4*/ STR         R2, [R1, #60]               @ 0x3c 
    /*0000d9f8*/ LDR         R2, [R0] 
    /*0000d9fc*/ STR         R2, [R1, #64]               @ 0x40 
    /*0000da00*/ LDR         R2, [R0, #4] 
    /*0000da04*/ MOV         R0, #0 
    /*0000da08*/ STR         R3, [R1, #72]               @ 0x48 
    /*0000da0c*/ STR         R3, [R1, #76]               @ 0x4c 
    /*0000da10*/ STR         R2, [R1, #68]               @ 0x44 
    /*0000da14*/ BX          LR 
FUNC_END VGS_DRV_ConvertCropInfo


FUNC_BEGIN VGS_DRV_GenTileInfo
    /*0000da18*/ MOV         R0, #0 
    /*0000da1c*/ BX          LR 
FUNC_END VGS_DRV_GenTileInfo


FUNC_BEGIN VGS_DRV_ConvertCoverInfo
    /*0000da20*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000da24*/ MOV         R5, #1 
    /*0000da28*/ LDR         R3, [R0] 
    /*0000da2c*/ STR         R5, [R1, #124]              @ 0x7c 
    /*0000da30*/ CMP         R3, #0 
    /*0000da34*/ STR         R3, [R1, #120]              @ 0x78 
    /*0000da38*/ BEQ         VGS_DRV_ConvertCoverInfo_xdc74
    /*0000da3c*/ STR         R5, [R1, #128]              @ 0x80 
    /*0000da40*/ MOV         R4, R1 
    /*0000da44*/ LDR         LR, [R0, #48]               @ 0x30 
    /*0000da48*/ MVN         R6, #43                     @ 0x2b 
    /*0000da4c*/ MVN         R3, #108                    @ 0x6c 
    /*0000da50*/ MOV         R9, #130                    @ 0x82 
    /*0000da54*/ UBFX        R8, LR, #16, #8 
    /*0000da58*/ UBFX        R2, LR, #8, #8 
    /*0000da5c*/ UXTB        R1, LR 
    /*0000da60*/ MOV         IP, #150                    @ 0x96 
    /*0000da64*/ MUL         R3, R3, R2 
    /*0000da68*/ MVN         R7, #85                     @ 0x55 
    /*0000da6c*/ MUL         R6, R6, R8 
    /*0000da70*/ MLA         R6, R9, R1, R6 
    /*0000da74*/ MUL         LR, IP, R2 
    /*0000da78*/ MLA         R9, R9, R8, R3 
    /*0000da7c*/ MOV         R3, #76                     @ 0x4c 
    /*0000da80*/ MLA         IP, R3, R8, LR 
    /*0000da84*/ MVN         R3, #20 
    /*0000da88*/ MLA         R2, R7, R2, R6 
    /*0000da8c*/ MOV         LR, #29 
    /*0000da90*/ MLA         R3, R3, R1, R9 
    /*0000da94*/ MLA         R1, LR, R1, IP 
    /*0000da98*/ ASR         R2, R2, #8 
    /*0000da9c*/ ADD         R2, R2, #128                @ 0x80 
    /*0000daa0*/ ASR         R3, R3, #8 
    /*0000daa4*/ USAT        R2, #8, R2 
    /*0000daa8*/ ADD         R3, R3, #128                @ 0x80 
    /*0000daac*/ ASR         R1, R1, #8 
    /*0000dab0*/ USAT        R3, #8, R3 
    /*0000dab4*/ ORR         R3, R3, R1, LSL #16 
    /*0000dab8*/ ORR         R3, R3, R2, LSL #8 
    /*0000dabc*/ STR         R3, [R4, #136]              @ 0x88 
    /*0000dac0*/ LDR         R3, [R0, #4] 
    /*0000dac4*/ CMP         R3, #0 
    /*0000dac8*/ BNE         VGS_DRV_ConvertCoverInfo_xde08
    /*0000dacc*/ STR         R3, [R4, #132]              @ 0x84 
    /*0000dad0*/ STR         R5, [R4, #140]              @ 0x8c 
    /*0000dad4*/ STR         R3, [R4, #144]              @ 0x90 
    /*0000dad8*/ LDR         IP, [R0, #8] 
    /*0000dadc*/ STR         IP, [R4, #148]              @ 0x94 
    /*0000dae0*/ LDR         R3, [R0, #12] 
    /*0000dae4*/ STR         R3, [R4, #152]              @ 0x98 
    /*0000dae8*/ LDR         R2, [R0, #16] 
    /*0000daec*/ LDR         R1, [R0, #8] 
    /*0000daf0*/ ADD         R1, R1, R2 
    /*0000daf4*/ STR         R1, [R4, #156]              @ 0x9c 
    /*0000daf8*/ LDR         R7, [R0, #12] 
    /*0000dafc*/ STR         R7, [R4, #160]              @ 0xa0 
    /*0000db00*/ LDR         R9, [R0, #8] 
    /*0000db04*/ STR         R9, [R4, #164]              @ 0xa4 
    /*0000db08*/ LDR         R2, [R0, #20] 
    /*0000db0c*/ LDR         R6, [R0, #12] 
    /*0000db10*/ ADD         R6, R6, R2 
    /*0000db14*/ STR         R6, [R4, #168]              @ 0xa8 
    /*0000db18*/ LDR         R2, [R0, #16] 
    /*0000db1c*/ LDR         R8, [R0, #8] 
    /*0000db20*/ ADD         R8, R8, R2 
    /*0000db24*/ STR         R8, [R4, #172]              @ 0xac 
    /*0000db28*/ LDR         LR, [R0, #12] 
    /*0000db2c*/ LDR         R2, [R0, #20] 
    /*0000db30*/ ADD         LR, LR, R2 
    /*0000db34*/ STR         LR, [R4, #176]              @ 0xb0 
    VGS_DRV_ConvertCoverInfo_xdb38:
    /*0000db38*/ CMP         IP, R1 
    /*0000db3c*/ MOVGE       R2, R1 
    /*0000db40*/ MOVLT       R2, IP 
    /*0000db44*/ CMP         R2, R9 
    /*0000db48*/ MOVGE       R2, R9 
    /*0000db4c*/ CMP         R2, R8 
    /*0000db50*/ MOVGE       R2, R8 
    /*0000db54*/ CMP         R3, R7 
    /*0000db58*/ MOVLT       R0, R3 
    /*0000db5c*/ MOVGE       R0, R7 
    /*0000db60*/ CMP         R0, R6 
    /*0000db64*/ MOVGE       R0, R6 
    /*0000db68*/ CMP         LR, R0 
    /*0000db6c*/ MOVLT       R0, LR 
    /*0000db70*/ CMP         IP, R1 
    /*0000db74*/ MOVGE       R1, IP 
    /*0000db78*/ CMP         R1, R9 
    /*0000db7c*/ MOVLT       R1, R9 
    /*0000db80*/ CMP         R1, R8 
    /*0000db84*/ MOVLT       R1, R8 
    /*0000db88*/ CMP         R3, R7 
    /*0000db8c*/ MOVLT       R3, R7 
    /*0000db90*/ CMP         R3, R6 
    /*0000db94*/ MOVLT       R3, R6 
    /*0000db98*/ CMP         R3, LR 
    /*0000db9c*/ MOVLT       R3, LR 
    /*0000dba0*/ CMP         R3, #0 
    /*0000dba4*/ CMPGT       R1, #0 
    /*0000dba8*/ LDR         LR, [R4] 
    /*0000dbac*/ BLE         VGS_DRV_ConvertCoverInfo_xdc1c
    /*0000dbb0*/ LDR         R5, [LR] 
    /*0000dbb4*/ CMP         R5, R2 
    /*0000dbb8*/ BLE         VGS_DRV_ConvertCoverInfo_xdc1c
    /*0000dbbc*/ LDR         R6, [LR, #4] 
    /*0000dbc0*/ CMP         R6, R0 
    /*0000dbc4*/ BLE         VGS_DRV_ConvertCoverInfo_xdc1c
    /*0000dbc8*/ CMP         R1, R5 
    /*0000dbcc*/ BIC         R2, R2, R2, ASR #31 
    /*0000dbd0*/ MOVCS       R1, R5 
    /*0000dbd4*/ CMP         R3, R6 
    /*0000dbd8*/ MOVCS       R3, R6 
    /*0000dbdc*/ TST         R1, #1 
    /*0000dbe0*/ BIC         R6, R0, R0, ASR #31 
    /*0000dbe4*/ MOV         R7, R3 
    /*0000dbe8*/ MOV         R0, R1 
    /*0000dbec*/ ADDNE       R5, R4, #32 
    /*0000dbf0*/ BNE         VGS_DRV_ConvertCoverInfo_xdc80
    /*0000dbf4*/ SUB         R8, R1, #1 
    /*0000dbf8*/ ADD         R5, R4, #32 
    /*0000dbfc*/ MOV         R0, R4 
    VGS_DRV_ConvertCoverInfo_xdc00:
    /*0000dc00*/ CMP         R1, IP 
    /*0000dc04*/ ADD         R0, R0, #8 
    /*0000dc08*/ STREQ       R8, [R0, #140]              @ 0x8c 
    /*0000dc0c*/ CMP         R5, R0 
    /*0000dc10*/ BEQ         VGS_DRV_ConvertCoverInfo_xdc7c
    /*0000dc14*/ LDR         IP, [R0, #148]              @ 0x94 
    /*0000dc18*/ B           VGS_DRV_ConvertCoverInfo_xdc00
    VGS_DRV_ConvertCoverInfo_xdc1c:
    /*0000dc1c*/ MOV         R2, #0 
    /*0000dc20*/ STR         R2, [R4, #64]               @ 0x40 
    /*0000dc24*/ STR         R2, [R4, #68]               @ 0x44 
    /*0000dc28*/ LDR         R2, [LR, #20] 
    /*0000dc2c*/ CMP         R2, #0 
    /*0000dc30*/ MOVEQ       R2, #32 
    /*0000dc34*/ STREQ       R2, [R4, #56]               @ 0x38 
    /*0000dc38*/ BEQ         VGS_DRV_ConvertCoverInfo_xdc4c
    /*0000dc3c*/ LDR         R2, [LR] 
    /*0000dc40*/ CMP         R2, #256                    @ 0x100 
    /*0000dc44*/ MOVCS       R2, #256                    @ 0x100 
    /*0000dc48*/ STR         R2, [R4, #56]               @ 0x38 
    VGS_DRV_ConvertCoverInfo_xdc4c:
    /*0000dc4c*/ CMP         R3, #0 
    /*0000dc50*/ CMPNE       R1, #0 
    /*0000dc54*/ STR         R2, [R4, #80]               @ 0x50 
    /*0000dc58*/ MOV         R3, #32 
    /*0000dc5c*/ STR         R2, [R4, #88]               @ 0x58 
    /*0000dc60*/ STR         R3, [R4, #60]               @ 0x3c 
    /*0000dc64*/ STR         R3, [R4, #84]               @ 0x54 
    /*0000dc68*/ STR         R3, [R4, #92]               @ 0x5c 
    /*0000dc6c*/ MOVEQ       R3, #0 
    /*0000dc70*/ STREQ       R3, [R4, #128]              @ 0x80 
    VGS_DRV_ConvertCoverInfo_xdc74:
    /*0000dc74*/ MOV         R0, #0 
    /*0000dc78*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DRV_ConvertCoverInfo_xdc7c:
    /*0000dc7c*/ MOV         R0, R8 
    VGS_DRV_ConvertCoverInfo_xdc80:
    /*0000dc80*/ TST         R3, #1 
    /*0000dc84*/ BNE         VGS_DRV_ConvertCoverInfo_xdca8
    /*0000dc88*/ SUB         R7, R3, #1 
    /*0000dc8c*/ MOV         R1, R4 
    VGS_DRV_ConvertCoverInfo_xdc90:
    /*0000dc90*/ LDR         IP, [R1, #152]              @ 0x98 
    /*0000dc94*/ ADD         R1, R1, #8 
    /*0000dc98*/ CMP         R3, IP 
    /*0000dc9c*/ STREQ       R7, [R1, #144]              @ 0x90 
    /*0000dca0*/ CMP         R5, R1 
    /*0000dca4*/ BNE         VGS_DRV_ConvertCoverInfo_xdc90
    VGS_DRV_ConvertCoverInfo_xdca8:
    /*0000dca8*/ LDR         R3, [LR, #20] 
    /*0000dcac*/ CMP         R3, #0 
    /*0000dcb0*/ BNE         VGS_DRV_ConvertCoverInfo_xdd58
    /*0000dcb4*/ SUB         R3, R0, R2 
    /*0000dcb8*/ STR         R2, [R4, #64]               @ 0x40 
    /*0000dcbc*/ ADD         R3, R3, #1 
    /*0000dcc0*/ STR         R6, [R4, #68]               @ 0x44 
    /*0000dcc4*/ CMP         R3, #31 
    /*0000dcc8*/ STR         R3, [R4, #56]               @ 0x38 
    /*0000dccc*/ MOV         IP, R6 
    /*0000dcd0*/ BLS         VGS_DRV_ConvertCoverInfo_xde40
    VGS_DRV_ConvertCoverInfo_xdcd4:
    /*0000dcd4*/ MOV         R1, R4 
    /*0000dcd8*/ MOV         R3, R4 
    VGS_DRV_ConvertCoverInfo_xdcdc:
    /*0000dcdc*/ LDR         R0, [R3, #148]              @ 0x94 
    /*0000dce0*/ ADD         R3, R3, #8 
    /*0000dce4*/ SUB         R0, R0, R2 
    /*0000dce8*/ STR         R0, [R3, #140]              @ 0x8c 
    /*0000dcec*/ CMP         R5, R3 
    /*0000dcf0*/ BNE         VGS_DRV_ConvertCoverInfo_xdcdc
    /*0000dcf4*/ SUB         R7, R7, R6 
    /*0000dcf8*/ ADD         R7, R7, #1 
    /*0000dcfc*/ STR         R7, [R4, #60]               @ 0x3c 
    /*0000dd00*/ CMP         R7, #31 
    /*0000dd04*/ BHI         VGS_DRV_ConvertCoverInfo_xdd24
    /*0000dd08*/ LDR         R2, [LR, #4] 
    /*0000dd0c*/ ADD         R0, R6, #32 
    /*0000dd10*/ MOV         R7, #32 
    /*0000dd14*/ STR         R7, [R4, #60]               @ 0x3c 
    /*0000dd18*/ CMP         R0, R2 
    /*0000dd1c*/ SUBHI       IP, R2, #32 
    /*0000dd20*/ STRHI       IP, [R4, #68]               @ 0x44 
    VGS_DRV_ConvertCoverInfo_xdd24:
    /*0000dd24*/ LDR         R2, [R1, #152]              @ 0x98 
    /*0000dd28*/ ADD         R1, R1, #8 
    /*0000dd2c*/ SUB         R2, R2, IP 
    /*0000dd30*/ STR         R2, [R1, #144]              @ 0x90 
    /*0000dd34*/ CMP         R3, R1 
    /*0000dd38*/ BNE         VGS_DRV_ConvertCoverInfo_xdd24
    VGS_DRV_ConvertCoverInfo_xdd3c:
    /*0000dd3c*/ LDR         R3, [R4, #56]               @ 0x38 
    /*0000dd40*/ MOV         R0, #0 
    /*0000dd44*/ STR         R7, [R4, #84]               @ 0x54 
    /*0000dd48*/ STR         R7, [R4, #92]               @ 0x5c 
    /*0000dd4c*/ STR         R3, [R4, #80]               @ 0x50 
    /*0000dd50*/ STR         R3, [R4, #88]               @ 0x58 
    /*0000dd54*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DRV_ConvertCoverInfo_xdd58:
    /*0000dd58*/ CMP         R0, #0 
    /*0000dd5c*/ ADD         R3, R0, #255                @ 0xff 
    /*0000dd60*/ ASR         R2, R2, #8 
    /*0000dd64*/ STR         R6, [R4, #68]               @ 0x44 
    /*0000dd68*/ MOVGE       R3, R0 
    /*0000dd6c*/ MOV         R8, R4 
    /*0000dd70*/ RSB         R3, R2, R3, ASR #8 
    /*0000dd74*/ LSL         R1, R2, #8 
    /*0000dd78*/ ADD         R3, R3, #1 
    /*0000dd7c*/ STR         R1, [R4, #64]               @ 0x40 
    /*0000dd80*/ MOV         R2, R6 
    /*0000dd84*/ MOV         IP, R4 
    /*0000dd88*/ LSL         R3, R3, #8 
    /*0000dd8c*/ STR         R3, [R4, #56]               @ 0x38 
    /*0000dd90*/ LDR         R0, [LR] 
    /*0000dd94*/ ADD         R3, R1, R3 
    /*0000dd98*/ CMP         R3, R0 
    /*0000dd9c*/ SUBHI       R0, R0, R1 
    /*0000dda0*/ STRHI       R0, [R4, #56]               @ 0x38 
    VGS_DRV_ConvertCoverInfo_xdda4:
    /*0000dda4*/ LDR         R3, [IP, #148]              @ 0x94 
    /*0000dda8*/ ADD         IP, IP, #8 
    /*0000ddac*/ SUB         R3, R3, R1 
    /*0000ddb0*/ STR         R3, [IP, #140]              @ 0x8c 
    /*0000ddb4*/ CMP         R5, IP 
    /*0000ddb8*/ BNE         VGS_DRV_ConvertCoverInfo_xdda4
    /*0000ddbc*/ SUB         R7, R7, R6 
    /*0000ddc0*/ ADD         R7, R7, #1 
    /*0000ddc4*/ STR         R7, [R4, #60]               @ 0x3c 
    /*0000ddc8*/ CMP         R7, #31 
    /*0000ddcc*/ BHI         VGS_DRV_ConvertCoverInfo_xddec
    /*0000ddd0*/ LDR         R3, [LR, #4] 
    /*0000ddd4*/ ADD         R0, R6, #32 
    /*0000ddd8*/ MOV         R7, #32 
    /*0000dddc*/ STR         R7, [R4, #60]               @ 0x3c 
    /*0000dde0*/ CMP         R0, R3 
    /*0000dde4*/ SUBHI       R2, R3, #32 
    /*0000dde8*/ STRHI       R2, [R4, #68]               @ 0x44 
    VGS_DRV_ConvertCoverInfo_xddec:
    /*0000ddec*/ LDR         R3, [R8, #152]              @ 0x98 
    /*0000ddf0*/ ADD         R8, R8, #8 
    /*0000ddf4*/ SUB         R3, R3, R2 
    /*0000ddf8*/ STR         R3, [R8, #144]              @ 0x90 
    /*0000ddfc*/ CMP         IP, R8 
    /*0000de00*/ BNE         VGS_DRV_ConvertCoverInfo_xddec
    /*0000de04*/ B           VGS_DRV_ConvertCoverInfo_xdd3c
    VGS_DRV_ConvertCoverInfo_xde08:
    /*0000de08*/ ADD         R1, R0, #8 
    /*0000de0c*/ MOV         R2, #40                     @ 0x28 
    /*0000de10*/ ADD         R0, R4, #140                @ 0x8c 
    /*0000de14*/ BL          0x000000000000DE14          @ osal_memcpy [R_ARM_CALL: +0x0] 
    /*0000de18*/ LDR         IP, [R4, #148]              @ 0x94 
    /*0000de1c*/ LDR         R1, [R4, #156]              @ 0x9c 
    /*0000de20*/ LDR         R9, [R4, #164]              @ 0xa4 
    /*0000de24*/ LDR         R8, [R4, #172]              @ 0xac 
    /*0000de28*/ LDR         R3, [R4, #152]              @ 0x98 
    /*0000de2c*/ LDR         R7, [R4, #160]              @ 0xa0 
    /*0000de30*/ LDR         R6, [R4, #168]              @ 0xa8 
    /*0000de34*/ LDR         LR, [R4, #176]              @ 0xb0 
    /*0000de38*/ STR         R5, [R4, #132]              @ 0x84 
    /*0000de3c*/ B           VGS_DRV_ConvertCoverInfo_xdb38
    VGS_DRV_ConvertCoverInfo_xde40:
    /*0000de40*/ LDR         R3, [LR] 
    /*0000de44*/ ADD         R1, R2, #32 
    /*0000de48*/ CMP         R1, R3 
    /*0000de4c*/ SUBHI       R2, R3, #32 
    /*0000de50*/ MOV         R3, #32 
    /*0000de54*/ STRHI       R2, [R4, #64]               @ 0x40 
    /*0000de58*/ STR         R3, [R4, #56]               @ 0x38 
    /*0000de5c*/ B           VGS_DRV_ConvertCoverInfo_xdcd4
FUNC_END VGS_DRV_ConvertCoverInfo


FUNC_BEGIN VGS_DRV_ConvertOsdInfo
    /*0000de60*/ LDR         R3, [R0] 
    /*0000de64*/ MOV         R2, #1 
    /*0000de68*/ STR         R2, [R1, #184]              @ 0xb8 
    /*0000de6c*/ CMP         R3, #0 
    /*0000de70*/ STR         R3, [R1, #180]              @ 0xb4 
    /*0000de74*/ LDR         IP, [R0, #48]               @ 0x30 
    /*0000de78*/ STR         IP, [R1, #432]              @ 0x1b0 
    /*0000de7c*/ BEQ         VGS_DRV_ConvertOsdInfo_xdf98
    /*0000de80*/ STR         R2, [R1, #192]              @ 0xc0 
    /*0000de84*/ LDRB        R3, [R0, #4] 
    /*0000de88*/ LDR         IP, [R1] 
    /*0000de8c*/ STRB        R3, [R1, #196]              @ 0xc4 
    /*0000de90*/ LDR         R3, [R0, #24] 
    /*0000de94*/ STR         R3, [R1, #216]              @ 0xd8 
    /*0000de98*/ LDR         R3, [R0, #16] 
    /*0000de9c*/ STR         R3, [R1, #208]              @ 0xd0 
    /*0000dea0*/ LDRD        R2, [R0, #8] 
    /*0000dea4*/ STRD        R2, [R1, #200]              @ 0xc8 
    /*0000dea8*/ LDR         R3, [R0, #20] 
    /*0000deac*/ STR         R3, [R1, #212]              @ 0xd4 
    /*0000deb0*/ LDRB        R3, [R0, #28] 
    /*0000deb4*/ STRB        R3, [R1, #220]              @ 0xdc 
    /*0000deb8*/ LDRB        R3, [R0, #29] 
    /*0000debc*/ STRB        R3, [R1, #221]              @ 0xdd 
    /*0000dec0*/ LDR         R3, [R0, #48]               @ 0x30 
    /*0000dec4*/ CMP         R3, #0 
    /*0000dec8*/ LDRNE       R3, [R0, #68]               @ 0x44 
    /*0000decc*/ STRNE       R3, [R1, #260]              @ 0x104 
    /*0000ded0*/ LDR         R3, [IP, #20] 
    /*0000ded4*/ CMP         R3, #0 
    /*0000ded8*/ BEQ         VGS_DRV_ConvertOsdInfo_xdfec
    /*0000dedc*/ PUSH        {R4, R5, R6, LR} 
    /*0000dee0*/ LDR         R2, [R0, #32] 
    /*0000dee4*/ LDR         R4, [IP] 
    /*0000dee8*/ CMP         R2, #0 
    /*0000deec*/ ADD         LR, R2, #255                @ 0xff 
    /*0000def0*/ LDR         R3, [R0, #40]               @ 0x28 
    /*0000def4*/ MOVGE       LR, R2 
    /*0000def8*/ ADD         R3, R2, R3 
    /*0000defc*/ ASR         R2, LR, #8 
    /*0000df00*/ CMP         R2, R4, LSR #8 
    /*0000df04*/ LSR         R3, R3, #8 
    /*0000df08*/ BEQ         VGS_DRV_ConvertOsdInfo_xe04c
    VGS_DRV_ConvertOsdInfo_xdf0c:
    /*0000df0c*/ LSL         R4, R2, #8 
    /*0000df10*/ MOV         R5, R4 
    VGS_DRV_ConvertOsdInfo_xdf14:
    /*0000df14*/ STR         R5, [R1, #64]               @ 0x40 
    /*0000df18*/ MOV         R6, #0 
    /*0000df1c*/ LDR         LR, [R0, #36]               @ 0x24 
    /*0000df20*/ STR         LR, [R1, #68]               @ 0x44 
    /*0000df24*/ LDR         LR, [R0, #32] 
    /*0000df28*/ STR         R6, [R1, #228]              @ 0xe4 
    /*0000df2c*/ SUB         LR, LR, R4 
    /*0000df30*/ STR         LR, [R1, #224]              @ 0xe0 
    /*0000df34*/ LDR         LR, [R0, #44]               @ 0x2c 
    /*0000df38*/ STR         LR, [R1, #60]               @ 0x3c 
    /*0000df3c*/ LDR         R4, [R0, #32] 
    /*0000df40*/ LDR         R6, [R0, #40]               @ 0x28 
    /*0000df44*/ ADD         R4, R4, R6 
    /*0000df48*/ CMP         R4, R3, LSL #8 
    /*0000df4c*/ ADDHI       R3, R3, #1 
    /*0000df50*/ SUB         R3, R3, R2 
    /*0000df54*/ LSL         R3, R3, #8 
    /*0000df58*/ STR         R3, [R1, #56]               @ 0x38 
    /*0000df5c*/ LDR         R2, [IP] 
    /*0000df60*/ ADD         IP, R5, R3 
    /*0000df64*/ CMP         IP, R2 
    /*0000df68*/ SUBHI       R3, R2, R5 
    /*0000df6c*/ STRHI       R3, [R1, #56]               @ 0x38 
    /*0000df70*/ LDR         R2, [R0, #40]               @ 0x28 
    /*0000df74*/ STR         R2, [R1, #232]              @ 0xe8 
    /*0000df78*/ LDR         R2, [R0, #44]               @ 0x2c 
    /*0000df7c*/ MOV         R0, #0 
    /*0000df80*/ STR         R3, [R1, #80]               @ 0x50 
    /*0000df84*/ STR         LR, [R1, #84]               @ 0x54 
    /*0000df88*/ STR         R2, [R1, #236]              @ 0xec 
    /*0000df8c*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000df90*/ STR         LR, [R1, #92]               @ 0x5c 
    /*0000df94*/ POP         {R4, R5, R6, PC} 
    VGS_DRV_ConvertOsdInfo_xdf98:
    /*0000df98*/ LDR         R2, [R1] 
    /*0000df9c*/ STR         R3, [R1, #64]               @ 0x40 
    /*0000dfa0*/ STR         R3, [R1, #68]               @ 0x44 
    /*0000dfa4*/ LDR         R3, [R2, #20] 
    /*0000dfa8*/ CMP         R3, #0 
    /*0000dfac*/ MOVEQ       R3, #32 
    /*0000dfb0*/ STREQ       R3, [R1, #56]               @ 0x38 
    /*0000dfb4*/ BNE         VGS_DRV_ConvertOsdInfo_xdfd8
    VGS_DRV_ConvertOsdInfo_xdfb8:
    /*0000dfb8*/ MOV         R2, #32 
    /*0000dfbc*/ STR         R3, [R1, #80]               @ 0x50 
    /*0000dfc0*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000dfc4*/ MOV         R0, #0 
    /*0000dfc8*/ STR         R2, [R1, #60]               @ 0x3c 
    /*0000dfcc*/ STR         R2, [R1, #84]               @ 0x54 
    /*0000dfd0*/ STR         R2, [R1, #92]               @ 0x5c 
    /*0000dfd4*/ BX          LR 
    VGS_DRV_ConvertOsdInfo_xdfd8:
    /*0000dfd8*/ LDR         R3, [R2] 
    /*0000dfdc*/ CMP         R3, #256                    @ 0x100 
    /*0000dfe0*/ MOVCS       R3, #256                    @ 0x100 
    /*0000dfe4*/ STR         R3, [R1, #56]               @ 0x38 
    /*0000dfe8*/ B           VGS_DRV_ConvertOsdInfo_xdfb8
    VGS_DRV_ConvertOsdInfo_xdfec:
    /*0000dfec*/ STR         R3, [R1, #224]              @ 0xe0 
    /*0000dff0*/ STR         R3, [R1, #228]              @ 0xe4 
    /*0000dff4*/ LDR         R3, [R0, #40]               @ 0x28 
    /*0000dff8*/ STR         R3, [R1, #232]              @ 0xe8 
    /*0000dffc*/ LDR         R3, [R0, #44]               @ 0x2c 
    /*0000e000*/ STR         R3, [R1, #236]              @ 0xec 
    /*0000e004*/ LDR         R3, [R0, #40]               @ 0x28 
    /*0000e008*/ STR         R3, [R1, #56]               @ 0x38 
    /*0000e00c*/ LDR         R3, [R0, #44]               @ 0x2c 
    /*0000e010*/ STR         R3, [R1, #60]               @ 0x3c 
    /*0000e014*/ LDR         R3, [R0, #32] 
    /*0000e018*/ STR         R3, [R1, #64]               @ 0x40 
    /*0000e01c*/ LDR         R3, [R0, #36]               @ 0x24 
    /*0000e020*/ STR         R3, [R1, #68]               @ 0x44 
    /*0000e024*/ LDR         R3, [R0, #40]               @ 0x28 
    /*0000e028*/ STR         R3, [R1, #80]               @ 0x50 
    /*0000e02c*/ LDR         R3, [R0, #44]               @ 0x2c 
    /*0000e030*/ STR         R3, [R1, #84]               @ 0x54 
    /*0000e034*/ LDR         R3, [R0, #40]               @ 0x28 
    /*0000e038*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000e03c*/ LDR         R3, [R0, #44]               @ 0x2c 
    /*0000e040*/ MOV         R0, #0 
    /*0000e044*/ STR         R3, [R1, #92]               @ 0x5c 
    /*0000e048*/ BX          LR 
    VGS_DRV_ConvertOsdInfo_xe04c:
    /*0000e04c*/ LSL         LR, R2, #8 
    /*0000e050*/ SUB         R4, R4, LR 
    /*0000e054*/ CMP         R4, #31 
    /*0000e058*/ MOVHI       R4, LR 
    /*0000e05c*/ MOVHI       R5, R4 
    /*0000e060*/ BHI         VGS_DRV_ConvertOsdInfo_xdf14
    /*0000e064*/ CMP         R2, #0 
    /*0000e068*/ SUBNE       R2, R2, #1 
    /*0000e06c*/ BNE         VGS_DRV_ConvertOsdInfo_xdf0c
    /*0000e070*/ MOV         R5, R2 
    /*0000e074*/ MOV         R4, R2 
    /*0000e078*/ B           VGS_DRV_ConvertOsdInfo_xdf14
FUNC_END VGS_DRV_ConvertOsdInfo


FUNC_BEGIN VGS_DRV_ConvertLumaStatInfo
    /*0000e07c*/ LDR         IP, [R1] 
    /*0000e080*/ LDR         R3, [IP, #16] 
    /*0000e084*/ CMP         R3, #0 
    /*0000e088*/ BNE         VGS_DRV_ConvertLumaStatInfo_xe1ac
    /*0000e08c*/ LDR         R3, [IP, #20] 
    /*0000e090*/ CMP         R3, #0 
    /*0000e094*/ BEQ         VGS_DRV_ConvertLumaStatInfo_xe154
    /*0000e098*/ PUSH        {R4, R5, R6, LR} 
    /*0000e09c*/ LDR         R2, [R0] 
    /*0000e0a0*/ LDR         R4, [IP] 
    /*0000e0a4*/ CMP         R2, #0 
    /*0000e0a8*/ ADD         LR, R2, #255                @ 0xff 
    /*0000e0ac*/ LDR         R3, [R0, #8] 
    /*0000e0b0*/ MOVGE       LR, R2 
    /*0000e0b4*/ ADD         R3, R2, R3 
    /*0000e0b8*/ ASR         R2, LR, #8 
    /*0000e0bc*/ CMP         R2, R4, LSR #8 
    /*0000e0c0*/ LSR         R3, R3, #8 
    /*0000e0c4*/ BEQ         VGS_DRV_ConvertLumaStatInfo_xe1b4
    VGS_DRV_ConvertLumaStatInfo_xe0c8:
    /*0000e0c8*/ LSL         R4, R2, #8 
    /*0000e0cc*/ MOV         R5, R4 
    VGS_DRV_ConvertLumaStatInfo_xe0d0:
    /*0000e0d0*/ STR         R5, [R1, #64]               @ 0x40 
    /*0000e0d4*/ MOV         R6, #0 
    /*0000e0d8*/ LDR         LR, [R0, #4] 
    /*0000e0dc*/ STR         LR, [R1, #68]               @ 0x44 
    /*0000e0e0*/ LDR         LR, [R0] 
    /*0000e0e4*/ STR         R6, [R1, #276]              @ 0x114 
    /*0000e0e8*/ SUB         LR, LR, R4 
    /*0000e0ec*/ STR         LR, [R1, #272]              @ 0x110 
    /*0000e0f0*/ LDR         LR, [R0, #12] 
    /*0000e0f4*/ STR         LR, [R1, #60]               @ 0x3c 
    /*0000e0f8*/ LDR         R4, [R0] 
    /*0000e0fc*/ LDR         R6, [R0, #8] 
    /*0000e100*/ ADD         R4, R4, R6 
    /*0000e104*/ CMP         R4, R3, LSL #8 
    /*0000e108*/ ADDHI       R3, R3, #1 
    /*0000e10c*/ SUB         R3, R3, R2 
    /*0000e110*/ LSL         R3, R3, #8 
    /*0000e114*/ STR         R3, [R1, #56]               @ 0x38 
    /*0000e118*/ LDR         R2, [IP] 
    /*0000e11c*/ ADD         IP, R5, R3 
    /*0000e120*/ CMP         IP, R2 
    /*0000e124*/ SUBHI       R3, R2, R5 
    /*0000e128*/ STRHI       R3, [R1, #56]               @ 0x38 
    /*0000e12c*/ LDR         R2, [R0, #8] 
    /*0000e130*/ STR         R2, [R1, #280]              @ 0x118 
    /*0000e134*/ LDR         R2, [R0, #12] 
    /*0000e138*/ MOV         R0, #0 
    /*0000e13c*/ STR         R3, [R1, #80]               @ 0x50 
    /*0000e140*/ STR         LR, [R1, #84]               @ 0x54 
    /*0000e144*/ STR         R2, [R1, #284]              @ 0x11c 
    /*0000e148*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000e14c*/ STR         LR, [R1, #92]               @ 0x5c 
    /*0000e150*/ POP         {R4, R5, R6, PC} 
    VGS_DRV_ConvertLumaStatInfo_xe154:
    /*0000e154*/ STR         R3, [R1, #272]              @ 0x110 
    /*0000e158*/ STR         R3, [R1, #276]              @ 0x114 
    /*0000e15c*/ LDR         R3, [R0, #8] 
    /*0000e160*/ STR         R3, [R1, #280]              @ 0x118 
    /*0000e164*/ LDR         R3, [R0, #12] 
    /*0000e168*/ STR         R3, [R1, #284]              @ 0x11c 
    /*0000e16c*/ LDR         R3, [R0, #8] 
    /*0000e170*/ STR         R3, [R1, #56]               @ 0x38 
    /*0000e174*/ LDR         R3, [R0, #12] 
    /*0000e178*/ STR         R3, [R1, #60]               @ 0x3c 
    /*0000e17c*/ LDR         R3, [R0] 
    /*0000e180*/ STR         R3, [R1, #64]               @ 0x40 
    /*0000e184*/ LDR         R3, [R0, #4] 
    /*0000e188*/ STR         R3, [R1, #68]               @ 0x44 
    /*0000e18c*/ LDR         R3, [R0, #8] 
    /*0000e190*/ STR         R3, [R1, #80]               @ 0x50 
    /*0000e194*/ LDR         R3, [R0, #12] 
    /*0000e198*/ STR         R3, [R1, #84]               @ 0x54 
    /*0000e19c*/ LDR         R3, [R0, #8] 
    /*0000e1a0*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000e1a4*/ LDR         R3, [R0, #12] 
    /*0000e1a8*/ STR         R3, [R1, #92]               @ 0x5c 
    VGS_DRV_ConvertLumaStatInfo_xe1ac:
    /*0000e1ac*/ MOV         R0, #0 
    /*0000e1b0*/ BX          LR 
    VGS_DRV_ConvertLumaStatInfo_xe1b4:
    /*0000e1b4*/ LSL         LR, R2, #8 
    /*0000e1b8*/ SUB         R4, R4, LR 
    /*0000e1bc*/ CMP         R4, #31 
    /*0000e1c0*/ MOVHI       R4, LR 
    /*0000e1c4*/ MOVHI       R5, R4 
    /*0000e1c8*/ BHI         VGS_DRV_ConvertLumaStatInfo_xe0d0
    /*0000e1cc*/ CMP         R2, #0 
    /*0000e1d0*/ SUBNE       R2, R2, #1 
    /*0000e1d4*/ BNE         VGS_DRV_ConvertLumaStatInfo_xe0c8
    /*0000e1d8*/ MOV         R5, R2 
    /*0000e1dc*/ MOV         R4, R2 
    /*0000e1e0*/ B           VGS_DRV_ConvertLumaStatInfo_xe0d0
FUNC_END VGS_DRV_ConvertLumaStatInfo


FUNC_BEGIN VGS_DRV_CheckLumaStatInfo
    /*0000e1e4*/ PUSH        {R4, R5, LR} 
    /*0000e1e8*/ SUB         SP, SP, #20 
    /*0000e1ec*/ LDRD        R2, [R1, #24] 
    /*0000e1f0*/ ORRS        IP, R2, R3 
    /*0000e1f4*/ BEQ         VGS_DRV_CheckLumaStatInfo_xe254
    /*0000e1f8*/ AND         R4, R2, #15 
    /*0000e1fc*/ MOV         R5, #0 
    /*0000e200*/ ORRS        IP, R4, R5 
    /*0000e204*/ BNE         VGS_DRV_CheckLumaStatInfo_xe254
    /*0000e208*/ LDR         R3, [R1, #16] 
    /*0000e20c*/ CMP         R3, #0 
    /*0000e210*/ BEQ         VGS_DRV_CheckLumaStatInfo_xe284
    /*0000e214*/ LDR         LR, [R0] 
    /*0000e218*/ MOV         R3, #2 
    /*0000e21c*/ LDR         R2, [R0, #4] 
    /*0000e220*/ MOV         IP, #0 
    /*0000e224*/ MOV         R0, R1 
    /*0000e228*/ STR         R3, [SP] 
    /*0000e22c*/ MOV         R1, LR 
    /*0000e230*/ STR         IP, [SP, #4] 
    /*0000e234*/ BL          0x000000000000B3C8 
    /*0000e238*/ MOVW        R3, #32771                  @ 0x8003 
    /*0000e23c*/ MOVT        R3, #41005                  @ 0xa02d 
    /*0000e240*/ CMP         R0, #0 
    /*0000e244*/ MOVNE       R0, R3 
    /*0000e248*/ MOVEQ       R0, #0 
    VGS_DRV_CheckLumaStatInfo_xe24c:
    /*0000e24c*/ ADD         SP, SP, #20 
    /*0000e250*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckLumaStatInfo_xe254:
    /*0000e254*/ STRD        R2, [SP, #8] 
    /*0000e258*/ MOV         R1, #45                     @ 0x2d 
    /*0000e25c*/ MOVW        R3, #3201                   @ 0xc81 
    /*0000e260*/ MOVW        R2, #0                      @ .LC22 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2e58] 
    /*0000e264*/ STR         R3, [SP] 
    /*0000e268*/ MOVT        R2, #0                      @ .LC22 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2e58] 
    /*0000e26c*/ LDR         R3, [PC, #60]               @ 0x000000000000e2b0 
    /*0000e270*/ MOV         R0, #3 
    /*0000e274*/ BL          0x000000000000E274          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000e278*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000e27c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000e280*/ B           VGS_DRV_CheckLumaStatInfo_xe24c
    VGS_DRV_CheckLumaStatInfo_xe284:
    /*0000e284*/ MOVW        R3, #3207                   @ 0xc87 
    /*0000e288*/ MOVW        R2, #0                      @ .LC23 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2e9c] 
    /*0000e28c*/ STR         R3, [SP] 
    /*0000e290*/ MOVT        R2, #0                      @ .LC23 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2e9c] 
    /*0000e294*/ LDR         R3, [PC, #20]               @ 0x000000000000e2b0 
    /*0000e298*/ MOV         R1, #45                     @ 0x2d 
    /*0000e29c*/ MOV         R0, #3 
    /*0000e2a0*/ BL          0x000000000000E2A0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000e2a4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000e2a8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000e2ac*/ B           VGS_DRV_CheckLumaStatInfo_xe24c
    /*0000e2b0*/ ANDEQ       R0, R0, R0, ASR #16 
FUNC_END VGS_DRV_CheckLumaStatInfo


FUNC_BEGIN VGS_DRV_ProcLumaResult
    /*0000e2b4*/ BX          LR 
FUNC_END VGS_DRV_ProcLumaResult


FUNC_BEGIN VGS_DRV_ConvertGdcInfo
    /*0000e2b8*/ LDR         R3, [R1, #308]              @ 0x134 
    /*0000e2bc*/ CMP         R3, #0 
    /*0000e2c0*/ BEQ         VGS_DRV_ConvertGdcInfo_xe37c
    /*0000e2c4*/ PUSH        {R4, LR} 
    /*0000e2c8*/ LDR         LR, [R1, #16] 
    /*0000e2cc*/ LDR         R3, [LR, #20] 
    /*0000e2d0*/ CMP         R3, #0 
    /*0000e2d4*/ LDR         R3, [R0] 
    /*0000e2d8*/ BEQ         VGS_DRV_ConvertGdcInfo_xe358
    /*0000e2dc*/ CMP         R3, #0 
    /*0000e2e0*/ ADD         R2, R3, #255                @ 0xff 
    /*0000e2e4*/ LDR         IP, [LR] 
    /*0000e2e8*/ MOVGE       R2, R3 
    /*0000e2ec*/ LDR         R4, [R0, #8] 
    /*0000e2f0*/ ASR         R2, R2, #8 
    /*0000e2f4*/ ADD         R3, R3, R4 
    /*0000e2f8*/ CMP         R2, IP, LSR #8 
    /*0000e2fc*/ LSL         R4, R2, #8 
    /*0000e300*/ LSR         R3, R3, #8 
    /*0000e304*/ BEQ         VGS_DRV_ConvertGdcInfo_xe384
    VGS_DRV_ConvertGdcInfo_xe308:
    /*0000e308*/ STR         R4, [R1, #72]               @ 0x48 
    /*0000e30c*/ LDR         IP, [R0, #4] 
    /*0000e310*/ STR         IP, [R1, #76]               @ 0x4c 
    /*0000e314*/ LDR         IP, [R0, #12] 
    /*0000e318*/ STR         IP, [R1, #92]               @ 0x5c 
    /*0000e31c*/ LDR         IP, [R0] 
    /*0000e320*/ LDR         R0, [R0, #8] 
    /*0000e324*/ ADD         R0, IP, R0 
    /*0000e328*/ CMP         R0, R3, LSL #8 
    /*0000e32c*/ MOV         R0, #0 
    /*0000e330*/ ADDHI       R3, R3, #1 
    /*0000e334*/ SUB         R3, R3, R2 
    /*0000e338*/ LSL         R3, R3, #8 
    /*0000e33c*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000e340*/ LDR         R2, [LR] 
    /*0000e344*/ ADD         R3, R4, R3 
    /*0000e348*/ CMP         R3, R2 
    /*0000e34c*/ SUBHI       R4, R2, R4 
    /*0000e350*/ STRHI       R4, [R1, #88]               @ 0x58 
    /*0000e354*/ POP         {R4, PC} 
    VGS_DRV_ConvertGdcInfo_xe358:
    /*0000e358*/ STR         R3, [R1, #72]               @ 0x48 
    /*0000e35c*/ LDR         R3, [R0, #4] 
    /*0000e360*/ STR         R3, [R1, #76]               @ 0x4c 
    /*0000e364*/ LDR         R3, [R0, #8] 
    /*0000e368*/ STR         R3, [R1, #88]               @ 0x58 
    /*0000e36c*/ LDR         R3, [R0, #12] 
    /*0000e370*/ MOV         R0, #0 
    /*0000e374*/ STR         R3, [R1, #92]               @ 0x5c 
    /*0000e378*/ POP         {R4, PC} 
    VGS_DRV_ConvertGdcInfo_xe37c:
    /*0000e37c*/ MOV         R0, #0 
    /*0000e380*/ BX          LR 
    VGS_DRV_ConvertGdcInfo_xe384:
    /*0000e384*/ SUB         IP, IP, R4 
    /*0000e388*/ CMP         IP, #31 
    /*0000e38c*/ BHI         VGS_DRV_ConvertGdcInfo_xe308
    /*0000e390*/ CMP         R2, #0 
    /*0000e394*/ SUBNE       R2, R2, #1 
    /*0000e398*/ MOVEQ       R4, R2 
    /*0000e39c*/ LSLNE       R4, R2, #8 
    /*0000e3a0*/ B           VGS_DRV_ConvertGdcInfo_xe308
FUNC_END VGS_DRV_ConvertGdcInfo


FUNC_BEGIN VGS_DRV_ConvertRotationInfo
    /*0000e3a4*/ LDR         R3, [R0, #4] 
    /*0000e3a8*/ CMP         R3, #3 
    /*0000e3ac*/ LDRLS       PC, [PC, R3, LSL #2] 
    /*0000e3b0*/ B           VGS_DRV_ConvertRotationInfo_xe3c4
    /*0000e3b4*/ ANDEQ       LR, R0, R4, ASR #7 
    /*0000e3b8*/ STRDEQ      LR, [R0], -R8 
    /*0000e3bc*/ LDRDEQ      LR, [R0], -IP 
    /*0000e3c0*/ ANDEQ       LR, R0, IP, LSL #8 
    VGS_DRV_ConvertRotationInfo_xe3c4:
    /*0000e3c4*/ MOV         R3, #0 
    /*0000e3c8*/ MOV         R0, #0 
    /*0000e3cc*/ STR         R3, [R1] 
    /*0000e3d0*/ STR         R3, [R1, #12] 
    /*0000e3d4*/ STR         R3, [R1, #8] 
    /*0000e3d8*/ BX          LR 
    /*0000e3dc*/ MOV         R3, #1 
    /*0000e3e0*/ MOV         R2, #0 
    /*0000e3e4*/ STR         R3, [R1, #12] 
    /*0000e3e8*/ MOV         R0, #0 
    /*0000e3ec*/ STR         R2, [R1] 
    /*0000e3f0*/ STR         R3, [R1, #8] 
    /*0000e3f4*/ BX          LR 
    /*0000e3f8*/ MOV         R2, #1 
    /*0000e3fc*/ MOV         R3, #0 
    /*0000e400*/ MOV         R0, #0 
    /*0000e404*/ STM         R1, {R2, R3} 
    /*0000e408*/ BX          LR 
    /*0000e40c*/ MOV         R3, #1 
    /*0000e410*/ MOV         R0, #0 
    /*0000e414*/ STR         R3, [R1] 
    /*0000e418*/ STR         R3, [R1, #4] 
    /*0000e41c*/ BX          LR 
FUNC_END VGS_DRV_ConvertRotationInfo


FUNC_BEGIN VGS_DRV_ConvertLBAInfo
    /*0000e420*/ MOV         R0, #0 
    /*0000e424*/ BX          LR 
FUNC_END VGS_DRV_ConvertLBAInfo


FUNC_BEGIN VGS_DRV_ConvertMirrorAndFlip
    /*0000e428*/ MOV         R0, #0 
    /*0000e42c*/ BX          LR 
FUNC_END VGS_DRV_ConvertMirrorAndFlip


FUNC_BEGIN VGS_DRV_ConvertGMEInfo
    /*0000e430*/ MOV         R3, #1 
    /*0000e434*/ STR         R3, [R1, #472]              @ 0x1d8 
    /*0000e438*/ LDR         R3, [R0] 
    /*0000e43c*/ MOV         R0, #0 
    /*0000e440*/ STR         R3, [R1, #476]              @ 0x1dc 
    /*0000e444*/ BX          LR 
FUNC_END VGS_DRV_ConvertGMEInfo


FUNC_BEGIN VGS_DRV_IsNeed2Scale
    /*0000e448*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000e44c*/ MOV         R3, #30 
    /*0000e450*/ LDR         R2, [R1] 
    /*0000e454*/ LDR         IP, [R0] 
    /*0000e458*/ MUL         LR, R3, R2 
    /*0000e45c*/ CMP         IP, LR 
    /*0000e460*/ BHI         VGS_DRV_IsNeed2Scale_xe490
    /*0000e464*/ LDR         R1, [R1, #4] 
    /*0000e468*/ LDR         R0, [R0, #4] 
    /*0000e46c*/ MUL         R3, R3, R1 
    /*0000e470*/ CMP         R0, R3 
    /*0000e474*/ BHI         VGS_DRV_IsNeed2Scale_xe490
    /*0000e478*/ CMP         R2, IP, LSL #4 
    /*0000e47c*/ BHI         VGS_DRV_IsNeed2Scale_xe490
    /*0000e480*/ CMP         R1, R0, LSL #4 
    /*0000e484*/ MOVHI       R0, #1 
    /*0000e488*/ MOVLS       R0, #0 
    /*0000e48c*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DRV_IsNeed2Scale_xe490:
    /*0000e490*/ MOV         R0, #1 
    /*0000e494*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END VGS_DRV_IsNeed2Scale


FUNC_BEGIN VGS_DRV_CalTempSize
    /*0000e498*/ PUSH        {R4, R5, LR} 
    /*0000e49c*/ MOV         IP, #30 
    /*0000e4a0*/ LDR         LR, [R3] 
    /*0000e4a4*/ LDR         R4, [R2] 
    /*0000e4a8*/ MUL         IP, IP, LR 
    /*0000e4ac*/ CMP         R4, IP 
    /*0000e4b0*/ BLS         VGS_DRV_CalTempSize_xe500
    /*0000e4b4*/ ADD         R4, R4, #14 
    /*0000e4b8*/ MOVW        IP, #34953                  @ 0x8889 
    /*0000e4bc*/ MOVT        IP, #34952                  @ 0x8888 
    /*0000e4c0*/ UMULL       R4, R5, R4, IP 
    /*0000e4c4*/ LSR         IP, R5, #3 
    /*0000e4c8*/ ADD         IP, IP, #1 
    /*0000e4cc*/ BIC         IP, IP, #1 
    /*0000e4d0*/ STR         IP, [R0] 
    VGS_DRV_CalTempSize_xe4d4:
    /*0000e4d4*/ LDR         R0, [R3, #4] 
    /*0000e4d8*/ MOV         R3, #30 
    /*0000e4dc*/ LDR         R2, [R2, #4] 
    /*0000e4e0*/ MUL         R3, R3, R0 
    /*0000e4e4*/ CMP         R2, R3 
    /*0000e4e8*/ BHI         VGS_DRV_CalTempSize_xe514
    /*0000e4ec*/ LSL         R2, R2, #4 
    /*0000e4f0*/ CMP         R2, R0 
    /*0000e4f4*/ MOVCS       R2, R0 
    /*0000e4f8*/ STR         R2, [R1] 
    /*0000e4fc*/ POP         {R4, R5, PC} 
    VGS_DRV_CalTempSize_xe500:
    /*0000e500*/ LSL         R4, R4, #4 
    /*0000e504*/ CMP         R4, LR 
    /*0000e508*/ MOVCS       R4, LR 
    /*0000e50c*/ STR         R4, [R0] 
    /*0000e510*/ B           VGS_DRV_CalTempSize_xe4d4
    VGS_DRV_CalTempSize_xe514:
    /*0000e514*/ ADD         R2, R2, #14 
    /*0000e518*/ MOVW        R3, #34953                  @ 0x8889 
    /*0000e51c*/ MOVT        R3, #34952                  @ 0x8888 
    /*0000e520*/ UMULL       R2, R3, R2, R3 
    /*0000e524*/ LSR         R3, R3, #3 
    /*0000e528*/ ADD         R3, R3, #1 
    /*0000e52c*/ BIC         R3, R3, #1 
    /*0000e530*/ STR         R3, [R1] 
    /*0000e534*/ POP         {R4, R5, PC} 
FUNC_END VGS_DRV_CalTempSize


FUNC_BEGIN VGS_DRV_IsNeedSplit
    /*0000e538*/ LDR         R3, [R0, #324]              @ 0x144 
    /*0000e53c*/ CMP         R3, #1 
    /*0000e540*/ BEQ         VGS_DRV_IsNeedSplit_xe58c
    /*0000e544*/ LDR         R3, [R0, #440]              @ 0x1b8 
    /*0000e548*/ CMP         R3, #1 
    /*0000e54c*/ BEQ         VGS_DRV_IsNeedSplit_xe58c
    /*0000e550*/ LDR         R3, [R0, #264]              @ 0x108 
    /*0000e554*/ CMP         R3, #1 
    /*0000e558*/ BEQ         VGS_DRV_IsNeedSplit_xe58c
    /*0000e55c*/ LDR         R3, [R0, #16] 
    /*0000e560*/ LDR         R3, [R3, #20] 
    /*0000e564*/ CMP         R3, #1 
    /*0000e568*/ BEQ         VGS_DRV_IsNeedSplit_xe594
    /*0000e56c*/ LDR         R3, [R0, #480]              @ 0x1e0 
    /*0000e570*/ LDR         R0, [R0, #56]               @ 0x38 
    /*0000e574*/ CMP         R3, #0 
    /*0000e578*/ BNE         VGS_DRV_IsNeedSplit_xe5b4
    /*0000e57c*/ CMP         R0, #4096                   @ 0x1000 
    /*0000e580*/ MOVLS       R0, #0 
    /*0000e584*/ MOVHI       R0, #1 
    /*0000e588*/ BX          LR 
    VGS_DRV_IsNeedSplit_xe58c:
    /*0000e58c*/ MOV         R0, #0 
    /*0000e590*/ BX          LR 
    VGS_DRV_IsNeedSplit_xe594:
    /*0000e594*/ LDR         R3, [R0, #56]               @ 0x38 
    /*0000e598*/ CMP         R3, #4096                   @ 0x1000 
    /*0000e59c*/ BLS         VGS_DRV_IsNeedSplit_xe58c
    /*0000e5a0*/ LDR         R0, [R0, #88]               @ 0x58 
    /*0000e5a4*/ CMP         R0, #4096                   @ 0x1000 
    /*0000e5a8*/ MOVLS       R0, #0 
    /*0000e5ac*/ MOVHI       R0, #1 
    /*0000e5b0*/ BX          LR 
    VGS_DRV_IsNeedSplit_xe5b4:
    /*0000e5b4*/ CMP         R0, #2048                   @ 0x800 
    /*0000e5b8*/ MOVLS       R0, #0 
    /*0000e5bc*/ MOVHI       R0, #1 
    /*0000e5c0*/ BX          LR 
FUNC_END VGS_DRV_IsNeedSplit


FUNC_BEGIN VGS_DRV_GetCropCfg
    /*0000e5c4*/ LDR         R3, [R1, #480]              @ 0x1e0 
    /*0000e5c8*/ CMP         R3, #0 
    /*0000e5cc*/ STR         R3, [R0] 
    /*0000e5d0*/ LDR         R3, [R1] 
    /*0000e5d4*/ LDR         R3, [R3] 
    /*0000e5d8*/ LSRNE       R3, R3, #1 
    /*0000e5dc*/ STR         R3, [R0, #4] 
    /*0000e5e0*/ LDR         R3, [R1] 
    /*0000e5e4*/ LDR         R3, [R3, #20] 
    /*0000e5e8*/ CMP         R3, #0 
    /*0000e5ec*/ STREQ       R3, [R0, #8] 
    /*0000e5f0*/ MOVNE       R3, #1 
    /*0000e5f4*/ STRNE       R3, [R0, #8] 
    /*0000e5f8*/ LDRNE       R3, [R1] 
    /*0000e5fc*/ STREQ       R3, [R0, #16] 
    /*0000e600*/ LDRNE       R3, [R3] 
    /*0000e604*/ STRNE       R3, [R0, #16] 
    /*0000e608*/ LDRNE       R3, [R1] 
    /*0000e60c*/ LDRNE       R3, [R3] 
    /*0000e610*/ STR         R3, [R0, #20] 
    /*0000e614*/ LDR         R3, [R1, #64]               @ 0x40 
    /*0000e618*/ STR         R3, [R0, #12] 
    /*0000e61c*/ LDR         R3, [R1, #96]               @ 0x60 
    /*0000e620*/ ADDS        R3, R3, #0 
    /*0000e624*/ MOVNE       R3, #1 
    /*0000e628*/ STR         R3, [R0, #24] 
    /*0000e62c*/ LDR         R3, [R1, #104]              @ 0x68 
    /*0000e630*/ STR         R3, [R0, #28] 
    /*0000e634*/ LDR         R3, [R1, #112]              @ 0x70 
    /*0000e638*/ STR         R3, [R0, #32] 
    /*0000e63c*/ LDR         R3, [R1, #120]              @ 0x78 
    /*0000e640*/ ADDS        R3, R3, #0 
    /*0000e644*/ MOVNE       R3, #1 
    /*0000e648*/ STR         R3, [R0, #36]               @ 0x24 
    /*0000e64c*/ LDR         R3, [R1, #120]              @ 0x78 
    /*0000e650*/ ADDS        R3, R3, #0 
    /*0000e654*/ MOVNE       R3, #1 
    /*0000e658*/ STR         R3, [R0, #40]               @ 0x28 
    /*0000e65c*/ LDR         R3, [R1, #148]              @ 0x94 
    /*0000e660*/ STR         R3, [R0, #44]               @ 0x2c 
    /*0000e664*/ LDR         R3, [R1, #156]              @ 0x9c 
    /*0000e668*/ STR         R3, [R0, #48]               @ 0x30 
    /*0000e66c*/ LDR         R3, [R1, #164]              @ 0xa4 
    /*0000e670*/ STR         R3, [R0, #52]               @ 0x34 
    /*0000e674*/ LDR         R3, [R1, #172]              @ 0xac 
    /*0000e678*/ STR         R3, [R0, #56]               @ 0x38 
    /*0000e67c*/ LDR         R3, [R1, #208]              @ 0xd0 
    /*0000e680*/ CMP         R3, #9 
    /*0000e684*/ MOVEQ       R3, #2 
    /*0000e688*/ STREQ       R3, [R0, #60]               @ 0x3c 
    /*0000e68c*/ BEQ         VGS_DRV_GetCropCfg_xe6a0
    /*0000e690*/ CMP         R3, #8 
    /*0000e694*/ MOVEQ       R3, #1 
    /*0000e698*/ MOVNE       R3, #0 
    /*0000e69c*/ STR         R3, [R0, #60]               @ 0x3c 
    VGS_DRV_GetCropCfg_xe6a0:
    /*0000e6a0*/ LDR         R3, [R1, #200]              @ 0xc8 
    /*0000e6a4*/ MOV         IP, #0 
    /*0000e6a8*/ STR         R3, [R0, #64]               @ 0x40 
    /*0000e6ac*/ LDR         R3, [R1, #192]              @ 0xc0 
    /*0000e6b0*/ SUBS        R3, R3, IP 
    /*0000e6b4*/ MOVNE       R3, #1 
    /*0000e6b8*/ STR         R3, [R0, #68]               @ 0x44 
    /*0000e6bc*/ LDR         R3, [R1, #224]              @ 0xe0 
    /*0000e6c0*/ STR         R3, [R0, #72]               @ 0x48 
    /*0000e6c4*/ LDR         R3, [R1, #232]              @ 0xe8 
    /*0000e6c8*/ STR         R3, [R0, #76]               @ 0x4c 
    /*0000e6cc*/ LDR         R3, [R1, #332]              @ 0x14c 
    /*0000e6d0*/ STR         IP, [R0, #84]               @ 0x54 
    /*0000e6d4*/ STR         IP, [R0, #88]               @ 0x58 
    /*0000e6d8*/ STR         R3, [R0, #80]               @ 0x50 
    /*0000e6dc*/ LDR         R3, [R1, #96]               @ 0x60 
    /*0000e6e0*/ CMP         R3, IP 
    /*0000e6e4*/ LDREQ       R3, [R1] 
    /*0000e6e8*/ LDRNE       R3, [R1, #112]              @ 0x70 
    /*0000e6ec*/ LDREQ       R3, [R3] 
    /*0000e6f0*/ STR         R3, [R0, #92]               @ 0x5c 
    /*0000e6f4*/ LDR         R3, [R1, #88]               @ 0x58 
    /*0000e6f8*/ STR         R3, [R0, #96]               @ 0x60 
    /*0000e6fc*/ LDR         R3, [R2, #80]               @ 0x50 
    /*0000e700*/ STR         R3, [R0, #100]              @ 0x64 
    /*0000e704*/ LDR         R3, [R1, #100]              @ 0x64 
    /*0000e708*/ ADDS        R3, R3, #0 
    /*0000e70c*/ MOVNE       R3, #1 
    /*0000e710*/ STR         R3, [R0, #104]              @ 0x68 
    /*0000e714*/ LDR         R3, [R1, #104]              @ 0x68 
    /*0000e718*/ STR         R3, [R0, #108]              @ 0x6c 
    /*0000e71c*/ LDR         R3, [R1, #112]              @ 0x70 
    /*0000e720*/ STR         R3, [R0, #112]              @ 0x70 
    /*0000e724*/ LDR         R3, [R1, #264]              @ 0x108 
    /*0000e728*/ CMP         R3, #1 
    /*0000e72c*/ BEQ         VGS_DRV_GetCropCfg_xe798
    /*0000e730*/ LDR         R3, [R1, #308]              @ 0x134 
    /*0000e734*/ CMP         R3, #0 
    /*0000e738*/ LDREQ       R3, [R1, #16] 
    /*0000e73c*/ LDRNE       R3, [R1, #88]               @ 0x58 
    /*0000e740*/ LDREQ       R3, [R3] 
    /*0000e744*/ STR         R3, [R0, #116]              @ 0x74 
    VGS_DRV_GetCropCfg_xe748:
    /*0000e748*/ MOV         R3, #0 
    /*0000e74c*/ STR         R3, [R0, #120]              @ 0x78 
    /*0000e750*/ STR         R3, [R0, #128]              @ 0x80 
    /*0000e754*/ STR         R3, [R0, #132]              @ 0x84 
    /*0000e758*/ LDR         R3, [R1, #72]               @ 0x48 
    /*0000e75c*/ STR         R3, [R0, #136]              @ 0x88 
    /*0000e760*/ LDR         R3, [R1, #16] 
    /*0000e764*/ LDR         R3, [R3, #20] 
    /*0000e768*/ CMP         R3, #0 
    /*0000e76c*/ STREQ       R3, [R0, #124]              @ 0x7c 
    /*0000e770*/ MOVNE       R3, #1 
    /*0000e774*/ STRNE       R3, [R0, #124]              @ 0x7c 
    /*0000e778*/ LDRNE       R3, [R1, #16] 
    /*0000e77c*/ STREQ       R3, [R0, #140]              @ 0x8c 
    /*0000e780*/ LDRNE       R3, [R3] 
    /*0000e784*/ STRNE       R3, [R0, #140]              @ 0x8c 
    /*0000e788*/ LDRNE       R3, [R1, #16] 
    /*0000e78c*/ LDRNE       R3, [R3] 
    /*0000e790*/ STR         R3, [R0, #144]              @ 0x90 
    /*0000e794*/ BX          LR 
    VGS_DRV_GetCropCfg_xe798:
    /*0000e798*/ LDR         R3, [R1] 
    /*0000e79c*/ LDR         R3, [R3] 
    /*0000e7a0*/ STR         R3, [R0, #116]              @ 0x74 
    /*0000e7a4*/ B           VGS_DRV_GetCropCfg_xe748
FUNC_END VGS_DRV_GetCropCfg


FUNC_BEGIN VGS_DRV_IsNeedScale
    /*0000e7a8*/ LDR         R3, [R0, #124]              @ 0x7c 
    /*0000e7ac*/ CMP         R3, #0 
    /*0000e7b0*/ MOVNE       R3, #0 
    /*0000e7b4*/ BNE         VGS_DRV_IsNeedScale_xe7c4
    /*0000e7b8*/ LDR         R2, [R0, #184]              @ 0xb8 
    /*0000e7bc*/ CMP         R2, #0 
    /*0000e7c0*/ BEQ         VGS_DRV_IsNeedScale_xe7e0
    VGS_DRV_IsNeedScale_xe7c4:
    /*0000e7c4*/ LDR         R1, [R0, #80]               @ 0x50 
    /*0000e7c8*/ LDR         R2, [R0, #88]               @ 0x58 
    /*0000e7cc*/ CMP         R1, R2 
    /*0000e7d0*/ BEQ         VGS_DRV_IsNeedScale_xe804
    VGS_DRV_IsNeedScale_xe7d4:
    /*0000e7d4*/ MOV         R0, #1 
    VGS_DRV_IsNeedScale_xe7d8:
    /*0000e7d8*/ AND         R0, R0, R3 
    /*0000e7dc*/ BX          LR 
    VGS_DRV_IsNeedScale_xe7e0:
    /*0000e7e0*/ LDR         R2, [R0, #264]              @ 0x108 
    /*0000e7e4*/ LDR         R1, [R0, #80]               @ 0x50 
    /*0000e7e8*/ CMP         R2, #0 
    /*0000e7ec*/ LDR         R2, [R0, #88]               @ 0x58 
    /*0000e7f0*/ LDREQ       R3, [R0, #440]              @ 0x1b8 
    /*0000e7f4*/ CLZEQ       R3, R3 
    /*0000e7f8*/ LSREQ       R3, R3, #5 
    /*0000e7fc*/ CMP         R1, R2 
    /*0000e800*/ BNE         VGS_DRV_IsNeedScale_xe7d4
    VGS_DRV_IsNeedScale_xe804:
    /*0000e804*/ LDR         R1, [R0, #84]               @ 0x54 
    /*0000e808*/ LDR         R2, [R0, #92]               @ 0x5c 
    /*0000e80c*/ CMP         R1, R2 
    /*0000e810*/ BNE         VGS_DRV_IsNeedScale_xe7d4
    /*0000e814*/ LDR         R2, [R0, #304]              @ 0x130 
    /*0000e818*/ CMP         R2, #0 
    /*0000e81c*/ BNE         VGS_DRV_IsNeedScale_xe7d4
    /*0000e820*/ LDR         R2, [R0, #312]              @ 0x138 
    /*0000e824*/ CMP         R2, #0 
    /*0000e828*/ BNE         VGS_DRV_IsNeedScale_xe7d4
    /*0000e82c*/ LDR         R2, [R0, #316]              @ 0x13c 
    /*0000e830*/ CMP         R2, #0 
    /*0000e834*/ BNE         VGS_DRV_IsNeedScale_xe7d4
    /*0000e838*/ LDR         R1, [R0, #16] 
    /*0000e83c*/ LDR         R2, [R0] 
    /*0000e840*/ LDR         R1, [R1, #12] 
    /*0000e844*/ LDR         R2, [R2, #12] 
    /*0000e848*/ CMP         R1, R2 
    /*0000e84c*/ BNE         VGS_DRV_IsNeedScale_xe7d4
    /*0000e850*/ LDR         R0, [R0, #480]              @ 0x1e0 
    /*0000e854*/ SUB         R0, R0, #1 
    /*0000e858*/ CLZ         R0, R0 
    /*0000e85c*/ LSR         R0, R0, #5 
    /*0000e860*/ B           VGS_DRV_IsNeedScale_xe7d8
FUNC_END VGS_DRV_IsNeedScale


FUNC_BEGIN VGS_DRV_IsNeedWriteBack
    /*0000e864*/ LDR         R0, [R0, #264]              @ 0x108 
    /*0000e868*/ CLZ         R0, R0 
    /*0000e86c*/ LSR         R0, R0, #5 
    /*0000e870*/ BX          LR 
FUNC_END VGS_DRV_IsNeedWriteBack


FUNC_BEGIN VGS_DRV_CheckQuadRangleCover
    /*0000e874*/ PUSH        {R4, LR} 
    /*0000e878*/ SUB         SP, SP, #16 
    /*0000e87c*/ MOV         R1, #0 
    /*0000e880*/ MOV         R2, R0 
    /*0000e884*/ MOV         R3, R0 
    VGS_DRV_CheckQuadRangleCover_xe888:
    /*0000e888*/ LDR         R4, [R3, #16] 
    /*0000e88c*/ TST         R4, #1 
    /*0000e890*/ BNE         VGS_DRV_CheckQuadRangleCover_xe904
    /*0000e894*/ LDR         IP, [R3, #20] 
    /*0000e898*/ ADD         R1, R1, #1 
    /*0000e89c*/ ADD         R3, R3, #8 
    /*0000e8a0*/ ANDS        LR, IP, #1 
    /*0000e8a4*/ BNE         VGS_DRV_CheckQuadRangleCover_xe90c
    /*0000e8a8*/ CMP         R1, #4 
    /*0000e8ac*/ BNE         VGS_DRV_CheckQuadRangleCover_xe888
    /*0000e8b0*/ MOV         R3, LR 
    /*0000e8b4*/ LDR         R4, [R0, #16] 
    /*0000e8b8*/ LDR         LR, [R0, #20] 
    /*0000e8bc*/ ADD         R0, R0, #24 
    /*0000e8c0*/ MOV         R1, R3 
    VGS_DRV_CheckQuadRangleCover_xe8c4:
    /*0000e8c4*/ LDR         IP, [R2, #24] 
    /*0000e8c8*/ ADD         R2, R2, #8 
    /*0000e8cc*/ CMP         R4, IP 
    /*0000e8d0*/ LDR         IP, [R2, #20] 
    /*0000e8d4*/ ADDEQ       R1, R1, #1 
    /*0000e8d8*/ CMP         LR, IP 
    /*0000e8dc*/ ADDEQ       R3, R3, #1 
    /*0000e8e0*/ CMP         R2, R0 
    /*0000e8e4*/ BNE         VGS_DRV_CheckQuadRangleCover_xe8c4
    /*0000e8e8*/ CMP         R3, #3 
    /*0000e8ec*/ CMPNE       R1, #3 
    /*0000e8f0*/ MOVEQ       R0, #1 
    /*0000e8f4*/ MOVNE       R0, #0 
    /*0000e8f8*/ BEQ         VGS_DRV_CheckQuadRangleCover_xe944
    VGS_DRV_CheckQuadRangleCover_xe8fc:
    /*0000e8fc*/ ADD         SP, SP, #16 
    /*0000e900*/ POP         {R4, PC} 
    VGS_DRV_CheckQuadRangleCover_xe904:
    /*0000e904*/ ADD         R1, R0, R1, LSL #3 
    /*0000e908*/ LDR         IP, [R1, #20] 
    VGS_DRV_CheckQuadRangleCover_xe90c:
    /*0000e90c*/ STR         IP, [SP, #8] 
    /*0000e910*/ MOVW        R3, #3546                   @ 0xdda 
    /*0000e914*/ STR         R4, [SP, #4] 
    /*0000e918*/ MOV         R1, #45                     @ 0x2d 
    /*0000e91c*/ STR         R3, [SP] 
    /*0000e920*/ MOVW        R2, #0                      @ .LC7 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2b7c] 
    /*0000e924*/ LDR         R3, [PC, #68]               @ 0x000000000000e970 
    /*0000e928*/ MOVT        R2, #0                      @ .LC7 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2b7c] 
    /*0000e92c*/ MOV         R0, #3 
    /*0000e930*/ BL          0x000000000000E930          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000e934*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000e938*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000e93c*/ ADD         SP, SP, #16 
    /*0000e940*/ POP         {R4, PC} 
    VGS_DRV_CheckQuadRangleCover_xe944:
    /*0000e944*/ MOVW        R3, #3565                   @ 0xded 
    /*0000e948*/ MOVW        R2, #0                      @ .LC24 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2ed8] 
    /*0000e94c*/ STR         R3, [SP] 
    /*0000e950*/ MOVT        R2, #0                      @ .LC24 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2ed8] 
    /*0000e954*/ LDR         R3, [PC, #20]               @ 0x000000000000e970 
    /*0000e958*/ MOV         R1, #45                     @ 0x2d 
    /*0000e95c*/ MOV         R0, #3 
    /*0000e960*/ BL          0x000000000000E960          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000e964*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000e968*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000e96c*/ B           VGS_DRV_CheckQuadRangleCover_xe8fc
    /*0000e970*/ ANDEQ       R0, R0, IP, ASR R8 
FUNC_END VGS_DRV_CheckQuadRangleCover


FUNC_BEGIN VGS_DRV_IsRectOut
    /*0000e974*/ LDR         R2, [R1] 
    /*0000e978*/ LDR         R3, [R0] 
    /*0000e97c*/ CMP         R2, R3 
    /*0000e980*/ BGE         VGS_DRV_IsRectOut_xe99c
    /*0000e984*/ LDR         R0, [R0, #4] 
    /*0000e988*/ LDR         R3, [R1, #4] 
    /*0000e98c*/ CMP         R3, R0 
    /*0000e990*/ MOVLT       R0, #0 
    /*0000e994*/ MOVGE       R0, #1 
    /*0000e998*/ BX          LR 
    VGS_DRV_IsRectOut_xe99c:
    /*0000e99c*/ MOV         R0, #1 
    /*0000e9a0*/ BX          LR 
FUNC_END VGS_DRV_IsRectOut


FUNC_BEGIN VGS_DRV_CheckRotationInfo
    /*0000e9a4*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000e9a8*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000e9ac*/ LDRD        R4, [R0, #120]              @ 0x78 
    /*0000e9b0*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000e9b4*/ MOV         R7, #0 
    /*0000e9b8*/ SUB         SP, SP, #28 
    /*0000e9bc*/ AND         R6, R4, #15 
    /*0000e9c0*/ ORRS        IP, R6, R7 
    /*0000e9c4*/ LDR         IP, [R3, #1800]             @ 0x708 
    /*0000e9c8*/ LDR         R3, [R3, #1804]             @ 0x70c 
    /*0000e9cc*/ BNE         VGS_DRV_CheckRotationInfo_xeb88
    /*0000e9d0*/ LDRD        R4, [R1, #120]              @ 0x78 
    /*0000e9d4*/ MOV         R7, #0 
    /*0000e9d8*/ AND         R6, R4, #15 
    /*0000e9dc*/ ORRS        LR, R6, R7 
    /*0000e9e0*/ BNE         VGS_DRV_CheckRotationInfo_xebb8
    /*0000e9e4*/ LDR         LR, [R0, #20] 
    /*0000e9e8*/ CMP         LR, #1 
    /*0000e9ec*/ BEQ         VGS_DRV_CheckRotationInfo_xeae4
    /*0000e9f0*/ CMP         IP, #4608                   @ 0x1200 
    /*0000e9f4*/ MOVCS       IP, #4608                   @ 0x1200 
    /*0000e9f8*/ CMP         R3, #4608                   @ 0x1200 
    /*0000e9fc*/ MOVCS       R3, #4608                   @ 0x1200 
    VGS_DRV_CheckRotationInfo_xea00:
    /*0000ea00*/ LDR         LR, [R0] 
    /*0000ea04*/ CMP         IP, LR 
    /*0000ea08*/ LDR         IP, [R0, #4] 
    /*0000ea0c*/ BCC         VGS_DRV_CheckRotationInfo_xeb38
    /*0000ea10*/ CMP         R3, IP 
    /*0000ea14*/ BCC         VGS_DRV_CheckRotationInfo_xeb38
    /*0000ea18*/ BICS        R2, R2, #2 
    /*0000ea1c*/ BNE         VGS_DRV_CheckRotationInfo_xea74
    /*0000ea20*/ LDM         R1, {R3, R4} 
    /*0000ea24*/ CMP         LR, R3 
    /*0000ea28*/ BNE         VGS_DRV_CheckRotationInfo_xeaf8
    /*0000ea2c*/ CMP         IP, R4 
    /*0000ea30*/ BNE         VGS_DRV_CheckRotationInfo_xeaf8
    VGS_DRV_CheckRotationInfo_xea34:
    /*0000ea34*/ LDR         R3, [R0, #12] 
    /*0000ea38*/ CMP         R3, #28 
    /*0000ea3c*/ CMPNE       R3, #25 
    /*0000ea40*/ BEQ         VGS_DRV_CheckRotationInfo_xeab4
    /*0000ea44*/ LDR         R2, [R1, #12] 
    /*0000ea48*/ CMP         R3, R2 
    /*0000ea4c*/ BNE         VGS_DRV_CheckRotationInfo_xeb6c
    /*0000ea50*/ LDR         R0, [R1, #20] 
    /*0000ea54*/ CMP         R0, #0 
    /*0000ea58*/ MOVWNE      R3, #3645                   @ 0xe3d 
    /*0000ea5c*/ MOVWNE      R2, #0                      @ .LC30 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3064] 
    /*0000ea60*/ STRNE       R3, [SP] 
    /*0000ea64*/ MOVTNE      R2, #0                      @ .LC30 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3064] 
    /*0000ea68*/ BNE         VGS_DRV_CheckRotationInfo_xeac4
    VGS_DRV_CheckRotationInfo_xea6c:
    /*0000ea6c*/ ADD         SP, SP, #28 
    /*0000ea70*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_CheckRotationInfo_xea74:
    /*0000ea74*/ CMP         R2, #1 
    /*0000ea78*/ BNE         VGS_DRV_CheckRotationInfo_xea34
    /*0000ea7c*/ LDR         R3, [R1, #4] 
    /*0000ea80*/ LDR         R4, [R1] 
    /*0000ea84*/ CMP         LR, R3 
    /*0000ea88*/ BNE         VGS_DRV_CheckRotationInfo_xea94
    /*0000ea8c*/ CMP         IP, R4 
    /*0000ea90*/ BEQ         VGS_DRV_CheckRotationInfo_xea34
    VGS_DRV_CheckRotationInfo_xea94:
    /*0000ea94*/ MOVW        R2, #0                      @ .LC28 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2fd4] 
    /*0000ea98*/ STR         LR, [SP, #16] 
    /*0000ea9c*/ MOVW        R0, #3624                   @ 0xe28 
    /*0000eaa0*/ STR         IP, [SP, #12] 
    /*0000eaa4*/ STR         R3, [SP, #8] 
    /*0000eaa8*/ MOVT        R2, #0                      @ .LC28 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2fd4] 
    /*0000eaac*/ STR         R4, [SP, #4] 
    /*0000eab0*/ B           VGS_DRV_CheckRotationInfo_xeb14
    VGS_DRV_CheckRotationInfo_xeab4:
    /*0000eab4*/ MOVW        R2, #0                      @ .LC31 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x309c] 
    /*0000eab8*/ MOVT        R2, #0                      @ .LC31 [R_ARM_MOVT_ABS: .rodata.str1.4+0x309c] 
    /*0000eabc*/ MOVW        R3, #3631                   @ 0xe2f 
    /*0000eac0*/ STR         R3, [SP] 
    VGS_DRV_CheckRotationInfo_xeac4:
    /*0000eac4*/ LDR         R3, [PC, #260]              @ 0x000000000000ebd0 
    /*0000eac8*/ MOV         R1, #45                     @ 0x2d 
    /*0000eacc*/ MOV         R0, #3 
    /*0000ead0*/ BL          0x000000000000EAD0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ead4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000ead8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000eadc*/ ADD         SP, SP, #28 
    /*0000eae0*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_CheckRotationInfo_xeae4:
    /*0000eae4*/ CMP         IP, #4096                   @ 0x1000 
    /*0000eae8*/ MOVCS       IP, #4096                   @ 0x1000 
    /*0000eaec*/ CMP         R3, #4096                   @ 0x1000 
    /*0000eaf0*/ MOVCS       R3, #4096                   @ 0x1000 
    /*0000eaf4*/ B           VGS_DRV_CheckRotationInfo_xea00
    VGS_DRV_CheckRotationInfo_xeaf8:
    /*0000eaf8*/ MOVW        R2, #0                      @ .LC28 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2fd4] 
    /*0000eafc*/ MOVT        R2, #0                      @ .LC28 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2fd4] 
    /*0000eb00*/ MOV         R0, #3616                   @ 0xe20 
    /*0000eb04*/ STR         IP, [SP, #16] 
    /*0000eb08*/ STR         LR, [SP, #12] 
    /*0000eb0c*/ STR         R4, [SP, #8] 
    /*0000eb10*/ STR         R3, [SP, #4] 
    VGS_DRV_CheckRotationInfo_xeb14:
    /*0000eb14*/ STR         R0, [SP] 
    /*0000eb18*/ MOV         R1, #45                     @ 0x2d 
    /*0000eb1c*/ LDR         R3, [PC, #172]              @ 0x000000000000ebd0 
    /*0000eb20*/ MOV         R0, #3 
    /*0000eb24*/ BL          0x000000000000EB24          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000eb28*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000eb2c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000eb30*/ ADD         SP, SP, #28 
    /*0000eb34*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_CheckRotationInfo_xeb38:
    /*0000eb38*/ MOVW        R2, #0                      @ .LC27 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2f9c] 
    /*0000eb3c*/ MOVT        R2, #0                      @ .LC27 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2f9c] 
    /*0000eb40*/ MOVW        R3, #3608                   @ 0xe18 
    /*0000eb44*/ STR         IP, [SP, #8] 
    /*0000eb48*/ STR         LR, [SP, #4] 
    /*0000eb4c*/ STR         R3, [SP] 
    VGS_DRV_CheckRotationInfo_xeb50:
    /*0000eb50*/ LDR         R3, [PC, #120]              @ 0x000000000000ebd0 
    /*0000eb54*/ MOV         R1, #45                     @ 0x2d 
    /*0000eb58*/ MOV         R0, #3 
    /*0000eb5c*/ BL          0x000000000000EB5C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000eb60*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000eb64*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000eb68*/ B           VGS_DRV_CheckRotationInfo_xea6c
    VGS_DRV_CheckRotationInfo_xeb6c:
    /*0000eb6c*/ STR         R3, [SP, #8] 
    /*0000eb70*/ MOVW        R3, #3638                   @ 0xe36 
    /*0000eb74*/ STR         R2, [SP, #4] 
    /*0000eb78*/ MOVW        R2, #0                      @ .LC29 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3014] 
    /*0000eb7c*/ STR         R3, [SP] 
    /*0000eb80*/ MOVT        R2, #0                      @ .LC29 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3014] 
    /*0000eb84*/ B           VGS_DRV_CheckRotationInfo_xeb50
    VGS_DRV_CheckRotationInfo_xeb88:
    /*0000eb88*/ MOVW        R2, #0                      @ .LC25 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2f28] 
    /*0000eb8c*/ MOVT        R2, #0                      @ .LC25 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2f28] 
    /*0000eb90*/ MOVW        R3, #3591                   @ 0xe07 
    /*0000eb94*/ STRD        R4, [SP, #8] 
    /*0000eb98*/ STR         R3, [SP] 
    VGS_DRV_CheckRotationInfo_xeb9c:
    /*0000eb9c*/ LDR         R3, [PC, #44]               @ 0x000000000000ebd0 
    /*0000eba0*/ MOV         R1, #45                     @ 0x2d 
    /*0000eba4*/ MOV         R0, #3 
    /*0000eba8*/ BL          0x000000000000EBA8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ebac*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000ebb0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000ebb4*/ B           VGS_DRV_CheckRotationInfo_xea6c
    VGS_DRV_CheckRotationInfo_xebb8:
    /*0000ebb8*/ MOVW        R3, #3596                   @ 0xe0c 
    /*0000ebbc*/ MOVW        R2, #0                      @ .LC26 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x2f60] 
    /*0000ebc0*/ STRD        R4, [SP, #8] 
    /*0000ebc4*/ MOVT        R2, #0                      @ .LC26 [R_ARM_MOVT_ABS: .rodata.str1.4+0x2f60] 
    /*0000ebc8*/ STR         R3, [SP] 
    /*0000ebcc*/ B           VGS_DRV_CheckRotationInfo_xeb9c
    /*0000ebd0*/ ANDEQ       R0, R0, IP, ROR R8 
FUNC_END VGS_DRV_CheckRotationInfo


FUNC_BEGIN VGS_DRV_CheckImageQuickCopy
    /*0000ebd4*/ PUSH        {R4, R5, LR} 
    /*0000ebd8*/ SUB         SP, SP, #20 
    /*0000ebdc*/ LDR         R1, [R0, #12] 
    /*0000ebe0*/ SUB         R2, R1, #8 
    /*0000ebe4*/ CMP         R2, #31 
    /*0000ebe8*/ BLS         VGS_DRV_CheckImageQuickCopy_xec20
    VGS_DRV_CheckImageQuickCopy_xebec:
    /*0000ebec*/ MOVW        R2, #0                      @ .LC32 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x30d0] 
    /*0000ebf0*/ MOVT        R2, #0                      @ .LC32 [R_ARM_MOVT_ABS: .rodata.str1.4+0x30d0] 
    /*0000ebf4*/ MOVW        R3, #3659                   @ 0xe4b 
    /*0000ebf8*/ STR         R1, [SP, #4] 
    /*0000ebfc*/ STR         R3, [SP] 
    VGS_DRV_CheckImageQuickCopy_xec00:
    /*0000ec00*/ LDR         R3, [PC, #332]              @ 0x000000000000ed54 
    /*0000ec04*/ MOV         R1, #45                     @ 0x2d 
    /*0000ec08*/ MOV         R0, #3 
    /*0000ec0c*/ BL          0x000000000000EC0C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ec10*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000ec14*/ MOVT        R0, #41005                  @ 0xa02d 
    VGS_DRV_CheckImageQuickCopy_xec18:
    /*0000ec18*/ ADD         SP, SP, #20 
    /*0000ec1c*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckImageQuickCopy_xec20:
    /*0000ec20*/ MOV         R3, #-2147483621            @ 0x8000001b 
    /*0000ec24*/ MVN         R3, R3, LSR R2 
    /*0000ec28*/ TST         R3, #1 
    /*0000ec2c*/ BNE         VGS_DRV_CheckImageQuickCopy_xebec
    /*0000ec30*/ CMP         R1, #11 
    /*0000ec34*/ BEQ         VGS_DRV_CheckImageQuickCopy_xecf8
    /*0000ec38*/ CMP         R2, #2 
    /*0000ec3c*/ MOVCC       R3, #64                     @ 0x40 
    /*0000ec40*/ MOVCS       R3, #32 
    /*0000ec44*/ MOVCC       LR, #2 
    /*0000ec48*/ MOVCS       LR, #1 
    VGS_DRV_CheckImageQuickCopy_xec4c:
    /*0000ec4c*/ LDR         R2, [R0] 
    /*0000ec50*/ LDR         R1, [R0, #4] 
    /*0000ec54*/ CMP         R2, R3 
    /*0000ec58*/ BCC         VGS_DRV_CheckImageQuickCopy_xed04
    /*0000ec5c*/ CMP         R1, #31 
    /*0000ec60*/ BLS         VGS_DRV_CheckImageQuickCopy_xed04
    /*0000ec64*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000ec68*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000ec6c*/ LDR         IP, [R3, #1800]             @ 0x708 
    /*0000ec70*/ MUL         IP, IP, LR 
    /*0000ec74*/ CMP         R2, IP 
    /*0000ec78*/ BHI         VGS_DRV_CheckImageQuickCopy_xed04
    /*0000ec7c*/ LDR         R3, [R3, #1804]             @ 0x70c 
    /*0000ec80*/ CMP         R1, R3 
    /*0000ec84*/ BHI         VGS_DRV_CheckImageQuickCopy_xed04
    /*0000ec88*/ ORR         R3, R2, R1 
    /*0000ec8c*/ TST         R3, #1 
    /*0000ec90*/ BNE         VGS_DRV_CheckImageQuickCopy_xed04
    /*0000ec94*/ LDR         R2, [R0, #44]               @ 0x2c 
    /*0000ec98*/ CMP         R2, #15 
    /*0000ec9c*/ BLS         VGS_DRV_CheckImageQuickCopy_xed3c
    /*0000eca0*/ ANDS        R3, R2, #15 
    /*0000eca4*/ BNE         VGS_DRV_CheckImageQuickCopy_xed3c
    /*0000eca8*/ LDRD        R0, [R0, #120]              @ 0x78 
    /*0000ecac*/ ORRS        R2, R0, R1 
    /*0000ecb0*/ BEQ         VGS_DRV_CheckImageQuickCopy_xecc8
    /*0000ecb4*/ AND         R4, R0, #1 
    /*0000ecb8*/ MOV         R5, #0 
    /*0000ecbc*/ ORRS        R2, R4, R5 
    /*0000ecc0*/ MOVEQ       R0, R3 
    /*0000ecc4*/ BEQ         VGS_DRV_CheckImageQuickCopy_xec18
    VGS_DRV_CheckImageQuickCopy_xecc8:
    /*0000ecc8*/ STRD        R0, [SP, #8] 
    /*0000eccc*/ MOVW        R3, #3688                   @ 0xe68 
    /*0000ecd0*/ MOVW        R2, #0                      @ .LC35 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3168] 
    /*0000ecd4*/ STR         R3, [SP] 
    /*0000ecd8*/ MOVT        R2, #0                      @ .LC35 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3168] 
    /*0000ecdc*/ LDR         R3, [PC, #112]              @ 0x000000000000ed54 
    /*0000ece0*/ MOV         R1, #45                     @ 0x2d 
    /*0000ece4*/ MOV         R0, #3 
    /*0000ece8*/ BL          0x000000000000ECE8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ecec*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000ecf0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000ecf4*/ B           VGS_DRV_CheckImageQuickCopy_xec18
    VGS_DRV_CheckImageQuickCopy_xecf8:
    /*0000ecf8*/ MOV         R3, #128                    @ 0x80 
    /*0000ecfc*/ MOV         LR, #4 
    /*0000ed00*/ B           VGS_DRV_CheckImageQuickCopy_xec4c
    VGS_DRV_CheckImageQuickCopy_xed04:
    /*0000ed04*/ STR         R1, [SP, #8] 
    /*0000ed08*/ MOVW        R3, #3676                   @ 0xe5c 
    /*0000ed0c*/ STR         R2, [SP, #4] 
    /*0000ed10*/ MOV         R1, #45                     @ 0x2d 
    /*0000ed14*/ STR         R3, [SP] 
    /*0000ed18*/ MOVW        R2, #0                      @ .LC33 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3104] 
    /*0000ed1c*/ LDR         R3, [PC, #48]               @ 0x000000000000ed54 
    /*0000ed20*/ MOVT        R2, #0                      @ .LC33 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3104] 
    /*0000ed24*/ MOV         R0, #3 
    /*0000ed28*/ BL          0x000000000000ED28          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ed2c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000ed30*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000ed34*/ ADD         SP, SP, #20 
    /*0000ed38*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckImageQuickCopy_xed3c:
    /*0000ed3c*/ STR         R2, [SP, #4] 
    /*0000ed40*/ MOVW        R3, #3682                   @ 0xe62 
    /*0000ed44*/ MOVW        R2, #0                      @ .LC34 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3134] 
    /*0000ed48*/ STR         R3, [SP] 
    /*0000ed4c*/ MOVT        R2, #0                      @ .LC34 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3134] 
    /*0000ed50*/ B           VGS_DRV_CheckImageQuickCopy_xec00
    /*0000ed54*/ MULEQ       R0, R8, R8 
FUNC_END VGS_DRV_CheckImageQuickCopy


FUNC_BEGIN VGS_DRV_CheckInImage
    /*0000ed58*/ PUSH        {R4, LR} 
    /*0000ed5c*/ MOV         R4, R0 
    /*0000ed60*/ LDR         R2, [R0] 
    /*0000ed64*/ SUB         SP, SP, #16 
    /*0000ed68*/ LDR         R1, [R0, #4] 
    /*0000ed6c*/ CMP         R2, #31 
    /*0000ed70*/ BLS         VGS_DRV_CheckInImage_xedcc
    /*0000ed74*/ CMP         R1, #31 
    /*0000ed78*/ BLS         VGS_DRV_CheckInImage_xedcc
    /*0000ed7c*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000ed80*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000ed84*/ LDR         IP, [R3, #1800]             @ 0x708 
    /*0000ed88*/ CMP         R2, IP 
    /*0000ed8c*/ BHI         VGS_DRV_CheckInImage_xedcc
    /*0000ed90*/ LDR         R3, [R3, #1804]             @ 0x70c 
    /*0000ed94*/ CMP         R1, R3 
    /*0000ed98*/ BHI         VGS_DRV_CheckInImage_xedcc
    /*0000ed9c*/ ORR         R3, R2, R1 
    /*0000eda0*/ TST         R3, #1 
    /*0000eda4*/ BNE         VGS_DRV_CheckInImage_xedcc
    /*0000eda8*/ BL          0x000000000000B6A0 
    /*0000edac*/ CMP         R0, #0 
    /*0000edb0*/ BNE         VGS_DRV_CheckInImage_xee04
    /*0000edb4*/ MOV         R0, R4 
    /*0000edb8*/ BL          0x000000000000B500 
    /*0000edbc*/ CMP         R0, #0 
    /*0000edc0*/ BNE         VGS_DRV_CheckInImage_xee04
    VGS_DRV_CheckInImage_xedc4:
    /*0000edc4*/ ADD         SP, SP, #16 
    /*0000edc8*/ POP         {R4, PC} 
    VGS_DRV_CheckInImage_xedcc:
    /*0000edcc*/ STR         R1, [SP, #8] 
    /*0000edd0*/ MOVW        R3, #3809                   @ 0xee1 
    /*0000edd4*/ STR         R2, [SP, #4] 
    /*0000edd8*/ MOV         R1, #45                     @ 0x2d 
    /*0000eddc*/ STR         R3, [SP] 
    /*0000ede0*/ MOVW        R2, #0                      @ .LC33 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3104] 
    /*0000ede4*/ LDR         R3, [PC, #36]               @ 0x000000000000ee10 
    /*0000ede8*/ MOVT        R2, #0                      @ .LC33 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3104] 
    /*0000edec*/ MOV         R0, #3 
    /*0000edf0*/ BL          0x000000000000EDF0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000edf4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000edf8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000edfc*/ ADD         SP, SP, #16 
    /*0000ee00*/ POP         {R4, PC} 
    VGS_DRV_CheckInImage_xee04:
    /*0000ee04*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000ee08*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000ee0c*/ B           VGS_DRV_CheckInImage_xedc4
    /*0000ee10*/ @           <UNDEFINED> instruction: 0x000008b4 
FUNC_END VGS_DRV_CheckInImage


FUNC_BEGIN VGS_DRV_CheckOutImage
    /*0000ee14*/ PUSH        {R4, LR} 
    /*0000ee18*/ MOV         R4, R0 
    /*0000ee1c*/ LDR         R3, [R0] 
    /*0000ee20*/ SUB         SP, SP, #16 
    /*0000ee24*/ LDR         R2, [R0, #4] 
    /*0000ee28*/ CMP         R3, #29 
    /*0000ee2c*/ BLS         VGS_DRV_CheckOutImage_xee74
    /*0000ee30*/ SUB         IP, R2, #12 
    /*0000ee34*/ MOVW        R1, #8180                   @ 0x1ff4 
    /*0000ee38*/ CMP         R3, #8192                   @ 0x2000 
    /*0000ee3c*/ CMPLS       IP, R1 
    /*0000ee40*/ BHI         VGS_DRV_CheckOutImage_xee74
    /*0000ee44*/ ORR         R1, R3, R2 
    /*0000ee48*/ TST         R1, #1 
    /*0000ee4c*/ BNE         VGS_DRV_CheckOutImage_xee74
    /*0000ee50*/ BL          0x000000000000B6A0 
    /*0000ee54*/ CMP         R0, #0 
    /*0000ee58*/ BNE         VGS_DRV_CheckOutImage_xeeac
    /*0000ee5c*/ MOV         R0, R4 
    /*0000ee60*/ BL          0x000000000000B500 
    /*0000ee64*/ CMP         R0, #0 
    /*0000ee68*/ BNE         VGS_DRV_CheckOutImage_xeeac
    VGS_DRV_CheckOutImage_xee6c:
    /*0000ee6c*/ ADD         SP, SP, #16 
    /*0000ee70*/ POP         {R4, PC} 
    VGS_DRV_CheckOutImage_xee74:
    /*0000ee74*/ STR         R2, [SP, #8] 
    /*0000ee78*/ MOVW        R1, #3832                   @ 0xef8 
    /*0000ee7c*/ STR         R3, [SP, #4] 
    /*0000ee80*/ MOVW        R2, #0                      @ .LC33 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3104] 
    /*0000ee84*/ STR         R1, [SP] 
    /*0000ee88*/ MOVT        R2, #0                      @ .LC33 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3104] 
    /*0000ee8c*/ LDR         R3, [PC, #36]               @ 0x000000000000eeb8 
    /*0000ee90*/ MOV         R1, #45                     @ 0x2d 
    /*0000ee94*/ MOV         R0, #3 
    /*0000ee98*/ BL          0x000000000000EE98          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ee9c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000eea0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000eea4*/ ADD         SP, SP, #16 
    /*0000eea8*/ POP         {R4, PC} 
    VGS_DRV_CheckOutImage_xeeac:
    /*0000eeac*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000eeb0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000eeb4*/ B           VGS_DRV_CheckOutImage_xee6c
    /*0000eeb8*/ ANDEQ       R0, R0, IP, ASR #17 
FUNC_END VGS_DRV_CheckOutImage


FUNC_BEGIN VGS_DRV_CheckInOutImage
    /*0000eebc*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*0000eec0*/ SUB         SP, SP, #40                 @ 0x28 
    /*0000eec4*/ LDRD        R4, [R0, #120]              @ 0x78 
    /*0000eec8*/ LDRD        R2, [R1, #120]              @ 0x78 
    /*0000eecc*/ CMP         R5, R3 
    /*0000eed0*/ CMPEQ       R4, R2 
    /*0000eed4*/ BNE         VGS_DRV_CheckInOutImage_xefac
    /*0000eed8*/ LDRD        R4, [R0, #128]              @ 0x80 
    /*0000eedc*/ LDRD        R2, [R1, #128]              @ 0x80 
    /*0000eee0*/ CMP         R5, R3 
    /*0000eee4*/ CMPEQ       R4, R2 
    /*0000eee8*/ BNE         VGS_DRV_CheckInOutImage_xefac
    /*0000eeec*/ LDR         R4, [R0, #4] 
    /*0000eef0*/ LDR         R5, [R1, #4] 
    /*0000eef4*/ CMP         R4, R5 
    /*0000eef8*/ BNE         VGS_DRV_CheckInOutImage_xeff4
    /*0000eefc*/ LDR         IP, [R0] 
    /*0000ef00*/ LDR         R3, [R1] 
    /*0000ef04*/ CMP         IP, R3 
    /*0000ef08*/ BNE         VGS_DRV_CheckInOutImage_xef48
    /*0000ef0c*/ LDR         R2, [R0, #44]               @ 0x2c 
    /*0000ef10*/ LDR         LR, [R1, #44]               @ 0x2c 
    /*0000ef14*/ CMP         R2, LR 
    /*0000ef18*/ BNE         VGS_DRV_CheckInOutImage_xefdc
    /*0000ef1c*/ LDR         R6, [R0, #48]               @ 0x30 
    /*0000ef20*/ LDR         R7, [R1, #48]               @ 0x30 
    /*0000ef24*/ CMP         R6, R7 
    /*0000ef28*/ BNE         VGS_DRV_CheckInOutImage_xef64
    /*0000ef2c*/ LDR         R3, [R0, #12] 
    /*0000ef30*/ LDR         R2, [R1, #12] 
    /*0000ef34*/ CMP         R3, R2 
    /*0000ef38*/ MOVEQ       R0, #0 
    /*0000ef3c*/ BNE         VGS_DRV_CheckInOutImage_xf010
    VGS_DRV_CheckInOutImage_xef40:
    /*0000ef40*/ ADD         SP, SP, #40                 @ 0x28 
    /*0000ef44*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DRV_CheckInOutImage_xef48:
    /*0000ef48*/ MOV         R2, R3 
    /*0000ef4c*/ LDR         LR, [R0, #44]               @ 0x2c 
    /*0000ef50*/ MOV         R3, IP 
    /*0000ef54*/ LDR         R6, [R0, #48]               @ 0x30 
    /*0000ef58*/ MOV         IP, R2 
    /*0000ef5c*/ LDR         R7, [R1, #48]               @ 0x30 
    /*0000ef60*/ LDR         R2, [R1, #44]               @ 0x2c 
    VGS_DRV_CheckInOutImage_xef64:
    /*0000ef64*/ STR         R7, [SP, #32] 
    /*0000ef68*/ MOV         R1, #45                     @ 0x2d 
    /*0000ef6c*/ STR         R2, [SP, #28] 
    /*0000ef70*/ MOVW        R7, #3862                   @ 0xf16 
    /*0000ef74*/ STMIB       SP, {R3, R4, LR} 
    /*0000ef78*/ MOVW        R2, #0                      @ .LC37 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x31ec] 
    /*0000ef7c*/ STR         R5, [SP, #24] 
    /*0000ef80*/ MOVT        R2, #0                      @ .LC37 [R_ARM_MOVT_ABS: .rodata.str1.4+0x31ec] 
    /*0000ef84*/ STR         IP, [SP, #20] 
    /*0000ef88*/ MOV         R0, #3 
    /*0000ef8c*/ STR         R6, [SP, #16] 
    /*0000ef90*/ STR         R7, [SP] 
    /*0000ef94*/ LDR         R3, [PC, #168]              @ 0x000000000000f044 
    /*0000ef98*/ BL          0x000000000000EF98          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000ef9c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000efa0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000efa4*/ ADD         SP, SP, #40                 @ 0x28 
    /*0000efa8*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DRV_CheckInOutImage_xefac:
    /*0000efac*/ MOVW        R3, #3853                   @ 0xf0d 
    /*0000efb0*/ MOV         R1, #45                     @ 0x2d 
    /*0000efb4*/ STR         R3, [SP] 
    /*0000efb8*/ MOVW        R2, #0                      @ .LC36 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x319c] 
    /*0000efbc*/ LDR         R3, [PC, #128]              @ 0x000000000000f044 
    /*0000efc0*/ MOVT        R2, #0                      @ .LC36 [R_ARM_MOVT_ABS: .rodata.str1.4+0x319c] 
    /*0000efc4*/ MOV         R0, #3 
    /*0000efc8*/ BL          0x000000000000EFC8          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000efcc*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000efd0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000efd4*/ ADD         SP, SP, #40                 @ 0x28 
    /*0000efd8*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_DRV_CheckInOutImage_xefdc:
    /*0000efdc*/ MOV         R8, LR 
    /*0000efe0*/ LDR         R6, [R0, #48]               @ 0x30 
    /*0000efe4*/ MOV         LR, R2 
    /*0000efe8*/ LDR         R7, [R1, #48]               @ 0x30 
    /*0000efec*/ MOV         R2, R8 
    /*0000eff0*/ B           VGS_DRV_CheckInOutImage_xef64
    VGS_DRV_CheckInOutImage_xeff4:
    /*0000eff4*/ LDR         R3, [R0] 
    /*0000eff8*/ LDR         IP, [R1] 
    /*0000effc*/ LDR         LR, [R0, #44]               @ 0x2c 
    /*0000f000*/ LDR         R6, [R0, #48]               @ 0x30 
    /*0000f004*/ LDR         R2, [R1, #44]               @ 0x2c 
    /*0000f008*/ LDR         R7, [R1, #48]               @ 0x30 
    /*0000f00c*/ B           VGS_DRV_CheckInOutImage_xef64
    VGS_DRV_CheckInOutImage_xf010:
    /*0000f010*/ STR         R2, [SP, #8] 
    /*0000f014*/ MOVW        R1, #3869                   @ 0xf1d 
    /*0000f018*/ STR         R3, [SP, #4] 
    /*0000f01c*/ MOVW        R2, #0                      @ .LC38 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x326c] 
    /*0000f020*/ STR         R1, [SP] 
    /*0000f024*/ MOVT        R2, #0                      @ .LC38 [R_ARM_MOVT_ABS: .rodata.str1.4+0x326c] 
    /*0000f028*/ LDR         R3, [PC, #20]               @ 0x000000000000f044 
    /*0000f02c*/ MOV         R1, #45                     @ 0x2d 
    /*0000f030*/ MOV         R0, #3 
    /*0000f034*/ BL          0x000000000000F034          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f038*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f03c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f040*/ B           VGS_DRV_CheckInOutImage_xef40
    /*0000f044*/ ANDEQ       R0, R0, R4, ROR #17 
FUNC_END VGS_DRV_CheckInOutImage


FUNC_BEGIN VGS_DRV_CheckOsdDynamicRange
    /*0000f048*/ MOV         R0, #0 
    /*0000f04c*/ BX          LR 
FUNC_END VGS_DRV_CheckOsdDynamicRange


FUNC_BEGIN VGS_DRV_CheckOsd
    /*0000f050*/ PUSH        {R4, LR} 
    /*0000f054*/ MOV         R4, R0 
    /*0000f058*/ LDR         R0, [R0] 
    /*0000f05c*/ SUB         SP, SP, #16 
    /*0000f060*/ CMP         R0, #1 
    /*0000f064*/ BLS         VGS_DRV_CheckOsd_xf080
    /*0000f068*/ MOVW        R1, #0                      @ .LC39 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x32bc] 
    /*0000f06c*/ MOVT        R1, #0                      @ .LC39 [R_ARM_MOVT_ABS: .rodata.str1.4+0x32bc] 
    /*0000f070*/ BL          0x000000000000B780 
    /*0000f074*/ CMP         R0, #0 
    /*0000f078*/ BNE         VGS_DRV_CheckOsd_xf148
    /*0000f07c*/ LDR         R0, [R4] 
    VGS_DRV_CheckOsd_xf080:
    /*0000f080*/ CMP         R0, #0 
    /*0000f084*/ BEQ         VGS_DRV_CheckOsd_xf118
    /*0000f088*/ LDRD        R2, [R4, #8] 
    /*0000f08c*/ ORRS        R1, R2, R3 
    /*0000f090*/ BEQ         VGS_DRV_CheckOsd_xf158
    /*0000f094*/ AND         R0, R2, #1 
    /*0000f098*/ MOV         R1, #0 
    /*0000f09c*/ ORRS        R1, R0, R1 
    /*0000f0a0*/ BNE         VGS_DRV_CheckOsd_xf158
    /*0000f0a4*/ LDR         R3, [R4, #20] 
    /*0000f0a8*/ CMP         R3, #0 
    /*0000f0ac*/ BEQ         VGS_DRV_CheckOsd_xf188
    /*0000f0b0*/ TST         R3, #15 
    /*0000f0b4*/ BNE         VGS_DRV_CheckOsd_xf188
    /*0000f0b8*/ LDR         R3, [R4, #16] 
    /*0000f0bc*/ SUB         R2, R3, #8 
    /*0000f0c0*/ CMP         R3, #11 
    /*0000f0c4*/ CMPNE       R2, #1 
    /*0000f0c8*/ BHI         VGS_DRV_CheckOsd_xf1a0
    /*0000f0cc*/ LDR         R0, [R4, #24] 
    /*0000f0d0*/ CMP         R0, #1 
    /*0000f0d4*/ BLS         VGS_DRV_CheckOsd_xf0ec
    /*0000f0d8*/ MOVW        R1, #0                      @ .LC43 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3364] 
    /*0000f0dc*/ MOVT        R1, #0                      @ .LC43 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3364] 
    /*0000f0e0*/ BL          0x000000000000B780 
    /*0000f0e4*/ CMP         R0, #0 
    /*0000f0e8*/ BNE         VGS_DRV_CheckOsd_xf148
    VGS_DRV_CheckOsd_xf0ec:
    /*0000f0ec*/ LDR         R0, [R4, #48]               @ 0x30 
    /*0000f0f0*/ CMP         R0, #1 
    /*0000f0f4*/ BLS         VGS_DRV_CheckOsd_xf10c
    /*0000f0f8*/ MOVW        R1, #0                      @ .LC44 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3374] 
    /*0000f0fc*/ MOVT        R1, #0                      @ .LC44 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3374] 
    /*0000f100*/ BL          0x000000000000B780 
    /*0000f104*/ CMP         R0, #0 
    /*0000f108*/ BNE         VGS_DRV_CheckOsd_xf148
    VGS_DRV_CheckOsd_xf10c:
    /*0000f10c*/ LDR         R3, [R4, #68]               @ 0x44 
    /*0000f110*/ CMP         R3, #3 
    /*0000f114*/ BHI         VGS_DRV_CheckOsd_xf124
    VGS_DRV_CheckOsd_xf118:
    /*0000f118*/ MOV         R0, #0 
    VGS_DRV_CheckOsd_xf11c:
    /*0000f11c*/ ADD         SP, SP, #16 
    /*0000f120*/ POP         {R4, PC} 
    VGS_DRV_CheckOsd_xf124:
    /*0000f124*/ MOVW        R2, #0                      @ .LC45 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3380] 
    /*0000f128*/ MOVT        R2, #0                      @ .LC45 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3380] 
    /*0000f12c*/ STR         R3, [SP, #4] 
    /*0000f130*/ MOVW        R3, #4099                   @ 0x1003 
    /*0000f134*/ STR         R3, [SP] 
    VGS_DRV_CheckOsd_xf138:
    /*0000f138*/ LDR         R3, [PC, #120]              @ 0x000000000000f1b8 
    /*0000f13c*/ MOV         R1, #45                     @ 0x2d 
    /*0000f140*/ MOV         R0, #3 
    /*0000f144*/ BL          0x000000000000F144          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DRV_CheckOsd_xf148:
    /*0000f148*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f14c*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f150*/ ADD         SP, SP, #16 
    /*0000f154*/ POP         {R4, PC} 
    VGS_DRV_CheckOsd_xf158:
    /*0000f158*/ STRD        R2, [SP, #8] 
    /*0000f15c*/ MOV         R1, #45                     @ 0x2d 
    /*0000f160*/ MOVW        R3, #4069                   @ 0xfe5 
    /*0000f164*/ MOVW        R2, #0                      @ .LC40 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x32c4] 
    /*0000f168*/ STR         R3, [SP] 
    /*0000f16c*/ MOVT        R2, #0                      @ .LC40 [R_ARM_MOVT_ABS: .rodata.str1.4+0x32c4] 
    /*0000f170*/ LDR         R3, [PC, #64]               @ 0x000000000000f1b8 
    /*0000f174*/ MOV         R0, #3 
    /*0000f178*/ BL          0x000000000000F178          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f17c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f180*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f184*/ B           VGS_DRV_CheckOsd_xf11c
    VGS_DRV_CheckOsd_xf188:
    /*0000f188*/ STR         R3, [SP, #4] 
    /*0000f18c*/ MOVW        R2, #0                      @ .LC41 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x32f8] 
    /*0000f190*/ MOVW        R3, #4075                   @ 0xfeb 
    /*0000f194*/ MOVT        R2, #0                      @ .LC41 [R_ARM_MOVT_ABS: .rodata.str1.4+0x32f8] 
    /*0000f198*/ STR         R3, [SP] 
    /*0000f19c*/ B           VGS_DRV_CheckOsd_xf138
    VGS_DRV_CheckOsd_xf1a0:
    /*0000f1a0*/ STR         R3, [SP, #4] 
    /*0000f1a4*/ MOVW        R2, #0                      @ .LC42 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x332c] 
    /*0000f1a8*/ MOVW        R3, #4083                   @ 0xff3 
    /*0000f1ac*/ MOVT        R2, #0                      @ .LC42 [R_ARM_MOVT_ABS: .rodata.str1.4+0x332c] 
    /*0000f1b0*/ STR         R3, [SP] 
    /*0000f1b4*/ B           VGS_DRV_CheckOsd_xf138
    /*0000f1b8*/ STRDEQ      R0, [R0], -IP 
FUNC_END VGS_DRV_CheckOsd


FUNC_BEGIN VGS_DRV_CheckCover
    /*0000f1bc*/ PUSH        {R4, LR} 
    /*0000f1c0*/ MOV         R4, R0 
    /*0000f1c4*/ LDR         R0, [R0] 
    /*0000f1c8*/ SUB         SP, SP, #16 
    /*0000f1cc*/ CMP         R0, #1 
    /*0000f1d0*/ BLS         VGS_DRV_CheckCover_xf1ec
    /*0000f1d4*/ MOVW        R1, #0                      @ .LC46 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x33bc] 
    /*0000f1d8*/ MOVT        R1, #0                      @ .LC46 [R_ARM_MOVT_ABS: .rodata.str1.4+0x33bc] 
    /*0000f1dc*/ BL          0x000000000000B780 
    /*0000f1e0*/ CMP         R0, #0 
    /*0000f1e4*/ BNE         VGS_DRV_CheckCover_xf284
    /*0000f1e8*/ LDR         R0, [R4] 
    VGS_DRV_CheckCover_xf1ec:
    /*0000f1ec*/ CMP         R0, #0 
    /*0000f1f0*/ BEQ         VGS_DRV_CheckCover_xf210
    /*0000f1f4*/ LDR         R3, [R4, #48]               @ 0x30 
    /*0000f1f8*/ TST         R3, #-16777216              @ 0xff000000 
    /*0000f1fc*/ BNE         VGS_DRV_CheckCover_xf2a8
    /*0000f200*/ LDR         R3, [R4, #4] 
    /*0000f204*/ CMP         R3, #1 
    /*0000f208*/ BHI         VGS_DRV_CheckCover_xf290
    /*0000f20c*/ BEQ         VGS_DRV_CheckCover_xf21c
    VGS_DRV_CheckCover_xf210:
    /*0000f210*/ MOV         R0, #0 
    VGS_DRV_CheckCover_xf214:
    /*0000f214*/ ADD         SP, SP, #16 
    /*0000f218*/ POP         {R4, PC} 
    VGS_DRV_CheckCover_xf21c:
    /*0000f21c*/ LDR         R0, [R4, #8] 
    /*0000f220*/ CMP         R0, #1 
    /*0000f224*/ BLS         VGS_DRV_CheckCover_xf240
    /*0000f228*/ MOVW        R1, #0                      @ .LC49 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x343c] 
    /*0000f22c*/ MOVT        R1, #0                      @ .LC49 [R_ARM_MOVT_ABS: .rodata.str1.4+0x343c] 
    /*0000f230*/ BL          0x000000000000B780 
    /*0000f234*/ CMP         R0, #0 
    /*0000f238*/ BNE         VGS_DRV_CheckCover_xf284
    /*0000f23c*/ LDR         R0, [R4, #8] 
    VGS_DRV_CheckCover_xf240:
    /*0000f240*/ CMP         R0, #0 
    /*0000f244*/ BNE         VGS_DRV_CheckCover_xf210
    /*0000f248*/ LDR         R3, [R4, #12] 
    /*0000f24c*/ SUB         R2, R3, #2 
    /*0000f250*/ CMP         R2, #6 
    /*0000f254*/ BHI         VGS_DRV_CheckCover_xf260
    /*0000f258*/ TST         R3, #1 
    /*0000f25c*/ BEQ         VGS_DRV_CheckCover_xf210
    VGS_DRV_CheckCover_xf260:
    /*0000f260*/ MOVW        R2, #0                      @ .LC50 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3444] 
    /*0000f264*/ MOVT        R2, #0                      @ .LC50 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3444] 
    /*0000f268*/ STR         R3, [SP, #4] 
    /*0000f26c*/ MOVW        R3, #4142                   @ 0x102e 
    /*0000f270*/ STR         R3, [SP] 
    VGS_DRV_CheckCover_xf274:
    /*0000f274*/ LDR         R3, [PC, #100]              @ 0x000000000000f2e0 
    /*0000f278*/ MOV         R1, #45                     @ 0x2d 
    /*0000f27c*/ MOV         R0, #3 
    /*0000f280*/ BL          0x000000000000F280          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DRV_CheckCover_xf284:
    /*0000f284*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f288*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f28c*/ B           VGS_DRV_CheckCover_xf214
    VGS_DRV_CheckCover_xf290:
    /*0000f290*/ STR         R3, [SP, #4] 
    /*0000f294*/ MOVW        R2, #0                      @ .LC48 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x340c] 
    /*0000f298*/ MOVW        R3, #4126                   @ 0x101e 
    /*0000f29c*/ MOVT        R2, #0                      @ .LC48 [R_ARM_MOVT_ABS: .rodata.str1.4+0x340c] 
    /*0000f2a0*/ STR         R3, [SP] 
    /*0000f2a4*/ B           VGS_DRV_CheckCover_xf274
    VGS_DRV_CheckCover_xf2a8:
    /*0000f2a8*/ STR         R3, [SP, #4] 
    /*0000f2ac*/ MVN         R2, #-16777216              @ 0xff000000 
    /*0000f2b0*/ MOVW        R3, #4120                   @ 0x1018 
    /*0000f2b4*/ STR         R2, [SP, #8] 
    /*0000f2b8*/ STR         R3, [SP] 
    /*0000f2bc*/ MOVW        R2, #0                      @ .LC47 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x33c8] 
    /*0000f2c0*/ LDR         R3, [PC, #24]               @ 0x000000000000f2e0 
    /*0000f2c4*/ MOVT        R2, #0                      @ .LC47 [R_ARM_MOVT_ABS: .rodata.str1.4+0x33c8] 
    /*0000f2c8*/ MOV         R1, #45                     @ 0x2d 
    /*0000f2cc*/ MOV         R0, #3 
    /*0000f2d0*/ BL          0x000000000000F2D0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f2d4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f2d8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f2dc*/ B           VGS_DRV_CheckCover_xf214
    /*0000f2e0*/ ANDEQ       R0, R0, R0, LSL R9 
FUNC_END VGS_DRV_CheckCover


FUNC_BEGIN VGS_DRV_CheckDrawLine
    /*0000f2e4*/ PUSH        {R4, R5, LR} 
    /*0000f2e8*/ SUB         SP, SP, #20 
    /*0000f2ec*/ LDR         IP, [R0] 
    /*0000f2f0*/ LDMIB       R0, {R4, LR} 
    /*0000f2f4*/ CMP         IP, LR 
    /*0000f2f8*/ BEQ         VGS_DRV_CheckDrawLine_xf394
    VGS_DRV_CheckDrawLine_xf2fc:
    /*0000f2fc*/ TST         IP, #1 
    /*0000f300*/ BNE         VGS_DRV_CheckDrawLine_xf3bc
    /*0000f304*/ TST         R4, #1 
    /*0000f308*/ BNE         VGS_DRV_CheckDrawLine_xf3bc
    /*0000f30c*/ MOVW        R1, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000f310*/ MOVT        R1, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000f314*/ LDR         R2, [R1, #1800]             @ 0x708 
    /*0000f318*/ SUB         R5, R2, #2 
    /*0000f31c*/ CMP         IP, R5 
    /*0000f320*/ BGT         VGS_DRV_CheckDrawLine_xf3bc
    /*0000f324*/ LDR         R1, [R1, #1804]             @ 0x70c 
    /*0000f328*/ SUB         R3, R1, #2 
    /*0000f32c*/ CMP         R3, R4 
    /*0000f330*/ BLT         VGS_DRV_CheckDrawLine_xf3bc
    /*0000f334*/ RSB         R2, R2, #0 
    /*0000f338*/ CMP         IP, R2 
    /*0000f33c*/ BLT         VGS_DRV_CheckDrawLine_xf3bc
    /*0000f340*/ RSB         R1, R1, #0 
    /*0000f344*/ CMP         R1, R4 
    /*0000f348*/ BGT         VGS_DRV_CheckDrawLine_xf3bc
    /*0000f34c*/ TST         LR, #1 
    /*0000f350*/ LDR         IP, [R0, #12] 
    /*0000f354*/ BNE         VGS_DRV_CheckDrawLine_xf3f4
    /*0000f358*/ CMP         R3, IP 
    /*0000f35c*/ AND         R4, IP, #1 
    /*0000f360*/ MOVGE       R3, #0 
    /*0000f364*/ MOVLT       R3, #1 
    /*0000f368*/ CMP         LR, R5 
    /*0000f36c*/ MOVLE       R0, R3 
    /*0000f370*/ ORRGT       R0, R3, #1 
    /*0000f374*/ CMP         LR, R2 
    /*0000f378*/ ORRLT       R0, R0, #1 
    /*0000f37c*/ CMP         R1, IP 
    /*0000f380*/ ORRGT       R0, R0, #1 
    /*0000f384*/ ORRS        R0, R0, R4 
    /*0000f388*/ BNE         VGS_DRV_CheckDrawLine_xf3f4
    /*0000f38c*/ ADD         SP, SP, #20 
    /*0000f390*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckDrawLine_xf394:
    /*0000f394*/ LDR         R3, [R0, #12] 
    /*0000f398*/ CMP         R4, R3 
    /*0000f39c*/ BNE         VGS_DRV_CheckDrawLine_xf2fc
    /*0000f3a0*/ MOVW        R3, #4158                   @ 0x103e 
    /*0000f3a4*/ MOVW        R2, #0                      @ .LC51 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3474] 
    /*0000f3a8*/ STR         R4, [SP, #8] 
    /*0000f3ac*/ MOVT        R2, #0                      @ .LC51 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3474] 
    /*0000f3b0*/ STR         IP, [SP, #4] 
    /*0000f3b4*/ STR         R3, [SP] 
    /*0000f3b8*/ B           VGS_DRV_CheckDrawLine_xf3d4
    VGS_DRV_CheckDrawLine_xf3bc:
    /*0000f3bc*/ MOVW        R2, #0                      @ .LC52 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x34b4] 
    /*0000f3c0*/ MOVT        R2, #0                      @ .LC52 [R_ARM_MOVT_ABS: .rodata.str1.4+0x34b4] 
    /*0000f3c4*/ MOVW        R3, #4167                   @ 0x1047 
    /*0000f3c8*/ STR         R4, [SP, #8] 
    /*0000f3cc*/ STR         IP, [SP, #4] 
    /*0000f3d0*/ STR         R3, [SP] 
    VGS_DRV_CheckDrawLine_xf3d4:
    /*0000f3d4*/ LDR         R3, [PC, #52]               @ 0x000000000000f410 
    /*0000f3d8*/ MOV         R1, #45                     @ 0x2d 
    /*0000f3dc*/ MOV         R0, #3 
    /*0000f3e0*/ BL          0x000000000000F3E0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f3e4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f3e8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f3ec*/ ADD         SP, SP, #20 
    /*0000f3f0*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckDrawLine_xf3f4:
    /*0000f3f4*/ MOVW        R3, #4175                   @ 0x104f 
    /*0000f3f8*/ MOVW        R2, #0                      @ .LC53 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x34f0] 
    /*0000f3fc*/ STR         IP, [SP, #8] 
    /*0000f400*/ MOVT        R2, #0                      @ .LC53 [R_ARM_MOVT_ABS: .rodata.str1.4+0x34f0] 
    /*0000f404*/ STR         LR, [SP, #4] 
    /*0000f408*/ STR         R3, [SP] 
    /*0000f40c*/ B           VGS_DRV_CheckDrawLine_xf3d4
    /*0000f410*/ ANDEQ       R0, R0, R4, LSR #18 
FUNC_END VGS_DRV_CheckDrawLine


FUNC_BEGIN VGS_DRV_CheckUsrOsd
    /*0000f414*/ PUSH        {R4, R5, LR} 
    /*0000f418*/ SUB         SP, SP, #20 
    /*0000f41c*/ LDM         R0, {R1, IP} 
    /*0000f420*/ TST         R1, #1 
    /*0000f424*/ BNE         VGS_DRV_CheckUsrOsd_xf52c
    /*0000f428*/ ORR         R2, IP, R1 
    /*0000f42c*/ AND         R3, IP, #1 
    /*0000f430*/ ORRS        R3, R3, R2, LSR #31 
    /*0000f434*/ BNE         VGS_DRV_CheckUsrOsd_xf52c
    /*0000f438*/ MOVW        R2, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000f43c*/ MOVT        R2, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000f440*/ LDR         R3, [R2, #1800]             @ 0x708 
    /*0000f444*/ SUB         LR, R3, #2 
    /*0000f448*/ CMP         R1, LR 
    /*0000f44c*/ BGT         VGS_DRV_CheckUsrOsd_xf52c
    /*0000f450*/ LDR         LR, [R2, #1804]             @ 0x70c 
    /*0000f454*/ SUB         R2, LR, #2 
    /*0000f458*/ CMP         IP, R2 
    /*0000f45c*/ BGT         VGS_DRV_CheckUsrOsd_xf52c
    /*0000f460*/ LDR         R2, [R0, #8] 
    /*0000f464*/ LDR         R1, [R0, #12] 
    /*0000f468*/ TST         R2, #1 
    /*0000f46c*/ BNE         VGS_DRV_CheckUsrOsd_xf564
    /*0000f470*/ CMP         R3, R2 
    /*0000f474*/ CMPCS       R2, #1 
    /*0000f478*/ AND         IP, R1, #1 
    /*0000f47c*/ MOVLS       R3, #1 
    /*0000f480*/ MOVHI       R3, #0 
    /*0000f484*/ CMP         R1, #1 
    /*0000f488*/ ORRLS       R3, R3, #1 
    /*0000f48c*/ CMP         LR, R1 
    /*0000f490*/ ORRCC       R3, R3, #1 
    /*0000f494*/ ORRS        R3, R3, IP 
    /*0000f498*/ BNE         VGS_DRV_CheckUsrOsd_xf564
    /*0000f49c*/ LDRD        R2, [R0, #24] 
    /*0000f4a0*/ MOV         R5, #0 
    /*0000f4a4*/ AND         R4, R2, #1 
    /*0000f4a8*/ ORRS        R1, R4, R5 
    /*0000f4ac*/ BNE         VGS_DRV_CheckUsrOsd_xf59c
    /*0000f4b0*/ LDR         R3, [R0, #32] 
    /*0000f4b4*/ TST         R3, #15 
    /*0000f4b8*/ BNE         VGS_DRV_CheckUsrOsd_xf5cc
    /*0000f4bc*/ LDR         R3, [R0, #40]               @ 0x28 
    /*0000f4c0*/ LDR         R2, [R0, #36]               @ 0x24 
    /*0000f4c4*/ CMP         R3, #255                    @ 0xff 
    /*0000f4c8*/ BHI         VGS_DRV_CheckUsrOsd_xf580
    /*0000f4cc*/ CMP         R2, #255                    @ 0xff 
    /*0000f4d0*/ BHI         VGS_DRV_CheckUsrOsd_xf580
    /*0000f4d4*/ LDR         R3, [R0, #20] 
    /*0000f4d8*/ SUB         R3, R3, #8 
    /*0000f4dc*/ CMP         R3, #1 
    /*0000f4e0*/ BLS         VGS_DRV_CheckUsrOsd_xf4f0
    VGS_DRV_CheckUsrOsd_xf4e4:
    /*0000f4e4*/ MOV         R0, #0 
    VGS_DRV_CheckUsrOsd_xf4e8:
    /*0000f4e8*/ ADD         SP, SP, #20 
    /*0000f4ec*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckUsrOsd_xf4f0:
    /*0000f4f0*/ LDR         R3, [R0, #16] 
    /*0000f4f4*/ CMP         R3, #65536                  @ 0x10000 
    /*0000f4f8*/ BCC         VGS_DRV_CheckUsrOsd_xf4e4
    /*0000f4fc*/ MOVW        R2, #0                      @ .LC59 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3688] 
    /*0000f500*/ MOVT        R2, #0                      @ .LC59 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3688] 
    /*0000f504*/ STR         R3, [SP, #4] 
    /*0000f508*/ MOVW        R3, #4222                   @ 0x107e 
    /*0000f50c*/ STR         R3, [SP] 
    VGS_DRV_CheckUsrOsd_xf510:
    /*0000f510*/ LDR         R3, [PC, #204]              @ 0x000000000000f5e4 
    /*0000f514*/ MOV         R1, #45                     @ 0x2d 
    /*0000f518*/ MOV         R0, #3 
    /*0000f51c*/ BL          0x000000000000F51C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f520*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f524*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f528*/ B           VGS_DRV_CheckUsrOsd_xf4e8
    VGS_DRV_CheckUsrOsd_xf52c:
    /*0000f52c*/ MOVW        R2, #0                      @ .LC54 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3528] 
    /*0000f530*/ MOVT        R2, #0                      @ .LC54 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3528] 
    /*0000f534*/ MOVW        R3, #4188                   @ 0x105c 
    /*0000f538*/ STR         IP, [SP, #8] 
    /*0000f53c*/ STR         R1, [SP, #4] 
    /*0000f540*/ STR         R3, [SP] 
    VGS_DRV_CheckUsrOsd_xf544:
    /*0000f544*/ LDR         R3, [PC, #152]              @ 0x000000000000f5e4 
    /*0000f548*/ MOV         R1, #45                     @ 0x2d 
    /*0000f54c*/ MOV         R0, #3 
    /*0000f550*/ BL          0x000000000000F550          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f554*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f558*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f55c*/ ADD         SP, SP, #20 
    /*0000f560*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckUsrOsd_xf564:
    /*0000f564*/ MOVW        R3, #4196                   @ 0x1064 
    /*0000f568*/ STR         R2, [SP, #4] 
    /*0000f56c*/ STR         R1, [SP, #8] 
    /*0000f570*/ MOVW        R2, #0                      @ .LC55 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3570] 
    /*0000f574*/ STR         R3, [SP] 
    /*0000f578*/ MOVT        R2, #0                      @ .LC55 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3570] 
    /*0000f57c*/ B           VGS_DRV_CheckUsrOsd_xf544
    VGS_DRV_CheckUsrOsd_xf580:
    /*0000f580*/ STR         R3, [SP, #8] 
    /*0000f584*/ MOVW        R3, #4214                   @ 0x1076 
    /*0000f588*/ STR         R2, [SP, #4] 
    /*0000f58c*/ MOVW        R2, #0                      @ .LC58 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3644] 
    /*0000f590*/ STR         R3, [SP] 
    /*0000f594*/ MOVT        R2, #0                      @ .LC58 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3644] 
    /*0000f598*/ B           VGS_DRV_CheckUsrOsd_xf544
    VGS_DRV_CheckUsrOsd_xf59c:
    /*0000f59c*/ STRD        R2, [SP, #8] 
    /*0000f5a0*/ MOV         R1, #45                     @ 0x2d 
    /*0000f5a4*/ MOVW        R3, #4202                   @ 0x106a 
    /*0000f5a8*/ MOVW        R2, #0                      @ .LC56 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x35a8] 
    /*0000f5ac*/ STR         R3, [SP] 
    /*0000f5b0*/ MOVT        R2, #0                      @ .LC56 [R_ARM_MOVT_ABS: .rodata.str1.4+0x35a8] 
    /*0000f5b4*/ LDR         R3, [PC, #40]               @ 0x000000000000f5e4 
    /*0000f5b8*/ MOV         R0, #3 
    /*0000f5bc*/ BL          0x000000000000F5BC          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f5c0*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f5c4*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f5c8*/ B           VGS_DRV_CheckUsrOsd_xf4e8
    VGS_DRV_CheckUsrOsd_xf5cc:
    /*0000f5cc*/ STR         R3, [SP, #4] 
    /*0000f5d0*/ MOVW        R2, #0                      @ .LC57 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x35f8] 
    /*0000f5d4*/ MOVW        R3, #4208                   @ 0x1070 
    /*0000f5d8*/ MOVT        R2, #0                      @ .LC57 [R_ARM_MOVT_ABS: .rodata.str1.4+0x35f8] 
    /*0000f5dc*/ STR         R3, [SP] 
    /*0000f5e0*/ B           VGS_DRV_CheckUsrOsd_xf510
    /*0000f5e4*/ ANDEQ       R0, R0, IP, LSR R9 
FUNC_END VGS_DRV_CheckUsrOsd


FUNC_BEGIN VGS_DRV_CheckUsrCover
    /*0000f5e8*/ PUSH        {R4, R5, R6, LR} 
    /*0000f5ec*/ SUB         SP, SP, #16 
    /*0000f5f0*/ LDR         R3, [R0] 
    /*0000f5f4*/ CMP         R3, #1 
    /*0000f5f8*/ BEQ         VGS_DRV_CheckUsrCover_xf6a0
    /*0000f5fc*/ CMP         R3, #0 
    /*0000f600*/ BNE         VGS_DRV_CheckUsrCover_xf778
    /*0000f604*/ LDMIB       R0, {R1, IP} 
    /*0000f608*/ TST         R1, #1 
    /*0000f60c*/ BNE         VGS_DRV_CheckUsrCover_xf708
    /*0000f610*/ TST         IP, #1 
    /*0000f614*/ BNE         VGS_DRV_CheckUsrCover_xf708
    /*0000f618*/ MOVW        R2, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000f61c*/ MOVT        R2, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000f620*/ LDR         LR, [R2, #1800]             @ 0x708 
    /*0000f624*/ SUB         R3, LR, #2 
    /*0000f628*/ CMP         R1, R3 
    /*0000f62c*/ BGT         VGS_DRV_CheckUsrCover_xf708
    /*0000f630*/ LDR         R2, [R2, #1804]             @ 0x70c 
    /*0000f634*/ SUB         R3, R2, #2 
    /*0000f638*/ CMP         IP, R3 
    /*0000f63c*/ BGT         VGS_DRV_CheckUsrCover_xf708
    /*0000f640*/ RSB         R3, LR, #0 
    /*0000f644*/ CMP         R1, R3 
    /*0000f648*/ BLT         VGS_DRV_CheckUsrCover_xf708
    /*0000f64c*/ RSB         R3, R2, #0 
    /*0000f650*/ CMP         IP, R3 
    /*0000f654*/ BLT         VGS_DRV_CheckUsrCover_xf708
    /*0000f658*/ LDR         R1, [R0, #12] 
    /*0000f65c*/ LDR         R0, [R0, #16] 
    /*0000f660*/ TST         R1, #1 
    /*0000f664*/ BNE         VGS_DRV_CheckUsrCover_xf740
    /*0000f668*/ CMP         R0, #1 
    /*0000f66c*/ CMPHI       R1, #1 
    /*0000f670*/ AND         IP, R0, #1 
    /*0000f674*/ MOVLS       R3, #1 
    /*0000f678*/ MOVHI       R3, #0 
    /*0000f67c*/ CMP         LR, R1 
    /*0000f680*/ ORRCC       R3, R3, #1 
    /*0000f684*/ CMP         R2, R0 
    /*0000f688*/ ORRCC       R3, R3, #1 
    /*0000f68c*/ ORRS        R3, R3, IP 
    /*0000f690*/ BNE         VGS_DRV_CheckUsrCover_xf740
    VGS_DRV_CheckUsrCover_xf694:
    /*0000f694*/ MOV         R0, #0 
    VGS_DRV_CheckUsrCover_xf698:
    /*0000f698*/ ADD         SP, SP, #16 
    /*0000f69c*/ POP         {R4, R5, R6, PC} 
    VGS_DRV_CheckUsrCover_xf6a0:
    /*0000f6a0*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000f6a4*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000f6a8*/ ADD         R6, R0, #32 
    /*0000f6ac*/ LDR         IP, [R3, #1800]             @ 0x708 
    /*0000f6b0*/ LDR         LR, [R3, #1804]             @ 0x70c 
    /*0000f6b4*/ SUB         R4, IP, #2 
    /*0000f6b8*/ RSB         IP, IP, #0 
    /*0000f6bc*/ SUB         R5, LR, #2 
    /*0000f6c0*/ RSB         LR, LR, #0 
    VGS_DRV_CheckUsrCover_xf6c4:
    /*0000f6c4*/ LDR         R2, [R0, #12] 
    /*0000f6c8*/ ADD         R0, R0, #8 
    /*0000f6cc*/ LDR         R1, [R0, #8] 
    /*0000f6d0*/ ORR         R3, R2, R1 
    /*0000f6d4*/ ANDS        R3, R3, #1 
    /*0000f6d8*/ BNE         VGS_DRV_CheckUsrCover_xf75c
    /*0000f6dc*/ CMP         R2, R4 
    /*0000f6e0*/ BGT         VGS_DRV_CheckUsrCover_xf75c
    /*0000f6e4*/ CMP         R1, R5 
    /*0000f6e8*/ BGT         VGS_DRV_CheckUsrCover_xf75c
    /*0000f6ec*/ CMP         R2, IP 
    /*0000f6f0*/ BLT         VGS_DRV_CheckUsrCover_xf75c
    /*0000f6f4*/ CMP         R1, LR 
    /*0000f6f8*/ BLT         VGS_DRV_CheckUsrCover_xf75c
    /*0000f6fc*/ CMP         R0, R6 
    /*0000f700*/ BNE         VGS_DRV_CheckUsrCover_xf6c4
    /*0000f704*/ B           VGS_DRV_CheckUsrCover_xf694
    VGS_DRV_CheckUsrCover_xf708:
    /*0000f708*/ MOVW        R2, #0                      @ .LC61 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3750] 
    /*0000f70c*/ MOVT        R2, #0                      @ .LC61 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3750] 
    /*0000f710*/ MOVW        R3, #4257                   @ 0x10a1 
    /*0000f714*/ STR         IP, [SP, #8] 
    /*0000f718*/ STR         R1, [SP, #4] 
    /*0000f71c*/ STR         R3, [SP] 
    VGS_DRV_CheckUsrCover_xf720:
    /*0000f720*/ LDR         R3, [PC, #128]              @ 0x000000000000f7a8 
    /*0000f724*/ MOV         R1, #45                     @ 0x2d 
    /*0000f728*/ MOV         R0, #3 
    /*0000f72c*/ BL          0x000000000000F72C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f730*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f734*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f738*/ ADD         SP, SP, #16 
    /*0000f73c*/ POP         {R4, R5, R6, PC} 
    VGS_DRV_CheckUsrCover_xf740:
    /*0000f740*/ MOVW        R3, #4265                   @ 0x10a9 
    /*0000f744*/ MOVW        R2, #0                      @ .LC62 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3798] 
    /*0000f748*/ STR         R0, [SP, #8] 
    /*0000f74c*/ MOVT        R2, #0                      @ .LC62 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3798] 
    /*0000f750*/ STR         R1, [SP, #4] 
    /*0000f754*/ STR         R3, [SP] 
    /*0000f758*/ B           VGS_DRV_CheckUsrCover_xf720
    VGS_DRV_CheckUsrCover_xf75c:
    /*0000f75c*/ MOVW        R3, #4246                   @ 0x1096 
    /*0000f760*/ STR         R2, [SP, #4] 
    /*0000f764*/ STR         R1, [SP, #8] 
    /*0000f768*/ MOVW        R2, #0                      @ .LC60 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3700] 
    /*0000f76c*/ STR         R3, [SP] 
    /*0000f770*/ MOVT        R2, #0                      @ .LC60 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3700] 
    /*0000f774*/ B           VGS_DRV_CheckUsrCover_xf720
    VGS_DRV_CheckUsrCover_xf778:
    /*0000f778*/ STR         R3, [SP, #4] 
    /*0000f77c*/ MOVW        R2, #0                      @ .LC63 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x37e8] 
    /*0000f780*/ MOVW        R3, #4271                   @ 0x10af 
    /*0000f784*/ MOVT        R2, #0                      @ .LC63 [R_ARM_MOVT_ABS: .rodata.str1.4+0x37e8] 
    /*0000f788*/ STR         R3, [SP] 
    /*0000f78c*/ MOV         R1, #45                     @ 0x2d 
    /*0000f790*/ LDR         R3, [PC, #16]               @ 0x000000000000f7a8 
    /*0000f794*/ MOV         R0, #3 
    /*0000f798*/ BL          0x000000000000F798          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000f79c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f7a0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f7a4*/ B           VGS_DRV_CheckUsrCover_xf698
    /*0000f7a8*/ ANDEQ       R0, R0, R0, ASR R9 
FUNC_END VGS_DRV_CheckUsrCover


FUNC_BEGIN VGS_DRV_CheckOnlineInfo_CROP
    /*0000f7ac*/ PUSH        {R4, R5, LR} 
    /*0000f7b0*/ MOV         R5, R0 
    /*0000f7b4*/ LDR         R0, [R1] 
    /*0000f7b8*/ SUB         SP, SP, #12 
    /*0000f7bc*/ MOV         R4, R1 
    /*0000f7c0*/ CMP         R0, #1 
    /*0000f7c4*/ BLS         VGS_DRV_CheckOnlineInfo_CROP_xf7e0
    /*0000f7c8*/ MOVW        R1, #0                      @ .LC64 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3818] 
    /*0000f7cc*/ MOVT        R1, #0                      @ .LC64 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3818] 
    /*0000f7d0*/ BL          0x000000000000B780 
    /*0000f7d4*/ CMP         R0, #0 
    /*0000f7d8*/ LDREQ       R0, [R4] 
    /*0000f7dc*/ BNE         VGS_DRV_CheckOnlineInfo_CROP_xf81c
    VGS_DRV_CheckOnlineInfo_CROP_xf7e0:
    /*0000f7e0*/ CMP         R0, #0 
    /*0000f7e4*/ BNE         VGS_DRV_CheckOnlineInfo_CROP_xf7f4
    VGS_DRV_CheckOnlineInfo_CROP_xf7e8:
    /*0000f7e8*/ MOV         R0, #0 
    VGS_DRV_CheckOnlineInfo_CROP_xf7ec:
    /*0000f7ec*/ ADD         SP, SP, #12 
    /*0000f7f0*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckOnlineInfo_CROP_xf7f4:
    /*0000f7f4*/ LDR         R2, [R5, #4] 
    /*0000f7f8*/ MOV         R3, #32 
    /*0000f7fc*/ LDR         R1, [R5] 
    /*0000f800*/ MOV         IP, #0 
    /*0000f804*/ ADD         R0, R4, #4 
    /*0000f808*/ STR         R3, [SP] 
    /*0000f80c*/ STR         IP, [SP, #4] 
    /*0000f810*/ BL          0x000000000000B3C8 
    /*0000f814*/ CMP         R0, #0 
    /*0000f818*/ BEQ         VGS_DRV_CheckOnlineInfo_CROP_xf7e8
    VGS_DRV_CheckOnlineInfo_CROP_xf81c:
    /*0000f81c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f820*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f824*/ B           VGS_DRV_CheckOnlineInfo_CROP_xf7ec
FUNC_END VGS_DRV_CheckOnlineInfo_CROP


FUNC_BEGIN VGS_DRV_CheckOnlineInfo_OSD
    /*0000f828*/ PUSH        {R4, R5, LR} 
    /*0000f82c*/ MOV         R5, R0 
    /*0000f830*/ LDR         R0, [R1, #76]               @ 0x4c 
    /*0000f834*/ SUB         SP, SP, #12 
    /*0000f838*/ MOV         R4, R1 
    /*0000f83c*/ CMP         R0, #1 
    /*0000f840*/ BLS         VGS_DRV_CheckOnlineInfo_OSD_xf85c
    /*0000f844*/ MOVW        R1, #0                      @ .LC65 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3820] 
    /*0000f848*/ MOVT        R1, #0                      @ .LC65 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3820] 
    /*0000f84c*/ BL          0x000000000000B780 
    /*0000f850*/ CMP         R0, #0 
    /*0000f854*/ LDREQ       R0, [R4, #76]               @ 0x4c 
    /*0000f858*/ BNE         VGS_DRV_CheckOnlineInfo_OSD_xf8bc
    VGS_DRV_CheckOnlineInfo_OSD_xf85c:
    /*0000f85c*/ CMP         R0, #0 
    /*0000f860*/ BEQ         VGS_DRV_CheckOnlineInfo_OSD_xf888
    /*0000f864*/ ADD         R0, R4, #80                 @ 0x50 
    /*0000f868*/ BL          0x000000000000F868          @ VGS_DRV_CheckOsd [R_ARM_CALL: .text+0xf050] 
    /*0000f86c*/ MOVW        R3, #32771                  @ 0x8003 
    /*0000f870*/ MOVT        R3, #41005                  @ 0xa02d 
    /*0000f874*/ CMP         R0, R3 
    /*0000f878*/ BEQ         VGS_DRV_CheckOnlineInfo_OSD_xf8bc
    /*0000f87c*/ LDR         R3, [R4, #80]               @ 0x50 
    /*0000f880*/ CMP         R3, #0 
    /*0000f884*/ BNE         VGS_DRV_CheckOnlineInfo_OSD_xf894
    VGS_DRV_CheckOnlineInfo_OSD_xf888:
    /*0000f888*/ MOV         R0, #0 
    VGS_DRV_CheckOnlineInfo_OSD_xf88c:
    /*0000f88c*/ ADD         SP, SP, #12 
    /*0000f890*/ POP         {R4, R5, PC} 
    VGS_DRV_CheckOnlineInfo_OSD_xf894:
    /*0000f894*/ LDR         R2, [R5, #4] 
    /*0000f898*/ MOV         R3, #2 
    /*0000f89c*/ LDR         R1, [R5] 
    /*0000f8a0*/ MOV         IP, #1 
    /*0000f8a4*/ ADD         R0, R4, #112                @ 0x70 
    /*0000f8a8*/ STR         R3, [SP] 
    /*0000f8ac*/ STR         IP, [SP, #4] 
    /*0000f8b0*/ BL          0x000000000000B3C8 
    /*0000f8b4*/ CMP         R0, #0 
    /*0000f8b8*/ BEQ         VGS_DRV_CheckOnlineInfo_OSD_xf888
    VGS_DRV_CheckOnlineInfo_OSD_xf8bc:
    /*0000f8bc*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000f8c0*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000f8c4*/ B           VGS_DRV_CheckOnlineInfo_OSD_xf88c
FUNC_END VGS_DRV_CheckOnlineInfo_OSD


FUNC_BEGIN VGS_DRV_CheckDynamicRangeChange
    /*0000f8c8*/ MOV         R0, #0 
    /*0000f8cc*/ BX          LR 
FUNC_END VGS_DRV_CheckDynamicRangeChange


FUNC_BEGIN VGS_DRV_CheckYuvDynamicRange
    /*0000f8d0*/ MOV         R0, #0 
    /*0000f8d4*/ BX          LR 
FUNC_END VGS_DRV_CheckYuvDynamicRange


FUNC_BEGIN VGS_DRV_IsOSDMode
    /*0000f8d8*/ MOV         R0, #0 
    /*0000f8dc*/ BX          LR 
FUNC_END VGS_DRV_IsOSDMode


FUNC_BEGIN VGS_DRV_SetPreScaleCfg
    /*0000f8e0*/ LDR         R1, [R0, #88]               @ 0x58 
    /*0000f8e4*/ MOV         R3, #30 
    /*0000f8e8*/ LDR         R2, [R0, #80]               @ 0x50 
    /*0000f8ec*/ MUL         R3, R3, R1 
    /*0000f8f0*/ LDR         R1, [R0, #92]               @ 0x5c 
    /*0000f8f4*/ CMP         R2, R3, LSR #1 
    /*0000f8f8*/ LSRHI       R2, R2, #1 
    /*0000f8fc*/ STRHI       R2, [R0, #80]               @ 0x50 
    /*0000f900*/ MOVHI       R3, #1 
    /*0000f904*/ STRHI       R3, [R0, #324]              @ 0x144 
    /*0000f908*/ MOV         R3, #30 
    /*0000f90c*/ LDR         R2, [R0, #84]               @ 0x54 
    /*0000f910*/ MUL         R3, R3, R1 
    /*0000f914*/ CMP         R2, R3, LSR #1 
    /*0000f918*/ LSRHI       R2, R2, #1 
    /*0000f91c*/ STRHI       R2, [R0, #84]               @ 0x54 
    /*0000f920*/ MOVHI       R3, #1 
    /*0000f924*/ STRHI       R3, [R0, #328]              @ 0x148 
    /*0000f928*/ MOV         R0, #0 
    /*0000f92c*/ BX          LR 
FUNC_END VGS_DRV_SetPreScaleCfg


FUNC_BEGIN VGS_DRV_CalcSplitNodeNum
    /*0000f930*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*0000f934*/ MOVW        R6, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000f938*/ MOVT        R6, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000f93c*/ SUB         SP, SP, #160                @ 0xa0 
    /*0000f940*/ ADD         R4, R6, #864                @ 0x360 
    /*0000f944*/ MOV         R5, #156                    @ 0x9c 
    /*0000f948*/ MOV         R7, R0 
    /*0000f94c*/ MOV         R8, R1 
    /*0000f950*/ MOV         R2, R5 
    /*0000f954*/ MOV         R1, #0 
    /*0000f958*/ ADD         R0, SP, #4 
    /*0000f95c*/ BL          0x000000000000F95C          @ memset [R_ARM_CALL: +0x0] 
    /*0000f960*/ MOV         R2, #936                    @ 0x3a8 
    /*0000f964*/ MOV         R1, #0 
    /*0000f968*/ MOV         R0, R4 
    /*0000f96c*/ BL          0x000000000000F96C          @ osal_memset [R_ARM_CALL: +0x0] 
    /*0000f970*/ MOV         R2, R8 
    /*0000f974*/ MOV         R1, R7 
    /*0000f978*/ ADD         R0, SP, #4 
    /*0000f97c*/ BL          0x000000000000F97C          @ VGS_DRV_GetCropCfg [R_ARM_CALL: .text+0xe5c4] 
    /*0000f980*/ ADD         R0, SP, #4 
    /*0000f984*/ MOV         R1, R4 
    /*0000f988*/ MOV         R2, #32 
    /*0000f98c*/ BL          0x000000000000F98C          @ VGS_Drv_SplitandCrop [R_ARM_CALL: .text+0x1019c] 
    /*0000f990*/ LDR         R0, [R6, #1012]             @ 0x3f4 
    /*0000f994*/ CMP         R0, #0 
    /*0000f998*/ BEQ         VGS_DRV_CalcSplitNodeNum_xf9b8
    /*0000f99c*/ MLA         R2, R5, R0, R4 
    /*0000f9a0*/ MOV         R1, R4 
    /*0000f9a4*/ MOV         R3, #1 
    VGS_DRV_CalcSplitNodeNum_xf9a8:
    /*0000f9a8*/ STR         R3, [R1, #152]              @ 0x98 
    /*0000f9ac*/ ADD         R1, R1, #156                @ 0x9c 
    /*0000f9b0*/ CMP         R1, R2 
    /*0000f9b4*/ BNE         VGS_DRV_CalcSplitNodeNum_xf9a8
    VGS_DRV_CalcSplitNodeNum_xf9b8:
    /*0000f9b8*/ ADD         SP, SP, #160                @ 0xa0 
    /*0000f9bc*/ POP         {R4, R5, R6, R7, R8, PC} 
FUNC_END VGS_DRV_CalcSplitNodeNum


FUNC_BEGIN VGS_DRV_SetSplitNodeNum
    /*0000f9c0*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000f9c4*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000f9c8*/ MOV         R2, #0 
    /*0000f9cc*/ STR         R0, [R3, #1012]             @ 0x3f4 
    /*0000f9d0*/ STR         R2, [R3, #1016]             @ 0x3f8 
    /*0000f9d4*/ BX          LR 
FUNC_END VGS_DRV_SetSplitNodeNum


FUNC_BEGIN VGS_DRV_MallocHdrBuf
    /*0000f9d8*/ MOV         R0, #0 
    /*0000f9dc*/ BX          LR 
FUNC_END VGS_DRV_MallocHdrBuf


FUNC_BEGIN VGS_DRV_FreeHdrBuf
    /*0000f9e0*/ BX          LR 
FUNC_END VGS_DRV_FreeHdrBuf


FUNC_BEGIN VGS_DRV_SetHdrBufAddr
    /*0000f9e4*/ BX          LR 
FUNC_END VGS_DRV_SetHdrBufAddr


FUNC_BEGIN VGS_DRV_InitNonProcFlagArray
    /*0000f9e8*/ BX          LR 
FUNC_END VGS_DRV_InitNonProcFlagArray


FUNC_BEGIN VGS_DRV_GetNonProcFlag
    /*0000f9ec*/ MOV         R0, #0 
    /*0000f9f0*/ BX          LR 
FUNC_END VGS_DRV_GetNonProcFlag


FUNC_BEGIN VGS_DRV_SetNonProcFlag
    /*0000f9f4*/ BX          LR 
FUNC_END VGS_DRV_SetNonProcFlag


FUNC_BEGIN VGS_DRV_SetProcOkState
    /*0000f9f8*/ BX          LR 
FUNC_END VGS_DRV_SetProcOkState


FUNC_BEGIN VGS_DRV_ProcPerformanceLimit
    /*0000f9fc*/ MOVW        R3, #0                      @ reg_otp_base_va [R_ARM_MOVW_ABS_NC: +0x0] 
    /*0000fa00*/ MOVT        R3, #0                      @ reg_otp_base_va [R_ARM_MOVT_ABS: +0x0] 
    /*0000fa04*/ PUSH        {R4, LR} 
    /*0000fa08*/ LDR         R3, [R3] 
    /*0000fa0c*/ LDRB        R3, [R3, #40]               @ 0x28 
    /*0000fa10*/ SUB         R2, R3, #1 
    /*0000fa14*/ CMP         R2, #1 
    /*0000fa18*/ BLS         VGS_DRV_ProcPerformanceLimit_xfa3c
    /*0000fa1c*/ SUB         R2, R3, #5 
    /*0000fa20*/ CMP         R2, #1 
    /*0000fa24*/ BLS         VGS_DRV_ProcPerformanceLimit_xfa6c
    /*0000fa28*/ CMP         R3, #12 
    /*0000fa2c*/ BEQ         VGS_DRV_ProcPerformanceLimit_xfa8c
    /*0000fa30*/ CMP         R3, #0 
    /*0000fa34*/ CMPNE       R3, #9 
    /*0000fa38*/ BEQ         VGS_DRV_ProcPerformanceLimit_xfaa4
    VGS_DRV_ProcPerformanceLimit_xfa3c:
    /*0000fa3c*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000fa40*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000fa44*/ MOV         R2, #2304                   @ 0x900 
    /*0000fa48*/ STR         R2, [R3, #1800]             @ 0x708 
    /*0000fa4c*/ STR         R2, [R3, #1804]             @ 0x70c 
    VGS_DRV_ProcPerformanceLimit_xfa50:
    /*0000fa50*/ BL          0x000000000000FA50          @ VGS_HAL_GetClkSel [R_ARM_CALL: .text+0x10008] 
    /*0000fa54*/ CMP         R0, #2 
    /*0000fa58*/ BHI         VGS_DRV_ProcPerformanceLimit_xfa64
    /*0000fa5c*/ MOV         R0, #3 
    /*0000fa60*/ BL          0x000000000000FA60          @ VGS_HAL_SetClkSel [R_ARM_CALL: .text+0x10050] 
    VGS_DRV_ProcPerformanceLimit_xfa64:
    /*0000fa64*/ MOV         R0, #0 
    /*0000fa68*/ POP         {R4, PC} 
    VGS_DRV_ProcPerformanceLimit_xfa6c:
    /*0000fa6c*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000fa70*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000fa74*/ MOV         R2, #2688                   @ 0xa80 
    /*0000fa78*/ STR         R2, [R3, #1800]             @ 0x708 
    /*0000fa7c*/ STR         R2, [R3, #1804]             @ 0x70c 
    VGS_DRV_ProcPerformanceLimit_xfa80:
    /*0000fa80*/ BL          0x000000000000FA80          @ VGS_HAL_GetClkSel [R_ARM_CALL: .text+0x10008] 
    /*0000fa84*/ MOV         R0, #0 
    /*0000fa88*/ POP         {R4, PC} 
    VGS_DRV_ProcPerformanceLimit_xfa8c:
    /*0000fa8c*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000fa90*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000fa94*/ MOV         R2, #4608                   @ 0x1200 
    /*0000fa98*/ STR         R2, [R3, #1800]             @ 0x708 
    /*0000fa9c*/ STR         R2, [R3, #1804]             @ 0x70c 
    /*0000faa0*/ B           VGS_DRV_ProcPerformanceLimit_xfa50
    VGS_DRV_ProcPerformanceLimit_xfaa4:
    /*0000faa4*/ MOVW        R3, #0                      @ .LANCHOR2 [R_ARM_MOVW_ABS_NC: .bss+0x594] 
    /*0000faa8*/ MOVT        R3, #0                      @ .LANCHOR2 [R_ARM_MOVT_ABS: .bss+0x594] 
    /*0000faac*/ MOV         R2, #4608                   @ 0x1200 
    /*0000fab0*/ STR         R2, [R3, #1800]             @ 0x708 
    /*0000fab4*/ STR         R2, [R3, #1804]             @ 0x70c 
    /*0000fab8*/ B           VGS_DRV_ProcPerformanceLimit_xfa80
FUNC_END VGS_DRV_ProcPerformanceLimit


FUNC_BEGIN VGS_DRV_CheckDstRect
    /*0000fabc*/ LDR         R3, [R0, #8] 
    /*0000fac0*/ LDR         R2, [R0, #12] 
    /*0000fac4*/ CMP         R3, #1 
    /*0000fac8*/ LDR         R1, [R0] 
    /*0000facc*/ BLS         VGS_DRV_CheckDstRect_xfb50
    /*0000fad0*/ CMP         R2, #1 
    /*0000fad4*/ BLS         VGS_DRV_CheckDstRect_xfb50
    /*0000fad8*/ EOR         IP, R1, R1, ASR #31 
    /*0000fadc*/ SUB         IP, IP, R1, ASR #31 
    /*0000fae0*/ TST         IP, #1 
    /*0000fae4*/ LDR         IP, [R0, #4] 
    /*0000fae8*/ BNE         VGS_DRV_CheckDstRect_xfb08
    /*0000faec*/ EOR         R0, IP, IP, ASR #31 
    /*0000faf0*/ SUB         R0, R0, IP, ASR #31 
    /*0000faf4*/ TST         R0, #1 
    /*0000faf8*/ BNE         VGS_DRV_CheckDstRect_xfb08
    /*0000fafc*/ ORR         R0, R3, R2 
    /*0000fb00*/ ANDS        R0, R0, #1 
    /*0000fb04*/ BXEQ        LR 
    VGS_DRV_CheckDstRect_xfb08:
    /*0000fb08*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0000fb0c*/ SUB         SP, SP, #28 
    /*0000fb10*/ MOVW        R0, #4795                   @ 0x12bb 
    /*0000fb14*/ STR         R2, [SP, #16] 
    /*0000fb18*/ MOVW        R2, #0                      @ .LC66 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3828] 
    /*0000fb1c*/ STR         R3, [SP, #12] 
    /*0000fb20*/ MOVT        R2, #0                      @ .LC66 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3828] 
    /*0000fb24*/ STR         R1, [SP, #4] 
    /*0000fb28*/ MOV         R1, #45                     @ 0x2d 
    /*0000fb2c*/ STR         R0, [SP] 
    /*0000fb30*/ MOV         R0, #3 
    /*0000fb34*/ STR         IP, [SP, #8] 
    /*0000fb38*/ LDR         R3, [PC, #24]               @ 0x000000000000fb58 
    /*0000fb3c*/ BL          0x000000000000FB3C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000fb40*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000fb44*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000fb48*/ ADD         SP, SP, #28 
    /*0000fb4c*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
    VGS_DRV_CheckDstRect_xfb50:
    /*0000fb50*/ LDR         IP, [R0, #4] 
    /*0000fb54*/ B           VGS_DRV_CheckDstRect_xfb08
    /*0000fb58*/ ANDEQ       R0, R0, R8, ROR #18 
FUNC_END VGS_DRV_CheckDstRect


FUNC_BEGIN VGS_DRV_CheckOnlineInfo_COVER
    /*0000fb5c*/ PUSH        {R4, R5, R6, R7, LR} 
    /*0000fb60*/ MOV         R4, R1 
    /*0000fb64*/ LDR         R3, [R1, #20] 
    /*0000fb68*/ SUB         SP, SP, #12 
    /*0000fb6c*/ LDR         R6, [R0] 
    /*0000fb70*/ CMP         R3, #1 
    /*0000fb74*/ LDR         R7, [R0, #4] 
    /*0000fb78*/ BLS         VGS_DRV_CheckOnlineInfo_COVER_xfb98
    /*0000fb7c*/ MOV         R0, R3 
    /*0000fb80*/ MOVW        R1, #0                      @ .LC67 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3870] 
    /*0000fb84*/ MOVT        R1, #0                      @ .LC67 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3870] 
    /*0000fb88*/ BL          0x000000000000B780 
    /*0000fb8c*/ CMP         R0, #0 
    /*0000fb90*/ LDREQ       R3, [R4, #20] 
    /*0000fb94*/ BNE         VGS_DRV_CheckOnlineInfo_COVER_xfc28
    VGS_DRV_CheckOnlineInfo_COVER_xfb98:
    /*0000fb98*/ CMP         R3, #0 
    /*0000fb9c*/ BEQ         VGS_DRV_CheckOnlineInfo_COVER_xfbc0
    /*0000fba0*/ ADD         R5, R4, #24 
    /*0000fba4*/ MOV         R0, R5 
    /*0000fba8*/ BL          0x000000000000FBA8          @ VGS_DRV_CheckCover [R_ARM_CALL: .text+0xf1bc] 
    /*0000fbac*/ CMP         R0, #0 
    /*0000fbb0*/ BNE         VGS_DRV_CheckOnlineInfo_COVER_xfc28
    /*0000fbb4*/ LDR         R3, [R4, #24] 
    /*0000fbb8*/ CMP         R3, #0 
    /*0000fbbc*/ BNE         VGS_DRV_CheckOnlineInfo_COVER_xfbd0
    VGS_DRV_CheckOnlineInfo_COVER_xfbc0:
    /*0000fbc0*/ MOV         R4, #0 
    VGS_DRV_CheckOnlineInfo_COVER_xfbc4:
    /*0000fbc4*/ MOV         R0, R4 
    /*0000fbc8*/ ADD         SP, SP, #12 
    /*0000fbcc*/ POP         {R4, R5, R6, R7, PC} 
    VGS_DRV_CheckOnlineInfo_COVER_xfbd0:
    /*0000fbd0*/ LDR         R3, [R4, #28] 
    /*0000fbd4*/ CMP         R3, #0 
    /*0000fbd8*/ BNE         VGS_DRV_CheckOnlineInfo_COVER_xfbec
    /*0000fbdc*/ ADD         R0, R4, #32 
    /*0000fbe0*/ ADD         SP, SP, #12 
    /*0000fbe4*/ POP         {R4, R5, R6, R7, LR} 
    VGS_DRV_CheckOnlineInfo_COVER_xfbe8:
    /*0000fbe8*/ B           VGS_DRV_CheckOnlineInfo_COVER_xfbe8@ VGS_DRV_CheckDstRect [R_ARM_JUMP24: .text+0xfabc] 
    VGS_DRV_CheckOnlineInfo_COVER_xfbec:
    /*0000fbec*/ MOV         R2, R7 
    /*0000fbf0*/ MOV         R1, R6 
    /*0000fbf4*/ MOV         R0, R5 
    /*0000fbf8*/ BL          0x000000000000FBF8          @ VGS_DRV_CheckQuadRangleCover [R_ARM_CALL: .text+0xe874] 
    /*0000fbfc*/ SUBS        R4, R0, #0 
    /*0000fc00*/ BEQ         VGS_DRV_CheckOnlineInfo_COVER_xfbc4
    /*0000fc04*/ MOVW        R3, #4342                   @ 0x10f6 
    /*0000fc08*/ MOVW        R2, #0                      @ .LC68 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3878] 
    /*0000fc0c*/ STR         R3, [SP] 
    /*0000fc10*/ MOVT        R2, #0                      @ .LC68 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3878] 
    /*0000fc14*/ LDR         R3, [PC, #24]               @ 0x000000000000fc34 
    /*0000fc18*/ MOV         R1, #45                     @ 0x2d 
    /*0000fc1c*/ MOV         R0, #3 
    /*0000fc20*/ BL          0x000000000000FC20          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000fc24*/ B           VGS_DRV_CheckOnlineInfo_COVER_xfbc4
    VGS_DRV_CheckOnlineInfo_COVER_xfc28:
    /*0000fc28*/ MOVW        R4, #32771                  @ 0x8003 
    /*0000fc2c*/ MOVT        R4, #41005                  @ 0xa02d 
    /*0000fc30*/ B           VGS_DRV_CheckOnlineInfo_COVER_xfbc4
    /*0000fc34*/ ANDEQ       R0, R0, R0, LSL #19 
FUNC_END VGS_DRV_CheckOnlineInfo_COVER


FUNC_BEGIN VGS_DRV_CheckOnlineInfo
    /*0000fc38*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, LR} 
    /*0000fc3c*/ SUB         SP, SP, #24 
    /*0000fc40*/ LDR         R3, [R2] 
    /*0000fc44*/ MOV         R4, R2 
    /*0000fc48*/ LDR         R7, [R0] 
    /*0000fc4c*/ MOV         R5, R0 
    /*0000fc50*/ CMP         R3, #1 
    /*0000fc54*/ LDR         R3, [R2, #184]              @ 0xb8 
    /*0000fc58*/ LDR         R8, [R0, #4] 
    /*0000fc5c*/ MOVW        R6, #32771                  @ 0x8003 
    /*0000fc60*/ LDREQ       R7, [R2, #12] 
    /*0000fc64*/ MOVT        R6, #41005                  @ 0xa02d 
    /*0000fc68*/ LDREQ       R8, [R2, #16] 
    /*0000fc6c*/ CMP         R3, #1 
    /*0000fc70*/ LDM         R1, {R9, SL} 
    /*0000fc74*/ MOV         R1, R2 
    /*0000fc78*/ LDREQ       R9, [R2, #196]              @ 0xc4 
    /*0000fc7c*/ LDREQ       SL, [R2, #200]              @ 0xc8 
    /*0000fc80*/ BL          0x000000000000FC80          @ VGS_DRV_CheckOnlineInfo_CROP [R_ARM_CALL: .text+0xf7ac] 
    /*0000fc84*/ CMP         R0, R6 
    /*0000fc88*/ BEQ         VGS_DRV_CheckOnlineInfo_xfe1c
    /*0000fc8c*/ MOV         R1, R4 
    /*0000fc90*/ MOV         R0, R5 
    /*0000fc94*/ BL          0x000000000000FC94          @ VGS_DRV_CheckOnlineInfo_COVER [R_ARM_CALL: .text+0xfb5c] 
    /*0000fc98*/ CMP         R0, R6 
    /*0000fc9c*/ BEQ         VGS_DRV_CheckOnlineInfo_xfe1c
    /*0000fca0*/ MOV         R0, R5 
    /*0000fca4*/ MOV         R1, R4 
    /*0000fca8*/ BL          0x000000000000FCA8          @ VGS_DRV_CheckOnlineInfo_OSD [R_ARM_CALL: .text+0xf828] 
    /*0000fcac*/ CMP         R0, R6 
    /*0000fcb0*/ BEQ         VGS_DRV_CheckOnlineInfo_xfe1c
    /*0000fcb4*/ LDR         R0, [R4, #164]              @ 0xa4 
    /*0000fcb8*/ CMP         R0, #1 
    /*0000fcbc*/ BLS         VGS_DRV_CheckOnlineInfo_xfcd4
    /*0000fcc0*/ MOVW        R1, #0                      @ .LC69 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x38b8] 
    /*0000fcc4*/ MOVT        R1, #0                      @ .LC69 [R_ARM_MOVT_ABS: .rodata.str1.4+0x38b8] 
    /*0000fcc8*/ BL          0x000000000000B780 
    /*0000fccc*/ CMP         R0, #0 
    /*0000fcd0*/ BNE         VGS_DRV_CheckOnlineInfo_xfe1c
    VGS_DRV_CheckOnlineInfo_xfcd4:
    /*0000fcd4*/ LDR         R0, [R4, #160]              @ 0xa0 
    /*0000fcd8*/ CMP         R0, #1 
    /*0000fcdc*/ BLS         VGS_DRV_CheckOnlineInfo_xfcf4
    /*0000fce0*/ MOVW        R1, #0                      @ .LC70 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x38c0] 
    /*0000fce4*/ MOVT        R1, #0                      @ .LC70 [R_ARM_MOVT_ABS: .rodata.str1.4+0x38c0] 
    /*0000fce8*/ BL          0x000000000000B780 
    /*0000fcec*/ CMP         R0, #0 
    /*0000fcf0*/ BNE         VGS_DRV_CheckOnlineInfo_xfe1c
    VGS_DRV_CheckOnlineInfo_xfcf4:
    /*0000fcf4*/ LDR         R0, [R4, #176]              @ 0xb0 
    /*0000fcf8*/ CMP         R0, #1 
    /*0000fcfc*/ BLS         VGS_DRV_CheckOnlineInfo_xfd14
    /*0000fd00*/ MOVW        R1, #0                      @ .LC71 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x38c8] 
    /*0000fd04*/ MOVT        R1, #0                      @ .LC71 [R_ARM_MOVT_ABS: .rodata.str1.4+0x38c8] 
    /*0000fd08*/ BL          0x000000000000B780 
    /*0000fd0c*/ CMP         R0, #0 
    /*0000fd10*/ BNE         VGS_DRV_CheckOnlineInfo_xfe1c
    VGS_DRV_CheckOnlineInfo_xfd14:
    /*0000fd14*/ LDR         R0, [R4, #168]              @ 0xa8 
    /*0000fd18*/ CMP         R0, #1 
    /*0000fd1c*/ BLS         VGS_DRV_CheckOnlineInfo_xfd34
    /*0000fd20*/ MOVW        R1, #0                      @ .LC72 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x38d4] 
    /*0000fd24*/ MOVT        R1, #0                      @ .LC72 [R_ARM_MOVT_ABS: .rodata.str1.4+0x38d4] 
    /*0000fd28*/ BL          0x000000000000B780 
    /*0000fd2c*/ CMP         R0, #0 
    /*0000fd30*/ BNE         VGS_DRV_CheckOnlineInfo_xfe1c
    VGS_DRV_CheckOnlineInfo_xfd34:
    /*0000fd34*/ LDR         R0, [R4, #172]              @ 0xac 
    /*0000fd38*/ CMP         R0, #1 
    /*0000fd3c*/ BLS         VGS_DRV_CheckOnlineInfo_xfd54
    /*0000fd40*/ MOVW        R1, #0                      @ .LC73 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x38e0] 
    /*0000fd44*/ MOVT        R1, #0                      @ .LC73 [R_ARM_MOVT_ABS: .rodata.str1.4+0x38e0] 
    /*0000fd48*/ BL          0x000000000000B780 
    /*0000fd4c*/ CMP         R0, #0 
    /*0000fd50*/ BNE         VGS_DRV_CheckOnlineInfo_xfe1c
    VGS_DRV_CheckOnlineInfo_xfd54:
    /*0000fd54*/ LDR         R3, [R4, #180]              @ 0xb4 
    /*0000fd58*/ CMP         R3, #5 
    /*0000fd5c*/ BHI         VGS_DRV_CheckOnlineInfo_xfeb0
    /*0000fd60*/ CMP         R7, #4096                   @ 0x1000 
    /*0000fd64*/ MOVLS       R3, #30 
    /*0000fd68*/ BHI         VGS_DRV_CheckOnlineInfo_xfdc8
    VGS_DRV_CheckOnlineInfo_xfd6c:
    /*0000fd6c*/ MUL         R2, R3, R9 
    /*0000fd70*/ CMP         R7, R2 
    /*0000fd74*/ BHI         VGS_DRV_CheckOnlineInfo_xfe2c
    /*0000fd78*/ MUL         R2, R3, SL 
    /*0000fd7c*/ CMP         R8, R2 
    /*0000fd80*/ BHI         VGS_DRV_CheckOnlineInfo_xfe2c
    /*0000fd84*/ MOV         R3, #30 
    /*0000fd88*/ MUL         R3, R3, R9 
    /*0000fd8c*/ CMP         R7, R3, LSR #1 
    /*0000fd90*/ BLS         VGS_DRV_CheckOnlineInfo_xfd9c
    /*0000fd94*/ TST         R7, #3 
    /*0000fd98*/ BNE         VGS_DRV_CheckOnlineInfo_xfdf4
    VGS_DRV_CheckOnlineInfo_xfd9c:
    /*0000fd9c*/ MOV         R3, #30 
    /*0000fda0*/ MUL         R3, R3, SL 
    /*0000fda4*/ CMP         R8, R3, LSR #1 
    /*0000fda8*/ BHI         VGS_DRV_CheckOnlineInfo_xfdec
    VGS_DRV_CheckOnlineInfo_xfdac:
    /*0000fdac*/ CMP         R9, R7, LSL #4 
    /*0000fdb0*/ BHI         VGS_DRV_CheckOnlineInfo_xfe6c
    /*0000fdb4*/ CMP         SL, R8, LSL #4 
    /*0000fdb8*/ MOVLS       R0, #0 
    /*0000fdbc*/ BHI         VGS_DRV_CheckOnlineInfo_xfe6c
    VGS_DRV_CheckOnlineInfo_xfdc0:
    /*0000fdc0*/ ADD         SP, SP, #24 
    /*0000fdc4*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DRV_CheckOnlineInfo_xfdc8:
    /*0000fdc8*/ LDR         R3, [R4, #20] 
    /*0000fdcc*/ CMP         R3, #0 
    /*0000fdd0*/ MOVNE       R3, #15 
    /*0000fdd4*/ BNE         VGS_DRV_CheckOnlineInfo_xfd6c
    /*0000fdd8*/ LDR         R3, [R4, #76]               @ 0x4c 
    /*0000fddc*/ CMP         R3, #0 
    /*0000fde0*/ MOVEQ       R3, #30 
    /*0000fde4*/ MOVNE       R3, #15 
    /*0000fde8*/ B           VGS_DRV_CheckOnlineInfo_xfd6c
    VGS_DRV_CheckOnlineInfo_xfdec:
    /*0000fdec*/ TST         R8, #3 
    /*0000fdf0*/ BEQ         VGS_DRV_CheckOnlineInfo_xfdac
    VGS_DRV_CheckOnlineInfo_xfdf4:
    /*0000fdf4*/ MOV         R2, #15 
    /*0000fdf8*/ STR         R2, [SP, #4] 
    /*0000fdfc*/ MOVW        R2, #0                      @ .LC76 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3988] 
    /*0000fe00*/ MOVT        R2, #0                      @ .LC76 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3988] 
    /*0000fe04*/ MOVW        R3, #4503                   @ 0x1197 
    /*0000fe08*/ STR         R3, [SP] 
    VGS_DRV_CheckOnlineInfo_xfe0c:
    /*0000fe0c*/ LDR         R3, [PC, #180]              @ 0x000000000000fec8 
    /*0000fe10*/ MOV         R1, #45                     @ 0x2d 
    /*0000fe14*/ MOV         R0, #3 
    /*0000fe18*/ BL          0x000000000000FE18          @ HI_LOG [R_ARM_CALL: +0x0] 
    VGS_DRV_CheckOnlineInfo_xfe1c:
    /*0000fe1c*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000fe20*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000fe24*/ ADD         SP, SP, #24 
    /*0000fe28*/ POP         {R4, R5, R6, R7, R8, R9, SL, PC} 
    VGS_DRV_CheckOnlineInfo_xfe2c:
    /*0000fe2c*/ MOVW        IP, #4495                   @ 0x118f 
    /*0000fe30*/ STR         R3, [SP, #4] 
    /*0000fe34*/ STR         SL, [SP, #20] 
    /*0000fe38*/ MOVW        R2, #0                      @ .LC75 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3928] 
    /*0000fe3c*/ STR         R9, [SP, #16] 
    /*0000fe40*/ MOVT        R2, #0                      @ .LC75 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3928] 
    /*0000fe44*/ STR         R8, [SP, #12] 
    /*0000fe48*/ MOV         R1, #45                     @ 0x2d 
    /*0000fe4c*/ STR         R7, [SP, #8] 
    /*0000fe50*/ MOV         R0, #3 
    /*0000fe54*/ STR         IP, [SP] 
    /*0000fe58*/ LDR         R3, [PC, #104]              @ 0x000000000000fec8 
    /*0000fe5c*/ BL          0x000000000000FE5C          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000fe60*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000fe64*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000fe68*/ B           VGS_DRV_CheckOnlineInfo_xfdc0
    VGS_DRV_CheckOnlineInfo_xfe6c:
    /*0000fe6c*/ MOV         R1, #16 
    /*0000fe70*/ MOVW        R3, #4512                   @ 0x11a0 
    /*0000fe74*/ STR         R1, [SP, #4] 
    /*0000fe78*/ MOVW        R2, #0                      @ .LC77 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x39f4] 
    /*0000fe7c*/ STR         R3, [SP] 
    /*0000fe80*/ MOVT        R2, #0                      @ .LC77 [R_ARM_MOVT_ABS: .rodata.str1.4+0x39f4] 
    /*0000fe84*/ STR         SL, [SP, #20] 
    /*0000fe88*/ MOV         R1, #45                     @ 0x2d 
    /*0000fe8c*/ STR         R9, [SP, #16] 
    /*0000fe90*/ MOV         R0, #3 
    /*0000fe94*/ STR         R8, [SP, #12] 
    /*0000fe98*/ STR         R7, [SP, #8] 
    /*0000fe9c*/ LDR         R3, [PC, #36]               @ 0x000000000000fec8 
    /*0000fea0*/ BL          0x000000000000FEA0          @ HI_LOG [R_ARM_CALL: +0x0] 
    /*0000fea4*/ MOVW        R0, #32771                  @ 0x8003 
    /*0000fea8*/ MOVT        R0, #41005                  @ 0xa02d 
    /*0000feac*/ B           VGS_DRV_CheckOnlineInfo_xfdc0
    VGS_DRV_CheckOnlineInfo_xfeb0:
    /*0000feb0*/ STR         R3, [SP, #4] 
    /*0000feb4*/ MOVW        R2, #0                      @ .LC74 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x38ec] 
    /*0000feb8*/ MOV         R3, #4480                   @ 0x1180 
    /*0000febc*/ MOVT        R2, #0                      @ .LC74 [R_ARM_MOVT_ABS: .rodata.str1.4+0x38ec] 
    /*0000fec0*/ STR         R3, [SP] 
    /*0000fec4*/ B           VGS_DRV_CheckOnlineInfo_xfe0c
    /*0000fec8*/ ANDEQ       R0, R0, R0, LSR #19 
FUNC_END VGS_DRV_CheckOnlineInfo


FUNC_BEGIN VGS_HAL_BootroomDisable
    /*0000fecc*/ MOVW        R3, #0                      @ reg_misc_base_va [R_ARM_MOVW_ABS_NC: +0x0] 
    /*0000fed0*/ MOVT        R3, #0                      @ reg_misc_base_va [R_ARM_MOVT_ABS: +0x0] 
    /*0000fed4*/ LDR         R3, [R3] 
    /*0000fed8*/ CMP         R3, #0 
    /*0000fedc*/ LDRNE       R2, [R3] 
    /*0000fee0*/ MOVNE       R0, #0 
    /*0000fee4*/ MVNEQ       R0, #0 
    /*0000fee8*/ BICNE       R2, R2, #8192               @ 0x2000 
    /*0000feec*/ STRNE       R2, [R3] 
    /*0000fef0*/ BX          LR 
FUNC_END VGS_HAL_BootroomDisable


FUNC_BEGIN VGS_HAL_Open
    /*0000fef4*/ MOVW        R3, #0                      @ reg_misc_base_va [R_ARM_MOVW_ABS_NC: +0x0] 
    /*0000fef8*/ MOVT        R3, #0                      @ reg_misc_base_va [R_ARM_MOVT_ABS: +0x0] 
    /*0000fefc*/ PUSH        {R4, R5, R6, LR} 
    /*0000ff00*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*0000ff04*/ LDR         R3, [R3] 
    /*0000ff08*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*0000ff0c*/ MOV         R2, #1 
    /*0000ff10*/ CMP         R3, #0 
    /*0000ff14*/ STR         R2, [R4] 
    /*0000ff18*/ BEQ         VGS_HAL_Open_xff50
    /*0000ff1c*/ LDR         R1, [R3] 
    /*0000ff20*/ MOVW        R2, #0                      @ vgs_en [R_ARM_MOVW_ABS_NC: .data+0x124] 
    /*0000ff24*/ MOVT        R2, #0                      @ vgs_en [R_ARM_MOVT_ABS: .data+0x124] 
    /*0000ff28*/ BIC         R1, R1, #8192               @ 0x2000 
    /*0000ff2c*/ STR         R1, [R3] 
    /*0000ff30*/ LDR         R3, [R2] 
    /*0000ff34*/ CMP         R3, #0 
    /*0000ff38*/ BEQ         VGS_HAL_Open_xff50
    /*0000ff3c*/ LDR         R5, [R4, #4] 
    /*0000ff40*/ MOV         R0, #0 
    /*0000ff44*/ CMP         R5, #0 
    /*0000ff48*/ BEQ         VGS_HAL_Open_xff58
    /*0000ff4c*/ POP         {R4, R5, R6, PC} 
    VGS_HAL_Open_xff50:
    /*0000ff50*/ MVN         R0, #0 
    /*0000ff54*/ POP         {R4, R5, R6, PC} 
    VGS_HAL_Open_xff58:
    /*0000ff58*/ MOV         R1, #65536                  @ 0x10000 
    /*0000ff5c*/ MOVT        R0, #4388                   @ 0x1124 
    /*0000ff60*/ BL          0x000000000000FF60          @ osal_ioremap [R_ARM_CALL: +0x0] 
    /*0000ff64*/ CMP         R0, #0 
    /*0000ff68*/ STR         R0, [R4, #4] 
    /*0000ff6c*/ BEQ         VGS_HAL_Open_xff50
    /*0000ff70*/ STR         R5, [R4] 
    /*0000ff74*/ MOV         R0, R5 
    /*0000ff78*/ POP         {R4, R5, R6, PC} 
FUNC_END VGS_HAL_Open


FUNC_BEGIN VGS_HAL_Close
    /*0000ff7c*/ MOVW        R3, #0                      @ vgs_en [R_ARM_MOVW_ABS_NC: .data+0x124] 
    /*0000ff80*/ MOVT        R3, #0                      @ vgs_en [R_ARM_MOVT_ABS: .data+0x124] 
    /*0000ff84*/ LDR         R3, [R3] 
    /*0000ff88*/ CMP         R3, #0 
    /*0000ff8c*/ BEQ         VGS_HAL_Close_xffc4
    /*0000ff90*/ PUSH        {R4, R5, R6, LR} 
    /*0000ff94*/ MOVW        R4, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*0000ff98*/ MOVT        R4, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*0000ff9c*/ LDR         R5, [R4] 
    /*0000ffa0*/ CMP         R5, #0 
    /*0000ffa4*/ BEQ         VGS_HAL_Close_xffb0
    /*0000ffa8*/ MOV         R0, #0 
    /*0000ffac*/ POP         {R4, R5, R6, PC} 
    VGS_HAL_Close_xffb0:
    /*0000ffb0*/ LDR         R0, [R4, #4] 
    /*0000ffb4*/ BL          0x000000000000FFB4          @ osal_iounmap [R_ARM_CALL: +0x0] 
    /*0000ffb8*/ STR         R5, [R4, #4] 
    /*0000ffbc*/ MOV         R0, #0 
    /*0000ffc0*/ POP         {R4, R5, R6, PC} 
    VGS_HAL_Close_xffc4:
    /*0000ffc4*/ MOV         R0, #0 
    /*0000ffc8*/ BX          LR 
FUNC_END VGS_HAL_Close


FUNC_BEGIN VGS_HAL_Restore
    /*0000ffcc*/ MOV         R0, #0 
    /*0000ffd0*/ BX          LR 
FUNC_END VGS_HAL_Restore


FUNC_BEGIN VGS_HAL_IsSupportOSDMode
    /*0000ffd4*/ MOV         R0, #1 
    /*0000ffd8*/ BX          LR 
FUNC_END VGS_HAL_IsSupportOSDMode


FUNC_BEGIN VGS_HAL_IsSupportRotation
    /*0000ffdc*/ MOV         R0, #1 
    /*0000ffe0*/ BX          LR 
FUNC_END VGS_HAL_IsSupportRotation


FUNC_BEGIN VGS_HAL_IsSupportGMEMode
    /*0000ffe4*/ MOV         R0, #1 
    /*0000ffe8*/ BX          LR 
FUNC_END VGS_HAL_IsSupportGMEMode


FUNC_BEGIN VGS_HAL_SetNodeID
    /*0000ffec*/ STR         R1, [R0, #244]              @ 0xf4 
    /*0000fff0*/ BX          LR 
FUNC_END VGS_HAL_SetNodeID


FUNC_BEGIN VGS_HAL_SetMask
    /*0000fff4*/ STR         R1, [R0, #240]              @ 0xf0 
    /*0000fff8*/ BX          LR 
FUNC_END VGS_HAL_SetMask


FUNC_BEGIN VGS_HAL_SetNext
    /*0000fffc*/ STR         R2, [R0, #248]              @ 0xf8 
    /*00010000*/ STR         R3, [R0, #252]              @ 0xfc 
    /*00010004*/ BX          LR 
FUNC_END VGS_HAL_SetNext


FUNC_BEGIN VGS_HAL_GetClkSel
    /*00010008*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*0001000c*/ SUB         SP, SP, #20 
    /*00010010*/ MOV         R0, #2 
    /*00010014*/ MOV         R3, #0 
    /*00010018*/ MOV         R2, #45                     @ 0x2d 
    /*0001001c*/ STR         R3, [SP] 
    /*00010020*/ STR         R3, [SP, #8] 
    /*00010024*/ STR         R3, [SP, #12] 
    /*00010028*/ STR         R2, [SP, #4] 
    /*0001002c*/ BL          0x000000000001002C          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00010030*/ MOV         R2, SP 
    /*00010034*/ MOV         R1, #200                    @ 0xc8 
    /*00010038*/ LDR         R3, [R0, #20] 
    /*0001003c*/ ADD         R0, SP, #4 
    /*00010040*/ BLX         R3 
    /*00010044*/ LDR         R0, [SP] 
    /*00010048*/ ADD         SP, SP, #20 
    /*0001004c*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END VGS_HAL_GetClkSel


FUNC_BEGIN VGS_HAL_SetClkSel
    /*00010050*/ PUSH        {LR}                        @ (str lr, [sp, #-4]!) 
    /*00010054*/ SUB         SP, SP, #28 
    /*00010058*/ MOV         R3, #0 
    /*0001005c*/ MOV         R2, #45                     @ 0x2d 
    /*00010060*/ STR         R0, [SP, #4] 
    /*00010064*/ MOV         R0, #2 
    /*00010068*/ STR         R2, [SP, #12] 
    /*0001006c*/ STR         R3, [SP, #16] 
    /*00010070*/ STR         R3, [SP, #20] 
    /*00010074*/ BL          0x0000000000010074          @ CMPI_GetModuleFuncById [R_ARM_CALL: +0x0] 
    /*00010078*/ ADD         R2, SP, #4 
    /*0001007c*/ MOV         R1, #201                    @ 0xc9 
    /*00010080*/ LDR         R3, [R0, #20] 
    /*00010084*/ ADD         R0, SP, #12 
    /*00010088*/ BLX         R3 
    /*0001008c*/ ADD         SP, SP, #28 
    /*00010090*/ POP         {PC}                        @ (ldr pc, [sp], #4) 
FUNC_END VGS_HAL_SetClkSel


FUNC_BEGIN VGS_HAL_Start
    /*00010094*/ MOVW        R1, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*00010098*/ MOVT        R1, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*0001009c*/ ADD         R1, R1, R0, LSL #2 
    /*000100a0*/ PUSH        {R4, R5, R6, R7, R8, LR} 
    /*000100a4*/ MOV         R5, R2 
    /*000100a8*/ LDR         R4, [R1, #4] 
    /*000100ac*/ MOV         R7, R3 
    /*000100b0*/ MOV         R6, R0 
    /*000100b4*/ LDR         R8, [SP, #28] 
    /*000100b8*/ STR         R2, [R4, #248]              @ 0xf8 
    /*000100bc*/ STR         R3, [R4, #252]              @ 0xfc 
    /*000100c0*/ BL          0x00000000000100C0          @ osal_isb [R_ARM_CALL: +0x0] 
    /*000100c4*/ BL          0x00000000000100C4          @ osal_dsb [R_ARM_CALL: +0x0] 
    /*000100c8*/ BL          0x00000000000100C8          @ osal_dmb [R_ARM_CALL: +0x0] 
    /*000100cc*/ LDR         R3, [R4, #248]              @ 0xf8 
    /*000100d0*/ CMP         R3, R5 
    /*000100d4*/ BEQ         VGS_HAL_Start_x10120
    VGS_HAL_Start_x100d8:
    /*000100d8*/ LDR         R2, [R4, #248]              @ 0xf8 
    /*000100dc*/ MOV         R3, R5 
    /*000100e0*/ MOV         R1, R6 
    /*000100e4*/ MOVW        R0, #0                      @ .LC0 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3a94] 
    /*000100e8*/ MOVT        R0, #0                      @ .LC0 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3a94] 
    /*000100ec*/ BL          0x00000000000100EC          @ osal_printk [R_ARM_CALL: +0x0] 
    /*000100f0*/ MOV         R3, R7 
    /*000100f4*/ LDR         R2, [R4, #252]              @ 0xfc 
    /*000100f8*/ MOV         R1, R6 
    /*000100fc*/ MOVW        R0, #0                      @ .LC1 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3ac8] 
    /*00010100*/ MOVT        R0, #0                      @ .LC1 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3ac8] 
    /*00010104*/ BL          0x0000000000010104          @ osal_printk [R_ARM_CALL: +0x0] 
    /*00010108*/ LDR         R3, [R8] 
    /*0001010c*/ ADD         R3, R3, #1 
    /*00010110*/ STR         R3, [R8] 
    VGS_HAL_Start_x10114:
    /*00010114*/ MOV         R3, #1 
    /*00010118*/ STR         R3, [R4, #768]              @ 0x300 
    /*0001011c*/ POP         {R4, R5, R6, R7, R8, PC} 
    VGS_HAL_Start_x10120:
    /*00010120*/ LDR         R3, [R4, #252]              @ 0xfc 
    /*00010124*/ CMP         R3, R7 
    /*00010128*/ BNE         VGS_HAL_Start_x100d8
    /*0001012c*/ B           VGS_HAL_Start_x10114
FUNC_END VGS_HAL_Start


FUNC_BEGIN VGS_HAL_GetIntStatus
    /*00010130*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*00010134*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*00010138*/ ADD         R0, R3, R0, LSL #2 
    /*0001013c*/ LDR         R3, [R0, #4] 
    /*00010140*/ LDR         R3, [R3, #788]              @ 0x314 
    /*00010144*/ STR         R3, [R1] 
    /*00010148*/ BX          LR 
FUNC_END VGS_HAL_GetIntStatus


FUNC_BEGIN VGS_HAL_ClrInt
    /*0001014c*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*00010150*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*00010154*/ ADD         R0, R3, R0, LSL #2 
    /*00010158*/ MVN         R2, #0 
    /*0001015c*/ LDR         R3, [R0, #4] 
    /*00010160*/ STR         R2, [R3, #784]              @ 0x310 
    /*00010164*/ BX          LR 
FUNC_END VGS_HAL_ClrInt


FUNC_BEGIN VGS_HAL_GetNodeID
    /*00010168*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*0001016c*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*00010170*/ ADD         R0, R3, R0, LSL #2 
    /*00010174*/ LDR         R3, [R0, #4] 
    /*00010178*/ LDR         R3, [R3, #244]              @ 0xf4 
    /*0001017c*/ STR         R3, [R1] 
    /*00010180*/ BX          LR 
FUNC_END VGS_HAL_GetNodeID


FUNC_BEGIN VGS_HAL_SetOutstanding
    /*00010184*/ MOVW        R3, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .bss+0xca4] 
    /*00010188*/ MOVT        R3, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .bss+0xca4] 
    /*0001018c*/ ADD         R0, R3, R0, LSL #2 
    /*00010190*/ LDR         R3, [R0, #4] 
    /*00010194*/ STR         R1, [R3, #816]              @ 0x330 
    /*00010198*/ BX          LR 
FUNC_END VGS_HAL_SetOutstanding


FUNC_BEGIN VGS_Drv_SplitandCrop
    /*0001019c*/ PUSH        {R4, R5, R6, R7, R8, R9, SL, FP, LR} 
    /*000101a0*/ MOV         R6, R0 
    /*000101a4*/ LDR         R0, [R0, #8] 
    /*000101a8*/ SUB         SP, SP, #188                @ 0xbc 
    /*000101ac*/ LDR         R3, [R6, #124]              @ 0x7c 
    /*000101b0*/ MOV         R4, R1 
    /*000101b4*/ CMP         R0, #0 
    /*000101b8*/ MOV         R5, R2 
    /*000101bc*/ MOVEQ       R0, #4 
    /*000101c0*/ MOVNE       R0, #256                    @ 0x100 
    /*000101c4*/ CMP         R3, #0 
    /*000101c8*/ STR         R0, [SP, #12] 
    /*000101cc*/ MOV         R3, #0 
    /*000101d0*/ STR         R3, [SP, #68]               @ 0x44 
    /*000101d4*/ STR         R3, [SP, #64]               @ 0x40 
    /*000101d8*/ STR         R3, [SP, #72]               @ 0x48 
    /*000101dc*/ STR         R3, [SP, #76]               @ 0x4c 
    /*000101e0*/ STR         R3, [SP, #80]               @ 0x50 
    /*000101e4*/ STR         R3, [SP, #84]               @ 0x54 
    /*000101e8*/ STR         R3, [SP, #88]               @ 0x58 
    /*000101ec*/ STR         R3, [SP, #112]              @ 0x70 
    /*000101f0*/ STR         R3, [SP, #136]              @ 0x88 
    /*000101f4*/ STR         R3, [SP, #160]              @ 0xa0 
    /*000101f8*/ STR         R3, [SP, #92]               @ 0x5c 
    /*000101fc*/ STR         R3, [SP, #96]               @ 0x60 
    /*00010200*/ STR         R3, [SP, #100]              @ 0x64 
    /*00010204*/ STR         R3, [SP, #104]              @ 0x68 
    /*00010208*/ STR         R3, [SP, #108]              @ 0x6c 
    /*0001020c*/ STR         R3, [SP, #116]              @ 0x74 
    /*00010210*/ STR         R3, [SP, #120]              @ 0x78 
    /*00010214*/ STR         R3, [SP, #124]              @ 0x7c 
    /*00010218*/ STR         R3, [SP, #128]              @ 0x80 
    /*0001021c*/ STR         R3, [SP, #132]              @ 0x84 
    /*00010220*/ STR         R3, [SP, #140]              @ 0x8c 
    /*00010224*/ STR         R3, [SP, #144]              @ 0x90 
    /*00010228*/ STR         R3, [SP, #148]              @ 0x94 
    /*0001022c*/ STR         R3, [SP, #152]              @ 0x98 
    /*00010230*/ STR         R3, [SP, #156]              @ 0x9c 
    /*00010234*/ STR         R3, [SP, #164]              @ 0xa4 
    /*00010238*/ STR         R3, [SP, #168]              @ 0xa8 
    /*0001023c*/ STR         R3, [SP, #172]              @ 0xac 
    /*00010240*/ STR         R3, [SP, #176]              @ 0xb0 
    /*00010244*/ STR         R3, [SP, #180]              @ 0xb4 
    /*00010248*/ MOVNE       R3, #256                    @ 0x100 
    /*0001024c*/ STRNE       R3, [SP, #28] 
    /*00010250*/ BNE         VGS_Drv_SplitandCrop_x10268
    /*00010254*/ LDR         R3, [R6, #128]              @ 0x80 
    /*00010258*/ CMP         R3, #1 
    /*0001025c*/ MOVNE       R3, #4 
    /*00010260*/ STRNE       R3, [SP, #28] 
    /*00010264*/ BEQ         VGS_Drv_SplitandCrop_x10ae8
    VGS_Drv_SplitandCrop_x10268:
    /*00010268*/ LDR         R3, [R6, #24] 
    /*0001026c*/ CMP         R3, #1 
    /*00010270*/ LDREQ       R3, [R6, #32] 
    /*00010274*/ LDRNE       R3, [R6, #4] 
    /*00010278*/ MOV         R0, R3 
    /*0001027c*/ ADD         R2, R0, #3824               @ 0xef0 
    /*00010280*/ STR         R3, [SP, #44]               @ 0x2c 
    /*00010284*/ ADD         R2, R2, #15 
    /*00010288*/ MOVW        R3, #34953                  @ 0x8889 
    /*0001028c*/ MOVT        R3, #34952                  @ 0x8888 
    /*00010290*/ UMULL       R2, R3, R2, R3 
    /*00010294*/ LSR         R3, R3, #11 
    /*00010298*/ STR         R3, [SP, #20] 
    /*0001029c*/ MOV         R1, R3 
    /*000102a0*/ BL          0x00000000000102A0          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*000102a4*/ LDR         R3, [R6, #80]               @ 0x50 
    /*000102a8*/ LDR         R2, [SP, #20] 
    /*000102ac*/ CMP         R3, #1 
    /*000102b0*/ ADD         R0, R0, #1 
    /*000102b4*/ BIC         R3, R0, #1 
    /*000102b8*/ STR         R3, [SP, #32] 
    /*000102bc*/ LDREQ       R3, [R6, #96]               @ 0x60 
    /*000102c0*/ STR         R2, [R4, #148]              @ 0x94 
    /*000102c4*/ STREQ       R3, [SP, #44]               @ 0x2c 
    /*000102c8*/ LDR         R3, [R6] 
    /*000102cc*/ CMP         R3, #0 
    /*000102d0*/ STR         R3, [SP, #48]               @ 0x30 
    /*000102d4*/ BNE         VGS_Drv_SplitandCrop_x10638
    /*000102d8*/ CMP         R2, #0 
    /*000102dc*/ BEQ         VGS_Drv_SplitandCrop_x107b0
    /*000102e0*/ LDR         R3, [SP, #12] 
    /*000102e4*/ SUB         R5, R5, #1 
    /*000102e8*/ STR         R4, [SP, #60]               @ 0x3c 
    /*000102ec*/ ADD         R3, R5, R3 
    /*000102f0*/ STR         R3, [SP, #36]               @ 0x24 
    /*000102f4*/ LDR         R3, [SP, #20] 
    /*000102f8*/ SUB         R3, R3, #1 
    /*000102fc*/ STR         R3, [SP, #24] 
    /*00010300*/ LDR         R3, [SP, #32] 
    /*00010304*/ LSR         R2, R3, #12 
    /*00010308*/ LSL         R3, R3, #20 
    /*0001030c*/ STR         R3, [SP, #52]               @ 0x34 
    /*00010310*/ ADD         R3, SP, #112                @ 0x70 
    /*00010314*/ STR         R3, [SP] 
    /*00010318*/ LDR         R3, [SP, #48]               @ 0x30 
    /*0001031c*/ STR         R2, [SP, #56]               @ 0x38 
    /*00010320*/ STR         R3, [SP, #8] 
    /*00010324*/ MOV         R5, R3 
    /*00010328*/ STR         R3, [SP, #4] 
    /*0001032c*/ MOV         SL, R3 
    /*00010330*/ MOV         R7, R3 
    /*00010334*/ STR         R3, [SP, #40]               @ 0x28 
    /*00010338*/ B           VGS_Drv_SplitandCrop_x104f8
    VGS_Drv_SplitandCrop_x1033c:
    /*0001033c*/ LDR         R3, [R6, #80]               @ 0x50 
    /*00010340*/ CMP         R3, #0 
    /*00010344*/ BNE         VGS_Drv_SplitandCrop_x107b8
    /*00010348*/ LDR         R8, [SP, #28] 
    /*0001034c*/ CLZ         R9, R7 
    /*00010350*/ STR         R3, [R4, #80]               @ 0x50 
    /*00010354*/ LDR         R0, [SP, #32] 
    /*00010358*/ LSR         R9, R9, #5 
    /*0001035c*/ MOV         R1, R8 
    /*00010360*/ BL          0x0000000000010360          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*00010364*/ LDR         R3, [R6, #24] 
    /*00010368*/ ADD         R2, SP, #88                 @ 0x58 
    /*0001036c*/ CMP         R3, #0 
    /*00010370*/ MOVEQ       R3, #0 
    /*00010374*/ ANDNE       R3, R9, #1 
    /*00010378*/ CMP         R3, #0 
    /*0001037c*/ LDREQ       R3, [SP] 
    /*00010380*/ MUL         R8, R8, R0 
    /*00010384*/ STR         R8, [R2, R7, LSL #2] 
    /*00010388*/ ADD         R2, SP, #64                 @ 0x40 
    /*0001038c*/ STREQ       R8, [R3] 
    /*00010390*/ MOVEQ       R0, R8 
    /*00010394*/ STR         R8, [R2, R7, LSL #2] 
    /*00010398*/ BNE         VGS_Drv_SplitandCrop_x10b14
    VGS_Drv_SplitandCrop_x1039c:
    /*0001039c*/ LDR         R3, [SP, #36]               @ 0x24 
    /*000103a0*/ LDR         FP, [SP, #12] 
    /*000103a4*/ ADD         R3, R3, SL 
    /*000103a8*/ SUB         R3, R3, R5 
    /*000103ac*/ ADD         R0, R3, R0 
    /*000103b0*/ MOV         R1, FP 
    /*000103b4*/ BL          0x00000000000103B4          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*000103b8*/ MUL         R3, FP, R0 
    VGS_Drv_SplitandCrop_x103bc:
    /*000103bc*/ CMP         R9, #0 
    /*000103c0*/ MOV         R2, #1 
    /*000103c4*/ STR         R3, [R4, #4] 
    /*000103c8*/ STR         R5, [R4, #12] 
    /*000103cc*/ STR         R2, [R4, #24] 
    /*000103d0*/ BNE         VGS_Drv_SplitandCrop_x10b38
    /*000103d4*/ SUB         FP, SL, #8 
    /*000103d8*/ MOV         R0, #8 
    /*000103dc*/ SUB         FP, FP, R5 
    /*000103e0*/ MOV         R2, #1 
    /*000103e4*/ SUB         R1, R3, FP 
    /*000103e8*/ STR         R2, [R4, #104]              @ 0x68 
    /*000103ec*/ STR         FP, [R4, #28] 
    /*000103f0*/ STR         R1, [R4, #32] 
    VGS_Drv_SplitandCrop_x103f4:
    /*000103f4*/ LDR         R2, [SP] 
    /*000103f8*/ STR         R0, [R4, #108]              @ 0x6c 
    /*000103fc*/ STR         R8, [R4, #112]              @ 0x70 
    /*00010400*/ LDR         R9, [R2] 
    /*00010404*/ ADD         R2, SP, #88                 @ 0x58 
    /*00010408*/ LDR         IP, [R2, R7, LSL #2] 
    /*0001040c*/ ADD         R2, SP, #64                 @ 0x40 
    /*00010410*/ LDR         R2, [R2, R7, LSL #2] 
    VGS_Drv_SplitandCrop_x10414:
    /*00010414*/ STR         R3, [R4, #16] 
    /*00010418*/ CMP         R7, #0 
    /*0001041c*/ STR         R3, [R4, #20] 
    /*00010420*/ LDR         R3, [SP, #4] 
    /*00010424*/ STR         R8, [R4, #116]              @ 0x74 
    /*00010428*/ STR         R3, [R4, #136]              @ 0x88 
    /*0001042c*/ BEQ         VGS_Drv_SplitandCrop_x10b2c
    /*00010430*/ LDR         R3, [R6, #80]               @ 0x50 
    /*00010434*/ LDR         FP, [R6, #24] 
    /*00010438*/ CMP         R3, #0 
    /*0001043c*/ SUBNE       R5, SL, #8 
    /*00010440*/ CMP         FP, #0 
    /*00010444*/ LDRNE       FP, [R6, #28] 
    /*00010448*/ SUB         FP, R5, FP 
    /*0001044c*/ MOV         R3, FP 
    VGS_Drv_SplitandCrop_x10450:
    /*00010450*/ ADD         LR, SP, #136                @ 0x88 
    /*00010454*/ LDR         R5, [SP, #12] 
    /*00010458*/ STR         R3, [SP, #16] 
    /*0001045c*/ ADD         R9, R9, #1 
    /*00010460*/ STR         R3, [LR, R7, LSL #2] 
    /*00010464*/ ADD         R0, SP, #160                @ 0xa0 
    /*00010468*/ LDR         R3, [SP, #4] 
    /*0001046c*/ BIC         R9, R9, #1 
    /*00010470*/ ADD         SL, SL, R9 
    /*00010474*/ ADD         FP, FP, R1 
    /*00010478*/ ADD         R3, R3, IP 
    /*0001047c*/ STR         R3, [SP, #4] 
    /*00010480*/ LDR         R3, [SP, #8] 
    /*00010484*/ MOV         R1, R5 
    /*00010488*/ STR         FP, [R0, R7, LSL #2] 
    /*0001048c*/ SUB         R0, SL, #8 
    /*00010490*/ ADD         R3, R3, R2 
    /*00010494*/ STR         R3, [SP, #8] 
    /*00010498*/ BL          0x0000000000010498          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*0001049c*/ LDR         R2, [R6, #120]              @ 0x78 
    /*000104a0*/ LDR         R3, [SP, #16] 
    /*000104a4*/ STR         R2, [R4, #120]              @ 0x78 
    /*000104a8*/ LDR         R2, [R6, #124]              @ 0x7c 
    /*000104ac*/ STR         R2, [R4, #124]              @ 0x7c 
    /*000104b0*/ LDR         R2, [R6, #128]              @ 0x80 
    /*000104b4*/ STR         R2, [R4, #128]              @ 0x80 
    /*000104b8*/ LDR         R2, [R6, #132]              @ 0x84 
    /*000104bc*/ STR         R8, [R4, #140]              @ 0x8c 
    /*000104c0*/ STR         R8, [R4, #144]              @ 0x90 
    /*000104c4*/ STR         R2, [R4, #132]              @ 0x84 
    /*000104c8*/ LDR         R2, [R6, #36]               @ 0x24 
    /*000104cc*/ CMP         R2, #1 
    /*000104d0*/ MUL         R5, R5, R0 
    /*000104d4*/ BEQ         VGS_Drv_SplitandCrop_x105b4
    VGS_Drv_SplitandCrop_x104d8:
    /*000104d8*/ LDR         R3, [SP, #20] 
    /*000104dc*/ ADD         R7, R7, #1 
    /*000104e0*/ ADD         R4, R4, #156                @ 0x9c 
    /*000104e4*/ CMP         R7, R3 
    /*000104e8*/ LDR         R3, [SP] 
    /*000104ec*/ ADD         R3, R3, #4 
    /*000104f0*/ STR         R3, [SP] 
    /*000104f4*/ BEQ         VGS_Drv_SplitandCrop_x10928
    VGS_Drv_SplitandCrop_x104f8:
    /*000104f8*/ LDR         R2, [SP, #24] 
    /*000104fc*/ LDR         R3, [R6, #8] 
    /*00010500*/ CMP         R7, R2 
    /*00010504*/ STR         R3, [R4, #8] 
    /*00010508*/ BNE         VGS_Drv_SplitandCrop_x1033c
    /*0001050c*/ LDR         R3, [R6, #24] 
    /*00010510*/ CMP         R3, #0 
    /*00010514*/ BEQ         VGS_Drv_SplitandCrop_x10a1c
    /*00010518*/ LDR         R3, [R6, #8] 
    /*0001051c*/ CMP         R3, #0 
    /*00010520*/ BEQ         VGS_Drv_SplitandCrop_x10aac
    /*00010524*/ LDR         R3, [R6, #32] 
    /*00010528*/ LDR         R9, [R6, #28] 
    /*0001052c*/ LDR         R1, [SP, #12] 
    /*00010530*/ ADD         R9, R9, R3 
    /*00010534*/ LDR         R8, [R6, #4] 
    /*00010538*/ MOV         R0, R9 
    /*0001053c*/ BL          0x000000000001053C          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*00010540*/ LDR         R1, [SP, #12] 
    /*00010544*/ MOV         FP, R0 
    /*00010548*/ MOV         R0, R8 
    /*0001054c*/ BL          0x000000000001054C          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*00010550*/ CMP         FP, R0 
    /*00010554*/ BEQ         VGS_Drv_SplitandCrop_x10ab8
    /*00010558*/ LDR         R8, [SP, #12] 
    /*0001055c*/ SUB         R0, R9, #1 
    /*00010560*/ ADD         R0, R0, R8 
    /*00010564*/ MOV         R1, R8 
    /*00010568*/ SUB         R0, R0, R5 
    /*0001056c*/ BL          0x000000000001056C          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*00010570*/ MUL         R3, R8, R0 
    /*00010574*/ STR         R3, [SP, #40]               @ 0x28 
    /*00010578*/ LDR         R3, [R6, #80]               @ 0x50 
    /*0001057c*/ CMP         R3, #0 
    /*00010580*/ BEQ         VGS_Drv_SplitandCrop_x10a34
    VGS_Drv_SplitandCrop_x10584:
    /*00010584*/ LDR         R1, [SP, #40]               @ 0x28 
    /*00010588*/ MOV         R3, #1 
    /*0001058c*/ LDR         IP, [SP, #44]               @ 0x2c 
    /*00010590*/ LDR         LR, [SP, #8] 
    /*00010594*/ STR         R3, [R4, #80]               @ 0x50 
    /*00010598*/ LSL         R0, R1, #20 
    /*0001059c*/ MOV         R3, #0 
    /*000105a0*/ LDR         R2, [R6, #100]              @ 0x64 
    /*000105a4*/ LSR         R1, R1, #12 
    /*000105a8*/ SUB         R8, IP, LR 
    /*000105ac*/ BL          0x00000000000105AC          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*000105b0*/ B           VGS_Drv_SplitandCrop_x107e4
    VGS_Drv_SplitandCrop_x105b4:
    /*000105b4*/ LDR         R2, [R6, #44]               @ 0x2c 
    /*000105b8*/ CMP         FP, R2 
    /*000105bc*/ BGT         VGS_Drv_SplitandCrop_x105cc
    /*000105c0*/ LDR         R1, [R6, #48]               @ 0x30 
    /*000105c4*/ CMP         FP, R1 
    /*000105c8*/ BLE         VGS_Drv_SplitandCrop_x10a84
    VGS_Drv_SplitandCrop_x105cc:
    /*000105cc*/ CMP         R3, R2 
    /*000105d0*/ BLT         VGS_Drv_SplitandCrop_x105e0
    /*000105d4*/ LDR         R2, [R6, #48]               @ 0x30 
    /*000105d8*/ CMP         R3, R2 
    /*000105dc*/ BGE         VGS_Drv_SplitandCrop_x10ac4
    VGS_Drv_SplitandCrop_x105e0:
    /*000105e0*/ MOV         R2, #1 
    /*000105e4*/ STR         R2, [R4, #36]               @ 0x24 
    /*000105e8*/ LDR         R2, [R6, #40]               @ 0x28 
    /*000105ec*/ CMP         R2, #0 
    /*000105f0*/ BEQ         VGS_Drv_SplitandCrop_x10600
    /*000105f4*/ LDR         R2, [R6, #36]               @ 0x24 
    /*000105f8*/ ADDS        R2, R2, #0 
    /*000105fc*/ MOVNE       R2, #1 
    VGS_Drv_SplitandCrop_x10600:
    /*00010600*/ STR         R2, [R4, #40]               @ 0x28 
    /*00010604*/ LDR         R2, [R6, #44]               @ 0x2c 
    /*00010608*/ SUB         R2, R2, R3 
    /*0001060c*/ STR         R2, [R4, #44]               @ 0x2c 
    /*00010610*/ LDR         R2, [R6, #48]               @ 0x30 
    /*00010614*/ SUB         R2, R2, R3 
    /*00010618*/ STR         R2, [R4, #48]               @ 0x30 
    /*0001061c*/ LDR         R2, [R6, #52]               @ 0x34 
    /*00010620*/ SUB         R2, R2, R3 
    /*00010624*/ STR         R2, [R4, #52]               @ 0x34 
    /*00010628*/ LDR         R2, [R6, #56]               @ 0x38 
    /*0001062c*/ SUB         R3, R2, R3 
    /*00010630*/ STR         R3, [R4, #56]               @ 0x38 
    /*00010634*/ B           VGS_Drv_SplitandCrop_x104d8
    VGS_Drv_SplitandCrop_x10638:
    /*00010638*/ MOV         R8, #1 
    /*0001063c*/ MOV         R3, #2 
    /*00010640*/ STR         R8, [R4] 
    /*00010644*/ MOV         R7, #3 
    /*00010648*/ STR         R3, [R4, #148]              @ 0x94 
    /*0001064c*/ MOV         R5, #0 
    /*00010650*/ STR         R7, [R4, #60]               @ 0x3c 
    /*00010654*/ MOV         R3, R5 
    /*00010658*/ LDR         R2, [R6, #4] 
    /*0001065c*/ STR         R5, [R4, #12] 
    /*00010660*/ LSR         R2, R2, #2 
    /*00010664*/ ADD         R2, R2, #4 
    /*00010668*/ LSL         R1, R2, R8 
    /*0001066c*/ STR         R1, [R4, #4] 
    /*00010670*/ LDR         R1, [R6, #24] 
    /*00010674*/ STR         R1, [R4, #24] 
    /*00010678*/ LDR         R0, [R6, #28] 
    /*0001067c*/ RSB         R2, R0, R2, LSL #2 
    /*00010680*/ STR         R2, [R4, #32] 
    /*00010684*/ STR         R0, [R4, #28] 
    /*00010688*/ LDR         R1, [R6, #80]               @ 0x50 
    /*0001068c*/ STR         R2, [R4, #92]               @ 0x5c 
    /*00010690*/ STR         R1, [R4, #80]               @ 0x50 
    /*00010694*/ LDR         R1, [R6, #4] 
    /*00010698*/ LDR         R2, [R6, #100]              @ 0x64 
    /*0001069c*/ BIC         R1, R1, #3 
    /*000106a0*/ SUB         R1, R1, R0 
    /*000106a4*/ LSL         R0, R1, #20 
    /*000106a8*/ LSR         R1, R1, #12 
    /*000106ac*/ BL          0x00000000000106AC          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*000106b0*/ LDR         R2, [R4, #4] 
    /*000106b4*/ MOV         R3, R5 
    /*000106b8*/ ADD         R0, R0, R8 
    /*000106bc*/ BIC         R1, R0, #1 
    /*000106c0*/ STR         R1, [R4, #96]               @ 0x60 
    /*000106c4*/ LDR         R0, [R6, #100]              @ 0x64 
    /*000106c8*/ STR         R1, [R4, #116]              @ 0x74 
    /*000106cc*/ STR         R5, [R4, #84]               @ 0x54 
    /*000106d0*/ STR         R0, [R4, #100]              @ 0x64 
    /*000106d4*/ STR         R5, [R4, #88]               @ 0x58 
    /*000106d8*/ STR         R5, [R4, #136]              @ 0x88 
    /*000106dc*/ STR         R2, [R4, #76]               @ 0x4c 
    /*000106e0*/ LDR         R2, [R6, #64]               @ 0x40 
    /*000106e4*/ STR         R8, [R4, #156]              @ 0x9c 
    /*000106e8*/ STR         R7, [R4, #216]              @ 0xd8 
    /*000106ec*/ STR         R2, [R4, #64]               @ 0x40 
    /*000106f0*/ LDR         R0, [R6, #4] 
    /*000106f4*/ ADD         R2, R0, #8 
    /*000106f8*/ LSR         R0, R0, #2 
    /*000106fc*/ SUB         R2, R2, R0, LSL R8 
    /*00010700*/ STR         R2, [R4, #160]              @ 0xa0 
    /*00010704*/ LDR         R0, [R6, #4] 
    /*00010708*/ LSL         R2, R2, R8 
    /*0001070c*/ LSR         R0, R0, #2 
    /*00010710*/ SUB         R0, R0, #-2147483644        @ 0x80000004 
    /*00010714*/ LSL         R0, R0, R8 
    /*00010718*/ STR         R0, [R4, #168]              @ 0xa8 
    /*0001071c*/ LDR         R0, [R6, #24] 
    /*00010720*/ STR         R2, [R4, #188]              @ 0xbc 
    /*00010724*/ STR         R5, [R4, #184]              @ 0xb8 
    /*00010728*/ STR         R0, [R4, #180]              @ 0xb4 
    /*0001072c*/ LDR         R0, [R6, #80]               @ 0x50 
    /*00010730*/ STR         R2, [R4, #248]              @ 0xf8 
    /*00010734*/ STR         R0, [R4, #236]              @ 0xec 
    /*00010738*/ LDR         R2, [R6, #116]              @ 0x74 
    /*0001073c*/ SUB         R2, R2, R1 
    /*00010740*/ STR         R2, [R4, #252]              @ 0xfc 
    /*00010744*/ LDR         R2, [R6, #100]              @ 0x64 
    /*00010748*/ STR         R2, [R4, #256]              @ 0x100 
    /*0001074c*/ LDR         R0, [R6, #32] 
    /*00010750*/ LDR         R2, [R6, #116]              @ 0x74 
    /*00010754*/ LSL         R8, R0, #20 
    /*00010758*/ LSR         R0, R0, #12 
    /*0001075c*/ UMULL       R8, R9, R8, R1 
    /*00010760*/ MLA         R9, R1, R0, R9 
    /*00010764*/ MOV         R0, R8 
    /*00010768*/ MOV         R1, R9 
    /*0001076c*/ BL          0x000000000001076C          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*00010770*/ LDR         R3, [R4, #160]              @ 0xa0 
    /*00010774*/ LDR         R1, [R4, #116]              @ 0x74 
    /*00010778*/ LDR         IP, [R4, #168]              @ 0xa8 
    /*0001077c*/ STR         R3, [R4, #232]              @ 0xe8 
    /*00010780*/ UBFX        R0, R0, #0, #20 
    /*00010784*/ ADD         R0, R0, #16777216           @ 0x1000000 
    /*00010788*/ STR         R0, [R4, #240]              @ 0xf0 
    /*0001078c*/ LSR         R0, R0, #1 
    /*00010790*/ STR         R0, [R4, #244]              @ 0xf4 
    /*00010794*/ LDR         R2, [R6, #116]              @ 0x74 
    /*00010798*/ STR         R1, [R4, #292]              @ 0x124 
    /*0001079c*/ SUB         R2, R2, R1 
    /*000107a0*/ STR         R2, [R4, #272]              @ 0x110 
    /*000107a4*/ LDR         R3, [R6, #64]               @ 0x40 
    /*000107a8*/ ADD         R3, R3, IP 
    /*000107ac*/ STR         R3, [R4, #220]              @ 0xdc 
    VGS_Drv_SplitandCrop_x107b0:
    /*000107b0*/ ADD         SP, SP, #188                @ 0xbc 
    /*000107b4*/ POP         {R4, R5, R6, R7, R8, R9, SL, FP, PC} 
    VGS_Drv_SplitandCrop_x107b8:
    /*000107b8*/ MOV         R3, #1 
    /*000107bc*/ LDR         R0, [SP, #52]               @ 0x34 
    /*000107c0*/ STR         R3, [R4, #80]               @ 0x50 
    /*000107c4*/ MOV         R3, #0 
    /*000107c8*/ LDR         R2, [R6, #100]              @ 0x64 
    /*000107cc*/ LDR         R1, [SP, #56]               @ 0x38 
    /*000107d0*/ BL          0x00000000000107D0          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*000107d4*/ LDR         R8, [SP, #28] 
    /*000107d8*/ MOV         R1, R8 
    /*000107dc*/ BL          0x00000000000107DC          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*000107e0*/ MUL         R8, R8, R0 
    VGS_Drv_SplitandCrop_x107e4:
    /*000107e4*/ ADD         R1, SP, #88                 @ 0x58 
    /*000107e8*/ LDR         R0, [R6, #100]              @ 0x64 
    /*000107ec*/ MOV         R3, #0 
    /*000107f0*/ STR         R8, [R1, R7, LSL #2] 
    /*000107f4*/ ADD         R1, SP, #64                 @ 0x40 
    /*000107f8*/ MOV         R2, #1048576                @ 0x100000 
    /*000107fc*/ STR         R8, [R1, R7, LSL #2] 
    /*00010800*/ UMULL       R0, R1, R8, R0 
    /*00010804*/ BL          0x0000000000010804          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*00010808*/ LDR         R9, [R6, #24] 
    /*0001080c*/ LDR         R3, [SP, #24] 
    /*00010810*/ ADDS        R9, R9, #0 
    /*00010814*/ MOVNE       R9, #1 
    /*00010818*/ CMP         R7, #0 
    /*0001081c*/ MOVNE       R9, #0 
    /*00010820*/ CMP         R9, #0 
    /*00010824*/ LDRNE       R9, [R6, #28] 
    /*00010828*/ CMP         R7, R3 
    /*0001082c*/ LDR         R3, [SP] 
    /*00010830*/ ADD         R9, R9, R0 
    /*00010834*/ STR         R9, [R3] 
    /*00010838*/ BEQ         VGS_Drv_SplitandCrop_x10ae0
    /*0001083c*/ LDR         R3, [SP, #36]               @ 0x24 
    /*00010840*/ LDR         FP, [SP, #12] 
    /*00010844*/ ADD         R0, R3, SL 
    /*00010848*/ SUB         R0, R0, R5 
    /*0001084c*/ MOV         R1, FP 
    /*00010850*/ ADD         R0, R0, R9 
    /*00010854*/ BL          0x0000000000010854          @ __aeabi_uidiv [R_ARM_CALL: +0x0] 
    /*00010858*/ MUL         R0, FP, R0 
    VGS_Drv_SplitandCrop_x1085c:
    /*0001085c*/ CMP         R7, #0 
    /*00010860*/ MOV         R3, #1 
    /*00010864*/ STR         R0, [R4, #4] 
    /*00010868*/ STR         R5, [R4, #12] 
    /*0001086c*/ STR         R3, [R4, #24] 
    /*00010870*/ BEQ         VGS_Drv_SplitandCrop_x10b60
    /*00010874*/ SUB         R2, SL, #8 
    /*00010878*/ LDR         LR, [SP, #8] 
    /*0001087c*/ SUB         R2, R2, R5 
    /*00010880*/ STR         R2, [R4, #28] 
    /*00010884*/ SUB         R0, R0, R2 
    /*00010888*/ STR         R0, [R4, #32] 
    /*0001088c*/ LDR         R2, [R6, #100]              @ 0x64 
    /*00010890*/ MOV         R3, #0 
    /*00010894*/ STR         R2, [R4, #100]              @ 0x64 
    /*00010898*/ LDR         R1, [R6, #4] 
    /*0001089c*/ LDR         R2, [R6, #116]              @ 0x74 
    /*000108a0*/ LSL         R0, R1, #20 
    /*000108a4*/ LSR         IP, R1, #12 
    /*000108a8*/ UMULL       R0, R1, R0, LR 
    /*000108ac*/ MLA         R1, LR, IP, R1 
    /*000108b0*/ BL          0x00000000000108B0          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*000108b4*/ LDR         R3, [R4, #24] 
    /*000108b8*/ CMP         R3, #0 
    /*000108bc*/ LDREQ       R1, [R4, #4] 
    /*000108c0*/ UBFX        R0, R0, #0, #20 
    /*000108c4*/ ADD         R0, R0, #8388608            @ 0x800000 
    /*000108c8*/ STR         R0, [R4, #84]               @ 0x54 
    /*000108cc*/ LSR         R0, R0, #1 
    /*000108d0*/ STR         R0, [R4, #88]               @ 0x58 
    /*000108d4*/ BEQ         VGS_Drv_SplitandCrop_x108dc
    VGS_Drv_SplitandCrop_x108d8:
    /*000108d8*/ LDR         R1, [R4, #32] 
    VGS_Drv_SplitandCrop_x108dc:
    /*000108dc*/ MOV         FP, #0 
    /*000108e0*/ STR         R1, [R4, #92]               @ 0x5c 
    /*000108e4*/ MOV         R3, FP 
    /*000108e8*/ LDR         R2, [R6, #100]              @ 0x64 
    /*000108ec*/ LSL         R0, R1, #20 
    /*000108f0*/ LSR         R1, R1, #12 
    /*000108f4*/ BL          0x00000000000108F4          @ osal_div64_u64 [R_ARM_CALL: +0x0] 
    /*000108f8*/ MOV         R3, #1 
    /*000108fc*/ STR         FP, [R4, #108]              @ 0x6c 
    /*00010900*/ MOV         R2, R8 
    /*00010904*/ STR         R3, [R4, #104]              @ 0x68 
    /*00010908*/ MOV         IP, R8 
    /*0001090c*/ STR         R8, [R4, #112]              @ 0x70 
    /*00010910*/ LDR         R3, [R4, #4] 
    /*00010914*/ LDR         R1, [R4, #32] 
    /*00010918*/ ADD         R0, R0, #1 
    /*0001091c*/ BIC         R0, R0, #1 
    /*00010920*/ STR         R0, [R4, #96]               @ 0x60 
    /*00010924*/ B           VGS_Drv_SplitandCrop_x10414
    VGS_Drv_SplitandCrop_x10928:
    /*00010928*/ ADD         R0, SP, #136                @ 0x88 
    /*0001092c*/ ADD         R1, SP, #160                @ 0xa0 
    /*00010930*/ LDR         IP, [R6, #72]               @ 0x48 
    /*00010934*/ MOV         R3, #1 
    /*00010938*/ MOV         R4, #0 
    /*0001093c*/ LDR         R8, [SP, #48]               @ 0x30 
    /*00010940*/ LDR         LR, [SP, #60]               @ 0x3c 
    /*00010944*/ B           VGS_Drv_SplitandCrop_x10960
    VGS_Drv_SplitandCrop_x10948:
    /*00010948*/ CMP         R3, R7 
    /*0001094c*/ ADD         LR, LR, #156                @ 0x9c 
    /*00010950*/ ADD         R3, R3, #1 
    /*00010954*/ ADD         R0, R0, #4 
    /*00010958*/ ADD         R1, R1, #4 
    /*0001095c*/ BCS         VGS_Drv_SplitandCrop_x107b0
    VGS_Drv_SplitandCrop_x10960:
    /*00010960*/ LDR         R2, [R6, #68]               @ 0x44 
    /*00010964*/ CMP         R2, #1 
    /*00010968*/ BNE         VGS_Drv_SplitandCrop_x10948
    /*0001096c*/ LDR         R2, [R1] 
    /*00010970*/ LDR         R5, [R6, #60]               @ 0x3c 
    /*00010974*/ CMP         R2, IP 
    /*00010978*/ STR         R5, [LR, #60]               @ 0x3c 
    /*0001097c*/ BLE         VGS_Drv_SplitandCrop_x10a14
    /*00010980*/ LDR         R5, [R0] 
    /*00010984*/ CMP         R5, IP 
    /*00010988*/ BGT         VGS_Drv_SplitandCrop_x10a14
    /*0001098c*/ LDR         R9, [R6, #68]               @ 0x44 
    /*00010990*/ SUB         SL, IP, R5 
    /*00010994*/ STR         SL, [LR, #72]               @ 0x48 
    /*00010998*/ LDR         SL, [R0, #4] 
    /*0001099c*/ STR         R9, [LR, #68]               @ 0x44 
    /*000109a0*/ LDR         R9, [R6, #72]               @ 0x48 
    /*000109a4*/ LDR         FP, [R6, #76]               @ 0x4c 
    /*000109a8*/ ADD         R9, R9, FP 
    /*000109ac*/ CMP         R9, R2 
    /*000109b0*/ RSBLS       R2, IP, R9 
    /*000109b4*/ RSBHI       R2, IP, R2 
    /*000109b8*/ STR         R2, [LR, #76]               @ 0x4c 
    /*000109bc*/ LDR         R9, [R6, #72]               @ 0x48 
    /*000109c0*/ LDR         R2, [R6, #76]               @ 0x4c 
    /*000109c4*/ ADD         R2, R9, R2 
    /*000109c8*/ CMP         R2, SL 
    /*000109cc*/ MOVLS       IP, #0 
    /*000109d0*/ BLS         VGS_Drv_SplitandCrop_x109e0
    /*000109d4*/ CMP         R9, SL 
    /*000109d8*/ MOVCS       IP, R9 
    /*000109dc*/ MOVCC       IP, SL 
    VGS_Drv_SplitandCrop_x109e0:
    /*000109e0*/ CMP         R8, #0 
    /*000109e4*/ LDREQ       R5, [R6, #64]               @ 0x40 
    /*000109e8*/ BEQ         VGS_Drv_SplitandCrop_x10a08
    /*000109ec*/ LDR         R2, [R6, #60]               @ 0x3c 
    /*000109f0*/ SUB         R5, R5, R9 
    /*000109f4*/ LDR         R9, [R6, #64]               @ 0x40 
    /*000109f8*/ CMP         R2, #0 
    /*000109fc*/ MOVNE       R2, #2 
    /*00010a00*/ MOVEQ       R2, #4 
    /*00010a04*/ MLA         R5, R5, R2, R9 
    VGS_Drv_SplitandCrop_x10a08:
    /*00010a08*/ STR         R5, [LR, #64]               @ 0x40 
    /*00010a0c*/ ADD         R8, R8, #1 
    /*00010a10*/ B           VGS_Drv_SplitandCrop_x10948
    VGS_Drv_SplitandCrop_x10a14:
    /*00010a14*/ STR         R4, [LR, #68]               @ 0x44 
    /*00010a18*/ B           VGS_Drv_SplitandCrop_x10948
    VGS_Drv_SplitandCrop_x10a1c:
    /*00010a1c*/ LDR         R8, [R6, #4] 
    /*00010a20*/ SUB         R3, R8, R5 
    /*00010a24*/ STR         R3, [SP, #40]               @ 0x28 
    VGS_Drv_SplitandCrop_x10a28:
    /*00010a28*/ LDR         R3, [R6, #80]               @ 0x50 
    /*00010a2c*/ CMP         R3, #0 
    /*00010a30*/ BNE         VGS_Drv_SplitandCrop_x10584
    VGS_Drv_SplitandCrop_x10a34:
    /*00010a34*/ CLZ         R9, R7 
    /*00010a38*/ STR         R3, [R4, #80]               @ 0x50 
    /*00010a3c*/ LDR         R3, [R6, #24] 
    /*00010a40*/ LSR         R9, R9, #5 
    /*00010a44*/ LDR         R2, [SP, #44]               @ 0x2c 
    /*00010a48*/ CMP         R3, #0 
    /*00010a4c*/ MOVEQ       R3, #0 
    /*00010a50*/ ANDNE       R3, R9, #1 
    /*00010a54*/ LDR         R1, [SP, #8] 
    /*00010a58*/ CMP         R3, #0 
    /*00010a5c*/ SUB         R8, R2, R1 
    /*00010a60*/ ADD         R2, SP, #88                 @ 0x58 
    /*00010a64*/ LDREQ       R3, [SP] 
    /*00010a68*/ STR         R8, [R2, R7, LSL #2] 
    /*00010a6c*/ ADD         R2, SP, #64                 @ 0x40 
    /*00010a70*/ STREQ       R8, [R3] 
    /*00010a74*/ STR         R8, [R2, R7, LSL #2] 
    /*00010a78*/ BNE         VGS_Drv_SplitandCrop_x10b90
    VGS_Drv_SplitandCrop_x10a7c:
    /*00010a7c*/ LDR         R3, [SP, #40]               @ 0x28 
    /*00010a80*/ B           VGS_Drv_SplitandCrop_x103bc
    VGS_Drv_SplitandCrop_x10a84:
    /*00010a84*/ LDR         R1, [R6, #52]               @ 0x34 
    /*00010a88*/ CMP         FP, R1 
    /*00010a8c*/ BGT         VGS_Drv_SplitandCrop_x105cc
    /*00010a90*/ LDR         R1, [R6, #56]               @ 0x38 
    /*00010a94*/ CMP         FP, R1 
    /*00010a98*/ BGT         VGS_Drv_SplitandCrop_x105cc
    VGS_Drv_SplitandCrop_x10a9c:
    /*00010a9c*/ MOV         R3, #0 
    /*00010aa0*/ STR         R3, [R4, #36]               @ 0x24 
    /*00010aa4*/ STR         R3, [R4, #40]               @ 0x28 
    /*00010aa8*/ B           VGS_Drv_SplitandCrop_x104d8
    VGS_Drv_SplitandCrop_x10aac:
    /*00010aac*/ LDR         R8, [R6, #28] 
    /*00010ab0*/ LDR         R3, [R6, #32] 
    /*00010ab4*/ ADD         R8, R8, R3 
    VGS_Drv_SplitandCrop_x10ab8:
    /*00010ab8*/ SUB         R3, R8, R5 
    /*00010abc*/ STR         R3, [SP, #40]               @ 0x28 
    /*00010ac0*/ B           VGS_Drv_SplitandCrop_x10a28
    VGS_Drv_SplitandCrop_x10ac4:
    /*00010ac4*/ LDR         R2, [R6, #52]               @ 0x34 
    /*00010ac8*/ CMP         R3, R2 
    /*00010acc*/ BLT         VGS_Drv_SplitandCrop_x105e0
    /*00010ad0*/ LDR         R2, [R6, #56]               @ 0x38 
    /*00010ad4*/ CMP         R3, R2 
    /*00010ad8*/ BLT         VGS_Drv_SplitandCrop_x105e0
    /*00010adc*/ B           VGS_Drv_SplitandCrop_x10a9c
    VGS_Drv_SplitandCrop_x10ae0:
    /*00010ae0*/ LDR         R0, [SP, #40]               @ 0x28 
    /*00010ae4*/ B           VGS_Drv_SplitandCrop_x1085c
    VGS_Drv_SplitandCrop_x10ae8:
    /*00010ae8*/ LDR         R3, [R6, #120]              @ 0x78 
    /*00010aec*/ CMP         R3, #1 
    /*00010af0*/ BEQ         VGS_Drv_SplitandCrop_x10b08
    /*00010af4*/ CMP         R3, #0 
    /*00010af8*/ MOVNE       R3, #4 
    /*00010afc*/ MOVEQ       R3, #32 
    /*00010b00*/ STR         R3, [SP, #28] 
    /*00010b04*/ B           VGS_Drv_SplitandCrop_x10268
    VGS_Drv_SplitandCrop_x10b08:
    /*00010b08*/ MOV         R3, #128                    @ 0x80 
    /*00010b0c*/ STR         R3, [SP, #28] 
    /*00010b10*/ B           VGS_Drv_SplitandCrop_x10268
    VGS_Drv_SplitandCrop_x10b14:
    /*00010b14*/ MOV         R9, R3 
    /*00010b18*/ LDR         R3, [SP] 
    /*00010b1c*/ LDR         R0, [R6, #28] 
    /*00010b20*/ ADD         R0, R8, R0 
    /*00010b24*/ STR         R0, [R3] 
    /*00010b28*/ B           VGS_Drv_SplitandCrop_x1039c
    VGS_Drv_SplitandCrop_x10b2c:
    /*00010b2c*/ MOV         FP, R7 
    /*00010b30*/ MOV         R3, R7 
    /*00010b34*/ B           VGS_Drv_SplitandCrop_x10450
    VGS_Drv_SplitandCrop_x10b38:
    /*00010b38*/ LDR         R1, [R6, #24] 
    /*00010b3c*/ MOV         R2, #1 
    /*00010b40*/ MOV         R0, #0 
    /*00010b44*/ CMP         R1, #0 
    /*00010b48*/ LDRNE       R1, [R6, #28] 
    /*00010b4c*/ STR         R2, [R4, #104]              @ 0x68 
    /*00010b50*/ STR         R1, [R4, #28] 
    /*00010b54*/ SUB         R1, R3, R1 
    /*00010b58*/ STR         R1, [R4, #32] 
    /*00010b5c*/ B           VGS_Drv_SplitandCrop_x103f4
    VGS_Drv_SplitandCrop_x10b60:
    /*00010b60*/ LDR         R3, [R6, #24] 
    /*00010b64*/ CMP         R3, #0 
    /*00010b68*/ LDRNE       R3, [R6, #28] 
    /*00010b6c*/ SUB         R0, R0, R3 
    /*00010b70*/ STR         R0, [R4, #32] 
    /*00010b74*/ STR         R3, [R4, #28] 
    /*00010b78*/ MOV         R3, #0 
    /*00010b7c*/ LDR         R2, [R6, #100]              @ 0x64 
    /*00010b80*/ STR         R3, [R4, #84]               @ 0x54 
    /*00010b84*/ STR         R3, [R4, #88]               @ 0x58 
    /*00010b88*/ STR         R2, [R4, #100]              @ 0x64 
    /*00010b8c*/ B           VGS_Drv_SplitandCrop_x108d8
    VGS_Drv_SplitandCrop_x10b90:
    /*00010b90*/ LDR         R2, [R6, #28] 
    /*00010b94*/ MOV         R9, R3 
    /*00010b98*/ ADD         R3, R2, R8 
    /*00010b9c*/ LDR         R2, [SP] 
    /*00010ba0*/ STR         R3, [R2] 
    /*00010ba4*/ B           VGS_Drv_SplitandCrop_x10a7c
FUNC_END VGS_Drv_SplitandCrop


FUNC_BEGIN hi35xx_vgs_remove
    /*00010ba8*/ PUSH        {R4, LR} 
    /*00010bac*/ BL          0x0000000000010BAC          @ VGS_ModExit [R_ARM_CALL: .text+0x7b40] 
    /*00010bb0*/ MOVW        R3, #0                      @ pVgsReg [R_ARM_MOVW_ABS_NC: .bss+0xca8] 
    /*00010bb4*/ MOVT        R3, #0                      @ pVgsReg [R_ARM_MOVT_ABS: .bss+0xca8] 
    /*00010bb8*/ MOV         R2, #0 
    /*00010bbc*/ MOV         R0, R2 
    /*00010bc0*/ STR         R2, [R3] 
    /*00010bc4*/ POP         {R4, PC} 
FUNC_END hi35xx_vgs_remove


FUNC_BEGIN hi35xx_vgs_probe
    /*00010bc8*/ PUSH        {R4, R5, R6, LR} 
    /*00010bcc*/ MOV         R4, #0 
    /*00010bd0*/ SUB         SP, SP, #16 
    /*00010bd4*/ MOV         R3, R4 
    /*00010bd8*/ MOV         R5, R0 
    /*00010bdc*/ MOV         R1, #10 
    /*00010be0*/ ADD         R0, SP, #6 
    /*00010be4*/ MOVW        R2, #0                      @ .LC0 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3afc] 
    /*00010be8*/ MOVT        R2, #0                      @ .LC0 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3afc] 
    /*00010bec*/ STR         R4, [SP, #10] 
    /*00010bf0*/ STR         R4, [SP, #6] 
    /*00010bf4*/ ADD         R6, R5, #16 
    /*00010bf8*/ STRH        R4, [SP, #14] 
    /*00010bfc*/ BL          0x0000000000010BFC          @ snprintf [R_ARM_CALL: +0x0] 
    /*00010c00*/ MOV         R1, #512                    @ 0x200 
    /*00010c04*/ MOV         R0, R5 
    /*00010c08*/ ADD         R2, SP, #6 
    /*00010c0c*/ BL          0x0000000000010C0C          @ osal_platform_get_resource_byname [R_ARM_CALL: +0x0] 
    /*00010c10*/ MOV         R1, R0 
    /*00010c14*/ MOV         R0, R6 
    /*00010c18*/ BL          0x0000000000010C18          @ devm_ioremap_resource [R_ARM_CALL: +0x0] 
    /*00010c1c*/ MOVW        R3, #0                      @ pVgsReg [R_ARM_MOVW_ABS_NC: .bss+0xca8] 
    /*00010c20*/ MOVT        R3, #0                      @ pVgsReg [R_ARM_MOVT_ABS: .bss+0xca8] 
    /*00010c24*/ CMN         R0, #4096                   @ 0x1000 
    /*00010c28*/ STR         R0, [R3] 
    /*00010c2c*/ BHI         hi35xx_vgs_probe_x10c58
    /*00010c30*/ ADD         R1, SP, #6 
    /*00010c34*/ MOV         R0, R5 
    /*00010c38*/ BL          0x0000000000010C38          @ osal_platform_get_irq_byname [R_ARM_CALL: +0x0] 
    /*00010c3c*/ MOVW        R3, #0                      @ vgs_irq [R_ARM_MOVW_ABS_NC: .data+0x120] 
    /*00010c40*/ MOVT        R3, #0                      @ vgs_irq [R_ARM_MOVT_ABS: .data+0x120] 
    /*00010c44*/ CMP         R0, #0 
    /*00010c48*/ STR         R0, [R3] 
    /*00010c4c*/ BLE         hi35xx_vgs_probe_x10c60
    hi35xx_vgs_probe_x10c50:
    /*00010c50*/ BL          0x0000000000010C50          @ VGS_ModInit [R_ARM_CALL: .text+0x79f8] 
    /*00010c54*/ MOV         R0, #0 
    hi35xx_vgs_probe_x10c58:
    /*00010c58*/ ADD         SP, SP, #16 
    /*00010c5c*/ POP         {R4, R5, R6, PC} 
    hi35xx_vgs_probe_x10c60:
    /*00010c60*/ MOV         R2, R4 
    /*00010c64*/ MOV         R0, R6 
    /*00010c68*/ MOVW        R1, #0                      @ .LC1 [R_ARM_MOVW_ABS_NC: .rodata.str1.4+0x3b04] 
    /*00010c6c*/ MOVT        R1, #0                      @ .LC1 [R_ARM_MOVT_ABS: .rodata.str1.4+0x3b04] 
    /*00010c70*/ BL          0x0000000000010C70          @ dev_err [R_ARM_CALL: +0x0] 
    /*00010c74*/ B           hi35xx_vgs_probe_x10c50
FUNC_END hi35xx_vgs_probe


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .init.text
@ Size: 0xc
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN hi35xx_vgs_driver_init
    /*00000000*/ MOVW        R0, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x128] 
    /*00000004*/ MOVT        R0, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x128] 
    hi35xx_vgs_driver_init_x8:
    /*00000008*/ B           hi35xx_vgs_driver_init_x8   @ osal_platform_driver_register [R_ARM_JUMP24: +0x0] 
FUNC_END hi35xx_vgs_driver_init


FUNC_BEGIN init_module
    /*00000000*/ MOVW        R0, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x128] 
    /*00000004*/ MOVT        R0, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x128] 
    init_module_x8:
    /*00000008*/ B           init_module_x8              @ osal_platform_driver_register [R_ARM_JUMP24: +0x0] 
FUNC_END init_module


@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
@ .exit.text
@ Size: 0xc
@ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

FUNC_BEGIN hi35xx_vgs_driver_exit
    /*00000000*/ MOVW        R0, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x128] 
    /*00000004*/ MOVT        R0, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x128] 
    hi35xx_vgs_driver_exit_x8:
    /*00000008*/ B           hi35xx_vgs_driver_exit_x8   @ osal_platform_driver_unregister [R_ARM_JUMP24: +0x0] 
FUNC_END hi35xx_vgs_driver_exit


FUNC_BEGIN cleanup_module
    /*00000000*/ MOVW        R0, #0                      @ .LANCHOR0 [R_ARM_MOVW_ABS_NC: .data+0x128] 
    /*00000004*/ MOVT        R0, #0                      @ .LANCHOR0 [R_ARM_MOVT_ABS: .data+0x128] 
    cleanup_module_x8:
    /*00000008*/ B           cleanup_module_x8           @ osal_platform_driver_unregister [R_ARM_JUMP24: +0x0] 
FUNC_END cleanup_module


